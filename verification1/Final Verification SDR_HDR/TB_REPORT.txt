Coverage Report by instance with details

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_i3c_engine
=== Design Unit: work.i3c_engine
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        68        22        46    32.35%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i3c_engine

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File new_i3c_engine.v
------------------------------------IF Branch------------------------------------
    174                                        2     Count coming in to IF
    174             1                          1     assign hdr_en = (i_regf_mode == 3'd6)? 1:0 ;
    174             2                          1     assign hdr_en = (i_regf_mode == 3'd6)? 1:0 ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    181                                     4475     Count coming in to IF
    181             1                          1         if (!i_rst_n) 
    211             1                       4474         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    221                                     4474     Count coming in to CASE
    222             1                         10                 IDLE:
    263             1                        162                 START:
    364             1                    ***0***                 ARBITRATION: 
    430             1                    ***0***                 SDR_MODE:
    471             1                    ***0***                 I2C_MODE:
    514             1                    ***0***                 DAA: 
    538             1                    ***0***                 HOT_JOIN: 
    610             1                          2                 STOP:
    647             1                    ***0***                 IBI: begin
    689             1                    ***0***                  CTRL_REQ: begin
    718             1                       2230                 ENTHDR: 
    769             1                       2070                  HDR_ENGINE:
                                         ***0***     All False Count
Branch totals: 5 hits of 13 branches = 38.46%

------------------------------------IF Branch------------------------------------
    242                                       10     Count coming in to IF
    242             1                          2                         if (i_controller_en)
    251             1                    ***0***                         else if (i_rx_arbitration_lost)
    256             1                          8                         else
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    266                                      162     Count coming in to IF
    266             1                          1                         if (i_tx_mode_done)
    358             1                        161                         else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    271                                        1     Count coming in to IF
    271             1                    ***0***                                 if (i_ccc_en_dis_hj) //for enable/disable events to prevent Bus-Initialization or DAA interruptions.
    289             1                    ***0***                                 else if (!dynamic_address_assigned && i_i3c_i2c_sel)
    306             1                          1                                 else
Branch totals: 1 hit of 3 branches = 33.33%

------------------------------------CASE Branch------------------------------------
    308                                        1     Count coming in to CASE
    309             1                          1                                         1'b1: 
    350             1                    ***0***                                         1'b0: 
                                         ***0***     All False Count
Branch totals: 1 hit of 3 branches = 33.33%

------------------------------------IF Branch------------------------------------
    312                                        1     Count coming in to IF
    312             1                          1                                                if(hdr_en) //input from outside (configration) >> ENABLES THE ENTHDR BLOCK
    330             1                    ***0***                                                else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    366                                  ***0***     Count coming in to IF
    366             1                    ***0***                         if (i_rx_mode_done && i_scl_neg_edge) 
    372             1                    ***0***                         else if (arbitrated_adress_ready && i_scl_neg_edge)
    418             1                    ***0***                         else if (write_adress_to_regf && o_regf_rd_en )
    422             1                    ***0***                         else if (write_adress_to_regf)
                                         ***0***     All False Count
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    374                                  ***0***     Count coming in to IF
    374             1                    ***0***                              if (i_regf_data_rd == {7'h02,1'b0})  /// hotjoin address
    393             1                    ***0***                                 else if (i_regf_data_rd[0]==1'b1)  /// IBI requesr
    397             1                    ***0***                                 else if (i_regf_data_rd[0]==1'b0) /// Controller role request
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    433                                  ***0***     Count coming in to IF
    433             1                    ***0***                         if (i_sdr_done)
    448             1                    ***0***                         else if (i_rx_arbitration_lost)
    459             1                    ***0***                         else if (i_sdr_ibi_payload_done)
    465             1                    ***0***                         else
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    487                                  ***0***     Count coming in to IF
    487             1                    ***0***                         if (i_i2c_done)
    501             1                    ***0***                         else if (i_rx_arbitration_lost)
    508             1                    ***0***                         else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    516                                  ***0***     Count coming in to IF
    516             1                    ***0***                         if (i_rx_arbitration_lost)
    525             1                    ***0***                        else if (i_daa_error)
    530             1                    ***0***                        else if (i_daa_done) 
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    540                                  ***0***     Count coming in to IF
    540             1                    ***0***                         if (i_hj_done)
    603             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    543                                  ***0***     Count coming in to IF
    543             1                    ***0***                                 if (i_hj_daa_req)
    561             1                    ***0***                                 else if (i_hj_cr_pass)
    582             1                    ***0***                                 else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    613                                        2     Count coming in to IF
    613             1                    ***0***                         if((i_tx_mode_done && send_stop)) /// editted
    635             1                          1                         else if (i_tx_mode_done && !send_stop)
                                               1     All False Count
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    662                                  ***0***     Count coming in to IF
    662             1                    ***0***                         if (i_ibi_payload_en)      
    682             1                    ***0***                         else if (i_ibi_done)    
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    690                                  ***0***     Count coming in to IF
    690             1                    ***0***                   if(i_crh_send_stop)
    703             1                    ***0***                   else if(i_crh_done)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    734                                     2230     Count coming in to IF
    734             1                          1                         if (i_enthdr_done)
    761             1                       2229                         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    774                                     2070     Count coming in to IF
    774             1                          1                      if(i_hdrengine_done)
    799             1                       2069                      else 
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      14         2        12    14.28%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i3c_engine --

  File new_i3c_engine.v
----------------Focused Condition View-------------------
Line       174 Item    1  (i_regf_mode == 6)
Condition totals: 1 of 1 input term covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (i_regf_mode == 6)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (i_regf_mode == 6)_0  -                             
  Row   2:          1  (i_regf_mode == 6)_1  -                             

----------------Focused Condition View-------------------
Line       289 Item    1  (~dynamic_address_assigned && i_i3c_i2c_sel)
Condition totals: 0 of 2 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  dynamic_address_assigned         N  '_0' not hit             Hit '_0'
             i_i3c_i2c_sel         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  dynamic_address_assigned_0  i_i3c_i2c_sel                 
  Row   2:          1  dynamic_address_assigned_1  -                             
  Row   3:    ***0***  i_i3c_i2c_sel_0             ~dynamic_address_assigned     
  Row   4:    ***0***  i_i3c_i2c_sel_1             ~dynamic_address_assigned     

----------------Focused Condition View-------------------
Line       366 Item    1  (i_rx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_rx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_rx_mode_done                

----------------Focused Condition View-------------------
Line       372 Item    1  (arbitrated_adress_ready && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  arbitrated_adress_ready         N  No hits                  Hit '_0' and '_1'
           i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  arbitrated_adress_ready_0  -                             
  Row   2:    ***0***  arbitrated_adress_ready_1  i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0           arbitrated_adress_ready       
  Row   4:    ***0***  i_scl_neg_edge_1           arbitrated_adress_ready       

----------------Focused Condition View-------------------
Line       374 Item    1  (i_regf_data_rd == {2,0})
Condition totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_regf_data_rd == {2,0})         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:    ***0***  (i_regf_data_rd == {2,0})_0  -                             
  Row   2:    ***0***  (i_regf_data_rd == {2,0})_1  -                             

----------------Focused Condition View-------------------
Line       418 Item    1  (write_adress_to_regf && o_regf_rd_en)
Condition totals: 0 of 2 input terms covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  write_adress_to_regf         N  No hits                  Hit '_0' and '_1'
          o_regf_rd_en         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  write_adress_to_regf_0  -                             
  Row   2:    ***0***  write_adress_to_regf_1  o_regf_rd_en                  
  Row   3:    ***0***  o_regf_rd_en_0          write_adress_to_regf          
  Row   4:    ***0***  o_regf_rd_en_1          write_adress_to_regf          

----------------Focused Condition View-------------------
Line       613 Item    1  (i_tx_mode_done && send_stop)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         N  '_1' not hit             Hit '_1'
       send_stop         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_tx_mode_done_0      -                             
  Row   2:    ***0***  i_tx_mode_done_1      send_stop                     
  Row   3:          1  send_stop_0           i_tx_mode_done                
  Row   4:    ***0***  send_stop_1           i_tx_mode_done                

----------------Focused Condition View-------------------
Line       635 Item    1  (i_tx_mode_done && ~send_stop)
Condition totals: 1 of 2 input terms covered = 50.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         Y
       send_stop         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_tx_mode_done_0      -                             
  Row   2:          1  i_tx_mode_done_1      ~send_stop                    
  Row   3:          1  send_stop_0           i_tx_mode_done                
  Row   4:    ***0***  send_stop_1           i_tx_mode_done                


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                      12         5         7    41.66%
    FSM Transitions                 35         5        30    14.28%

================================FSM Details================================

FSM Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i3c_engine --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 222                IDLE                   0
 364         ARBITRATION                  12
 263               START                   1
 471            I2C_MODE                   6
 430            SDR_MODE                   2
 718              ENTHDR                  13
 514                 DAA                   4
 538            HOT_JOIN                  14
 689            CTRL_REQ                  10
 647                 IBI                   3
 610                STOP                  15
 769          HDR_ENGINE                   5
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                  10          
                   START                 163          
                  ENTHDR                2230          
                    STOP                   1          
              HDR_ENGINE                2070          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 249                   1                   2          IDLE -> START                 
 327                   8                   1          START -> ENTHDR               
 753                  18                   1          ENTHDR -> HDR_ENGINE          
 642                  31                   1          STOP -> IDLE                  
 797                  33                   1          HDR_ENGINE -> STOP            
    Uncovered States :
    ------------------
                   State
                   -----
             ARBITRATION
                I2C_MODE
                SDR_MODE
                     DAA
                HOT_JOIN
                CTRL_REQ
                     IBI
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 254                   0          IDLE -> ARBITRATION 
 401                   2          ARBITRATION -> CTRL_REQ
 395                   3          ARBITRATION -> IBI  
 391                   4          ARBITRATION -> HOT_JOIN
 208                   5          ARBITRATION -> IDLE 
 353                   6          START -> I2C_MODE   
 346                   7          START -> SDR_MODE   
 304                   9          START -> DAA        
 287                  10          START -> HOT_JOIN   
 208                  11          START -> IDLE       
 506                  12          I2C_MODE -> ARBITRATION
 497                  13          I2C_MODE -> STOP    
 208                  14          I2C_MODE -> IDLE    
 461                  15          SDR_MODE -> STOP    
 457                  16          SDR_MODE -> ARBITRATION
 208                  17          SDR_MODE -> IDLE    
 208                  19          ENTHDR -> IDLE      
 534                  20          DAA -> STOP         
 527                  21          DAA -> IDLE         
 523                  22          DAA -> ARBITRATION  
 591                  23          HOT_JOIN -> STOP    
 566                  24          HOT_JOIN -> CTRL_REQ
 559                  25          HOT_JOIN -> DAA     
 208                  26          HOT_JOIN -> IDLE    
 705                  27          CTRL_REQ -> IDLE    
 692                  28          CTRL_REQ -> STOP    
 685                  29          IBI -> IDLE         
 679                  30          IBI -> SDR_MODE     
 631                  32          STOP -> CTRL_REQ    
 208                  34          HDR_ENGINE -> IDLE  


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                  12         5         7    41.66%
        FSM Transitions             35         5        30    14.28%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     387       133       254    34.36%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i3c_engine --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File new_i3c_engine.v
    34                                               module i3c_engine (
    35                                                   input   wire          i_clk                     ,
    36                                                   input   wire          i_rst_n                   ,
    37                                                   input   wire          i_controller_en           , //from device configuration of Controller/Target role
    38                                                   input   wire          i_i3c_i2c_sel             ,
    39                                                   input   wire          i_sdr_done                ,
    40                                                   input   wire          i_i2c_done                ,
    41                                                   input   wire          i_daa_done                ,
    42                                                   input   wire          i_daa_error               ,
    43                                                   input   wire          i_hj_done                 , //Hot-Join Block Done-Flag 
    44                                                   input   wire          i_hj_acc_rej              , //Hot-Join Request Accepted/Rejected flag [1 >> ACCEPTED , 0 >> REJECTED]
    45                                                   input   wire          i_hj_daa_req              , //DAA Procedure Request (Suggestion: Trigger DAA directly for time optimization)
    46                                                   input   wire          i_hj_cr_pass              , //CRR Procedure Request (Suggestion: Trigger CRH directly for time optimization)
    47                                                   input   wire          i_tx_mode_done            , //Tx Current Mode Done-Flag 
    48                                                   input   wire          i_rx_mode_done            , 
    49                                                   input   wire          i_target_nack             , //Error-Flag (Target doesn't ACK)
    50                                                   input   wire          i_rx_arbitration_lost     ,
    51                                                   input   wire          i_scl_pos_edge            ,
    52                                                   input   wire          i_scl_neg_edge            ,
    53                                                   input   wire  [7:0]   i_regf_data_rd            ,
    54                                                   input   wire          i_timer_cas               , // input from timer block >> t clock after start is done 
    55                                                   input   wire          i_ccc_en_dis_hj           , //from an external input, for enable/disable events to prevent Bus-Initialization or DAA interruptions.
    56                                                   input   wire          i_ibi_payload_en          ,
    57                                                   input   wire          i_sdr_ibi_payload_done    ,
    58                                                   input   wire          i_ibi_done                ,
    59                                                   input   wire          i_crh_done              ,    
    60                                                   //input   wire          i_crh_ncr_win           ,
    61                                                   //input   wire          i_crh_ncr_take_control  ,
    62                                                   input   wire          i_crh_send_stop           ,
    63                                               
    64                                               
    65                                                   ///////////////////////hdr//////////////////////////////////
    66                                                   //input   wire          i_hdr_en                 , 
    67                                                   input   wire [2:0]    i_regf_mode               ,
    68                                               
    69                                               
    70                                                   input   wire          i_enthdr_done               ,
    71                                                   input   wire          i_hdrengine_done          ,
    72                                                   ////////////////////////////////////////////////////////////
    73                                                   output  reg           o_sdr_en                  ,
    74                                                   output  reg           o_i2c_en                  , 
    75                                                   output  reg           o_daa_en                  ,
    76                                                   output  reg           o_ibi_en                  ,
    77                                                   output  reg           o_hj_en                   , //Hot-Join Enable-Signal
    78                                                   output  reg           o_hj_ccc                  , //Sending Hot-Join CCCs Request (if Host wanna ENHJ or DISHJ without prior HJ Request)
    79                                                   output  reg           o_hj_daa_en               , //enables DAA directly after HJ with an internal Repeated_Start
    80                                                   output  reg           o_hj_crh_en               , //enables CRH directly after HJ with an internal Repeated_Start
    81                                                   output  reg           o_crh_en                  ,
    82                                                   output  reg           o_crh_stop_is_sent        ,
    83                                                   output  reg           o_tx_en                   , //Tx Enable-Flag
    84                                                   output  reg   [2:0]   o_tx_mode                 , //Tx Current Mode Selector 
    85                                                   output  reg           o_rx_data_valid           ,
    86                                                   output  reg           o_pp_od                   , //Push-Pull/Open-Drain Selector (Always = 0 in I2C)
    87                                                   output  reg           o_scl_idle                , // helds the scl to idle
    88                                                   output  reg           o_bit_cnt_en              ,
    89                                                   output  reg           o_regf_rd_en              ,
    90                                                   output  reg   [2:0]   o_regf_rd_en_mux_sel      ,
    91                                                   output  reg   [2:0]   o_regf_rd_address_mux_sel ,
    92                                                   output  reg   [2:0]   o_regf_wr_en_mux_sel      ,
    93                                                   output  reg   [2:0]   o_scl_pp_od_mux_sel       ,
    94                                                   output  reg   [2:0]   o_tx_en_mux_sel           ,
    95                                                   output  reg   [2:0]   o_tx_mode_mux_sel         ,
    96                                                   output  reg   [2:0]   o_rx_en_mux_sel           ,
    97                                                   output  reg   [2:0]   o_rx_mode_mux_sel         ,
    98                                                   output  reg   [2:0]   o_bit_cnt_en_mux_sel      ,
    99                                                   output  reg   [2:0]   o_bit_rx_cnt_en_mux_sel   ,
    100                                                  output  reg   [2:0]   o_fcnt_en_mux_sel         ,
    101                                                  output  reg   [2:0]   o_scl_idle_mux_sel        ,
    102                                                  output  reg   [2:0]   o_fcnt_no_frms_sel        ,
    103                                                  output  reg   [2:0]   o_ser_rx_tx_mux_sel       ,
    104                                                  output  reg           o_i3c_idle_flag           ,
    105                                                  output  reg   [2:0]   o_scl_stall_flag_sel      ,
    106                                                  output  reg   [2:0]   o_scl_stall_cycles_sel    ,
    107                                                  output  reg           o_controller_done         ,
    108                                                  output  reg   [2:0]   o_bits_cnt_regf_rx_tx_sel ,
    109                                                  
    110                                                  ///////////////////////hdr//////////////////////////////////
    111                                                  output  reg          o_enthdr_en                   ,
    112                                                  output  reg          o_mode_sda_sel                ,
    113                                                  output  reg          o_hdrengine_en                ,
    114                                              
    115                                                  ///////////////////hdr_sdr_mux_sel////////////////////////
    116                                                  output reg           o_regf_wr_en_sdr_hdr_sel, 
    117                                                  output reg           o_regf_rd_en_sdr_hdr_sel, 
    118                                              
    119                                                  output reg           o_regf_data_sdr_hdr_sel,
    120                                                  output reg           o_regf_rd_address_sdr_hdr_sel,                             
    121                                                  output reg           o_scl_pp_od_sdr_hdr_sel       
    122                                              
    123                                                 /*
    124                                                  output  reg          o_mode_bit_cnt_en_mux_sel     ,
    125                                                  output  reg          o_mode_regf_rd_en_mux_sel     ,
    126                                                  output  reg          o_mode_regf_rd_address_mux_sel,
    127                                                  output  reg          o_mode_regf_wr_en_mux_sel     ,
    128                                                  output  reg          o_mode_regf_wr_data_mux_sel   ,*/          
    129                                                 
    130                                              );
    131                                              
    132                                              
    133                                              //-------------------------------- states encoding in gray --------------------------------------------
    134                                              localparam IDLE              = 4'b0000 ; 
    135                                              localparam START             = 4'b0001 ;
    136                                              localparam SDR_MODE          = 4'b0010 ;
    137                                              localparam IBI               = 4'b0011 ;
    138                                              localparam I2C_MODE          = 4'b0110 ;
    139                                              localparam STOP              = 4'b1111 ;
    140                                              localparam ARBITRATION       = 4'b1100 ;
    141                                              localparam HOT_JOIN          = 4'b1110 ;
    142                                              localparam CTRL_REQ          = 4'b1010 ;
    143                                              localparam DAA               = 4'b0100 ;
    144                                              localparam ENTHDR            = 4'b1101 ;
    145                                              localparam HDR_ENGINE        = 4'b0101 ;
    146                                              
    147                                              //--------------------------------- Mux Selection Parameters -----------------------------------------
    148                                              localparam SDR_SEL        = 3'b000 ;
    149                                              localparam I2C_SEL        = 3'b001 ;
    150                                              localparam I3C_ENGINE_SEL = 3'b010 ;
    151                                              localparam DAA_SEL        = 3'b011 ;
    152                                              localparam HJ_SEL         = 3'b100 ;
    153                                              localparam IBI_SEL        = 3'b101 ;
    154                                              localparam CRH_SEL        = 3'b110 ;
    155                                              localparam ENTHDR_SEL     = 3'b111 ;
    156                                              
    157                                              
    158                                              //--------------------------------- Mode (HDR OR SDR) -----------------------------------------
    159                                              localparam SDR_MODE_SEL     = 1'b0 ;
    160                                              localparam HDR_MODE_SEL     = 1'b1 ;
    161                                              
    162                                              
    163                                              
    164                                              //--------------------------------- internal wires declaration ------------------------------------------
    165                                              reg [3:0] state ;
    166                                              reg write_adress_to_regf    ;
    167                                              reg arbitrated_adress_ready ;
    168                                              reg dynamic_address_assigned ; 
    169                                              reg send_stop ;
    170                                              
    171                                              wire   hdr_en    ;
    172                                              
    173                                              
    174             1                          3     assign hdr_en = (i_regf_mode == 3'd6)? 1:0 ;
    175                                              //reg HDR_send_stop;
    176                                              //--------------------------------- controller main fsm -------------------------------------------------
    177                                              
    178             1                       4475     always @(posedge i_clk or negedge i_rst_n) 
    179                                                begin: controller_main_fsm
    180                                                  
    181                                                  if (!i_rst_n) 
    182                                                      begin
    183             1                          1                 o_sdr_en          <= 1'b0   ;  
    184             1                          1                 o_i2c_en          <= 1'b0   ;
    185             1                          1                 o_daa_en          <= 1'b0   ; 
    186             1                          1                 o_hj_en           <= 1'b0   ;
    187             1                          1                 o_crh_en          <= 1'b0   ;
    188             1                          1                 o_hj_ccc          <= 1'b0   ;
    189             1                          1                 o_ibi_en          <= 1'b0   ;
    190             1                          1                 o_crh_en          <= 1'b0   ;
    191             1                          1                 o_tx_en           <= 1'b0   ; 
    192             1                          1                 o_tx_mode         <= 3'b000 ; 
    193             1                          1                 o_pp_od           <= 1'b0   ;   
    194             1                          1                 o_controller_done <= 1'b0   ; 
    195             1                          1                 o_rx_data_valid   <= 1'b0   ;
    196             1                          1                 o_bit_cnt_en      <= 1'b0   ;
    197             1                          1                 o_regf_rd_en      <= 1'b0   ;
    198             1                          1                 o_i3c_idle_flag   <= 1'b0   ; 
    199             1                          1                 o_crh_stop_is_sent <= 1'b0  ;
    200                                              
    201                                                          /////////////       internal wires      ///////////////////
    202                                              
    203             1                          1                 arbitrated_adress_ready <=  1'b0 ;
    204             1                          1                 write_adress_to_regf    <=  1'b0 ;
    205             1                          1                 dynamic_address_assigned <= 1'b1 ; //for TESTINGGGGG
    206                                              
    207                                              
    208             1                          1                 state             <= IDLE   ;          
    209                                                      end
    210                                              
    211                                                  else
    212                                                      begin 
    213             1                       4474                  o_hdrengine_en                  <= 1'b0 ;
    214             1                       4474                  o_enthdr_en                     <= 1'b0 ;
    215             1                       4474                  o_mode_sda_sel                  <= SDR_MODE_SEL;
    216             1                       4474                  o_regf_wr_en_sdr_hdr_sel        <= SDR_MODE_SEL;
    217             1                       4474                  o_regf_rd_en_sdr_hdr_sel        <= SDR_MODE_SEL;
    218             1                       4474                  o_regf_data_sdr_hdr_sel         <= SDR_MODE_SEL;
    219             1                       4474                  o_regf_rd_address_sdr_hdr_sel   <= SDR_MODE_SEL;
    220             1                       4474                  o_scl_pp_od_sdr_hdr_sel         <= SDR_MODE_SEL;
    221                                                          case(state)
    222                                                          IDLE:
    223                                                              begin
    224             1                         10                         o_sdr_en             <= 1'b0           ;
    225             1                         10                         o_i3c_idle_flag      <= 1'b0           ;  
    226             1                         10                         o_i2c_en             <= 1'b0           ; 
    227             1                         10                         o_hj_en              <= 1'b0           ;
    228             1                         10                         o_hj_ccc             <= 1'b0           ;
    229             1                         10                         o_crh_en             <= 1'b0           ;
    230             1                         10                         o_tx_en              <= 1'b0           ; 
    231             1                         10                         o_tx_mode            <= 3'b000         ;
    232             1                         10                         o_pp_od              <= 1'b0           ; 
    233             1                         10                         o_controller_done    <= 1'b0           ; 
    234             1                         10                         o_scl_idle           <= 1'b1           ; 
    235             1                         10                         o_rx_data_valid      <= 1'b0           ;
    236             1                         10                         o_scl_idle_mux_sel   <= I3C_ENGINE_SEL ;
    237             1                         10                         o_bit_cnt_en_mux_sel <= I3C_ENGINE_SEL ; 
    238             1                         10                         o_fcnt_no_frms_sel   <= I3C_ENGINE_SEL ; 
    239             1                         10                         o_ser_rx_tx_mux_sel  <= I3C_ENGINE_SEL ;
    240             1                         10                         o_crh_stop_is_sent <= 1'b0 ;
    241                                              
    242                                                                  if (i_controller_en)
    243                                                                      begin
    244             1                          2                                 o_tx_en             <= 1'b1           ; 
    245             1                          2                                 o_tx_mode           <= 3'b000         ; //START MODE
    246             1                          2                                 o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    247             1                          2                                 o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    248             1                          2                                 o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    249             1                          2                                 state               <= START          ;
    250                                                                      end
    251                                                                  else if (i_rx_arbitration_lost)
    252                                                                      begin
    253             1                    ***0***                                 o_regf_wr_en_mux_sel <= I3C_ENGINE_SEL ;
    254             1                    ***0***                                 state                <= ARBITRATION    ; 
    255                                                                      end 
    256                                                                  else
    257                                                                      begin
    258             1                          8                                 state <= IDLE ;
    259                                                                      end
    260                                                              end
    261                                              
    262                                                          /////////////////---START STATE---//////////////////
    263                                                          START:
    264                                                              begin 
    265             1                        162                         o_scl_idle <= 1'b0 ;
    266                                                                  if (i_tx_mode_done)
    267                                                                      begin
    268             1                          1                                 o_tx_en   <= 1'b1   ; 
    269             1                          1                                 o_tx_mode <= 3'b000 ; 
    270             1                          1                                 o_pp_od   <= 1'b0   ;
    271                                                                          if (i_ccc_en_dis_hj) //for enable/disable events to prevent Bus-Initialization or DAA interruptions.
    272                                                                              begin
    273             1                    ***0***                                         o_hj_en                   <= 1'b1     ;
    274             1                    ***0***                                         o_hj_ccc                  <= 1'b1     ;
    275             1                    ***0***                                         o_regf_rd_address_mux_sel <= HJ_SEL   ;
    276             1                    ***0***                                         o_regf_wr_en_mux_sel      <= HJ_SEL   ;
    277             1                    ***0***                                         o_scl_pp_od_mux_sel       <= HJ_SEL   ;
    278             1                    ***0***                                         o_tx_en_mux_sel           <= HJ_SEL   ;
    279             1                    ***0***                                         o_tx_mode_mux_sel         <= HJ_SEL   ;
    280             1                    ***0***                                         o_rx_en_mux_sel           <= HJ_SEL   ;
    281             1                    ***0***                                         o_rx_mode_mux_sel         <= HJ_SEL   ;
    282             1                    ***0***                                         o_bit_cnt_en_mux_sel      <= HJ_SEL   ;
    283             1                    ***0***                                         o_bit_rx_cnt_en_mux_sel   <= HJ_SEL   ;
    284             1                    ***0***                                         o_fcnt_en_mux_sel         <= HJ_SEL   ;
    285             1                    ***0***                                         o_fcnt_no_frms_sel        <= HJ_SEL   ;
    286             1                    ***0***                                         o_regf_rd_en_mux_sel      <= HJ_SEL   ; 
    287             1                    ***0***                                         state                     <= HOT_JOIN ;
    288                                                                              end
    289                                                                          else if (!dynamic_address_assigned && i_i3c_i2c_sel)
    290                                                                              begin
    291             1                    ***0***                                         o_daa_en                  <= 1'b1    ;                 
    292             1                    ***0***                                         o_regf_rd_address_mux_sel <= DAA_SEL ;
    293             1                    ***0***                                         o_regf_wr_en_mux_sel      <= DAA_SEL ;
    294             1                    ***0***                                         o_scl_pp_od_mux_sel       <= DAA_SEL ;
    295             1                    ***0***                                         o_tx_en_mux_sel           <= DAA_SEL ;
    296             1                    ***0***                                         o_tx_mode_mux_sel         <= DAA_SEL ;
    297             1                    ***0***                                         o_rx_en_mux_sel           <= DAA_SEL ;
    298             1                    ***0***                                         o_rx_mode_mux_sel         <= DAA_SEL ;
    299             1                    ***0***                                         o_bit_cnt_en_mux_sel      <= DAA_SEL ;
    300             1                    ***0***                                         o_bit_rx_cnt_en_mux_sel   <= DAA_SEL ;
    301             1                    ***0***                                         o_fcnt_en_mux_sel         <= DAA_SEL ;
    302             1                    ***0***                                         o_fcnt_no_frms_sel        <= DAA_SEL ;
    303             1                    ***0***                                         o_regf_rd_en_mux_sel      <= DAA_SEL ; 
    304             1                    ***0***                                         state                     <= DAA     ;
    305                                                                              end
    306                                                                          else
    307                                                                              begin 
    308                                                                                  case (i_i3c_i2c_sel)
    309                                                                                  1'b1: 
    310                                                                                  //////////////////////////////ENTHDR///////////////////////////////
    311                                                                                      begin
    312                                                                                         if(hdr_en) //input from outside (configration) >> ENABLES THE ENTHDR BLOCK
    313                                                                                          begin
    314             1                          1                                                  o_enthdr_en               <= 1'b1       ; //enables enthdr block
    315             1                          1                                                  o_regf_rd_en_mux_sel      <= ENTHDR_SEL ;
    316             1                          1                                                  o_regf_rd_address_mux_sel <= ENTHDR_SEL ;
    317             1                          1                                                  o_regf_wr_en_mux_sel      <= ENTHDR_SEL ;
    318             1                          1                                                  o_scl_pp_od_mux_sel       <= ENTHDR_SEL ;
    319             1                          1                                                  o_tx_en_mux_sel           <= ENTHDR_SEL ;
    320             1                          1                                                  o_tx_mode_mux_sel         <= ENTHDR_SEL ;
    321             1                          1                                                  o_rx_en_mux_sel           <= ENTHDR_SEL ;
    322             1                          1                                                  o_rx_mode_mux_sel         <= ENTHDR_SEL ;
    323             1                          1                                                  o_bit_cnt_en_mux_sel      <= ENTHDR_SEL ;
    324             1                          1                                                  o_bit_rx_cnt_en_mux_sel   <= ENTHDR_SEL ;
    325             1                          1                                                  o_fcnt_en_mux_sel         <= ENTHDR_SEL ;
    326             1                          1                                                  o_scl_idle_mux_sel        <= ENTHDR_SEL ; 
    327             1                          1                                                  state                     <= ENTHDR;
    328                                                                                          end
    329                                                                                /////////////////////////////////////////////////////////////////////
    330                                                                                         else 
    331                                                                                          begin
    332             1                    ***0***                                                  o_sdr_en                  <= 1'b1     ;
    333             1                    ***0***                                                  o_mode_sda_sel                 <= SDR_MODE_SEL    ; 
    334             1                    ***0***                                                  o_regf_rd_en_mux_sel      <= SDR_SEL  ;
    335             1                    ***0***                                                  o_regf_rd_address_mux_sel <= SDR_SEL  ;
    336             1                    ***0***                                                  o_regf_wr_en_mux_sel      <= SDR_SEL  ;
    337             1                    ***0***                                                  o_scl_pp_od_mux_sel       <= SDR_SEL  ;
    338             1                    ***0***                                                  o_tx_en_mux_sel           <= SDR_SEL  ;
    339             1                    ***0***                                                  o_tx_mode_mux_sel         <= SDR_SEL  ;
    340             1                    ***0***                                                  o_rx_en_mux_sel           <= SDR_SEL  ;
    341             1                    ***0***                                                  o_rx_mode_mux_sel         <= SDR_SEL  ;
    342             1                    ***0***                                                  o_bit_cnt_en_mux_sel      <= SDR_SEL  ;
    343             1                    ***0***                                                  o_bit_rx_cnt_en_mux_sel   <= SDR_SEL  ;
    344             1                    ***0***                                                  o_fcnt_en_mux_sel         <= SDR_SEL  ;
    345             1                    ***0***                                                  o_scl_idle_mux_sel        <= SDR_SEL  ; 
    346             1                    ***0***                                                  state                     <= SDR_MODE ;
    347                                                                                          end
    348                                              
    349                                                                                    end 
    350                                                                                  1'b0: 
    351                                                                                      begin
    352             1                    ***0***                                                 o_i2c_en <= 1'b1     ;
    353             1                    ***0***                                                 state    <= I2C_MODE ;
    354                                                                                      end 
    355                                                                                  endcase
    356                                                                              end
    357                                                                      end
    358                                                                  else 
    359                                                                      begin
    360             1                        161                                 state <= START ;
    361                                                                      end
    362                                                              end
    363                                                          
    364                                                          ARBITRATION: 
    365                                                              begin 
    366                                                                  if (i_rx_mode_done && i_scl_neg_edge) 
    367                                                                      begin
    368             1                    ***0***                                 o_rx_data_valid      <= 1'b1 ;
    369             1                    ***0***                                 o_bit_cnt_en         <= 1'b0 ;
    370             1                    ***0***                                 write_adress_to_regf <= 1'b1 ;
    371                                                                      end
    372                                                                  else if (arbitrated_adress_ready && i_scl_neg_edge)
    373                                                                      begin 
    374                                                                       if (i_regf_data_rd == {7'h02,1'b0})  /// hotjoin address
    375                                                                           begin 
    376             1                    ***0***                                     o_hj_en                   <= 1'b1     ;
    377             1                    ***0***                                     o_hj_ccc                  <= 1'b0     ;
    378             1                    ***0***                                     o_regf_rd_en_mux_sel      <= HJ_SEL   ;
    379             1                    ***0***                                     o_regf_rd_address_mux_sel <= HJ_SEL   ;
    380             1                    ***0***                                     o_regf_wr_en_mux_sel      <= HJ_SEL   ;
    381             1                    ***0***                                     o_scl_pp_od_mux_sel       <= HJ_SEL   ;
    382             1                    ***0***                                     o_tx_en_mux_sel           <= HJ_SEL   ;
    383             1                    ***0***                                     o_tx_mode_mux_sel         <= HJ_SEL   ;
    384             1                    ***0***                                     o_rx_en_mux_sel           <= HJ_SEL   ;
    385             1                    ***0***                                     o_rx_mode_mux_sel         <= HJ_SEL   ;
    386             1                    ***0***                                     o_bit_cnt_en_mux_sel      <= HJ_SEL   ;
    387             1                    ***0***                                     o_bit_rx_cnt_en_mux_sel   <= HJ_SEL   ;
    388             1                    ***0***                                     o_fcnt_en_mux_sel         <= HJ_SEL   ;
    389             1                    ***0***                                     o_scl_idle_mux_sel        <= HJ_SEL   ;
    390             1                    ***0***                                     o_fcnt_no_frms_sel        <= HJ_SEL   ;
    391             1                    ***0***                                     state                     <= HOT_JOIN ;
    392                                                                           end
    393                                                                          else if (i_regf_data_rd[0]==1'b1)  /// IBI requesr
    394                                                                            begin 
    395             1                    ***0***                                     state <= IBI ;
    396                                                                            end 
    397                                                                          else if (i_regf_data_rd[0]==1'b0) /// Controller role request
    398                                                                            begin
    399             1                    ***0***                                     o_crh_en <= 1'b1 ; //controle role handoff enable signal
    400             1                    ***0***                                     o_hj_crh_en <= 1'b0     ; //controle role request
    401             1                    ***0***                                     state <= CTRL_REQ ;
    402             1                    ***0***                                     o_regf_rd_en_mux_sel      <= CRH_SEL   ;
    403             1                    ***0***                                     o_regf_rd_address_mux_sel <= CRH_SEL   ;
    404             1                    ***0***                                     o_regf_wr_en_mux_sel      <= CRH_SEL   ;
    405             1                    ***0***                                     o_scl_pp_od_mux_sel       <= CRH_SEL   ;
    406             1                    ***0***                                     o_tx_en_mux_sel           <= CRH_SEL   ;
    407             1                    ***0***                                     o_tx_mode_mux_sel         <= CRH_SEL   ;
    408             1                    ***0***                                     o_rx_en_mux_sel           <= CRH_SEL   ;
    409             1                    ***0***                                     o_rx_mode_mux_sel         <= CRH_SEL   ;
    410             1                    ***0***                                     o_bit_cnt_en_mux_sel      <= CRH_SEL   ;
    411             1                    ***0***                                     o_bit_rx_cnt_en_mux_sel   <= CRH_SEL   ;
    412             1                    ***0***                                     o_fcnt_en_mux_sel         <= CRH_SEL   ;
    413             1                    ***0***                                     o_scl_idle_mux_sel        <= CRH_SEL   ;
    414             1                    ***0***                                     o_fcnt_no_frms_sel        <= CRH_SEL   ;
    415                                              
    416                                                                            end 
    417                                                                      end
    418                                                                  else if (write_adress_to_regf && o_regf_rd_en )
    419                                                                      begin
    420             1                    ***0***                                 arbitrated_adress_ready <= 1'b1 ;
    421                                                                      end
    422                                                                  else if (write_adress_to_regf)
    423                                                                      begin 
    424             1                    ***0***                                 o_rx_data_valid <= 1'b0 ;
    425             1                    ***0***                                 o_regf_rd_en    <= 1'b1 ;
    426                                                                      end
    427                                                              end
    428                                                          
    429                                                          //////////////---MODES AND FEATURES---//////////////
    430                                                          SDR_MODE:
    431                                                              begin 
    432             1                    ***0***                         o_bit_cnt_en <= 1'b1 ;
    433                                                                  if (i_sdr_done)
    434                                                                      begin
    435             1                    ***0***                                 o_sdr_en            <= 1'b0           ;
    436             1                    ***0***                                 o_tx_en             <= 1'b1           ; 
    437             1                    ***0***                                 o_tx_mode           <= 3'b010         ;
    438             1                    ***0***                                 o_pp_od             <= 1'b1           ; //I3C STOP is driven by Push-Pull
    439             1                    ***0***                                 o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    440             1                    ***0***                                 o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    441             1                    ***0***                                 o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    442             1                    ***0***                                 o_scl_idle_mux_sel  <= I3C_ENGINE_SEL ;
    443             1                    ***0***                                 o_bits_cnt_regf_rx_tx_sel <= I3C_ENGINE_SEL  ;  
    444             1                    ***0***                                 o_ser_rx_tx_mux_sel <= I3C_ENGINE_SEL ; 
    445             1                    ***0***                                 state               <= STOP           ;
    446                                                                          //may check i_target_nack and refer an indicator to host
    447                                                                      end
    448                                                                  else if (i_rx_arbitration_lost)
    449                                                                      begin
    450             1                    ***0***                                 o_sdr_en              <= 1'b0           ;
    451             1                    ***0***                                 o_tx_en               <= 1'b0           ; 
    452             1                    ***0***                                 o_tx_en_mux_sel       <= I3C_ENGINE_SEL ;
    453             1                    ***0***                                 o_regf_wr_en_mux_sel  <= I3C_ENGINE_SEL ;
    454             1                    ***0***                                 o_bit_cnt_en_mux_sel  <= I3C_ENGINE_SEL ;
    455             1                    ***0***                                 o_regf_rd_en_mux_sel  <= I3C_ENGINE_SEL  ;
    456             1                    ***0***                                 o_ser_rx_tx_mux_sel   <= I3C_ENGINE_SEL  ;
    457             1                    ***0***                                 state <= ARBITRATION ; 
    458                                                                      end 
    459                                                                  else if (i_sdr_ibi_payload_done)
    460                                                                      begin
    461             1                    ***0***                                 state <= STOP; 
    462             1                    ***0***                                 o_ibi_en <= 1'b0 ;
    463                                                                      end 
    464                                                                          
    465                                                                  else
    466                                                                      begin
    467             1                    ***0***                                 state <= SDR_MODE ;
    468                                                                      end
    469                                                              end
    470                                                          
    471                                                          I2C_MODE:
    472                                                              begin
    473             1                    ***0***                         o_regf_rd_en_mux_sel      <= I2C_SEL ;
    474             1                    ***0***                         o_regf_rd_address_mux_sel <= I2C_SEL ;
    475             1                    ***0***                         o_regf_wr_en_mux_sel      <= I2C_SEL ;
    476             1                    ***0***                         o_scl_pp_od_mux_sel       <= I2C_SEL ;
    477             1                    ***0***                         o_tx_en_mux_sel           <= I2C_SEL ;
    478             1                    ***0***                         o_tx_mode_mux_sel         <= I2C_SEL ;
    479             1                    ***0***                         o_rx_en_mux_sel           <= I2C_SEL ;
    480             1                    ***0***                         o_rx_mode_mux_sel         <= I2C_SEL ;
    481             1                    ***0***                         o_bit_cnt_en_mux_sel      <= I2C_SEL ;
    482             1                    ***0***                         o_bit_rx_cnt_en_mux_sel   <= I2C_SEL ;
    483             1                    ***0***                         o_fcnt_en_mux_sel         <= I2C_SEL ;
    484             1                    ***0***                         o_bits_cnt_regf_rx_tx_sel <= I2C_SEL  ;
    485                                              
    486             1                    ***0***                         o_bit_cnt_en              <= 1'b1    ;
    487                                                                  if (i_i2c_done)
    488                                                                      begin
    489             1                    ***0***                                 o_i2c_en            <= 1'b0           ;
    490             1                    ***0***                                 o_tx_en             <= 1'b1           ; 
    491             1                    ***0***                                 o_tx_mode           <= 3'b010         ;
    492             1                    ***0***                                 o_pp_od             <= 1'b0           ; //I2C is always driven by Open-Drain
    493             1                    ***0***                                 o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    494             1                    ***0***                                 o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    495             1                    ***0***                                 o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    496             1                    ***0***                                 o_scl_idle_mux_sel  <= I3C_ENGINE_SEL ;  
    497             1                    ***0***                                 state               <= STOP           ;
    498                                              
    499                                                                          //may check i_target_nack and refer an indicator to host
    500                                                                      end
    501                                                                  else if (i_rx_arbitration_lost)
    502                                                                      begin
    503             1                    ***0***                                 o_regf_wr_en_mux_sel  <= I3C_ENGINE_SEL ;
    504             1                    ***0***                                 o_bit_cnt_en_mux_sel  <= I3C_ENGINE_SEL ;
    505             1                    ***0***                                 o_regf_rd_en_mux_sel  <= I3C_ENGINE_SEL ;
    506             1                    ***0***                                 state                 <= ARBITRATION    ; 
    507                                                                      end 
    508                                                                  else
    509                                                                      begin
    510             1                    ***0***                                 state <= I2C_MODE ;
    511                                                                      end
    512                                                              end
    513                                              
    514                                                          DAA: 
    515                                                              begin
    516                                                                  if (i_rx_arbitration_lost)
    517                                                                      begin
    518             1                    ***0***                                 o_daa_en <= 1'b0 ; 
    519             1                    ***0***                                 o_regf_wr_en_mux_sel  <= I3C_ENGINE_SEL ;
    520             1                    ***0***                                 o_bit_cnt_en_mux_sel  <= I3C_ENGINE_SEL ;
    521             1                    ***0***                                 o_regf_rd_en_mux_sel  <= I3C_ENGINE_SEL ;
    522             1                    ***0***                                 o_fcnt_no_frms_sel    <= I3C_ENGINE_SEL ;
    523             1                    ***0***                                 state                 <= ARBITRATION    ; 
    524                                                                      end 
    525                                                                 else if (i_daa_error)
    526                                                                  begin
    527             1                    ***0***                             state <= IDLE ; /// will be editted after adding errors 
    528             1                    ***0***                             o_daa_en <= 1'b0 ;
    529                                                                  end 
    530                                                                 else if (i_daa_done) 
    531                                                                      begin
    532             1                    ***0***                                 o_daa_en                 <= 1'b0 ;
    533             1                    ***0***                                 dynamic_address_assigned <= 1'b1 ;
    534             1                    ***0***                                 state                    <= STOP ;
    535                                                                      end
    536                                                              end
    537                                                          
    538                                                          HOT_JOIN: 
    539                                                              begin
    540                                                                  if (i_hj_done)
    541                                                                      begin
    542             1                    ***0***                                 o_hj_en <= 1'b0 ;
    543                                                                          if (i_hj_daa_req)
    544                                                                              begin
    545             1                    ***0***                                         o_daa_en                  <= 1'b1    ;
    546             1                    ***0***                                         o_hj_daa_en               <= 1'b1    ;
    547             1                    ***0***                                         o_regf_rd_address_mux_sel <= DAA_SEL ;
    548             1                    ***0***                                         o_regf_wr_en_mux_sel      <= DAA_SEL ;
    549             1                    ***0***                                         o_scl_pp_od_mux_sel       <= DAA_SEL ;
    550             1                    ***0***                                         o_tx_en_mux_sel           <= DAA_SEL ;
    551             1                    ***0***                                         o_tx_mode_mux_sel         <= DAA_SEL ;
    552             1                    ***0***                                         o_rx_en_mux_sel           <= DAA_SEL ;
    553             1                    ***0***                                         o_rx_mode_mux_sel         <= DAA_SEL ;
    554             1                    ***0***                                         o_bit_cnt_en_mux_sel      <= DAA_SEL ;
    555             1                    ***0***                                         o_bit_rx_cnt_en_mux_sel   <= DAA_SEL ;
    556             1                    ***0***                                         o_fcnt_en_mux_sel         <= DAA_SEL ;
    557             1                    ***0***                                         o_fcnt_no_frms_sel        <= DAA_SEL ;
    558             1                    ***0***                                         o_regf_rd_en_mux_sel      <= DAA_SEL ; 
    559             1                    ***0***                                         state                     <= DAA     ;
    560                                                                              end
    561                                                                          else if (i_hj_cr_pass)
    562                                                                              begin
    563             1                    ***0***                                         o_crh_en    <= 1'b1     ; //CRH main enable signal = 1
    564             1                    ***0***                                         o_hj_crh_en <= 1'b1     ; //initiated by active controller 
    565                                                                                  ////CRH SELECTORS////
    566             1                    ***0***                                         state       <= CTRL_REQ ;
    567             1                    ***0***                                          o_regf_rd_en_mux_sel      <= CRH_SEL   ;
    568             1                    ***0***                                          o_regf_rd_address_mux_sel <= CRH_SEL   ;
    569             1                    ***0***                                          o_regf_wr_en_mux_sel      <= CRH_SEL   ;
    570             1                    ***0***                                          o_scl_pp_od_mux_sel       <= CRH_SEL   ;
    571             1                    ***0***                                          o_tx_en_mux_sel           <= CRH_SEL   ;
    572             1                    ***0***                                          o_tx_mode_mux_sel         <= CRH_SEL   ;
    573             1                    ***0***                                          o_rx_en_mux_sel           <= CRH_SEL   ;
    574             1                    ***0***                                          o_rx_mode_mux_sel         <= CRH_SEL   ;
    575             1                    ***0***                                          o_bit_cnt_en_mux_sel      <= CRH_SEL   ;
    576             1                    ***0***                                          o_bit_rx_cnt_en_mux_sel   <= CRH_SEL   ;
    577             1                    ***0***                                          o_fcnt_en_mux_sel         <= CRH_SEL   ;
    578             1                    ***0***                                          o_scl_idle_mux_sel        <= CRH_SEL   ;
    579             1                    ***0***                                          o_fcnt_no_frms_sel        <= CRH_SEL   ;
    580                                                                              end
    581                                                                          //no need for hj_acc_rej till now
    582                                                                          else
    583                                                                              begin
    584             1                    ***0***                                         o_tx_en             <= 1'b1           ; 
    585             1                    ***0***                                         o_tx_mode           <= 3'b010         ;
    586             1                    ***0***                                         o_pp_od             <= 1'b1           ; //I3C STOP is driven by Push-Pull
    587             1                    ***0***                                         o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    588             1                    ***0***                                         o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    589             1                    ***0***                                         o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    590             1                    ***0***                                         o_scl_idle_mux_sel  <= I3C_ENGINE_SEL ;  
    591             1                    ***0***                                         state               <= STOP           ;
    592                                                                              end
    593                                                                      end
    594                                                                  /*else if (i_rx_arbitration_lost)
    595                                                                      begin
    596                                                                          o_hj_en               <= 1'b0           ;
    597                                                                          o_regf_wr_en_mux_sel  <= I3C_ENGINE_SEL ;
    598                                                                          o_bit_cnt_en_mux_sel  <= I3C_ENGINE_SEL ;
    599                                                                          o_regf_rd_en_mux_sel  <= I3C_ENGINE_SEL ;
    600                                                                          o_fcnt_no_frms_sel    <= I3C_ENGINE_SEL ;
    601                                                                          state                 <= ARBITRATION    ; 
    602                                                                      end */
    603                                                                  else
    604                                                                      begin
    605             1                    ***0***                                 state <= HOT_JOIN ;
    606                                                                      end
    607                                                              end
    608                                                         
    609                                                          /////////////////---STOP STATE---////////////////
    610                                                          STOP:
    611                                                              begin 
    612             1                          2                         o_scl_idle <= 1'b1 ; //Yaseen's Edit 
    613                                                                  if((i_tx_mode_done && send_stop)) /// editted
    614                                                                      begin
    615             1                    ***0***                                 o_tx_en           <= 1'b0   ; 
    616             1                    ***0***                                 o_tx_mode         <= 3'b010 ;
    617             1                    ***0***                                 o_scl_idle <= 1'b0 ;
    618             1                    ***0***                                 o_regf_rd_en_mux_sel      <= CRH_SEL   ;
    619             1                    ***0***                                 o_regf_rd_address_mux_sel <= CRH_SEL   ;
    620             1                    ***0***                                 o_regf_wr_en_mux_sel      <= CRH_SEL   ;
    621             1                    ***0***                                 o_scl_pp_od_mux_sel       <= CRH_SEL   ;
    622             1                    ***0***                                 o_tx_en_mux_sel           <= CRH_SEL   ;
    623             1                    ***0***                                 o_tx_mode_mux_sel         <= CRH_SEL   ;
    624             1                    ***0***                                 o_rx_en_mux_sel           <= CRH_SEL   ;
    625             1                    ***0***                                 o_rx_mode_mux_sel         <= CRH_SEL   ;
    626             1                    ***0***                                 o_bit_cnt_en_mux_sel      <= CRH_SEL   ;
    627             1                    ***0***                                 o_bit_rx_cnt_en_mux_sel   <= CRH_SEL   ;
    628             1                    ***0***                                 o_fcnt_en_mux_sel         <= CRH_SEL   ;
    629             1                    ***0***                                 o_scl_idle_mux_sel        <= CRH_SEL   ;
    630             1                    ***0***                                 o_fcnt_no_frms_sel        <= CRH_SEL   ;
    631             1                    ***0***                                 state <= CTRL_REQ ;
    632             1                    ***0***                                 o_crh_stop_is_sent <= 1'b1 ;
    633             1                    ***0***                                 send_stop <= 1'b0 ; 
    634                                                                      end
    635                                                                  else if (i_tx_mode_done && !send_stop)
    636                                                                      begin
    637             1                          1                                 o_tx_en           <= 1'b0   ; 
    638             1                          1                                 o_tx_mode         <= 3'b010 ;
    639             1                          1                                 o_pp_od           <= 1'b0   ; 
    640             1                          1                                 o_controller_done <= 1'b1   ;
    641             1                          1                                 o_i3c_idle_flag   <= 1'b1   ; 
    642             1                          1                                 state             <= IDLE   ;
    643                                                                      end
    644                                                                  
    645                                                              end
    646                                              
    647                                                          IBI: begin
    648             1                    ***0***                         o_regf_rd_en_mux_sel      <= IBI_SEL;
    649             1                    ***0***                         o_regf_rd_address_mux_sel <= IBI_SEL;
    650             1                    ***0***                         o_regf_wr_en_mux_sel      <= IBI_SEL;
    651             1                    ***0***                         o_scl_pp_od_mux_sel       <= IBI_SEL;
    652             1                    ***0***                         o_tx_en_mux_sel           <= IBI_SEL;
    653             1                    ***0***                         o_tx_mode_mux_sel         <= IBI_SEL;
    654             1                    ***0***                         o_rx_en_mux_sel           <= IBI_SEL;
    655             1                    ***0***                         o_rx_mode_mux_sel         <= IBI_SEL;
    656             1                    ***0***                         o_bit_cnt_en_mux_sel      <= IBI_SEL;
    657             1                    ***0***                         o_bit_rx_cnt_en_mux_sel   <= IBI_SEL;
    658             1                    ***0***                         o_fcnt_en_mux_sel         <= IBI_SEL;
    659             1                    ***0***                          o_fcnt_no_frms_sel       <= IBI_SEL;
    660             1                    ***0***                          o_ser_rx_tx_mux_sel      <= IBI_SEL;
    661                                              
    662                                                                  if (i_ibi_payload_en)      
    663                                                                      begin
    664             1                    ***0***                               o_sdr_en                  <= 1'b1     ;
    665             1                    ***0***                               o_fcnt_no_frms_sel        <=IBI_SEL  ; // to select payload max size 
    666                                              
    667             1                    ***0***                                o_regf_rd_en_mux_sel      <= SDR_SEL  ;
    668             1                    ***0***                                o_regf_rd_address_mux_sel <= SDR_SEL  ;
    669             1                    ***0***                                o_regf_wr_en_mux_sel      <= SDR_SEL  ;
    670             1                    ***0***                                o_scl_pp_od_mux_sel       <= SDR_SEL  ;
    671             1                    ***0***                                o_tx_en_mux_sel           <= SDR_SEL  ;
    672             1                    ***0***                                o_tx_mode_mux_sel         <= SDR_SEL  ;
    673             1                    ***0***                                o_rx_en_mux_sel           <= SDR_SEL  ;
    674             1                    ***0***                                o_rx_mode_mux_sel         <= SDR_SEL  ;
    675             1                    ***0***                                o_bit_cnt_en_mux_sel      <= SDR_SEL  ;
    676             1                    ***0***                                o_bit_rx_cnt_en_mux_sel   <= SDR_SEL  ;
    677             1                    ***0***                                o_fcnt_en_mux_sel         <= SDR_SEL  ;
    678             1                    ***0***                                o_scl_idle_mux_sel        <= SDR_SEL  ; 
    679             1                    ***0***                                state <= SDR_MODE;
    680                                                                      end
    681                                              
    682                                                                  else if (i_ibi_done)    
    683                                                                      begin
    684             1                    ***0***                                 o_ibi_en <= 1'b0 ;
    685             1                    ***0***                                 state <= IDLE;
    686                                                                      end     
    687                                                                end
    688                                              
    689                                                           CTRL_REQ: begin
    690                                                            if(i_crh_send_stop)
    691                                                              begin
    692             1                    ***0***                       state               <= STOP ; 
    693             1                    ***0***                       o_tx_en             <= 1'b1      ;
    694             1                    ***0***                       o_tx_mode           <= 3'b010    ; //stop bit
    695             1                    ***0***                       o_pp_od             <= 1'b1      ; 
    696             1                    ***0***                       send_stop           <= 1'b1      ;
    697                                                                //o_scl_idle         <= 1'b0 ; 
    698             1                    ***0***                       o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    699             1                    ***0***                       o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    700             1                    ***0***                       o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    701             1                    ***0***                       o_scl_idle_mux_sel  <= I3C_ENGINE_SEL ;  
    702                                                              end
    703                                                            else if(i_crh_done)
    704                                                              begin
    705             1                    ***0***                       state               <= IDLE ;
    706             1                    ***0***                       o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    707             1                    ***0***                       o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    708             1                    ***0***                       o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    709             1                    ***0***                       o_scl_idle_mux_sel  <= I3C_ENGINE_SEL ;  
    710             1                    ***0***                       o_crh_en            <= 1'b0 ;
    711             1                    ***0***                       o_pp_od             <= 1'b0           ; 
    712                                                              end
    713                                                                          
    714                                                                      end
    715                                                          
    716                                              
    717                                              
    718                                                          ENTHDR: 
    719                                                              begin
    720             1                       2230                                 o_enthdr_en               <= 1'b1       ; //enables enthdr block
    721             1                       2230                                 o_regf_rd_en_mux_sel      <= ENTHDR_SEL ;
    722             1                       2230                                 o_regf_rd_address_mux_sel <= ENTHDR_SEL ;
    723             1                       2230                                 o_regf_wr_en_mux_sel      <= ENTHDR_SEL ;
    724             1                       2230                                 o_scl_pp_od_mux_sel       <= ENTHDR_SEL ;
    725             1                       2230                                 o_tx_en_mux_sel           <= ENTHDR_SEL ;
    726             1                       2230                                 o_tx_mode_mux_sel         <= ENTHDR_SEL ;
    727             1                       2230                                 o_rx_en_mux_sel           <= ENTHDR_SEL ;
    728             1                       2230                                 o_rx_mode_mux_sel         <= ENTHDR_SEL ;
    729             1                       2230                                 o_bit_cnt_en_mux_sel      <= ENTHDR_SEL ;
    730             1                       2230                                 o_bit_rx_cnt_en_mux_sel   <= ENTHDR_SEL ;
    731             1                       2230                                 o_fcnt_en_mux_sel         <= ENTHDR_SEL ;
    732             1                       2230                                 o_scl_idle_mux_sel        <= ENTHDR_SEL ; 
    733             1                       2230                                 state                     <= ENTHDR; 
    734                                                                  if (i_enthdr_done)
    735                                                                      begin
    736             1                          1                                 o_hdrengine_en            <= 1'b1 ;          
    737                                              
    738                                              
    739                                                  /// Selectors of muxes that are shared between SDR and HDR to choose the required mode///////
    740                                                                          
    741             1                          1                                o_mode_sda_sel                  <= HDR_MODE_SEL    ; 
    742             1                          1                                o_regf_wr_en_sdr_hdr_sel        <= HDR_MODE_SEL    ;  
    743             1                          1                                o_regf_rd_en_sdr_hdr_sel        <= HDR_MODE_SEL    ; 
    744             1                          1                                o_regf_rd_address_sdr_hdr_sel   <= HDR_MODE_SEL    ; 
    745             1                          1                                o_scl_pp_od_sdr_hdr_sel         <= HDR_MODE_SEL    ; 
    746             1                          1                                o_regf_data_sdr_hdr_sel         <= HDR_MODE_SEL    ;
    747                                              
    748                                              
    749             1                          1                                o_scl_pp_od_mux_sel       <= I3C_ENGINE_SEL ;
    750                                              
    751             1                          1                                o_scl_idle_mux_sel              <= I3C_ENGINE_SEL ;
    752                                              
    753             1                          1                                 state                           <= HDR_ENGINE    ; 
    754                                                                      end 
    755                                                                      
    756                                                                  /*  else if (i_enthdr_error_detected) //signal not added yet in design or instantiation
    757                                                                      begin
    758                                                                        state                       <= STOP;
    759                                                                      end*/
    760                                              
    761                                                                  else
    762                                                                      begin
    763             1                       2229                                 state                     <= ENTHDR         ;
    764                                              
    765                                                                      end 
    766                                                              end
    767                                              
    768                                              
    769                                                           HDR_ENGINE:
    770                                                             begin
    771             1                       2070                         o_tx_en             <= 1'b0      ;
    772             1                       2070                         send_stop           <= 1'b0      ;
    773                                              
    774                                                               if(i_hdrengine_done)
    775                                                                begin
    776             1                          1                         o_scl_pp_od_mux_sel           <= I3C_ENGINE_SEL ;
    777             1                          1                         o_tx_en_mux_sel               <= I3C_ENGINE_SEL ;
    778             1                          1                         o_tx_mode_mux_sel             <= I3C_ENGINE_SEL ;
    779             1                          1                         o_scl_idle_mux_sel            <= I3C_ENGINE_SEL ;
    780             1                          1                         o_bits_cnt_regf_rx_tx_sel     <= I3C_ENGINE_SEL ;  
    781             1                          1                         o_ser_rx_tx_mux_sel           <= I3C_ENGINE_SEL ;
    782                                              
    783                                                                            
    784             1                          1                         o_mode_sda_sel                  <=SDR_MODE_SEL ; 
    785             1                          1                         o_regf_wr_en_sdr_hdr_sel        <=SDR_MODE_SEL;  
    786             1                          1                         o_regf_rd_en_sdr_hdr_sel        <=SDR_MODE_SEL; 
    787                                                                  
    788             1                          1                         o_regf_rd_address_sdr_hdr_sel   <=SDR_MODE_SEL; 
    789             1                          1                         o_scl_pp_od_sdr_hdr_sel         <=SDR_MODE_SEL;
    790                                              
    791             1                          1                         o_hdrengine_en                  <= 1'b0 ;
    792                                              
    793             1                          1                         o_tx_en             <= 1'b1      ;
    794             1                          1                         o_tx_mode           <= 3'b010    ; //stop bit
    795             1                          1                         o_pp_od             <= 1'b1      ; 
    796             1                          1                         send_stop           <= 1'b0      ;
    797             1                          1                         state                         <= STOP           ; 
    798                                                                end
    799                                                               else 
    800                                                                begin
    801             1                       2069                         o_hdrengine_en                  <= 1'b1 ;          
    802             1                       2069                         o_mode_sda_sel                  <= HDR_MODE_SEL ; 
    803             1                       2069                         o_regf_wr_en_sdr_hdr_sel        <=HDR_MODE_SEL;  
    804             1                       2069                         o_regf_rd_en_sdr_hdr_sel        <=HDR_MODE_SEL; 
    805             1                       2069                         o_regf_rd_address_sdr_hdr_sel   <=HDR_MODE_SEL; 
    806             1                       2069                         o_scl_pp_od_sdr_hdr_sel         <=HDR_MODE_SEL; 
    807                                              
    808                                              
    809             1                       2069     o_scl_pp_od_mux_sel       <= I3C_ENGINE_SEL ;
    810                                              
    811                                                                  //o_scl_pp_od_mux_sel             <= HDR_MODE_SEL ;             //(SCL GEN) shared btw HDR & SDR                 
    812                                                               
    813                                              
    814             1                       2069                         state                     <= HDR_ENGINE     ; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        254        97       157    38.18%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i3c_engine --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                           arbitrated_adress_ready           0           0        0.00 
                          dynamic_address_assigned           0           0        0.00 
                                            hdr_en           0           1       50.00 
                                   i_ccc_en_dis_hj           0           0        0.00 
                                             i_clk           1           1      100.00 
                                   i_controller_en           1           1      100.00 
                                        i_crh_done           0           0        0.00 
                                   i_crh_send_stop           0           0        0.00 
                                        i_daa_done           0           0        0.00 
                                       i_daa_error           0           0        0.00 
                                     i_enthdr_done           1           1      100.00 
                                  i_hdrengine_done           1           1      100.00 
                                      i_hj_acc_rej           0           0        0.00 
                                      i_hj_cr_pass           0           0        0.00 
                                      i_hj_daa_req           0           0        0.00 
                                         i_hj_done           0           0        0.00 
                                        i_i2c_done           0           0        0.00 
                                     i_i3c_i2c_sel           1           1      100.00 
                                        i_ibi_done           0           0        0.00 
                                  i_ibi_payload_en           0           0        0.00 
                               i_regf_data_rd[0-7]           1           1      100.00 
                                    i_regf_mode[0]           0           0        0.00 
                                  i_regf_mode[1-2]           0           1       50.00 
                                           i_rst_n           1           1      100.00 
                             i_rx_arbitration_lost           0           0        0.00 
                                    i_rx_mode_done           1           1      100.00 
                                    i_scl_neg_edge           1           1      100.00 
                                    i_scl_pos_edge           1           1      100.00 
                                        i_sdr_done           0           0        0.00 
                            i_sdr_ibi_payload_done           0           0        0.00 
                                     i_target_nack           0           0        0.00 
                                       i_timer_cas           1           1      100.00 
                                    i_tx_mode_done           1           1      100.00 
                                      o_bit_cnt_en           0           0        0.00 
                           o_bit_cnt_en_mux_sel[2]           1           1      100.00 
                           o_bit_cnt_en_mux_sel[1]           0           0        0.00 
                           o_bit_cnt_en_mux_sel[0]           1           1      100.00 
                      o_bit_rx_cnt_en_mux_sel[2-0]           0           0        0.00 
                    o_bits_cnt_regf_rx_tx_sel[2-0]           0           0        0.00 
                                 o_controller_done           1           1      100.00 
                                          o_crh_en           0           0        0.00 
                                o_crh_stop_is_sent           0           0        0.00 
                                          o_daa_en           0           0        0.00 
                                       o_enthdr_en           1           1      100.00 
                            o_fcnt_en_mux_sel[2-0]           0           0        0.00 
                           o_fcnt_no_frms_sel[2-0]           0           0        0.00 
                                    o_hdrengine_en           1           1      100.00 
                                          o_hj_ccc           0           0        0.00 
                                       o_hj_crh_en           0           0        0.00 
                                       o_hj_daa_en           0           0        0.00 
                                           o_hj_en           0           0        0.00 
                                          o_i2c_en           0           0        0.00 
                                   o_i3c_idle_flag           1           1      100.00 
                                          o_ibi_en           0           0        0.00 
                                    o_mode_sda_sel           1           1      100.00 
                                           o_pp_od           1           1      100.00 
                           o_regf_data_sdr_hdr_sel           1           1      100.00 
                    o_regf_rd_address_mux_sel[2-0]           0           0        0.00 
                     o_regf_rd_address_sdr_hdr_sel           1           1      100.00 
                                      o_regf_rd_en           0           0        0.00 
                         o_regf_rd_en_mux_sel[2-0]           0           0        0.00 
                          o_regf_rd_en_sdr_hdr_sel           1           1      100.00 
                         o_regf_wr_en_mux_sel[2-0]           0           0        0.00 
                          o_regf_wr_en_sdr_hdr_sel           1           1      100.00 
                                   o_rx_data_valid           0           0        0.00 
                              o_rx_en_mux_sel[2-0]           0           0        0.00 
                            o_rx_mode_mux_sel[2-0]           0           0        0.00 
                                        o_scl_idle           1           1      100.00 
                             o_scl_idle_mux_sel[2]           1           1      100.00 
                             o_scl_idle_mux_sel[1]           0           0        0.00 
                             o_scl_idle_mux_sel[0]           1           1      100.00 
                            o_scl_pp_od_mux_sel[2]           1           1      100.00 
                            o_scl_pp_od_mux_sel[1]           0           0        0.00 
                            o_scl_pp_od_mux_sel[0]           1           1      100.00 
                           o_scl_pp_od_sdr_hdr_sel           1           1      100.00 
                       o_scl_stall_cycles_sel[2-0]           0           0        0.00 
                         o_scl_stall_flag_sel[2-0]           0           0        0.00 
                                          o_sdr_en           0           0        0.00 
                          o_ser_rx_tx_mux_sel[2-0]           0           0        0.00 
                                           o_tx_en           1           1      100.00 
                                o_tx_en_mux_sel[2]           1           1      100.00 
                                o_tx_en_mux_sel[1]           0           0        0.00 
                                o_tx_en_mux_sel[0]           1           1      100.00 
                                      o_tx_mode[2]           0           0        0.00 
                                      o_tx_mode[1]           1           1      100.00 
                                      o_tx_mode[0]           0           0        0.00 
                              o_tx_mode_mux_sel[2]           1           1      100.00 
                              o_tx_mode_mux_sel[1]           0           0        0.00 
                              o_tx_mode_mux_sel[0]           1           1      100.00 
                                         send_stop           0           0        0.00 
                                        state[3-0]           1           1      100.00 
                              write_adress_to_regf           0           0        0.00 

Total Node Count     =        127 
Toggled Node Count   =         47 
Untoggled Node Count =         80 

Toggle Coverage      =      38.18% (97 of 254 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_sdr_mode
=== Design Unit: work.sdr_mode
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        47        12        35    25.53%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sdr_mode

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sdr_mode.v
------------------------------------IF Branch------------------------------------
    103                                       18     Count coming in to IF
    103             1                         10     assign ser_mode_done_mux_out = (i_ser_to_par_trans)? i_sdr_ctrl_bit_cnt_done : i_ser_mode_done ;
    103             2                          8     assign ser_mode_done_mux_out = (i_ser_to_par_trans)? i_sdr_ctrl_bit_cnt_done : i_ser_mode_done ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    107                                       65     Count coming in to IF
    107             1                          1             if (!i_sdr_ctrl_rst_n) 
    112             1                         64             else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    134                                       66     Count coming in to IF
    134             1                          1             if (!i_sdr_ctrl_rst_n) 
    141             1                         65             else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    160                                        3     Count coming in to IF
    160             1                          1         if (!i_sdr_ctrl_rst_n) 
    162             1                          2         else    
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    173                                      371     Count coming in to IF
    173             1                          1         if (!i_sdr_ctrl_rst_n) 
    199             1                        370         else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    201                                      370     Count coming in to CASE
    202             1                        370               SDR_IDLE:      
    235             1                    ***0***               ADDRESS:      
    268             1                    ***0***               HANDOFF:   
    306             1                    ***0***               SCL_STALLING:   
    324             1                    ***0***               ACK_BIT:      
    344             1                    ***0***               DATA_OUT:      
    365             1                    ***0***               DATA_IN:      
    388             1                    ***0***               T_BIT:      
    427             1                    ***0***               PARITY_BIT:      
                                         ***0***     All False Count
Branch totals: 1 hit of 10 branches = 10.00%

------------------------------------IF Branch------------------------------------
    217                                      370     Count coming in to IF
    217             1                    ***0***                   if (i_i3c_ctrl_sdr_en)
    224             1                    ***0***                   else if (i_sdr_ctrl_ibi_payload_en)
    229             1                        370                   else 
Branch totals: 1 hit of 3 branches = 33.33%

------------------------------------IF Branch------------------------------------
    251                                  ***0***     Count coming in to IF
    251             1                    ***0***                   if (i_sdr_rx_arbitration_lost)
    256             1                    ***0***                   else if (i_ser_mode_done_pulse)
    261             1                    ***0***                   else 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    270                                  ***0***     Count coming in to IF
    270             1                    ***0***                 if (i_sdr_ctrl_scl_neg_edge && address_ack_state_flag)
    275             1                    ***0***                 else if  (i_sdr_ctrl_scl_neg_edge && !address_ack_state_flag)  
    300             1                    ***0***                 else 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    277                                  ***0***     Count coming in to IF
    277             1                    ***0***                         if (i_ser_nack_ack) 
    285             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    287                                  ***0***     Count coming in to IF
    287             1                    ***0***                                 if (i_sdr_regf_rx_tx)
    294             1                    ***0***                                 else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    308                                  ***0***     Count coming in to IF
    308             1                    ***0***                         if (i_sdr_ctrl_scl_stall_done)  
    313             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    353                                  ***0***     Count coming in to IF
    353             1                    ***0***                   if (i_ser_mode_done_pulse) 
    358             1                    ***0***                  else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    377                                  ***0***     Count coming in to IF
    377             1                    ***0***                   if (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)//(i_deser_mode_done_pulse && i_sdr_ctrl_scl_neg_edge)  //(i_deser_mode_done_prev3)  
    382             1                    ***0***                   else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    401                                  ***0***     Count coming in to IF
    401             1                    ***0***                   if (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)
    420             1                    ***0***                   else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    403                                  ***0***     Count coming in to IF
    403             1                    ***0***                       if (sdr_rx_rd_abort_extend) 
    413             1                    ***0***                       else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    435                                  ***0***     Count coming in to IF
    435             1                    ***0***                   if (i_ser_mode_done_pulse_parity) //(i_ser_mode_done && i_sdr_ctrl_scl_pos_edge ) Edit by Zyad
    455             1                    ***0***                   else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    437                                  ***0***     Count coming in to IF
    437             1                    ***0***                      if(i_sdr_ctrl_last_frame) 
    447             1                    ***0***                      else
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         0         8     0.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sdr_mode --

  File sdr_mode.v
----------------Focused Condition View-------------------
Line       270 Item    1  (i_sdr_ctrl_scl_neg_edge && address_ack_state_flag)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  i_sdr_ctrl_scl_neg_edge         N  No hits                  Hit '_0' and '_1'
   address_ack_state_flag         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  i_sdr_ctrl_scl_neg_edge_0  -                             
  Row   2:    ***0***  i_sdr_ctrl_scl_neg_edge_1  address_ack_state_flag        
  Row   3:    ***0***  address_ack_state_flag_0   i_sdr_ctrl_scl_neg_edge       
  Row   4:    ***0***  address_ack_state_flag_1   i_sdr_ctrl_scl_neg_edge       

----------------Focused Condition View-------------------
Line       275 Item    1  (i_sdr_ctrl_scl_neg_edge && ~address_ack_state_flag)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  i_sdr_ctrl_scl_neg_edge         N  No hits                  Hit '_0' and '_1'
   address_ack_state_flag         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  i_sdr_ctrl_scl_neg_edge_0  -                             
  Row   2:    ***0***  i_sdr_ctrl_scl_neg_edge_1  ~address_ack_state_flag       
  Row   3:    ***0***  address_ack_state_flag_0   i_sdr_ctrl_scl_neg_edge       
  Row   4:    ***0***  address_ack_state_flag_1   i_sdr_ctrl_scl_neg_edge       

----------------Focused Condition View-------------------
Line       377 Item    1  (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
        i_deser_mode_done         N  No hits                  Hit '_0' and '_1'
  i_sdr_ctrl_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  i_deser_mode_done_0        -                             
  Row   2:    ***0***  i_deser_mode_done_1        i_sdr_ctrl_scl_neg_edge       
  Row   3:    ***0***  i_sdr_ctrl_scl_neg_edge_0  i_deser_mode_done             
  Row   4:    ***0***  i_sdr_ctrl_scl_neg_edge_1  i_deser_mode_done             

----------------Focused Condition View-------------------
Line       401 Item    1  (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
        i_deser_mode_done         N  No hits                  Hit '_0' and '_1'
  i_sdr_ctrl_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  i_deser_mode_done_0        -                             
  Row   2:    ***0***  i_deser_mode_done_1        i_sdr_ctrl_scl_neg_edge       
  Row   3:    ***0***  i_sdr_ctrl_scl_neg_edge_0  i_deser_mode_done             
  Row   4:    ***0***  i_sdr_ctrl_scl_neg_edge_1  i_deser_mode_done             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                     13         9         4    69.23%

================================Expression Details================================

Expression Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sdr_mode --

  File sdr_mode.v
-----------Focused Expression View (Bimodal)------------
Line       103 Item    1  (i_ser_to_par_trans? i_sdr_ctrl_bit_cnt_done: i_ser_mode_done)
Expression totals: 3 of 3 input terms covered = 100.00%

                 Input Term   Covered  Reason for no coverage                  Hint
                -----------  --------  --------------------------------------  --------------
         i_ser_to_par_trans         Y
    i_sdr_ctrl_bit_cnt_done         Y
            i_ser_mode_done         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target                   Non-masking condition(s)           

---------  ----------  ----------  --------------------         -------------------------          
 Row   1:           1           1  i_ser_to_par_trans_0         -                                  
 Row   2:           1           0  i_ser_to_par_trans_1         -                                  
 Row   3:           1           0  i_sdr_ctrl_bit_cnt_done_0    i_ser_to_par_trans                 
 Row   4:           0           1  i_sdr_ctrl_bit_cnt_done_1    i_ser_to_par_trans                 
 Row   5:           1           0  i_ser_mode_done_0            ~i_ser_to_par_trans                
 Row   6:           0           1  i_ser_mode_done_1            ~i_ser_to_par_trans                

----------------Focused Expression View-----------------
Line       118 Item    1  (~i_ser_mode_done_prev & ser_mode_done_mux_out)
Expression totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
   i_ser_mode_done_prev         Y
  ser_mode_done_mux_out         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_ser_mode_done_prev_0   ser_mode_done_mux_out         
  Row   2:          1  i_ser_mode_done_prev_1   ser_mode_done_mux_out         
  Row   3:          1  ser_mode_done_mux_out_0  ~i_ser_mode_done_prev         
  Row   4:          1  ser_mode_done_mux_out_1  ~i_ser_mode_done_prev         

----------------Focused Expression View-----------------
Line       119 Item    1  (~i_deser_mode_done_prev & i_deser_mode_done)
Expression totals: 2 of 2 input terms covered = 100.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  i_deser_mode_done_prev         Y
       i_deser_mode_done         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  i_deser_mode_done_prev_0  i_deser_mode_done             
  Row   2:          1  i_deser_mode_done_prev_1  i_deser_mode_done             
  Row   3:          1  i_deser_mode_done_0       ~i_deser_mode_done_prev       
  Row   4:          1  i_deser_mode_done_1       ~i_deser_mode_done_prev       

----------------Focused Expression View-----------------
Line       151 Item    1  (i_ser_mode_done_prev3 & ~i_ser_mode_done_pulse)
Expression totals: 1 of 2 input terms covered = 50.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_ser_mode_done_prev3         Y
  i_ser_mode_done_pulse         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_ser_mode_done_prev3_0  ~i_ser_mode_done_pulse        
  Row   2:          1  i_ser_mode_done_prev3_1  ~i_ser_mode_done_pulse        
  Row   3:          1  i_ser_mode_done_pulse_0  i_ser_mode_done_prev3         
  Row   4:    ***0***  i_ser_mode_done_pulse_1  i_ser_mode_done_prev3         

----------------Focused Expression View-----------------
Line       152 Item    1  (i_deser_mode_done_prev3 & ~i_deser_mode_done_pulse)
Expression totals: 1 of 2 input terms covered = 50.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  i_deser_mode_done_prev3         Y
  i_deser_mode_done_pulse         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  i_deser_mode_done_prev3_0  ~i_deser_mode_done_pulse      
  Row   2:          1  i_deser_mode_done_prev3_1  ~i_deser_mode_done_pulse      
  Row   3:          1  i_deser_mode_done_pulse_0  i_deser_mode_done_prev3       
  Row   4:    ***0***  i_deser_mode_done_pulse_1  i_deser_mode_done_prev3       

----------------Focused Expression View-----------------
Line       164 Item    1  (~o_sdr_ctrl_regf_rd_en_prev & o_sdr_ctrl_regf_rd_en)
Expression totals: 0 of 2 input terms covered = 0.00%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
  o_sdr_ctrl_regf_rd_en_prev         N  No hits                  Hit '_0' and '_1'
       o_sdr_ctrl_regf_rd_en         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  o_sdr_ctrl_regf_rd_en_prev_0  o_sdr_ctrl_regf_rd_en         
  Row   2:    ***0***  o_sdr_ctrl_regf_rd_en_prev_1  o_sdr_ctrl_regf_rd_en         
  Row   3:          1  o_sdr_ctrl_regf_rd_en_0       ~o_sdr_ctrl_regf_rd_en_prev   
  Row   4:    ***0***  o_sdr_ctrl_regf_rd_en_1       ~o_sdr_ctrl_regf_rd_en_prev   


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       9         1         8    11.11%
    FSM Transitions                 20         0        20     0.00%

================================FSM Details================================

FSM Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sdr_mode --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 202            SDR_IDLE                   0
 365             DATA_IN                   4
 235             ADDRESS                   3
 268             HANDOFF                   6
 306        SCL_STALLING                   7
 324             ACK_BIT                   2
 344            DATA_OUT                   5
 427          PARITY_BIT                  12
 388               T_BIT                  13
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                SDR_IDLE                 371          
    Uncovered States :
    ------------------
                   State
                   -----
                 DATA_IN
                 ADDRESS
                 HANDOFF
            SCL_STALLING
                 ACK_BIT
                DATA_OUT
              PARITY_BIT
                   T_BIT
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 226                   0          SDR_IDLE -> DATA_IN 
 219                   1          SDR_IDLE -> ADDRESS 
 380                   2          DATA_IN -> T_BIT    
 176                   3          DATA_IN -> SDR_IDLE 
 259                   4          ADDRESS -> HANDOFF  
 253                   5          ADDRESS -> SDR_IDLE 
 296                   6          HANDOFF -> SCL_STALLING
 289                   7          HANDOFF -> DATA_IN  
 279                   8          HANDOFF -> SDR_IDLE 
 273                   9          HANDOFF -> ACK_BIT  
 310                  10          SCL_STALLING -> DATA_OUT
 176                  11          SCL_STALLING -> SDR_IDLE
 340                  12          ACK_BIT -> HANDOFF  
 176                  13          ACK_BIT -> SDR_IDLE 
 355                  14          DATA_OUT -> PARITY_BIT
 176                  15          DATA_OUT -> SDR_IDLE
 449                  16          PARITY_BIT -> DATA_OUT
 439                  17          PARITY_BIT -> SDR_IDLE
 415                  18          T_BIT -> DATA_IN    
 405                  19          T_BIT -> SDR_IDLE   


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   9         1         8    11.11%
        FSM Transitions             20         0        20     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     154        47       107    30.51%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sdr_mode --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sdr_mode.v
    33                                               module sdr_mode(
    34                                                   input  wire          i_sdr_ctrl_clk                ,
    35                                                   input  wire          i_sdr_ctrl_rst_n              ,
    36                                                   input  wire          i_sdr_ctrl_cnt_done           , //need naming revisited 
    37                                                   input  wire          i_i3c_ctrl_sdr_en             , //mod in top module
    38                                                   input  wire          i_sdr_ctrl_last_frame         ,
    39                                                   input  wire          i_ser_mode_done               , 
    40                                                   input  wire          i_deser_mode_done             ,
    41                                                   input  wire          i_sdr_regf_rx_tx              , //RnW bit from serializer, 1 = rx , 0 = tx 
    42                                                   input  wire          i_ser_nack_ack                , // 1 = no acknoledge 0 = ACK 
    43                                                   input  wire          i_sdr_rx_rd_abort             ,
    44                                                   input  wire          i_ser_to_par_trans            , // 1 only at the serializing state of the tx, otherwise 0
    45                                                   input  wire          i_sdr_ctrl_bit_cnt_done       , // bits count done , output from bits counter
    46                                                   input  wire          i_sdr_ctrl_scl_neg_edge       ,
    47                                                   input  wire          i_sdr_ctrl_scl_pos_edge       ,
    48                                                   input  wire          i_sdr_ctrl_scl_stall_done     ,
    49                                                   input  wire          i_sdr_ctrl_ibi_payload_en     ,
    50                                                   
    51                                                   
    52                                                   input  wire          i_sdr_rx_arbitration_lost     ,
    53                                                   output reg           o_sdr_ctrl_scl_stall_flag     ,
    54                                                   output reg   [3:0]   o_sdr_ctrl_scl_stall_cycles   ,
    55                                                   output reg           o_sdr_ctrl_scl_idle           ,
    56                                                   output reg           o_sdr_ctrl_fcnt_en            ,
    57                                                   output reg           o_sdr_ctrl_ser_en             ,
    58                                                   output reg           o_sdr_ctrl_ser_valid          ,
    59                                                   output reg   [2:0]   o_sdr_ctrl_ser_mode           ,
    60                                                   output reg           o_sdr_ctrl_deser_en           ,
    61                                                   output reg   [2:0]   o_sdr_rx_mode                 , // deser mode before
    62                                                   output reg           o_sdr_ctrl_cnt_en             ,
    63                                                   output reg           o_sdr_ctrl_rx_cnt_en          ,
    64                                                   output reg           o_sdr_ctrl_pp_od              ,
    65                                                   output reg           o_sdr_ctrl_addr_done          , 
    66                                                   output reg           o_sdr_ctrl_done               ,
    67                                                   output reg           o_sdr_ctrl_regf_wr_en         ,
    68                                                   output reg           o_sdr_ctrl_regf_rd_en_pulse   ,
    69                                                   output reg   [11:0]   o_sdr_ctrl_regf_addr          ,
    70                                                   output reg           o_sdr_ctrl_payload_done       ,
    71                                                   output reg           o_sdr_ctrl_rx_valid            // need to be parametrized using define   
    72                                                   );
    73                                               /////////////////////ADDRESS PARAMTERES///////////////////////
    74                                               localparam IBI_PAYLOAD_BASE_ADDRESS = 108;
    75                                               
    76                                               //- states encoding in gray ----------------------------------------------
    77                                               
    78                                               localparam SDR_IDLE     = 4'b0000 ; 
    79                                               localparam ADDRESS      = 4'b0011 ;
    80                                               localparam ACK_BIT      = 4'b0010 ;
    81                                               localparam HANDOFF      = 4'b0110 ;
    82                                               localparam SCL_STALLING = 4'b0111 ;
    83                                               localparam DATA_OUT     = 4'b0101 ;
    84                                               localparam DATA_IN      = 4'b0100 ;
    85                                               localparam PARITY_BIT   = 4'b1100 ;
    86                                               localparam T_BIT        = 4'b1101 ;
    87                                               
    88                                               
    89                                               //-- internal wires declaration ------------------------------------------
    90                                               
    91                                               reg [3:0] state                  ;
    92                                               reg       address_ack_state_flag ; //Used to go to handoff state where we handle special cases transitions like last bit in Address and from Address to Ack
    93                                               reg       sdr_rx_rd_abort_extend ;
    94                                               
    95                                               //Pulse Generator
    96                                               reg  i_ser_mode_done_prev         ;
    97                                               reg  i_deser_mode_done_prev       ;
    98                                               wire i_ser_mode_done_pulse        ;
    99                                               wire i_deser_mode_done_pulse      ;
    100                                              wire i_deser_mode_done_pulse_tbit ;
    101                                              wire ser_mode_done_mux_out        ;
    102                                              
    103             1                         19     assign ser_mode_done_mux_out = (i_ser_to_par_trans)? i_sdr_ctrl_bit_cnt_done : i_ser_mode_done ;
    104                                              
    105             1                         65     always@(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n)
    106                                                  begin
    107                                                      if (!i_sdr_ctrl_rst_n) 
    108                                                          begin
    109             1                          1                     i_ser_mode_done_prev   <= 1'b0 ;
    110             1                          1                     i_deser_mode_done_prev <= 1'b0 ;
    111                                                          end
    112                                                      else
    113                                                          begin    
    114             1                         64                     i_ser_mode_done_prev   <= ser_mode_done_mux_out ;
    115             1                         64                     i_deser_mode_done_prev <= i_deser_mode_done     ;
    116                                                          end
    117                                                  end
    118             1                         27     assign i_ser_mode_done_pulse   = ~(i_ser_mode_done_prev)   & ser_mode_done_mux_out ; 
    119             1                         43     assign i_deser_mode_done_pulse = ~(i_deser_mode_done_prev) & i_deser_mode_done     ;  
    120                                                
    121                                                
    122                                              //Pulse from the pulse Generator // need to remove i_
    123                                              reg  i_ser_mode_done_prev3          ;
    124                                              reg  i_deser_mode_done_prev3        ;
    125                                              
    126                                              reg  i_ser_mode_done_prev2          ;
    127                                              reg  i_deser_mode_done_prev2        ;
    128                                              
    129                                              wire i_ser_mode_done_pulse_parity   ;
    130                                              
    131                                              //needs reset.. // to be revised
    132             1                         66     always@(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n)
    133                                                  begin
    134                                                      if (!i_sdr_ctrl_rst_n) 
    135                                                          begin
    136             1                          1                     i_ser_mode_done_prev2   <= 1'b0;
    137             1                          1                     i_ser_mode_done_prev3   <= 1'b0;
    138             1                          1                     i_deser_mode_done_prev2 <= 1'b0;
    139             1                          1                     i_deser_mode_done_prev3 <= 1'b0;
    140                                                          end
    141                                                      else
    142                                                          begin    
    143             1                         65                     i_ser_mode_done_prev2   <= i_ser_mode_done_pulse   ;
    144             1                         65                     i_deser_mode_done_prev2 <= i_deser_mode_done_pulse ;  
    145                                              
    146             1                         65                     i_ser_mode_done_prev3   <= i_ser_mode_done_prev2   ;
    147             1                         65                     i_deser_mode_done_prev3 <= i_deser_mode_done_prev2 ;
    148                                                          end
    149                                                  end
    150                                                  
    151             1                         27     assign i_ser_mode_done_pulse_parity = i_ser_mode_done_prev3   & ~(i_ser_mode_done_pulse)   ;
    152             1                         43     assign i_deser_mode_done_pulse_tbit = i_deser_mode_done_prev3 & ~(i_deser_mode_done_pulse) ;
    153                                                
    154                                              // Pulse for RegFile Read Enable in order to read only 1 frame at a time  // need to remove o_
    155                                              reg o_sdr_ctrl_regf_rd_en;
    156                                              reg o_sdr_ctrl_regf_rd_en_prev;
    157                                                
    158             1                          3     always@(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n )
    159                                                  begin
    160                                                  if (!i_sdr_ctrl_rst_n) 
    161             1                          1           o_sdr_ctrl_regf_rd_en_prev  <= 1'b0;
    162                                                  else    
    163             1                          2           o_sdr_ctrl_regf_rd_en_prev  <=   o_sdr_ctrl_regf_rd_en                               ;  
    164             1                          3           o_sdr_ctrl_regf_rd_en_pulse <= ~(o_sdr_ctrl_regf_rd_en_prev) & o_sdr_ctrl_regf_rd_en ;
    165                                                  end
    166                                                
    167                                              
    168                                              //-- sdr mode main fsm ---------------------------------------------------
    169                                              
    170             1                        371     always @(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n) 
    171                                                begin: sdr_mode_main_fsm
    172                                                  
    173                                                  if (!i_sdr_ctrl_rst_n) 
    174                                                    begin
    175                                                    //-- state  
    176             1                          1             state                        <= SDR_IDLE  ; 
    177                                                    //-- outputs   
    178             1                          1             o_sdr_ctrl_fcnt_en           <= 1'b0      ;
    179             1                          1             o_sdr_ctrl_ser_en            <= 1'b0      ;
    180             1                          1             o_sdr_ctrl_ser_valid         <= 1'b0      ;
    181             1                          1             o_sdr_ctrl_ser_mode          <= 2'b0      ;
    182             1                          1             o_sdr_ctrl_deser_en          <= 1'b0      ;
    183             1                          1             o_sdr_ctrl_cnt_en            <= 1'b0      ;
    184             1                          1             o_sdr_ctrl_pp_od             <= 1'b0      ;
    185             1                          1             o_sdr_ctrl_done              <= 1'b0      ;
    186             1                          1             o_sdr_rx_mode                <= 2'b0      ;
    187             1                          1             o_sdr_ctrl_addr_done         <= 1'b0      ;
    188             1                          1             o_sdr_ctrl_regf_rd_en        <= 1'b0      ;
    189             1                          1             o_sdr_ctrl_regf_wr_en        <= 1'b0      ;  // write enable output to reg file 
    190             1                          1             address_ack_state_flag       <= 1'b0      ;
    191             1                          1             o_sdr_ctrl_rx_cnt_en         <= 1'b0      ;
    192                                                      //o_sdr_ctrl_regf_addr         <= 6'b000000 ; we dont want it to drive the reg file when it is in the idle state and we arent using it 
    193             1                          1             o_sdr_ctrl_rx_valid          <= 1'b0      ;
    194             1                          1             sdr_rx_rd_abort_extend       <= 1'b0      ;
    195             1                          1             o_sdr_ctrl_payload_done      <= 1'b0      ;
    196                                                      //o_sdr_ctrl_scl_idle          <= 1'b0      ;  we dont need to close scl from here but from the main ctrl unit
    197                                                    end
    198                                              
    199                                                  else 
    200                                                    begin
    201                                                      case (state) 
    202                                                        SDR_IDLE:      
    203                                                          begin 
    204             1                        370                   o_sdr_ctrl_fcnt_en           <= 1'b0 ;
    205             1                        370                   o_sdr_ctrl_ser_en            <= 1'b0 ;
    206             1                        370                   o_sdr_ctrl_ser_valid         <= 1'b0 ;
    207             1                        370                   o_sdr_ctrl_ser_mode          <= 2'b0 ;
    208                                                            //o_sdr_ctrl_deser_en          <= 1'b0 ;  we need ser to be on arbitration
    209                                                            //o_sdr_ctrl_cnt_en            <= 1'b0 ;
    210                                                            //o_sdr_ctrl_pp_od             <= 1'b0 ;
    211                                                            //o_sdr_ctrl_done              <= 1'b0 ;
    212                                                            //o_sdr_rx_mode                <= 1'b0 ;
    213                                                            //o_sdr_ctrl_rx_valid          <= 1'b0 ;
    214                                                            //sdr_rx_rd_abort_extend       <= 1'b0 ;
    215                                                            //o_sdr_ctrl_scl_idle          <= 1'b1 ;
    216                                              
    217                                                            if (i_i3c_ctrl_sdr_en)
    218                                                              begin 
    219             1                    ***0***                       state <= ADDRESS ;
    220             1                    ***0***                        o_sdr_ctrl_regf_addr         <=  12'b000000   ; 
    221             1                    ***0***                        o_sdr_ctrl_pp_od       <= 1'b0   ; 
    222                                              
    223                                                              end 
    224                                                            else if (i_sdr_ctrl_ibi_payload_en)
    225                                                              begin 
    226             1                    ***0***                       state <= DATA_IN  ;
    227             1                    ***0***                       o_sdr_ctrl_regf_addr  <= IBI_PAYLOAD_BASE_ADDRESS ; // index 108
    228                                                              end       
    229                                                            else 
    230                                                              begin 
    231             1                        370                       state <= SDR_IDLE  ;
    232                                                              end                   
    233                                                          end 
    234                                              
    235                                                        ADDRESS:      
    236                                                          begin 
    237             1                    ***0***                   o_sdr_ctrl_pp_od       <= 1'b0   ; //Address is driven by OD (not optimized)
    238             1                    ***0***                   o_sdr_ctrl_ser_mode    <= 2'b01  ; //SERIALIZING mode at Tx             
    239             1                    ***0***                   o_sdr_ctrl_ser_en      <= 1'b1   ; //Tx Enable 
    240             1                    ***0***                   o_sdr_ctrl_ser_valid   <= 1'b0   ; //No Data Valid to prevent overwriting the data being serialized
    241             1                    ***0***                   o_sdr_ctrl_cnt_en      <= 1'b1   ; //Bit Counter Enable
    242             1                    ***0***                   o_sdr_ctrl_regf_rd_en  <= 1'b1   ;
    243             1                    ***0***                   address_ack_state_flag <= 1'b1   ;
    244             1                    ***0***                   o_sdr_ctrl_scl_idle    <= 1'b0   ;
    245                                              
    246                                                            /// for arbitration //
    247             1                    ***0***                   o_sdr_ctrl_deser_en <= 1'b1  ; 
    248             1                    ***0***                   o_sdr_rx_mode       <= 2'b10 ;      ///// arbitration 
    249                                              
    250                                              
    251                                                            if (i_sdr_rx_arbitration_lost)
    252                                                              begin 
    253             1                    ***0***                       state                <= SDR_IDLE;
    254             1                    ***0***                       o_sdr_ctrl_regf_addr <= 12'd48;
    255                                                              end
    256                                                            else if (i_ser_mode_done_pulse)
    257                                                              begin 
    258             1                    ***0***                        o_sdr_ctrl_addr_done <= 1'b1    ;
    259             1                    ***0***                        state                <= HANDOFF ;                 
    260                                                              end 
    261                                                            else 
    262                                                              begin
    263             1                    ***0***                        o_sdr_ctrl_addr_done <= 1'b0    ; 
    264             1                    ***0***                        state                <= ADDRESS ;
    265                                                              end 
    266                                                          end 
    267                                                          
    268                                                        HANDOFF:   
    269                                                          begin
    270                                                          if (i_sdr_ctrl_scl_neg_edge && address_ack_state_flag)
    271                                                              begin
    272             1                    ***0***                         o_sdr_ctrl_cnt_en <= 1'b0  ; //Bit Counter Disable
    273             1                    ***0***                         state <= ACK_BIT  ;
    274                                                              end                
    275                                                          else if  (i_sdr_ctrl_scl_neg_edge && !address_ack_state_flag)  
    276                                                              begin    
    277                                                                  if (i_ser_nack_ack) 
    278                                                                      begin
    279             1                    ***0***                                 state <= SDR_IDLE;              //STOP after NACK
    280             1                    ***0***                                 o_sdr_ctrl_scl_idle  <= 1'b1 ;
    281             1                    ***0***                                 o_sdr_ctrl_ser_mode <=  2'b10 ; //STOP mode 
    282             1                    ***0***                                  o_sdr_ctrl_done <= 1'b1;
    283             1                    ***0***                                  o_sdr_ctrl_payload_done <= 1'b1;
    284                                                                      end    
    285                                                                  else
    286                                                                      begin
    287                                                                          if (i_sdr_regf_rx_tx)
    288                                                                              begin
    289             1                    ***0***                                         state                 <= DATA_IN ;          //Receiving Data at Rx
    290             1                    ***0***                                         o_sdr_ctrl_regf_wr_en <= 1'b1      ; // enable reg file to write 
    291             1                    ***0***                                         o_sdr_ctrl_regf_addr  <= 12'b010011 ; // 1st frame to be written in RegFile at index 19 
    292             1                    ***0***                                         o_sdr_ctrl_ser_en            <= 1'b0  ;
    293                                                                              end
    294                                                                          else 
    295                                                                              begin
    296             1                    ***0***                                         state <= SCL_STALLING ;     //Transmitting Data at Tx 
    297                                                                              end
    298                                                                      end
    299                                                              end     
    300                                                          else 
    301                                                              begin 
    302             1                    ***0***                        state <= HANDOFF  ;
    303                                                              end              
    304                                                          end
    305                                                      
    306                                                        SCL_STALLING:   
    307                                                                begin
    308                                                                  if (i_sdr_ctrl_scl_stall_done)  
    309                                                                      begin
    310             1                    ***0***                               state <= DATA_OUT;
    311             1                    ***0***                               o_sdr_ctrl_ser_mode   <= 2'b01 ;   //SERIALIZING mode at Tx
    312                                                                      end                                         
    313                                                                  else
    314                                                                    begin  
    315             1                    ***0***                             o_sdr_ctrl_scl_stall_flag   <= 1'b1      ;  
    316             1                    ***0***                             o_sdr_ctrl_scl_stall_cycles <= 4'd6      ;
    317             1                    ***0***                             o_sdr_ctrl_ser_en           <= 1'b1      ; //Tx Enable
    318             1                    ***0***                             o_sdr_ctrl_regf_rd_en       <= 1'b1      ;
    319             1                    ***0***                             o_sdr_ctrl_regf_addr        <= 12'b000010 ; // 1st frame of data in RegFile at index 2.
    320             1                    ***0***                             state <= SCL_STALLING; //----------added recently
    321                                                                    end                      
    322                                                                end
    323                                                      
    324                                                        ACK_BIT:      
    325                                                          begin             
    326             1                    ***0***                   o_sdr_ctrl_pp_od       <= 1'b0  ; //ACK bit is driven by OD
    327             1                    ***0***                   o_sdr_rx_mode          <= 2'b00 ; //ACK mode at Rx
    328             1                    ***0***                   o_sdr_ctrl_ser_en      <= 1'b0  ; //Tx Disable 
    329                                                            //o_sdr_ctrl_cnt_en      <= 1'b0  ; //Bit Counter Disable
    330             1                    ***0***                   o_sdr_ctrl_rx_cnt_en   <= 1'b0  ; 
    331             1                    ***0***                   o_sdr_ctrl_deser_en    <= 1'b1  ; //Rx Enable 
    332             1                    ***0***                   address_ack_state_flag <= 1'b0  ; 
    333                                                           /* if (i_sdr_regf_rx_tx)               
    334                                                                begin // 1 >> rx
    335                                                                    state <= DATA_IN;                    //Recieving Data at Rx
    336                                                                    
    337                                                                end     
    338                                                            else
    339                                                                begin*/
    340             1                    ***0***                           state <= HANDOFF ; //Transmitting Data at Tx                       
    341                                                                //end     
    342                                                          end
    343                                              
    344                                                        DATA_OUT:      
    345                                                          begin    
    346             1                    ***0***                   o_sdr_ctrl_pp_od      <= 1'b1 ; //DATA is driven by PP     //we need to check the handoff
    347             1                    ***0***                   o_sdr_ctrl_fcnt_en    <= 1'b0 ; //Frame Counter Enable
    348             1                    ***0***                   o_sdr_ctrl_deser_en   <= 1'b0 ; //Rx Disable             
    349             1                    ***0***                   o_sdr_ctrl_ser_valid  <= 1'b0 ; //No Data Valid to prevent overwriting the data being serialized  
    350             1                    ***0***                   o_sdr_ctrl_cnt_en     <= 1'b1 ; //Bit Counter Enable
    351             1                    ***0***                   o_sdr_ctrl_regf_rd_en <= 1'b0 ;
    352                                                            
    353                                                            if (i_ser_mode_done_pulse) 
    354                                                             begin
    355             1                    ***0***                      state <= PARITY_BIT;
    356             1                    ***0***                      o_sdr_ctrl_ser_mode <= 2'b11 ; //PARITY mode at Tx                  
    357                                                             end  
    358                                                           else
    359                                                             begin
    360             1                    ***0***                      state <= DATA_OUT; 
    361                                                             end                
    362                                                         
    363                                                          end 
    364                                              
    365                                                        DATA_IN:      
    366                                                          begin
    367             1                    ***0***                   o_sdr_rx_mode                <= 2'b01 ;
    368             1                    ***0***                   o_sdr_ctrl_fcnt_en           <= 1'b0  ;
    369             1                    ***0***                   o_sdr_ctrl_ser_en            <= 1'b0  ;
    370             1                    ***0***                   o_sdr_ctrl_deser_en          <= 1'b1  ;
    371             1                    ***0***                   o_sdr_ctrl_pp_od             <= 1'b1  ;
    372             1                    ***0***                   o_sdr_ctrl_cnt_en            <= 1'b1  ; //Bit Counter Enable
    373             1                    ***0***                   o_sdr_ctrl_rx_cnt_en         <= 1'b1  ; // rx counter enable 
    374             1                    ***0***                   o_sdr_ctrl_regf_wr_en        <= 1'b0  ;
    375             1                    ***0***                   o_sdr_ctrl_rx_valid          <= 1'b0  ;    
    376                                              
    377                                                            if (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)//(i_deser_mode_done_pulse && i_sdr_ctrl_scl_neg_edge)  //(i_deser_mode_done_prev3)  
    378                                                              begin 
    379             1                    ***0***                         o_sdr_ctrl_rx_valid <= 1'b1 ;
    380             1                    ***0***                         state <= T_BIT;
    381                                                              end 
    382                                                            else 
    383                                                              begin
    384             1                    ***0***                       state <= DATA_IN; 
    385                                                              end 
    386                                                          end
    387                                              
    388                                                        T_BIT:      
    389                                                          begin
    390             1                    ***0***                   o_sdr_rx_mode                <= 2'b11 ;
    391             1                    ***0***                   o_sdr_ctrl_fcnt_en           <= 1'b1  ;
    392             1                    ***0***                   o_sdr_ctrl_ser_en            <= 1'b0  ;
    393             1                    ***0***                   o_sdr_ctrl_ser_valid         <= 1'b0  ;
    394             1                    ***0***                   o_sdr_ctrl_deser_en          <= 1'b1  ;
    395             1                    ***0***                   o_sdr_ctrl_cnt_en            <= 1'b0  ;
    396             1                    ***0***                   o_sdr_ctrl_rx_cnt_en         <= 1'b0  ;
    397             1                    ***0***                   o_sdr_ctrl_pp_od             <= 1'b1  ;
    398             1                    ***0***                   o_sdr_ctrl_rx_valid          <= 1'b0  ;
    399             1                    ***0***                   sdr_rx_rd_abort_extend       <= i_sdr_rx_rd_abort ;
    400                                                                          
    401                                                            if (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)
    402                                                              begin
    403                                                                if (sdr_rx_rd_abort_extend) 
    404                                                                  begin 
    405             1                    ***0***                         state <= SDR_IDLE ;
    406             1                    ***0***                         o_sdr_ctrl_done      <= 1'b1;
    407             1                    ***0***                         o_sdr_ctrl_regf_wr_en <= 1'b1;
    408             1                    ***0***                         o_sdr_ctrl_ser_en      <=  1'b0 ; 
    409             1                    ***0***                         o_sdr_ctrl_pp_od       <= 1'b1 ;
    410             1                    ***0***                         sdr_rx_rd_abort_extend <= 1'b0 ;
    411             1                    ***0***                         o_sdr_ctrl_payload_done <= 1'b1;
    412                                                                  end 
    413                                                                else 
    414                                                                  begin 
    415             1                    ***0***                           state <= DATA_IN;
    416             1                    ***0***                           o_sdr_ctrl_regf_wr_en <= 1'b1;
    417             1                    ***0***                           o_sdr_ctrl_regf_addr  <= o_sdr_ctrl_regf_addr + 1'b1 ;
    418                                                                  end 
    419                                                              end
    420                                                            else 
    421                                                              begin 
    422             1                    ***0***                       state <= T_BIT;
    423                                                              end 
    424                                              
    425                                                          end       
    426                                              
    427                                                        PARITY_BIT:      
    428                                                          begin
    429             1                    ***0***                   o_sdr_ctrl_pp_od        <= 1'b1  ; //DATA is driven by PP     //we need to check the handoff       
    430             1                    ***0***                   o_sdr_ctrl_fcnt_en      <= 1'b0  ; //Frame Counter Disable
    431             1                    ***0***                   o_sdr_ctrl_ser_en       <= 1'b1  ; //Tx Enable
    432             1                    ***0***                   o_sdr_ctrl_cnt_en       <= 1'b0  ; //Bit Counter Disable
    433                                                            
    434                                                            
    435                                                            if (i_ser_mode_done_pulse_parity) //(i_ser_mode_done && i_sdr_ctrl_scl_pos_edge ) Edit by Zyad
    436                                                             begin
    437                                                               if(i_sdr_ctrl_last_frame) 
    438                                                                 begin
    439             1                    ***0***                          state <= SDR_IDLE;   //End Write Data Operation
    440             1                    ***0***                          o_sdr_ctrl_deser_en          <= 1'b0     ;
    441             1                    ***0***                          o_sdr_ctrl_ser_en            <=  1'b1  ; //Tx Enable
    442             1                    ***0***                          o_sdr_ctrl_pp_od       <= 1'b1 ;
    443             1                    ***0***                          sdr_rx_rd_abort_extend <= 1'b0 ;
    444             1                    ***0***                          o_sdr_ctrl_payload_done <= 1'b1;
    445             1                    ***0***                          o_sdr_ctrl_done <= 1'b1;
    446                                                                 end
    447                                                               else
    448                                                                 begin
    449             1                    ***0***                          state <= DATA_OUT;   //Write another Frame                
    450             1                    ***0***                          o_sdr_ctrl_ser_mode   <= 2'b01; //SERIALIZING mode at Tx
    451             1                    ***0***                          o_sdr_ctrl_regf_rd_en   <= 1'b1  ; 
    452             1                    ***0***                          o_sdr_ctrl_regf_addr <= o_sdr_ctrl_regf_addr + 1'b1; //increment the address to Read the next data frame from RegFile
    453                                                                 end
    454                                                             end  
    455                                                            else
    456                                                             begin
    457             1                    ***0***                      state <= PARITY_BIT; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        146        44       102    30.13%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sdr_mode --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                            address_ack_state_flag           0           0        0.00 
                                 i_deser_mode_done           1           1      100.00 
                            i_deser_mode_done_prev           1           1      100.00 
                           i_deser_mode_done_prev2           1           1      100.00 
                           i_deser_mode_done_prev3           1           1      100.00 
                           i_deser_mode_done_pulse           1           1      100.00 
                      i_deser_mode_done_pulse_tbit           1           1      100.00 
                                 i_i3c_ctrl_sdr_en           0           0        0.00 
                           i_sdr_ctrl_bit_cnt_done           1           1      100.00 
                                    i_sdr_ctrl_clk           1           1      100.00 
                               i_sdr_ctrl_cnt_done           1           1      100.00 
                         i_sdr_ctrl_ibi_payload_en           0           0        0.00 
                             i_sdr_ctrl_last_frame           0           0        0.00 
                                  i_sdr_ctrl_rst_n           1           1      100.00 
                           i_sdr_ctrl_scl_neg_edge           1           1      100.00 
                           i_sdr_ctrl_scl_pos_edge           1           1      100.00 
                         i_sdr_ctrl_scl_stall_done           1           1      100.00 
                                  i_sdr_regf_rx_tx           0           0        0.00 
                         i_sdr_rx_arbitration_lost           0           0        0.00 
                                 i_sdr_rx_rd_abort           0           0        0.00 
                                   i_ser_mode_done           1           1      100.00 
                              i_ser_mode_done_prev           1           1      100.00 
                             i_ser_mode_done_prev2           1           1      100.00 
                             i_ser_mode_done_prev3           1           1      100.00 
                             i_ser_mode_done_pulse           1           1      100.00 
                      i_ser_mode_done_pulse_parity           1           1      100.00 
                                    i_ser_nack_ack           1           1      100.00 
                                i_ser_to_par_trans           1           1      100.00 
                              o_sdr_ctrl_addr_done           0           0        0.00 
                                 o_sdr_ctrl_cnt_en           0           0        0.00 
                               o_sdr_ctrl_deser_en           0           0        0.00 
                                   o_sdr_ctrl_done           0           0        0.00 
                                o_sdr_ctrl_fcnt_en           0           0        0.00 
                           o_sdr_ctrl_payload_done           0           0        0.00 
                                  o_sdr_ctrl_pp_od           0           0        0.00 
                        o_sdr_ctrl_regf_addr[11-0]           0           0        0.00 
                             o_sdr_ctrl_regf_rd_en           0           0        0.00 
                        o_sdr_ctrl_regf_rd_en_prev           0           0        0.00 
                       o_sdr_ctrl_regf_rd_en_pulse           0           0        0.00 
                             o_sdr_ctrl_regf_wr_en           0           0        0.00 
                              o_sdr_ctrl_rx_cnt_en           0           0        0.00 
                               o_sdr_ctrl_rx_valid           0           0        0.00 
                               o_sdr_ctrl_scl_idle           0           0        0.00 
                  o_sdr_ctrl_scl_stall_cycles[3-0]           0           0        0.00 
                         o_sdr_ctrl_scl_stall_flag           0           0        0.00 
                                 o_sdr_ctrl_ser_en           0           0        0.00 
                          o_sdr_ctrl_ser_mode[2-0]           0           0        0.00 
                              o_sdr_ctrl_ser_valid           0           0        0.00 
                                o_sdr_rx_mode[2-0]           0           0        0.00 
                            sdr_rx_rd_abort_extend           0           0        0.00 
                             ser_mode_done_mux_out           1           1      100.00 
                                        state[3-0]           0           0        0.00 

Total Node Count     =         73 
Toggled Node Count   =         22 
Untoggled Node Count =         51 

Toggle Coverage      =      30.13% (44 of 146 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_i2c_legacy_mode
=== Design Unit: work.i2c_legacy_mode
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        37         5        32    13.51%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i2c_legacy_mode

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File i2c_legacy_mode.v
------------------------------------IF Branch------------------------------------
    82                                       198     Count coming in to IF
    82              1                          1         if (!i_rst_n) 
    101             1                        197         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    103                                      197     Count coming in to IF
    103             1                        197                 if (!i_i2c_mode_en)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------CASE Branch------------------------------------
    107                                      197     Count coming in to CASE
    108             1                        197                 I2C_IDLE:
    143             1                    ***0***                 ADDRESS:
    168             1                    ***0***                 TRGT_ACK:
    242             1                    ***0***                 DATA_OUT:
    261             1                    ***0***                 DATA_IN:
    283             1                    ***0***                 CTRL_ACK:
                                         ***0***     All False Count
Branch totals: 1 hit of 7 branches = 14.28%

------------------------------------IF Branch------------------------------------
    125                                      197     Count coming in to IF
    125             1                    ***0***                         if (i_i2c_mode_en && !i2c_mode_en_prev ) 
    138             1                        197                         else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    147                                  ***0***     Count coming in to IF
    147             1                    ***0***                         if (i_tx_mode_done && i_scl_neg_edge)
    157             1                    ***0***                         else if (i_rx_arbitration_lost)
    163             1                    ***0***                          else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    170                                  ***0***     Count coming in to IF
    170             1                    ***0***                         if (i_rx_mode_done && i_scl_neg_edge)
    237             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    174                                  ***0***     Count coming in to IF
    174             1                    ***0***                                 if (i_rx_nack_ack)
    186             1                    ***0***                                 else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    188                                  ***0***     Count coming in to IF
    188             1                    ***0***                                         if (addr_data_ack)  //TRGT_ACK AFTER ADDRESS
    211             1                    ***0***                                         else                //TRGT_ACK AFTER DATA_OUT
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    190                                  ***0***     Count coming in to IF
    190             1                    ***0***                                                 if (i_regf_rx_tx)
    200             1                    ***0***                                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    213                                  ***0***     Count coming in to IF
    213             1                    ***0***                                                 if (i_last_frame)
    224             1                    ***0***                                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    245                                  ***0***     Count coming in to IF
    245             1                    ***0***                         if (i_tx_mode_done && i_scl_neg_edge)
    256             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    263                                  ***0***     Count coming in to IF
    263             1                    ***0***                         if (i_rx_mode_done && i_scl_neg_edge)
    278             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    268                                  ***0***     Count coming in to CASE
    269             1                    ***0***                                 1'b0: o_tx_mode <= 3'b111   ; //CTRL_ACK MODE
    270             1                    ***0***                                 1'b1: o_tx_mode <= 3'b101   ; //CTRL_NACK MODE
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    287                                  ***0***     Count coming in to IF
    287             1                    ***0***                         if (i_tx_mode_done && i_scl_neg_edge )
    314             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    290                                  ***0***     Count coming in to IF
    290             1                    ***0***                                 if (i_last_frame)
    301             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      12         0        12     0.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i2c_legacy_mode --

  File i2c_legacy_mode.v
----------------Focused Condition View-------------------
Line       125 Item    1  (i_i2c_mode_en && ~i2c_mode_en_prev)
Condition totals: 0 of 2 input terms covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
     i_i2c_mode_en         N  '_1' not hit             Hit '_1'
  i2c_mode_en_prev         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_i2c_mode_en_0       -                             
  Row   2:    ***0***  i_i2c_mode_en_1       ~i2c_mode_en_prev             
  Row   3:    ***0***  i2c_mode_en_prev_0    i_i2c_mode_en                 
  Row   4:    ***0***  i2c_mode_en_prev_1    i_i2c_mode_en                 

----------------Focused Condition View-------------------
Line       147 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0      -                             
  Row   2:    ***0***  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_tx_mode_done                

----------------Focused Condition View-------------------
Line       170 Item    1  (i_rx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_rx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_rx_mode_done                

----------------Focused Condition View-------------------
Line       245 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0      -                             
  Row   2:    ***0***  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_tx_mode_done                

----------------Focused Condition View-------------------
Line       263 Item    1  (i_rx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_rx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_rx_mode_done                

----------------Focused Condition View-------------------
Line       287 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0      -                             
  Row   2:    ***0***  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_tx_mode_done                


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       6         1         5    16.66%
    FSM Transitions                 12         0        12     0.00%

================================FSM Details================================

FSM Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i2c_legacy_mode --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 108            I2C_IDLE                   0
 143             ADDRESS                   1
 168            TRGT_ACK                   3
 242            DATA_OUT                   2
 261             DATA_IN                   7
 283            CTRL_ACK                   6
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                I2C_IDLE                 198          
    Uncovered States :
    ------------------
                   State
                   -----
                 ADDRESS
                TRGT_ACK
                DATA_OUT
                 DATA_IN
                CTRL_ACK
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 136                   0          I2C_IDLE -> ADDRESS 
 161                   1          ADDRESS -> I2C_IDLE 
 155                   2          ADDRESS -> TRGT_ACK 
 232                   3          TRGT_ACK -> DATA_OUT
 222                   4          TRGT_ACK -> I2C_IDLE
 198                   5          TRGT_ACK -> DATA_IN 
 254                   6          DATA_OUT -> TRGT_ACK
 105                   7          DATA_OUT -> I2C_IDLE
 275                   8          DATA_IN -> CTRL_ACK 
 105                   9          DATA_IN -> I2C_IDLE 
 311                  10          CTRL_ACK -> DATA_IN 
 299                  11          CTRL_ACK -> I2C_IDLE


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   6         1         5    16.66%
        FSM Transitions             12         0        12     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     131        30       101    22.90%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i2c_legacy_mode --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File i2c_legacy_mode.v
    33                                               module i2c_legacy_mode(
    34                                                   input  wire          i_clk                  , //System Clock 50 MHz
    35                                                   input  wire          i_rst_n                , //System Active Low Reset
    36                                                   input  wire          i_i2c_mode_en          , //I2C Legacy Mode Enable-Flag from I3C Engine
    37                                                   input  wire          i_last_frame           , //Last Frame Flag from Frame Counter
    38                                                   input  wire          i_tx_mode_done         , //Tx Current Mode Done-Flag 
    39                                                   input  wire          i_rx_mode_done         , //Rx Current Mode Done-Flag
    40                                                   input  wire          i_regf_rx_tx           , //RnW from RegFile 1 >> Rx , 0 >> Tx 
    41                                                   input  wire          i_rx_nack_ack          , // 1 >> NACK , 0 >> ACK 
    42                                                   input  wire          i_rx_arbitration_lost  ,
    43                                                   input  wire          i_scl_neg_edge         ,
    44                                                   input  wire          i_scl_pos_edge         , 
    45                                                   output reg           o_frame_cnt_en         , //Frames Counter Enable-Flag
    46                                                   output reg           o_bit_cnt_en           , //Bits Counter Enable-Flag
    47                                                   output reg           o_bit_rx_cnt_en        , //Bits Counter Enable-Flag for Rx Deserializing (DATA_IN)
    48                                                   output reg           o_tx_en                , //Tx Enable-Flag
    49                                                   output reg   [2:0]   o_tx_mode              , //Tx Current Mode Selector
    50                                                   output reg           o_rx_en                , //Rx Enable-Flag
    51                                                   output reg   [2:0]   o_rx_mode              , //Rx Current Mode Selector
    52                                                   output reg           o_pp_od                , //Push-Pull/Open-Drain Selector (Always = 0 in I2C)
    53                                                   output reg           o_regf_rd_en           , //RegFile Read Enable-Flag
    54                                                   output reg   [11:0]   o_regf_addr            , //RegFile Read/Write Address
    55                                                   output reg           o_rx_data_valid        , //Received Data Valid-Flag for Host Interface
    56                                                   output reg           o_target_nack          , //Error-Flag for I3C Engine (Target doesn't ACK)
    57                                                   output reg           o_i2c_mode_done          //I2C Legacy Mode Done-Flag for I3C Engine
    58                                                   );
    59                                               
    60                                               
    61                                               //-- states encoding in gray --------------------------------------------
    62                                               
    63                                               localparam I2C_IDLE         = 3'b000 ; 
    64                                               localparam ADDRESS          = 3'b001 ;
    65                                               localparam TRGT_ACK         = 3'b011 ;
    66                                               localparam DATA_OUT         = 3'b010 ;
    67                                               localparam CTRL_ACK         = 3'b110 ;
    68                                               localparam DATA_IN          = 3'b111 ;
    69                                               
    70                                               
    71                                               //-- internal wires declaration -----------------------------------------
    72                                               
    73                                               reg [2:0] state         ;
    74                                               reg       addr_data_ack ;  //Flag to state whether the TRGT_ACK is coming after ADDRESS or DATA_OUT
    75                                               reg       i2c_mode_en_prev ;  
    76                                               
    77                                               
    78                                               //-- i2c legacy mode fsm ------------------------------------------------
    79                                               
    80              1                        198     always @(posedge i_clk or negedge i_rst_n) 
    81                                                   begin
    82                                                   if (!i_rst_n) 
    83                                                       begin
    84              1                          1                 o_frame_cnt_en  <= 1'b0      ;
    85              1                          1                 o_bit_cnt_en    <= 1'b0      ;
    86              1                          1                 o_bit_rx_cnt_en <= 1'b0      ;
    87              1                          1                 o_tx_en         <= 1'b0      ;
    88              1                          1                 o_tx_mode       <= 3'b000    ;
    89              1                          1                 o_rx_en         <= 1'b0      ;
    90              1                          1                 o_rx_mode       <= 2'b00     ;
    91              1                          1                 o_pp_od         <= 1'b0      ;
    92              1                          1                 o_regf_rd_en    <= 1'b0      ;
    93              1                          1                 o_regf_addr     <= 12'b000000 ;   
    94              1                          1                 o_rx_data_valid <= 1'b0      ;
    95              1                          1                 o_target_nack   <= 1'b1      ;  
    96              1                          1                 o_i2c_mode_done <= 1'b0      ;
    97              1                          1                 addr_data_ack   <= 1'b0      ;  
    98              1                          1                 i2c_mode_en_prev <= 1'b1     ; 
    99              1                          1                 state           <= I2C_IDLE  ;   
    100                                                      end
    101                                                  else
    102                                                      begin
    103                                                          if (!i_i2c_mode_en)
    104                                                              begin
    105             1                        197                         state <= I2C_IDLE ; //supporting immediate i2c_disable for all states
    106                                                              end
    107                                                          case (state)
    108                                                          I2C_IDLE:
    109                                                              begin
    110             1                        197                         o_frame_cnt_en  <= 1'b0      ;
    111                                                                  //o_bit_cnt_en    <= 1'b0      ;
    112                                                                  //o_bit_rx_cnt_en <= 1'b0      ;
    113             1                        197                         o_tx_en         <= 1'b0      ;
    114             1                        197                         o_tx_mode       <= 3'b000    ;
    115             1                        197                         o_rx_en         <= 1'b1      ; // as we need it enabled at arbitration
    116             1                        197                         o_pp_od         <= 1'b0      ;
    117             1                        197                         o_regf_rd_en    <= 1'b0      ;
    118                                                                  //o_regf_addr     <= 6'b000000 ;   
    119             1                        197                         o_rx_data_valid <= 1'b0      ;  
    120             1                        197                         o_target_nack   <= 1'b1      ; 
    121             1                        197                         o_i2c_mode_done <= 1'b0      ;
    122             1                        197                         addr_data_ack   <= 1'b0      ; 
    123             1                        197                         i2c_mode_en_prev <= i_i2c_mode_en ;  
    124                                              
    125                                                                  if (i_i2c_mode_en && !i2c_mode_en_prev ) 
    126                                                                      begin
    127             1                    ***0***                                 o_bit_cnt_en    <= 1'b1      ;
    128             1                    ***0***                                 o_tx_en         <= 1'b1      ;
    129             1                    ***0***                                 o_tx_mode       <= 3'b001    ; //SERIALIZING MODE
    130             1                    ***0***                                 o_regf_rd_en    <= 1'b1      ;
    131             1                    ***0***                                 o_regf_addr     <= 12'b000000 ;  //TBD After Register File Locations Management
    132                                              
    133                                                                          //// Arbitration signals //////
    134             1                    ***0***                                 o_rx_en         <= 1'b1      ; 
    135             1                    ***0***                                 o_rx_mode       <= 2'b10     ; // ARBITRATION mode
    136             1                    ***0***                                 state           <= ADDRESS   ;
    137                                                                      end
    138                                                                  else 
    139                                                                      begin
    140             1                        197                                 state <= I2C_IDLE ;
    141                                                                      end
    142                                                              end
    143                                                          ADDRESS:
    144                                                              begin
    145             1                    ***0***                         o_regf_rd_en <= 1'b0 ;
    146                                              
    147                                                                  if (i_tx_mode_done && i_scl_neg_edge)
    148                                                                      begin
    149             1                    ***0***                                 o_bit_cnt_en    <= 1'b0      ;
    150             1                    ***0***                                 o_tx_en         <= 1'b0      ;
    151             1                    ***0***                                 o_tx_mode       <= 3'b000    ;
    152             1                    ***0***                                 o_rx_en         <= 1'b1      ;
    153             1                    ***0***                                 o_rx_mode       <= 2'b00     ; //ACK MODE
    154             1                    ***0***                                 addr_data_ack   <= 1'b1      ; //Acknowledge to Address
    155             1                    ***0***                                 state           <= TRGT_ACK  ;
    156                                                                      end
    157                                                                  else if (i_rx_arbitration_lost)
    158                                                                    begin 
    159             1                    ***0***                             o_i2c_mode_done <= 1'b1        ;
    160             1                    ***0***                             o_regf_addr     <= 'd48        ;
    161             1                    ***0***                             state           <=  I2C_IDLE   ;
    162                                                                   end
    163                                                                   else
    164                                                                      begin
    165             1                    ***0***                                 state <= ADDRESS ;
    166                                                                      end
    167                                                              end
    168                                                          TRGT_ACK:
    169                                                              begin
    170                                                                  if (i_rx_mode_done && i_scl_neg_edge)
    171                                                                      begin
    172             1                    ***0***                                 o_frame_cnt_en  <= 1'b1 ;
    173             1                    ***0***                                 o_bit_cnt_en    <= 1'b1 ;
    174                                                                          if (i_rx_nack_ack)
    175                                                                              begin
    176             1                    ***0***                                         o_frame_cnt_en  <= 1'b0     ;
    177             1                    ***0***                                         o_bit_cnt_en    <= 1'b0     ;
    178             1                    ***0***                                         o_tx_en         <= 1'b0     ;
    179             1                    ***0***                                         o_tx_mode       <= 3'b000   ;
    180             1                    ***0***                                         o_rx_en         <= 1'b0     ;
    181             1                    ***0***                                         o_rx_mode       <= 2'b00    ;
    182             1                    ***0***                                         o_target_nack   <= 1'b1     ;
    183             1                    ***0***                                         o_i2c_mode_done <= 1'b1     ;
    184             1                    ***0***                                         state           <= I2C_IDLE ; 
    185                                                                              end
    186                                                                          else 
    187                                                                              begin
    188                                                                                  if (addr_data_ack)  //TRGT_ACK AFTER ADDRESS
    189                                                                                      begin
    190                                                                                          if (i_regf_rx_tx)
    191                                                                                              begin
    192             1                    ***0***                                                         o_tx_en         <= 1'b0      ;
    193             1                    ***0***                                                         o_tx_mode       <= 3'b000    ;
    194             1                    ***0***                                                         o_rx_en         <= 1'b1      ;
    195             1                    ***0***                                                         o_rx_mode       <= 2'b01     ; //DESERIALIZING MODE
    196             1                    ***0***                                                         o_bit_rx_cnt_en <= 1'b1      ; //Counting under Rx Conditions
    197             1                    ***0***                                                         o_regf_addr     <= 12'b010011 ; // 1st frame to be written in RegFile at index 19 
    198             1                    ***0***                                                         state           <= DATA_IN   ; 
    199                                                                                              end
    200                                                                                          else
    201                                                                                              begin
    202             1                    ***0***                                                         o_tx_en      <= 1'b1      ;
    203             1                    ***0***                                                         o_tx_mode    <= 3'b001    ; //SERIALIZING MODE
    204             1                    ***0***                                                         o_rx_en      <= 1'b0      ;
    205             1                    ***0***                                                         o_rx_mode    <= 2'b00     ;
    206             1                    ***0***                                                         o_regf_rd_en <= 1'b1      ;
    207             1                    ***0***                                                         o_regf_addr  <= 12'b000010 ; // 1st frame of data in RegFile at index 2.
    208             1                    ***0***                                                         state        <= DATA_OUT  ;
    209                                                                                              end                            
    210                                                                                      end
    211                                                                                  else                //TRGT_ACK AFTER DATA_OUT
    212                                                                                      begin
    213                                                                                          if (i_last_frame)
    214                                                                                              begin
    215             1                    ***0***                                                         o_frame_cnt_en  <= 1'b0               ;
    216             1                    ***0***                                                         o_bit_cnt_en    <= 1'b0               ;
    217             1                    ***0***                                                         o_tx_en         <= 1'b0               ;
    218             1                    ***0***                                                         o_tx_mode       <= 3'b000             ;
    219             1                    ***0***                                                         o_rx_en         <= 1'b0               ;
    220             1                    ***0***                                                         o_rx_mode       <= 2'b00              ;
    221             1                    ***0***                                                         o_i2c_mode_done <= 1'b1               ;
    222             1                    ***0***                                                         state           <= I2C_IDLE           ; 
    223                                                                                              end
    224                                                                                          else
    225                                                                                              begin
    226             1                    ***0***                                                         o_tx_en         <= 1'b1               ;
    227             1                    ***0***                                                         o_tx_mode       <= 3'b001             ; //SERIALIZING MODE
    228             1                    ***0***                                                         o_rx_en         <= 1'b0               ;
    229             1                    ***0***                                                         o_rx_mode       <= 2'b00              ;
    230             1                    ***0***                                                         o_regf_rd_en    <= 1'b1               ;
    231             1                    ***0***                                                         o_regf_addr     <= o_regf_addr + 1'b1 ;
    232             1                    ***0***                                                         state           <= DATA_OUT           ;
    233                                                                                              end                            
    234                                                                                      end
    235                                                                              end
    236                                                                      end
    237                                                                  else
    238                                                                      begin
    239             1                    ***0***                                 state <= TRGT_ACK ;
    240                                                                      end
    241                                                              end
    242                                                          DATA_OUT:
    243                                                              begin
    244             1                    ***0***                         o_regf_rd_en <= 1'b0 ;
    245                                                                  if (i_tx_mode_done && i_scl_neg_edge)
    246                                                                      begin
    247             1                    ***0***                                 o_frame_cnt_en  <= 1'b0     ;
    248             1                    ***0***                                 o_bit_cnt_en    <= 1'b0     ;
    249             1                    ***0***                                 o_tx_en         <= 1'b0     ;
    250             1                    ***0***                                 o_tx_mode       <= 3'b000   ;
    251             1                    ***0***                                 o_rx_en         <= 1'b1     ;
    252             1                    ***0***                                 o_rx_mode       <= 2'b00    ; //ACK MODE
    253             1                    ***0***                                 addr_data_ack   <= 1'b0     ; //Acknowledge to Wr_Data
    254             1                    ***0***                                 state           <= TRGT_ACK ;
    255                                                                      end
    256                                                                  else
    257                                                                      begin
    258             1                    ***0***                                 state <= DATA_OUT ;
    259                                                                      end
    260                                                              end
    261                                                          DATA_IN:
    262                                                              begin
    263                                                                  if (i_rx_mode_done && i_scl_neg_edge)
    264                                                                      begin
    265             1                    ***0***                                 o_frame_cnt_en  <= 1'b0     ;
    266             1                    ***0***                                 o_bit_cnt_en    <= 1'b0     ;
    267             1                    ***0***                                 o_tx_en         <= 1'b1     ;
    268                                                                          case (i_last_frame)
    269             1                    ***0***                                 1'b0: o_tx_mode <= 3'b111   ; //CTRL_ACK MODE
    270             1                    ***0***                                 1'b1: o_tx_mode <= 3'b101   ; //CTRL_NACK MODE
    271                                                                          endcase
    272             1                    ***0***                                 o_rx_en         <= 1'b0     ;
    273             1                    ***0***                                 o_rx_mode       <= 2'b00    ;
    274             1                    ***0***                                 addr_data_ack   <= 1'b0     ;
    275             1                    ***0***                                 state           <= CTRL_ACK ;
    276             1                    ***0***                                 o_rx_data_valid <= 1'b1 ;
    277                                                                      end
    278                                                                  else
    279                                                                      begin
    280             1                    ***0***                                 state <= DATA_IN ;
    281                                                                      end  
    282                                                              end
    283                                                          CTRL_ACK:
    284                                                              begin
    285                                              
    286             1                    ***0***                         o_rx_data_valid <= 1'b0 ;
    287                                                                  if (i_tx_mode_done && i_scl_neg_edge )
    288                                              
    289                                                                      begin
    290                                                                          if (i_last_frame)
    291                                                                              begin
    292             1                    ***0***                                         o_frame_cnt_en  <= 1'b0               ;
    293             1                    ***0***                                         o_bit_cnt_en    <= 1'b0               ;
    294             1                    ***0***                                         o_tx_en         <= 1'b0               ;
    295             1                    ***0***                                         o_tx_mode       <= 3'b000             ;
    296             1                    ***0***                                         o_rx_en         <= 1'b0               ;
    297             1                    ***0***                                         o_rx_mode       <= 2'b00              ;
    298             1                    ***0***                                         o_i2c_mode_done <= 1'b1               ;
    299             1                    ***0***                                         state           <= I2C_IDLE           ; 
    300                                                                              end
    301                                                                          else
    302                                                                              begin
    303             1                    ***0***                                         o_frame_cnt_en  <= 1'b1               ;
    304             1                    ***0***                                         o_bit_cnt_en    <= 1'b1               ;
    305             1                    ***0***                                         o_bit_rx_cnt_en <= 1'b1               ; //Counting under Rx Conditions
    306             1                    ***0***                                         o_tx_en         <= 1'b0               ;
    307             1                    ***0***                                         o_tx_mode       <= 3'b000             ;
    308             1                    ***0***                                         o_rx_en         <= 1'b1               ;
    309             1                    ***0***                                         o_rx_mode       <= 2'b01              ; //DESERIALIZING MODE
    310             1                    ***0***                                         o_regf_addr     <= o_regf_addr + 1'b1 ;
    311             1                    ***0***                                         state           <= DATA_IN            ;
    312                                                                              end  
    313                                                                      end
    314                                                                  else
    315                                                                      begin
    316             1                    ***0***                                 state <= CTRL_ACK ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         88        16        72    18.18%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i2c_legacy_mode --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     addr_data_ack           0           0        0.00 
                                  i2c_mode_en_prev           1           0       50.00 
                                             i_clk           1           1      100.00 
                                     i_i2c_mode_en           0           0        0.00 
                                      i_last_frame           0           0        0.00 
                                      i_regf_rx_tx           0           0        0.00 
                                           i_rst_n           1           1      100.00 
                             i_rx_arbitration_lost           0           0        0.00 
                                    i_rx_mode_done           1           1      100.00 
                                     i_rx_nack_ack           1           1      100.00 
                                    i_scl_neg_edge           1           1      100.00 
                                    i_scl_pos_edge           1           1      100.00 
                                    i_tx_mode_done           1           1      100.00 
                                      o_bit_cnt_en           0           0        0.00 
                                   o_bit_rx_cnt_en           0           0        0.00 
                                    o_frame_cnt_en           0           0        0.00 
                                   o_i2c_mode_done           0           0        0.00 
                                           o_pp_od           0           0        0.00 
                                 o_regf_addr[11-0]           0           0        0.00 
                                      o_regf_rd_en           0           0        0.00 
                                   o_rx_data_valid           0           0        0.00 
                                           o_rx_en           0           1       50.00 
                                    o_rx_mode[2-0]           0           0        0.00 
                                     o_target_nack           0           0        0.00 
                                           o_tx_en           0           0        0.00 
                                    o_tx_mode[2-0]           0           0        0.00 
                                        state[2-0]           0           0        0.00 

Total Node Count     =         44 
Toggled Node Count   =          7 
Untoggled Node Count =         37 

Toggle Coverage      =      18.18% (16 of 88 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_daa
=== Design Unit: work.dynamic_address_assignment
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        53         4        49     7.54%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_daa

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File dynamic_address_assignment.v
------------------------------------IF Branch------------------------------------
    97                                       202     Count coming in to IF
    97              1                          1             if (!i_daa_rst_n)
    121             1                        201             else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    123                                      201     Count coming in to CASE
    124             1                        201                         DAA_IDLE:
    150             1                    ***0***                         START:
    171             1                    ***0***                         BROADCAST:
    207             1                    ***0***                         ACK: //REVISE CODE APPROACH
    299             1                    ***0***                         ENTDAA:
    326             1                    ***0***                         PARITY:
    349             1                    ***0***                          READ_DATA:
    384             1                    ***0***                          DAA:
    407             1                    ***0***                          FINISH:
                                         ***0***     All False Count
Branch totals: 1 hit of 10 branches = 10.00%

------------------------------------IF Branch------------------------------------
    126                                      201     Count coming in to IF
    126             1                    ***0***                               if (i_mcu_daa_en)
    145             1                        201                               else
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    162                                  ***0***     Count coming in to IF
    162             1                    ***0***                                 if (i_scl_daa_neg_edge && i_tx_daa_mode_done)
    166             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    174                                  ***0***     Count coming in to IF
    174             1                    ***0***                                 if (i_scl_daa_neg_edge && i_tx_daa_mode_done) 
    181             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    186                                  ***0***     Count coming in to IF
    186             1                    ***0***                                 if(daa_mode) 
    196             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    211                                  ***0***     Count coming in to IF
    211             1                    ***0***                                 if(i_rx_daa_mode_done && i_scl_daa_neg_edge)
    294             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    214                                  ***0***     Count coming in to IF
    214             1                    ***0***                                         if(daa_mode)
    274             1                    ***0***                                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    217                                  ***0***     Count coming in to IF
    217             1                    ***0***                                                 if(par_to_ack)
    252             1                    ***0***                                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    219                                  ***0***     Count coming in to IF
    219             1                    ***0***                                                         if(i_rx_daa_nack_ack) //NACK AFTER PARITY OF ASSIGNED ADDRESS ----------- 2024 note : 1 for NACK 0 for ACK
    234             1                    ***0***                                                         else //ACK AFTER PARITY OF ASSIGNED ADDRESS
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    222                                  ***0***     Count coming in to IF
    222             1                    ***0***                                                                 if(nacks_counter == 2'b10)
    228             1                    ***0***                                                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    239                                  ***0***     Count coming in to IF
    239             1                    ***0***                                                                 if(addresses_count == 6'b0)
    244             1                    ***0***                                                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    254                                  ***0***     Count coming in to IF
    254             1                    ***0***                                                         if(!i_rx_daa_nack_ack) //ACK AFTER BROADCAST READ
    267             1                    ***0***                                                         else //NACK AFTER BROADCAST READ
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    276                                  ***0***     Count coming in to IF
    276             1                    ***0***                                                 if (!i_rx_daa_nack_ack) //IF ACK, NEXT STATE IS ENTDAA
    287             1                    ***0***                                               else                    //IF NACK, SEND REPEATED START THEN 7E AGAIN
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    307                                  ***0***     Count coming in to IF
    307             1                    ***0***                               if (i_scl_daa_neg_edge && i_tx_daa_mode_done)
    321             1                    ***0***                               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    329                                  ***0***     Count coming in to IF
    329             1                    ***0***                               if (i_scl_daa_neg_edge )
    344             1                    ***0***                               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    331                                  ***0***     Count coming in to IF
    331             1                    ***0***                                     if(ccc_to_par)
    337             1                    ***0***                                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    351                                  ***0***     Count coming in to IF
    351             1                    ***0***                                 if(i_scl_daa_neg_edge)
    379             1                    ***0***                                 else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    353                                  ***0***     Count coming in to IF
    353             1                    ***0***                                         if (frames_count == 3'b111)
    366             1                    ***0***                                         else if(i_rx_daa_mode_done)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    368                                  ***0***     Count coming in to IF
    368             1                    ***0***                                                 if (frames_count == 'd6) begin 
    372             1                    ***0***                                                 else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    391                                  ***0***     Count coming in to IF
    391             1                    ***0***                                 if(i_scl_daa_neg_edge && i_tx_daa_done)
    402             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    411                                  ***0***     Count coming in to IF
    411             1                    ***0***                                 if(i_scl_daa_neg_edge && i_tx_daa_mode_done)
    415             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      16         0        16     0.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_daa --

  File dynamic_address_assignment.v
----------------Focused Condition View-------------------
Line       162 Item    1  (i_scl_daa_neg_edge && i_tx_daa_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'
  i_tx_daa_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_daa_neg_edge_0  -                             
  Row   2:    ***0***  i_scl_daa_neg_edge_1  i_tx_daa_mode_done            
  Row   3:    ***0***  i_tx_daa_mode_done_0  i_scl_daa_neg_edge            
  Row   4:    ***0***  i_tx_daa_mode_done_1  i_scl_daa_neg_edge            

----------------Focused Condition View-------------------
Line       174 Item    1  (i_scl_daa_neg_edge && i_tx_daa_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'
  i_tx_daa_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_daa_neg_edge_0  -                             
  Row   2:    ***0***  i_scl_daa_neg_edge_1  i_tx_daa_mode_done            
  Row   3:    ***0***  i_tx_daa_mode_done_0  i_scl_daa_neg_edge            
  Row   4:    ***0***  i_tx_daa_mode_done_1  i_scl_daa_neg_edge            

----------------Focused Condition View-------------------
Line       211 Item    1  (i_rx_daa_mode_done && i_scl_daa_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_rx_daa_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_daa_mode_done_0  -                             
  Row   2:    ***0***  i_rx_daa_mode_done_1  i_scl_daa_neg_edge            
  Row   3:    ***0***  i_scl_daa_neg_edge_0  i_rx_daa_mode_done            
  Row   4:    ***0***  i_scl_daa_neg_edge_1  i_rx_daa_mode_done            

----------------Focused Condition View-------------------
Line       222 Item    1  (nacks_counter == 2)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (nacks_counter == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (nacks_counter == 2)_0  -                             
  Row   2:    ***0***  (nacks_counter == 2)_1  -                             

----------------Focused Condition View-------------------
Line       239 Item    1  (addresses_count == 0)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (addresses_count == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (addresses_count == 0)_0  -                             
  Row   2:    ***0***  (addresses_count == 0)_1  -                             

----------------Focused Condition View-------------------
Line       307 Item    1  (i_scl_daa_neg_edge && i_tx_daa_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'
  i_tx_daa_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_daa_neg_edge_0  -                             
  Row   2:    ***0***  i_scl_daa_neg_edge_1  i_tx_daa_mode_done            
  Row   3:    ***0***  i_tx_daa_mode_done_0  i_scl_daa_neg_edge            
  Row   4:    ***0***  i_tx_daa_mode_done_1  i_scl_daa_neg_edge            

----------------Focused Condition View-------------------
Line       353 Item    1  (frames_count == 7)
Condition totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (frames_count == 7)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (frames_count == 7)_0  -                             
  Row   2:    ***0***  (frames_count == 7)_1  -                             

----------------Focused Condition View-------------------
Line       368 Item    1  (frames_count == 6)
Condition totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (frames_count == 6)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (frames_count == 6)_0  -                             
  Row   2:    ***0***  (frames_count == 6)_1  -                             

----------------Focused Condition View-------------------
Line       391 Item    1  (i_scl_daa_neg_edge && i_tx_daa_done)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'
       i_tx_daa_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_daa_neg_edge_0  -                             
  Row   2:    ***0***  i_scl_daa_neg_edge_1  i_tx_daa_done                 
  Row   3:    ***0***  i_tx_daa_done_0       i_scl_daa_neg_edge            
  Row   4:    ***0***  i_tx_daa_done_1       i_scl_daa_neg_edge            

----------------Focused Condition View-------------------
Line       411 Item    1  (i_scl_daa_neg_edge && i_tx_daa_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'
  i_tx_daa_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_daa_neg_edge_0  -                             
  Row   2:    ***0***  i_scl_daa_neg_edge_1  i_tx_daa_mode_done            
  Row   3:    ***0***  i_tx_daa_mode_done_0  i_scl_daa_neg_edge            
  Row   4:    ***0***  i_tx_daa_mode_done_1  i_scl_daa_neg_edge            


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       9         1         8    11.11%
    FSM Transitions                 20         0        20     0.00%

================================FSM Details================================

FSM Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_daa --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 124            DAA_IDLE                   0
 171           BROADCAST                   4
 150               START                   1
 207                 ACK                  13
 299              ENTDAA                   3
 407              FINISH                   7
 349           READ_DATA                   2
 326              PARITY                  12
 384                 DAA                   6
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                DAA_IDLE                 202          
    Uncovered States :
    ------------------
                   State
                   -----
               BROADCAST
                   START
                     ACK
                  ENTDAA
                  FINISH
               READ_DATA
                  PARITY
                     DAA
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 128                   0          DAA_IDLE -> BROADCAST
 176                   1          BROADCAST -> ACK    
  99                   2          BROADCAST -> DAA_IDLE
 164                   3          START -> BROADCAST  
  99                   4          START -> DAA_IDLE   
 289                   5          ACK -> START        
 278                   6          ACK -> ENTDAA       
 269                   7          ACK -> FINISH       
 256                   8          ACK -> READ_DATA    
 226                   9          ACK -> DAA_IDLE     
 312                  10          ENTDAA -> PARITY    
  99                  11          ENTDAA -> DAA_IDLE  
 413                  12          FINISH -> DAA_IDLE  
 356                  13          READ_DATA -> DAA    
  99                  14          READ_DATA -> DAA_IDLE
 341                  15          PARITY -> ACK       
 334                  16          PARITY -> START     
  99                  17          PARITY -> DAA_IDLE  
 394                  18          DAA -> PARITY       
  99                  19          DAA -> DAA_IDLE     


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   9         1         8    11.11%
        FSM Transitions             20         0        20     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     151        23       128    15.23%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_daa --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File dynamic_address_assignment.v
    34                                               module dynamic_address_assignment (
    35                                                   input  wire          i_daa_clk                    ,
    36                                                   input  wire          i_daa_rst_n                  ,
    37                                                   input  wire          i_mcu_daa_en                 , // enable from main ctrl unit 
    38                                                   input  wire          i_scl_daa_pos_edge           , // SCL POS EDGE
    39                                                   input  wire          i_scl_daa_neg_edge           , // SCL NEG EDGE
    40                                                   input  wire          i_tx_daa_mode_done           , // TX MODE DONE
    41                                                   input  wire          i_tx_daa_done                , // TX MODE DONE IN CASE OF 7-bit SERIALIZING  
    42                                                   input  wire          i_rx_daa_mode_done           , // RX MODE DONE
    43                                                   input  wire          i_rx_daa_nack_ack            , // 1:NACK      , 0: ACK
    44                                                   output wire          o_daa_pp_od                  , // 1: pushpull , 0: opendrain
    45                                                   output reg           o_daa_regf_rd_en             , // Reg_file read enable
    46                                                   output reg           o_daa_regf_wr_en             , // Reg_file write enable
    47                                                   output reg  [7:0]    o_daa_regf_data_wr           , // Reg_file data write
    48                                                   output reg  [11:0]    o_daa_regf_addr              , // Reg_file Address
    49                                                   output reg  [2:0]    o_daa_tx_mode                , // TX configuration
    50                                                   output reg           o_daa_tx_en                  , // TX enable
    51                                                   output reg  [2:0]    o_daa_rx_mode                , // RX configuration 
    52                                                   output reg           o_daa_rx_en                  , // RX enable
    53                                                   output reg           o_daa_fcnt_en                , // Frame Counter Enable
    54                                                   output reg  [7:0]    o_daa_fcnt_no_frms           , // No of frames to Frame counter
    55                                                   output reg           o_daa_bits_cnt_en            , // Bits Counter Enable
    56                                                   output reg           o_daa_rx_cnt_en              , // bits counter rx enable in case of read data
    57                                                   output reg           o_daa_error                  , // error management procedure
    58                                                   output reg           o_regf_wr_data_mux_sel       , // MUX SELECTOR FOR REGFILE DATA WRITE
    59                                                   output reg           o_daa_mcu_done              ); // procedure done
    60                                               
    61                                               //---------------------------------- states encoding in gray ----------------------------------------------
    62                                               localparam DAA_IDLE                     = 4'b0000 ; // 0
    63                                               localparam START                        = 4'b0001 ; // 1
    64                                               localparam ENTDAA                       = 4'b0011 ; // 3
    65                                               localparam READ_DATA                    = 4'b0010 ; // 2
    66                                               localparam DAA                          = 4'b0110 ; // 6
    67                                               localparam FINISH                       = 4'b0111 ; // 7
    68                                               localparam BROADCAST                    = 4'b0100 ; // 4
    69                                               localparam PARITY                       = 4'b1100 ; // C
    70                                               localparam ACK                          = 4'b1101 ; // D
    71                                               
    72                                               //---------------------------------- Paramaters needed ----------------------------------------------------
    73                                               
    74                                               localparam first_address                = 7'h08   ;
    75                                               localparam base_address_of_regf         =  'd200  ;
    76                                               
    77                                               //---------------------------------- Assign Statements ----------------------------------------------------
    78                                               
    79                                               assign o_daa_pp_od = 1'b0        ; // dynamic address assignment procedure is always opendrain // must be registered
    80                                               
    81                                               //---------------------------------- INTERNAL WIRES -------------------------------------------------------
    82                                               
    83                                               reg [3:0] state                  ;
    84                                               reg [2:0] frames_count           ; // incrementing by 1 with each mode done in case of READ_DATA (DESERIALIZING) 
    85                                               reg [5:0] addresses_count        ; // used in address assignment to increment the assigned address  
    86                                               reg [7:0] target_offset          ; // to calculate regf address pointer
    87                                               reg [1:0] nacks_counter          ; // to determine how many nacks by the target
    88                                               reg       par_to_ack             ; //PARITY TO ACKNOWLEDGE INDICATOR, NOT BROADCAST READ TO ACK
    89                                               reg       ccc_to_par             ; // CCC TO PAR INDICATOR, NOT DATA TO PARITY
    90                                               reg       daa_mode               ; //ENTDAA IS SENT // any start after is a REPEATED START, and any broadcast is READ.
    91                                               
    92                                               //---------------------------------- DAA MAIN FSM  --------------------------------------------------------
    93                                               
    94              1                        202     always @(posedge i_daa_clk or negedge i_daa_rst_n)
    95                                                   begin: daa_mode_fsm
    96                                                       
    97                                                       if (!i_daa_rst_n)
    98                                                           begin
    99              1                          1                     state                   <= DAA_IDLE; //idle state after reset  
    100             1                          1                     target_offset           <= 8'b0;
    101             1                          1                     nacks_counter           <= 2'b0; 
    102             1                          1                     frames_count            <= 3'b0;
    103             1                          1                     par_to_ack              <= 1'b0;
    104             1                          1                     ccc_to_par              <= 1'b0;
    105             1                          1                     daa_mode                <= 1'b0;
    106             1                          1                     o_daa_regf_rd_en        <= 1'b0;  
    107             1                          1                     o_daa_regf_wr_en        <= 1'b0;
    108             1                          1                     o_daa_regf_data_wr      <= 8'b0;
    109             1                          1                     o_daa_regf_addr         <= 10'b0;
    110             1                          1                     o_daa_tx_mode           <= 3'b0;
    111             1                          1                     o_daa_tx_en             <= 1'b0;
    112             1                          1                     o_daa_mcu_done          <= 1'b0;
    113             1                          1                     o_daa_rx_en             <= 1'b0;
    114             1                          1                     o_daa_rx_mode           <= 2'b00;
    115             1                          1                     o_daa_fcnt_en           <= 1'b0;
    116             1                          1                     o_daa_fcnt_no_frms      <= 8'b0;
    117             1                          1                     o_daa_bits_cnt_en       <= 1'b0;
    118             1                          1                     o_daa_error             <= 1'b0;
    119             1                          1                     o_regf_wr_data_mux_sel  <= 1'b0; 
    120                                                          end          
    121                                                      else
    122                                                          begin
    123                                                              case(state)
    124                                                                  DAA_IDLE:
    125                                                                      begin                        
    126                                                                        if (i_mcu_daa_en)
    127                                                                          begin
    128             1                    ***0***                                   state <= BROADCAST;
    129             1                    ***0***                                   target_offset           <= 8'b0;
    130             1                    ***0***                                   nacks_counter           <= 2'b0; 
    131             1                    ***0***                                   frames_count            <= 3'b0;
    132             1                    ***0***                                   par_to_ack              <= 1'b0;
    133             1                    ***0***                                   ccc_to_par              <= 1'b0;
    134             1                    ***0***                                   daa_mode                <= 1'b0;
    135             1                    ***0***                                   o_daa_mcu_done          <= 1'b0;
    136             1                    ***0***                                   o_daa_rx_en             <= 1'b1;
    137             1                    ***0***                                   o_daa_rx_mode           <= 2'b10;
    138             1                    ***0***                                   o_daa_fcnt_en           <= 1'b0;
    139             1                    ***0***                                   o_daa_fcnt_no_frms      <= 8'b0;
    140             1                    ***0***                                   o_daa_bits_cnt_en       <= 1'b0;
    141             1                    ***0***                                   o_daa_error             <= 1'b0;
    142             1                    ***0***                                   o_regf_wr_data_mux_sel  <= 1'b0; 
    143             1                    ***0***                                   o_daa_bits_cnt_en       <= 1'b1;
    144                                                                          end
    145                                                                        else
    146                                                                          begin
    147             1                        201                                   state <= DAA_IDLE;
    148                                                                          end                               
    149                                                                      end
    150                                                                  START:
    151                                                                      begin
    152                                              
    153             1                    ***0***                                 o_daa_rx_mode           <= 2'b10;   // 2024
    154                                              
    155                                              
    156                                              
    157             1                    ***0***                                 o_daa_regf_rd_en        <= 1'b0;
    158             1                    ***0***                                 o_daa_regf_wr_en        <= 1'b0;
    159             1                    ***0***                                 o_daa_regf_data_wr      <= 8'b0;
    160             1                    ***0***                                 o_daa_tx_mode           <= 3'b000;
    161             1                    ***0***                                 o_daa_tx_en             <= 1'b1;    
    162                                                                          if (i_scl_daa_neg_edge && i_tx_daa_mode_done)
    163                                                                            begin
    164             1                    ***0***                                     state <= BROADCAST;
    165                                                                            end
    166                                                                          else
    167                                                                            begin
    168             1                    ***0***                                     state <= START;
    169                                                                            end                               
    170                                                                      end
    171                                                                  BROADCAST:
    172                                                                      begin
    173                                                                          //SERIALIZING DONE. NEXT STATE LOGIC
    174                                                                          if (i_scl_daa_neg_edge && i_tx_daa_mode_done) 
    175                                                                              begin
    176             1                    ***0***                                       state <= ACK; 
    177             1                    ***0***                                       o_daa_tx_en             <= 1'b0;
    178             1                    ***0***                                       o_daa_rx_en             <= 1'b1;
    179             1                    ***0***                                       o_daa_rx_mode           <= 2'b00;  // 2024 : wdy el RX le ACK state
    180                                                                              end
    181                                                                          else
    182                                                                              begin
    183             1                    ***0***                                       state <= BROADCAST;
    184                                                                              end 
    185                                                                          // CHOOSING WHICH BROADCAST TO SERIALIZE. OUTPUT LOGIC     
    186                                                                          if(daa_mode) 
    187                                                                              begin
    188             1                    ***0***                                         o_daa_regf_rd_en        <= 1'b1; 
    189             1                    ***0***                                         o_daa_regf_wr_en        <= 1'b0; 
    190             1                    ***0***                                         o_daa_regf_data_wr      <= 8'b0; 
    191             1                    ***0***                                         o_daa_regf_addr         <= 10'b0000101111; // 47 decimal 
    192             1                    ***0***                                         o_daa_tx_mode           <= 3'b001;
    193             1                    ***0***                                         o_daa_tx_en             <= 1'b1;   
    194             1                    ***0***                                         o_daa_bits_cnt_en       <= 1'b1;                              
    195                                                                              end
    196                                                                          else
    197                                                                              begin
    198             1                    ***0***                                         o_daa_regf_rd_en        <= 1'b1; 
    199             1                    ***0***                                         o_daa_regf_wr_en        <= 1'b0; 
    200             1                    ***0***                                         o_daa_regf_data_wr      <= 8'b0; 
    201             1                    ***0***                                         o_daa_regf_addr         <= 10'b0000101110; //46 decimal 
    202             1                    ***0***                                         o_daa_tx_mode           <= 3'b001;
    203             1                    ***0***                                         o_daa_tx_en             <= 1'b1;
    204             1                    ***0***                                         o_daa_bits_cnt_en       <= 1'b1; 
    205                                                                              end                                                      
    206                                                                      end 
    207                                                                  ACK: //REVISE CODE APPROACH
    208                                                                      begin
    209             1                    ***0***                             o_daa_bits_cnt_en       <= 1'b0;
    210                                                                          //STATE TRANSITION CONDITION
    211                                                                          if(i_rx_daa_mode_done && i_scl_daa_neg_edge)
    212                                                                              begin
    213                                                                                  // ACKNOWLEDGE INSIDE DAA MODE (WITHOUT HANDOFF)
    214                                                                                  if(daa_mode)
    215                                                                                      begin
    216                                                                                          // ACKNOWLEDGE AFTER PARITY
    217                                                                                          if(par_to_ack)
    218                                                                                              begin                
    219                                                                                                  if(i_rx_daa_nack_ack) //NACK AFTER PARITY OF ASSIGNED ADDRESS ----------- 2024 note : 1 for NACK 0 for ACK
    220                                                                                                      begin
    221             1                    ***0***                                                                 nacks_counter      <= nacks_counter + 1'b1;
    222                                                                                                          if(nacks_counter == 2'b10)
    223                                                                                                              begin
    224             1                    ***0***                                                                         o_daa_error <= 1'b1;
    225             1                    ***0***                                                                         o_daa_mcu_done <= 1'b1;
    226             1                    ***0***                                                                         state <= DAA_IDLE;    
    227                                                                                                              end
    228                                                                                                          else
    229                                                                                                              begin
    230             1                    ***0***                                                                         o_daa_error <= 1'b0;
    231             1                    ***0***                                                                         state <= START;                                                                 
    232                                                                                                              end                                                            
    233                                                                                                      end  
    234                                                                                                  else //ACK AFTER PARITY OF ASSIGNED ADDRESS
    235                                                                                                      begin
    236             1                    ***0***                                                                 nacks_counter <= 2'b0; 
    237             1                    ***0***                                                                 state <= START;
    238                                                                                                          // Logic to calculate target offset that determines the regf pointer
    239                                                                                                          if(addresses_count == 6'b0)
    240                                                                                                              begin    
    241             1                    ***0***                                                                         target_offset           <= 'd9;
    242             1                    ***0***                                                                         addresses_count         <= addresses_count + 1;
    243                                                                                                              end
    244                                                                                                          else
    245                                                                                                              begin
    246             1                    ***0***                                                                         target_offset           <= target_offset + 'd9;
    247             1                    ***0***                                                                         addresses_count         <= addresses_count + 1;
    248                                                                                                              end    
    249                                                                                                      end                                                 
    250                                                                                              end
    251                                                                                          // ACKNOWLEDGE AFTER BROADCAST READ    
    252                                                                                          else
    253                                                                                              begin
    254                                                                                                  if(!i_rx_daa_nack_ack) //ACK AFTER BROADCAST READ
    255                                                                                                      begin
    256             1                    ***0***                                                                 state <= READ_DATA;
    257             1                    ***0***                                                                 o_daa_regf_rd_en        <= 1'b0; 
    258             1                    ***0***                                                                 o_daa_regf_wr_en        <= 1'b1; 
    259             1                    ***0***                                                                 o_daa_regf_addr         <= base_address_of_regf + target_offset; 
    260             1                    ***0***                                                                 o_daa_tx_en             <= 1'b0;    
    261             1                    ***0***                                                                 o_daa_rx_mode           <= 2'b01;                                                                               
    262             1                    ***0***                                                                 o_daa_rx_en             <= 1'b1;
    263             1                    ***0***                                                                 o_daa_fcnt_en           <= 1'b1;
    264             1                    ***0***                                                                 o_daa_fcnt_no_frms      <= 8'b1000;
    265             1                    ***0***                                                                 o_daa_bits_cnt_en       <= 1'b1;
    266                                                                                                      end   
    267                                                                                                  else //NACK AFTER BROADCAST READ
    268                                                                                                      begin
    269             1                    ***0***                                                                 state <= FINISH;
    270                                                                                                      end
    271                                                                                              end
    272                                                                                      end
    273                                                                                  // ACKNOWLEDGE OUTSIDE DAA MDOE, AFTER BROADCAST WRITE (WITH HANDOFF)   
    274                                                                                  else
    275                                                                                      begin
    276                                                                                          if (!i_rx_daa_nack_ack) //IF ACK, NEXT STATE IS ENTDAA
    277                                                                                              begin
    278             1                    ***0***                                                         state <= ENTDAA;
    279             1                    ***0***                                                         o_daa_regf_rd_en        <= 1'b1; 
    280             1                    ***0***                                                         o_daa_regf_wr_en        <= 1'b0; 
    281             1                    ***0***                                                         o_daa_regf_data_wr      <= 8'b0; 
    282             1                    ***0***                                                         o_daa_regf_addr         <=  'd49; 
    283             1                    ***0***                                                         o_daa_tx_mode           <= 3'b001;
    284             1                    ***0***                                                         o_daa_tx_en             <= 1'b1;
    285             1                    ***0***                                                         o_daa_bits_cnt_en       <= 1'b1;                                  
    286                                                                                              end
    287                                                                                        else                    //IF NACK, SEND REPEATED START THEN 7E AGAIN
    288                                                                                          begin
    289             1                    ***0***                                                   state <= START;
    290                                                                                          end
    291                                                                                      end
    292                                                                              end
    293                                                                          //NO STATE TRANSITION     
    294                                                                          else
    295                                                                              begin
    296             1                    ***0***                                         state <= ACK;
    297                                                                              end
    298                                                                      end    
    299                                                                  ENTDAA:
    300                                                                      begin
    301                                              
    302             1                    ***0***                                                              o_daa_rx_mode           <= 2'b10;  // 2024 : rx must stay in arbitration mode in every single transmitting case
    303                                              
    304                                              
    305             1                    ***0***                             daa_mode <= 1'b1;
    306             1                    ***0***                             ccc_to_par <= 1'b1;                            
    307                                                                        if (i_scl_daa_neg_edge && i_tx_daa_mode_done)
    308                                                                          begin
    309                                              
    310                                              
    311                                              
    312             1                    ***0***                                   state <= PARITY;
    313             1                    ***0***                                   o_daa_regf_rd_en        <= 1'b1; 
    314             1                    ***0***                                   o_daa_regf_wr_en        <= 1'b0; 
    315             1                    ***0***                                   o_daa_regf_data_wr      <= 8'b0; 
    316             1                    ***0***                                   o_daa_regf_addr         <=  'd49; 
    317             1                    ***0***                                   o_daa_tx_mode           <= 3'b011; //PARITY
    318             1                    ***0***                                   o_daa_tx_en             <= 1'b1;  
    319             1                    ***0***                                   o_daa_bits_cnt_en       <= 1'b0;                                                            
    320                                                                          end
    321                                                                        else
    322                                                                          begin
    323             1                    ***0***                                   state <= ENTDAA;
    324                                                                          end                             
    325                                                                      end
    326                                                                  PARITY:
    327                                                                      begin  
    328             1                    ***0***                              o_daa_rx_mode           <= 2'b10;  // 2024 : rx must stay in arbitration mode in every single transmitting case                                                 
    329                                                                        if (i_scl_daa_neg_edge )
    330                                                                          begin
    331                                                                              if(ccc_to_par)
    332                                                                              //PARITY AFTER ENTDAA SO NEXT STATE IS A REPEATED START
    333                                                                                  begin
    334             1                    ***0***                                             state <= START;
    335             1                    ***0***                                             ccc_to_par <= 0;
    336                                                                                  end
    337                                                                              else
    338                                                                              //PARITY AFTER ASSIGNED ADDRESS SO NEXT STATE IS ACK 
    339                                                                                  begin
    340             1                    ***0***                                              o_daa_rx_mode           <= 2'b00;  // 2024 : wdy el RX le ACK state
    341             1                    ***0***                                             state <= ACK;
    342                                                                                  end
    343                                                                          end
    344                                                                        else
    345                                                                          begin
    346             1                    ***0***                                     state <= PARITY;
    347                                                                          end  
    348                                                                      end
    349                                                                   READ_DATA:
    350                                                                      begin
    351                                                                          if(i_scl_daa_neg_edge)
    352                                                                              begin
    353                                                                                  if (frames_count == 3'b111)
    354                                                                                      begin
    355             1                    ***0***                                                                              o_daa_rx_mode           <= 2'b10;  // 2024 : rx must stay in arbitration mode in every single transmitting case 
    356             1                    ***0***                                                 state <= DAA;
    357             1                    ***0***                                                 frames_count <= 0;                         
    358             1                    ***0***                                                 o_daa_regf_rd_en        <= 1'b1;          
    359             1                    ***0***                                                 o_daa_regf_wr_en        <= 1'b0;  
    360             1                    ***0***                                                 o_daa_regf_addr         <= 10'd80  ; // 2024 
    361             1                    ***0***                                                 o_regf_wr_data_mux_sel  <= 1'b1;       
    362             1                    ***0***                                                 o_daa_regf_data_wr      <= {first_address + addresses_count , 1'b0};                
    363             1                    ***0***                                                 o_daa_tx_en             <= 1'b1;
    364             1                    ***0***                                                 o_daa_bits_cnt_en       <= 1'b1;                                                                                                                       
    365                                                                                      end                                    
    366                                                                                  else if(i_rx_daa_mode_done)
    367                                                                                      begin
    368                                                                                          if (frames_count == 'd6) begin 
    369             1                    ***0***                                                 frames_count    <= frames_count    + 1'b1;
    370             1                    ***0***                                                 state           <= READ_DATA;                                                
    371                                                                                          end 
    372                                                                                          else begin 
    373             1                    ***0***                                                 frames_count    <= frames_count    + 1'b1;
    374             1                    ***0***                                                 state           <= READ_DATA;
    375             1                    ***0***                                                 o_daa_regf_addr <= o_daa_regf_addr + 1'b1;
    376                                                                                          end
    377                                                                                      end                       
    378                                                                              end
    379                                                                          else 
    380                                                                              begin
    381             1                    ***0***                                         state <= READ_DATA;
    382                                                                              end                                                  
    383                                                                      end 
    384                                                                   DAA:
    385                                                                      begin                        
    386             1                    ***0***                                 o_daa_regf_rd_en        <= 1'b1;          
    387             1                    ***0***                                 o_daa_regf_wr_en        <= 1'b0;                        
    388             1                    ***0***                                 o_daa_tx_mode           <= 3'b001; //SERIALIZING ADDRESS 7 BITS
    389             1                    ***0***                                 o_daa_tx_en             <= 1'b1;
    390             1                    ***0***                                 o_regf_wr_data_mux_sel  <= 1'b0;  
    391                                                                          if(i_scl_daa_neg_edge && i_tx_daa_done)
    392                                                                              begin
    393                                              
    394             1                    ***0***                                         state <= PARITY;
    395             1                    ***0***                                         o_daa_regf_rd_en        <= 1'b1; 
    396             1                    ***0***                                         o_daa_regf_wr_en        <= 1'b0; 
    397             1                    ***0***                                         o_daa_regf_data_wr      <= 8'b0; 
    398             1                    ***0***                                         o_daa_tx_mode           <= 3'b011; //PARITY
    399             1                    ***0***                                         o_daa_tx_en             <= 1'b1;
    400             1                    ***0***                                         o_daa_bits_cnt_en       <= 1'b0;
    401                                                                              end
    402                                                                          else
    403                                                                              begin
    404             1                    ***0***                                         state <= DAA;
    405                                                                              end                                                   
    406                                                                      end                                                                 
    407                                                                   FINISH:
    408                                                                      begin
    409             1                    ***0***                                 o_daa_rx_mode           <= 2'b10;  // 2024 : rx must stay in arbitration mode in every single transmitting case
    410             1                    ***0***                                 o_daa_mcu_done <= 1'b1;
    411                                                                          if(i_scl_daa_neg_edge && i_tx_daa_mode_done)
    412                                                                              begin
    413             1                    ***0***                                         state <= DAA_IDLE;
    414                                                                              end
    415                                                                          else
    416                                                                              begin
    417             1                    ***0***                                         state <= FINISH;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        160        16       144    10.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_daa --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                              addresses_count[5-0]           0           0        0.00 
                                        ccc_to_par           0           0        0.00 
                                          daa_mode           0           0        0.00 
                                 frames_count[2-0]           0           0        0.00 
                                         i_daa_clk           1           1      100.00 
                                       i_daa_rst_n           1           1      100.00 
                                      i_mcu_daa_en           0           0        0.00 
                                i_rx_daa_mode_done           1           1      100.00 
                                 i_rx_daa_nack_ack           1           1      100.00 
                                i_scl_daa_neg_edge           1           1      100.00 
                                i_scl_daa_pos_edge           1           1      100.00 
                                     i_tx_daa_done           1           1      100.00 
                                i_tx_daa_mode_done           1           1      100.00 
                                nacks_counter[1-0]           0           0        0.00 
                                 o_daa_bits_cnt_en           0           0        0.00 
                                       o_daa_error           0           0        0.00 
                                     o_daa_fcnt_en           0           0        0.00 
                           o_daa_fcnt_no_frms[7-0]           0           0        0.00 
                                    o_daa_mcu_done           0           0        0.00 
                                       o_daa_pp_od           0           0        0.00 
                             o_daa_regf_addr[11-0]           0           0        0.00 
                           o_daa_regf_data_wr[7-0]           0           0        0.00 
                                  o_daa_regf_rd_en           0           0        0.00 
                                  o_daa_regf_wr_en           0           0        0.00 
                                   o_daa_rx_cnt_en           0           0        0.00 
                                       o_daa_rx_en           0           0        0.00 
                                o_daa_rx_mode[2-0]           0           0        0.00 
                                       o_daa_tx_en           0           0        0.00 
                                o_daa_tx_mode[2-0]           0           0        0.00 
                            o_regf_wr_data_mux_sel           0           0        0.00 
                                        par_to_ack           0           0        0.00 
                                        state[3-0]           0           0        0.00 
                                target_offset[7-0]           0           0        0.00 

Total Node Count     =         80 
Toggled Node Count   =          8 
Untoggled Node Count =         72 

Toggle Coverage      =      10.00% (16 of 160 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_hot_join
=== Design Unit: work.hot_join
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        50         5        45    10.00%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_hot_join

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File hot_join.v
------------------------------------IF Branch------------------------------------
    111                                      201     Count coming in to IF
    111             1                          1             if (!i_hot_join_rst_n) 
    132             1                        200             else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    134                                      200     Count coming in to CASE
    135             1                        200                     HJ_IDLE:
    193             1                    ***0***                     CTRL_ACK_BIT:
    225             1                    ***0***                     CTRL_NACK_BIT:
    252             1                    ***0***                     REPEATED_START_BIT:  //only for ENEC/DISEC paths
    275             1                    ***0***                     CCC_ADDRESS:  //sending BROADCAST ADDRESS
    295             1                    ***0***                     TRGT_ACK_BIT:
    326             1                    ***0***                     CCC_DATA:
    343             1                    ***0***                     PARITY_BIT:
                                         ***0***     All False Count
Branch totals: 1 hit of 9 branches = 11.11%

------------------------------------IF Branch------------------------------------
    155                                      200     Count coming in to IF
    155             1                    ***0***                             if (i_hot_join_enable)
    187             1                        200                             else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    157                                  ***0***     Count coming in to IF
    157             1                    ***0***                                     if (i_hot_join_ccc)
    166             1                    ***0***                                     else if (!i_hot_join_support || !hot_join_cfg_ack_nack)
    176             1                    ***0***                                     else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    195                                  ***0***     Count coming in to IF
    195             1                    ***0***                             if (i_hot_join_tx_mode_done)
    219             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    197                                  ***0***     Count coming in to IF
    197             1                    ***0***                                     if (!hot_join_cfg_en_dis)  //controller may DISHJ after ACK
    206             1                    ***0***                                     else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    213                                  ***0***     Count coming in to IF
    213             1                    ***0***                                             if (hot_join_cfg_aval_busy)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    227                                  ***0***     Count coming in to IF
    227             1                    ***0***                             if (i_hot_join_tx_mode_done)
    246             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    230                                  ***0***     Count coming in to IF
    230             1                    ***0***                                     if (!hot_join_cfg_en_dis || !i_hot_join_support) 
    240             1                    ***0***                                     else                        
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    254                                  ***0***     Count coming in to IF
    254             1                    ***0***                             if (i_hot_join_tx_mode_done)
    264             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    279                                  ***0***     Count coming in to IF
    279             1                    ***0***                             if (i_hot_join_tx_pp_mode_done)
    289             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    298                                  ***0***     Count coming in to CASE
    299             1                    ***0***                             ENHJ_MODE : o_hot_join_regf_addr <= 10'd401 ; //ENEC CCC (0x00)
    300             1                    ***0***                             DISHJ_MODE: o_hot_join_regf_addr <= 10'd403 ; //DISEC CCC (0x01)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    302                                  ***0***     Count coming in to IF
    302             1                    ***0***                             if (i_hot_join_rx_mode_done && i_hot_join_scl_neg_edge)
    320             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    304                                  ***0***     Count coming in to IF
    304             1                    ***0***                                     if (!i_hot_join_nack_ack)
    313             1                    ***0***                                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    329                                  ***0***     Count coming in to IF
    329             1                    ***0***                             if (i_hot_join_tx_pp_mode_done)
    337             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    346                                  ***0***     Count coming in to CASE
    347             1                    ***0***                             ENHJ_MODE : o_hot_join_regf_addr <= 10'd402 ; //ENEC BYTE
    348             1                    ***0***                             DISHJ_MODE: o_hot_join_regf_addr <= 10'd404 ; //DISEC BYTE
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    350                                  ***0***     Count coming in to IF
    350             1                    ***0***                             if (i_hot_join_tx_pp_mode_done)
    373             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    352                                  ***0***     Count coming in to IF
    352             1                    ***0***                                     if (!second_frame_done)
    361             1                    ***0***                                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    367                                  ***0***     Count coming in to IF
    367             1                    ***0***                                             if (!i_hot_join_support && hot_join_cfg_aval_busy)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    380                                      200     Count coming in to IF
    380             1                        200                     if (!i_hot_join_enable)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         0         8     0.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_hot_join --

  File hot_join.v
----------------Focused Condition View-------------------
Line       166 Item    1  (i_hot_join_support ~& hot_join_cfg_ack_nack)
Condition totals: 0 of 2 input terms covered = 0.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
     i_hot_join_support         N  No hits                  Hit '_0' and '_1'
  hot_join_cfg_ack_nack         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:    ***0***  i_hot_join_support_0     hot_join_cfg_ack_nack         
  Row   2:    ***0***  i_hot_join_support_1     hot_join_cfg_ack_nack         
  Row   3:    ***0***  hot_join_cfg_ack_nack_0  i_hot_join_support            
  Row   4:    ***0***  hot_join_cfg_ack_nack_1  i_hot_join_support            

----------------Focused Condition View-------------------
Line       230 Item    1  (hot_join_cfg_en_dis ~& i_hot_join_support)
Condition totals: 0 of 2 input terms covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  hot_join_cfg_en_dis         N  No hits                  Hit '_0' and '_1'
   i_hot_join_support         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  hot_join_cfg_en_dis_0  i_hot_join_support            
  Row   2:    ***0***  hot_join_cfg_en_dis_1  i_hot_join_support            
  Row   3:    ***0***  i_hot_join_support_0   hot_join_cfg_en_dis           
  Row   4:    ***0***  i_hot_join_support_1   hot_join_cfg_en_dis           

----------------Focused Condition View-------------------
Line       302 Item    1  (i_hot_join_rx_mode_done && i_hot_join_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  i_hot_join_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_hot_join_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  i_hot_join_rx_mode_done_0  -                             
  Row   2:    ***0***  i_hot_join_rx_mode_done_1  i_hot_join_scl_neg_edge       
  Row   3:    ***0***  i_hot_join_scl_neg_edge_0  i_hot_join_rx_mode_done       
  Row   4:    ***0***  i_hot_join_scl_neg_edge_1  i_hot_join_rx_mode_done       

----------------Focused Condition View-------------------
Line       367 Item    1  (~i_hot_join_support && hot_join_cfg_aval_busy)
Condition totals: 0 of 2 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
      i_hot_join_support         N  No hits                  Hit '_0' and '_1'
  hot_join_cfg_aval_busy         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  i_hot_join_support_0      hot_join_cfg_aval_busy        
  Row   2:    ***0***  i_hot_join_support_1      -                             
  Row   3:    ***0***  hot_join_cfg_aval_busy_0  ~i_hot_join_support           
  Row   4:    ***0***  hot_join_cfg_aval_busy_1  ~i_hot_join_support           


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       8         1         7    12.50%
    FSM Transitions                 17         0        17     0.00%

================================FSM Details================================

FSM Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_hot_join --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 135             HJ_IDLE                   0
 193        CTRL_ACK_BIT                   1
 225       CTRL_NACK_BIT                   3
 275         CCC_ADDRESS                   6
 252  REPEATED_START_BIT                   2
 295        TRGT_ACK_BIT                   7
 326            CCC_DATA                   5
 343          PARITY_BIT                   4
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                 HJ_IDLE                 201          
    Uncovered States :
    ------------------
                   State
                   -----
            CTRL_ACK_BIT
           CTRL_NACK_BIT
             CCC_ADDRESS
      REPEATED_START_BIT
            TRGT_ACK_BIT
                CCC_DATA
              PARITY_BIT
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 184                   0          HJ_IDLE -> CTRL_ACK_BIT
 174                   1          HJ_IDLE -> CTRL_NACK_BIT
 164                   2          HJ_IDLE -> CCC_ADDRESS
 211                   3          CTRL_ACK_BIT -> HJ_IDLE
 204                   4          CTRL_ACK_BIT -> REPEATED_START_BIT
 242                   5          CTRL_NACK_BIT -> HJ_IDLE
 237                   6          CTRL_NACK_BIT -> REPEATED_START_BIT
 287                   7          CCC_ADDRESS -> TRGT_ACK_BIT
 382                   8          CCC_ADDRESS -> HJ_IDLE
 262                   9          REPEATED_START_BIT -> CCC_ADDRESS
 382                  10          REPEATED_START_BIT -> HJ_IDLE
 315                  11          TRGT_ACK_BIT -> HJ_IDLE
 306                  12          TRGT_ACK_BIT -> CCC_DATA
 331                  13          CCC_DATA -> PARITY_BIT
 382                  14          CCC_DATA -> HJ_IDLE 
 363                  15          PARITY_BIT -> HJ_IDLE
 354                  16          PARITY_BIT -> CCC_DATA


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   8         1         7    12.50%
        FSM Transitions             17         0        17     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     135        36        99    26.66%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_hot_join --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File hot_join.v
    33                                               module hot_join(
    34                                                   //--inputs from system top
    35                                                   input  wire          i_hot_join_clk                , //System Clock 50 MHz
    36                                                   input  wire          i_hot_join_rst_n              , //System Active Low Reset
    37                                               
    38                                                   //--inputs from i3c_engine
    39                                                   input  wire          i_hot_join_enable             , //Hot-Join Enable-Signal
    40                                                   input  wire          i_hot_join_ccc                , //Sending Hot-Join CCCs Request (if Host wanna ENHJ or DISHJ without prior HJ Request)
    41                                               
    42                                                   //--inputs from reg_file
    43                                                   input  wire          i_hot_join_support            , //CRCAP1[0] Hardcoded (read-only) [1 >> Supported , 0 >> Not Supported]
    44                                                   input  wire  [2:0]   i_hot_join_configuration      , //HJ Configuration register {AVAL/BUSY , EN/DIS , ACK/NACK} (Host can overwrite at any time)
    45                                               
    46                                                   //--inputs from controller_tx
    47                                                   input  wire          i_hot_join_tx_mode_done       , //Tx Current Mode Done-Flag
    48                                                   input  wire          i_hot_join_tx_pp_mode_done    , //Tx Current Mode Done-Flag for Push-Pull small periods
    49                                               
    50                                                   //--inputs from controller_rx
    51                                                   input  wire          i_hot_join_rx_mode_done       , //Rx Current Mode Done-Flag
    52                                                   input  wire          i_hot_join_nack_ack           , //Rx Sampled Target' Acknowledgment [1 >> NACK , 0 >> ACK]
    53                                               
    54                                                   //--inputs from scl_generation
    55                                                   input  wire          i_hot_join_scl_neg_edge       , //SCL Falling-Edge Flag
    56                                                   input  wire          i_hot_join_scl_pos_edge       , //SCL Rising-Edge Flag
    57                                               
    58                                                   //--outputs to controller_tx
    59                                                   output reg           o_hot_join_tx_en              , //Tx Enable-Flag
    60                                                   output reg   [2:0]   o_hot_join_tx_mode            , //Tx Current Mode Selector
    61                                               
    62                                                   //--outputs to controller_rx
    63                                                   output reg           o_hot_join_rx_en              , //Rx Enable-Flag
    64                                                   output reg   [2:0]   o_hot_join_rx_mode            , //Rx Current Mode Selector 
    65                                               
    66                                                   //--outputs to reg_file
    67                                                   output reg           o_hot_join_regf_rd_en         , //RegFile Read Enable-Flag
    68                                                   output reg   [9:0]   o_hot_join_regf_addr          , //RegFile Read/Write Address
    69                                               
    70                                                   //--outputs to bits_counter
    71                                                   output reg           o_hot_join_cnt_en             , //Bits Counter Enable-Flag
    72                                                   output reg           o_hot_join_pp_od              , //SDA Driving Selector [1 >> Push-Pull , 0 >> Open-Drain] (also output to "sda_handling" and "scl_generation")
    73                                               
    74                                                   //--outputs to i3c_engine
    75                                                   output reg           o_hot_join_daa_req            , //DAA Procedure Request (Suggestion: Trigger DAA directly for time optimization)
    76                                                   output reg           o_hot_join_ctrl_role_pass     , //CRR Procedure Request (Suggestion: Trigger CRH directly for time optimization)
    77                                                   output reg           o_hot_join_acc_rej            , //Hot-Join Request Accepted/Rejected flag [1 >> ACCEPTED , 0 >> REJECTED]
    78                                                   output reg           o_hot_join_done                 //Hot-Join Block Done-Flag 
    79                                               
    80                                                   );
    81                                               
    82                                               
    83                                               
    84                                               //-- States in Gray-Encoding ---------------------------------------------
    85                                               
    86                                               localparam HJ_IDLE            = 3'b000 ; 
    87                                               localparam CTRL_ACK_BIT       = 3'b001 ;
    88                                               localparam CTRL_NACK_BIT      = 3'b011 ;
    89                                               localparam REPEATED_START_BIT = 3'b010 ;
    90                                               localparam CCC_ADDRESS        = 3'b110 ;
    91                                               localparam TRGT_ACK_BIT       = 3'b111 ;
    92                                               localparam CCC_DATA           = 3'b101 ;
    93                                               localparam PARITY_BIT         = 3'b100 ;
    94                                               
    95                                               //-- CCCs Modes  ---------------------------------------------------------
    96                                               
    97                                               localparam ENHJ_MODE  = 1'b1 ;
    98                                               localparam DISHJ_MODE = 1'b0 ;
    99                                               
    100                                              //-- internal wires declaration ------------------------------------------
    101                                              
    102                                              reg [2:0] state                  ;
    103                                              reg       second_frame_done      ;
    104                                              reg       hot_join_cfg_ack_nack  ; //HJ Configuration register [1 >> ACK HJ   ] , [0 >> NACK HJ   ]
    105                                              reg       hot_join_cfg_en_dis    ; //HJ Configuration register [1 >> Enable HJ] , [0 >> Disable HJ]
    106                                              reg       hot_join_cfg_aval_busy ; //HJ Configuration register [1 >> Available] , [0 >> Busy      ] //for DAA or CR-Pass procedures
    107                                              
    108                                              
    109             1                        201     always @(posedge i_hot_join_clk or negedge i_hot_join_rst_n) 
    110                                                  begin: hot_join_controller_fsm
    111                                                      if (!i_hot_join_rst_n) 
    112                                                          begin
    113             1                          1                     o_hot_join_tx_en          <= 1'b0                         ;
    114             1                          1                     o_hot_join_tx_mode        <= 3'b0                         ;
    115             1                          1                     o_hot_join_rx_en          <= 1'b0                         ;
    116             1                          1                     o_hot_join_rx_mode        <= 2'b0                         ;
    117             1                          1                     o_hot_join_regf_rd_en     <= 1'b0                         ;
    118             1                          1                     o_hot_join_regf_addr      <= 10'd0                        ;
    119             1                          1                     o_hot_join_cnt_en         <= 1'b0                         ;
    120             1                          1                     o_hot_join_pp_od          <= 1'b0                         ;
    121             1                          1                     o_hot_join_daa_req        <= 1'b0                         ;
    122             1                          1                     o_hot_join_ctrl_role_pass <= 1'b0                         ;
    123             1                          1                     o_hot_join_acc_rej        <= 1'b0                         ;
    124             1                          1                     o_hot_join_done           <= 1'b0                         ;
    125             1                          1                     second_frame_done         <= 1'b0                         ;
    126                                                              //preventing glitching or configuration-changing during sending CCCs
    127             1                          1                     hot_join_cfg_ack_nack     <= i_hot_join_configuration[0] ;
    128             1                          1                     hot_join_cfg_en_dis       <= i_hot_join_configuration[1] ;
    129             1                          1                     hot_join_cfg_aval_busy    <= i_hot_join_configuration[2] ;
    130             1                          1                     state <= HJ_IDLE ;
    131                                                          end
    132                                                      else 
    133                                                          begin
    134                                                              case (state)
    135                                                              HJ_IDLE:
    136                                                                  begin
    137             1                        200                             o_hot_join_tx_en          <= 1'b0                         ;
    138             1                        200                             o_hot_join_tx_mode        <= 3'b0                         ;
    139             1                        200                             o_hot_join_rx_en          <= 1'b0                         ;
    140             1                        200                             o_hot_join_rx_mode        <= 2'b0                         ;
    141             1                        200                             o_hot_join_regf_rd_en     <= 1'b1                         ; //early reg_file setup as the 7'h7E is the first reg being read
    142             1                        200                             o_hot_join_regf_addr      <= 10'd46                       ; 
    143             1                        200                             o_hot_join_cnt_en         <= 1'b0                         ;
    144             1                        200                             o_hot_join_pp_od          <= 1'b0                         ;
    145             1                        200                             o_hot_join_daa_req        <= 1'b0                         ;
    146             1                        200                             o_hot_join_ctrl_role_pass <= 1'b0                         ;
    147             1                        200                             o_hot_join_acc_rej        <= 1'b0                         ;
    148             1                        200                             o_hot_join_done           <= 1'b0                         ;
    149             1                        200                             second_frame_done         <= 1'b0                         ;
    150                                                                      //preventing glitching or configuration-changing during sending CCCs
    151             1                        200                             hot_join_cfg_ack_nack     <= i_hot_join_configuration[0] ;
    152             1                        200                             hot_join_cfg_en_dis       <= i_hot_join_configuration[1] ;
    153             1                        200                             hot_join_cfg_aval_busy    <= i_hot_join_configuration[2] ;
    154                                              
    155                                                                      if (i_hot_join_enable)
    156                                                                          begin
    157                                                                              if (i_hot_join_ccc)
    158                                                                                  begin
    159             1                    ***0***                                             o_hot_join_regf_addr  <= 10'd46      ; //BROADCAST ADDRESS (7h'7E/W)
    160             1                    ***0***                                             o_hot_join_regf_rd_en <= 1'b1        ;
    161             1                    ***0***                                             o_hot_join_tx_en      <= 1'b1        ;
    162             1                    ***0***                                             o_hot_join_pp_od      <= 1'b0        ; //open-drain
    163             1                    ***0***                                             o_hot_join_tx_mode    <= 3'b001      ; //SERIALIZING Mode
    164             1                    ***0***                                             state                 <= CCC_ADDRESS ; //supposing that i3c_control_unit initiated START before hot_join_enable
    165                                                                                  end
    166                                                                              else if (!i_hot_join_support || !hot_join_cfg_ack_nack)
    167                                                                                  begin
    168             1                    ***0***                                             o_hot_join_acc_rej    <= 1'b0          ; //HJ IS REJECTED
    169             1                    ***0***                                             o_hot_join_regf_rd_en <= 1'b0          ;
    170             1                    ***0***                                             o_hot_join_tx_en      <= 1'b1          ;
    171             1                    ***0***                                             o_hot_join_pp_od      <= 1'b1          ; //push-pull
    172             1                    ***0***                                             o_hot_join_tx_mode    <= 3'b101        ; //CTRL_NACK Mode (High-Z)
    173             1                    ***0***                                             o_hot_join_cnt_en     <= 1'b0          ; //Disable Bits Counter
    174             1                    ***0***                                             state                 <= CTRL_NACK_BIT ;
    175                                                                                  end
    176                                                                              else
    177                                                                                  begin
    178             1                    ***0***                                             o_hot_join_acc_rej    <= 1'b1         ; //HJ IS ACCEPTED
    179             1                    ***0***                                             o_hot_join_regf_rd_en <= 1'b0         ;
    180             1                    ***0***                                             o_hot_join_pp_od      <= 1'b1         ; //push-pull
    181             1                    ***0***                                             o_hot_join_tx_en      <= 1'b1         ;
    182             1                    ***0***                                             o_hot_join_tx_mode    <= 3'b111       ; //CTRL_ACK Mode
    183             1                    ***0***                                             o_hot_join_cnt_en     <= 1'b0         ; //Disable Bits Counter
    184             1                    ***0***                                             state                 <= CTRL_ACK_BIT ;
    185                                                                                  end
    186                                                                          end
    187                                                                      else 
    188                                                                          begin
    189             1                        200                                     state <= HJ_IDLE ;
    190                                                                          end
    191                                                                  end
    192                                              
    193                                                              CTRL_ACK_BIT:
    194                                                                  begin
    195                                                                      if (i_hot_join_tx_mode_done)
    196                                                                          begin
    197                                                                              if (!hot_join_cfg_en_dis)  //controller may DISHJ after ACK
    198                                                                                  begin
    199             1                    ***0***                                             o_hot_join_tx_en   <= 1'b1               ;
    200             1                    ***0***                                             o_hot_join_pp_od   <= 1'b1               ; //push-pull
    201             1                    ***0***                                             o_hot_join_tx_mode <= 3'b110             ; //REPEATED_START Mode
    202             1                    ***0***                                             o_hot_join_cnt_en  <= 1'b0               ; //Disable Bits Counter
    203             1                    ***0***                                             o_hot_join_done    <= 1'b0               ;
    204             1                    ***0***                                             state              <= REPEATED_START_BIT ; //starting DISHJ CCC 
    205                                                                                  end
    206                                                                              else 
    207                                                                                  begin
    208             1                    ***0***                                             o_hot_join_tx_en <= 1'b0 ;
    209                                              
    210             1                    ***0***                                             o_hot_join_pp_od <= 1'b0 ;
    211             1                    ***0***                                             state <= HJ_IDLE ; 
    212             1                    ***0***                                             o_hot_join_done <= 1'b1 ; 
    213                                                                                      if (hot_join_cfg_aval_busy)
    214                                                                                          begin
    215             1                    ***0***                                                     o_hot_join_daa_req <= 1'b1 ;  //DAA will initiate Sr and cont. the flow
    216                                                                                          end
    217                                                                                  end
    218                                                                          end   
    219                                                                      else
    220                                                                          begin
    221             1                    ***0***                                     state <= CTRL_ACK_BIT ;
    222                                                                          end
    223                                                                  end  
    224                                              
    225                                                              CTRL_NACK_BIT:
    226                                                                  begin
    227                                                                      if (i_hot_join_tx_mode_done)
    228                                                                          begin
    229                                                                          //NACK and DISHJ path
    230                                                                              if (!hot_join_cfg_en_dis || !i_hot_join_support) 
    231                                                                                  begin
    232             1                    ***0***                                             o_hot_join_tx_en   <= 1'b1               ;
    233             1                    ***0***                                             o_hot_join_pp_od   <= 1'b1               ; //push-pull
    234             1                    ***0***                                             o_hot_join_tx_mode <= 3'b110             ; //REPEATED_START Mode
    235             1                    ***0***                                             o_hot_join_cnt_en  <= 1'b0               ; //Disable Bits Counter
    236             1                    ***0***                                             o_hot_join_done    <= 1'b0               ;
    237             1                    ***0***                                             state              <= REPEATED_START_BIT ; //starting DISHJ CCC
    238                                                                                  end
    239                                                                          //NACK only path
    240                                                                              else                        
    241                                                                                  begin
    242             1                    ***0***                                             state <= HJ_IDLE ;  
    243             1                    ***0***                                             o_hot_join_done <= 1'b1 ;
    244                                                                                  end 
    245                                                                          end   
    246                                                                      else
    247                                                                          begin
    248             1                    ***0***                                     state <= CTRL_NACK_BIT ;
    249                                                                          end
    250                                                                  end  
    251                                              
    252                                                              REPEATED_START_BIT:  //only for ENEC/DISEC paths
    253                                                                  begin
    254                                                                      if (i_hot_join_tx_mode_done)
    255                                                                          begin
    256             1                    ***0***                                     o_hot_join_tx_en      <= 1'b1        ;
    257             1                    ***0***                                     o_hot_join_pp_od      <= 1'b1        ; //push-pull
    258             1                    ***0***                                     o_hot_join_tx_mode    <= 3'b001      ; //SERIALIZING Mode
    259             1                    ***0***                                     o_hot_join_cnt_en     <= 1'b1        ; //Enable Bits Counter
    260             1                    ***0***                                     o_hot_join_regf_addr  <= 10'd46      ; //BROADCAST ADDRESS (7h'7E/W)
    261             1                    ***0***                                     o_hot_join_regf_rd_en <= 1'b1        ;
    262             1                    ***0***                                     state                 <= CCC_ADDRESS ;
    263                                                                          end   
    264                                                                      else
    265                                                                          begin
    266             1                    ***0***                                     o_hot_join_tx_en   <= 1'b1               ;
    267             1                    ***0***                                     o_hot_join_pp_od   <= 1'b1               ; //push-pull
    268             1                    ***0***                                     o_hot_join_tx_mode <= 3'b110             ; //REPEATED_START Mode
    269             1                    ***0***                                     o_hot_join_cnt_en  <= 1'b0               ; //Disable Bits Counter
    270             1                    ***0***                                     o_hot_join_done    <= 1'b0               ;
    271             1                    ***0***                                     state              <= REPEATED_START_BIT ;
    272                                                                          end
    273                                                                  end 
    274                                              
    275                                                              CCC_ADDRESS:  //sending BROADCAST ADDRESS
    276                                                                  begin
    277             1                    ***0***                             o_hot_join_cnt_en     <= 1'b1 ; //Enable Bits Counter
    278             1                    ***0***                             o_hot_join_regf_rd_en <= 1'b0 ;
    279                                                                      if (i_hot_join_tx_pp_mode_done)
    280                                                                          begin
    281             1                    ***0***                                     o_hot_join_pp_od   <= 1'b0         ; //open-drain
    282             1                    ***0***                                     o_hot_join_cnt_en  <= 1'b0         ; //Disable Bits Counter
    283             1                    ***0***                                     o_hot_join_tx_en   <= 1'b0         ;
    284             1                    ***0***                                     o_hot_join_tx_mode <= 3'b000       ;
    285             1                    ***0***                                     o_hot_join_rx_en   <= 1'b1         ;
    286             1                    ***0***                                     o_hot_join_rx_mode <= 3'b000       ; //ACK Mode
    287             1                    ***0***                                     state              <= TRGT_ACK_BIT ;
    288                                                                          end   
    289                                                                      else
    290                                                                          begin
    291             1                    ***0***                                     state <= CCC_ADDRESS ;
    292                                                                          end
    293                                                                  end 
    294                                              
    295                                                              TRGT_ACK_BIT:
    296                                                                  begin
    297             1                    ***0***                             o_hot_join_regf_rd_en <= 1'b1 ; //early reg_file setup for timing optimization
    298                                                                      case (hot_join_cfg_en_dis)
    299             1                    ***0***                             ENHJ_MODE : o_hot_join_regf_addr <= 10'd401 ; //ENEC CCC (0x00)
    300             1                    ***0***                             DISHJ_MODE: o_hot_join_regf_addr <= 10'd403 ; //DISEC CCC (0x01)
    301                                                                      endcase 
    302                                                                      if (i_hot_join_rx_mode_done && i_hot_join_scl_neg_edge)
    303                                                                          begin
    304                                                                              if (!i_hot_join_nack_ack)
    305                                                                                  begin
    306             1                    ***0***                                             state <= CCC_DATA ;
    307             1                    ***0***                                             o_hot_join_tx_en          <= 1'b1   ;
    308             1                    ***0***                                             o_hot_join_rx_en          <= 1'b0   ;
    309             1                    ***0***                                             o_hot_join_pp_od          <= 1'b1   ; //push-pull
    310             1                    ***0***                                             o_hot_join_tx_mode        <= 3'b001 ; //SERIALIZING Mode
    311             1                    ***0***                                             o_hot_join_cnt_en         <= 1'b1   ; //Enable Bits Counter
    312                                                                                  end
    313                                                                              else
    314                                                                                  begin
    315             1                    ***0***                                             state <= HJ_IDLE ; //STOP after NACK
    316             1                    ***0***                                             o_hot_join_done    <= 1'b1 ;
    317             1                    ***0***                                             o_hot_join_acc_rej <= 1'b0 ;
    318                                                                                  end
    319                                                                          end   
    320                                                                      else
    321                                                                          begin
    322             1                    ***0***                                     state <= TRGT_ACK_BIT ;
    323                                                                          end
    324                                                                  end 
    325                                              
    326                                                              CCC_DATA:
    327                                                                  begin
    328             1                    ***0***                             o_hot_join_regf_rd_en <= 1'b0 ;
    329                                                                      if (i_hot_join_tx_pp_mode_done)
    330                                                                          begin
    331             1                    ***0***                                     state <= PARITY_BIT ;
    332             1                    ***0***                                     o_hot_join_tx_en   <= 1'b1   ;
    333             1                    ***0***                                     o_hot_join_pp_od   <= 1'b1   ; //push-pull
    334             1                    ***0***                                     o_hot_join_tx_mode <= 3'b011 ; //PARITY Mode
    335             1                    ***0***                                     o_hot_join_cnt_en  <= 1'b0   ; //Disable Bits Counter
    336                                                                          end   
    337                                                                      else
    338                                                                          begin
    339             1                    ***0***                                     state <= CCC_DATA ;
    340                                                                          end
    341                                                                  end 
    342                                                                  
    343                                                              PARITY_BIT:
    344                                                                  begin
    345             1                    ***0***                             o_hot_join_regf_rd_en <= 1'b1 ; //early reg_file setup for second_frame optimization
    346                                                                      case (hot_join_cfg_en_dis) 
    347             1                    ***0***                             ENHJ_MODE : o_hot_join_regf_addr <= 10'd402 ; //ENEC BYTE
    348             1                    ***0***                             DISHJ_MODE: o_hot_join_regf_addr <= 10'd404 ; //DISEC BYTE
    349                                                                      endcase
    350                                                                      if (i_hot_join_tx_pp_mode_done)
    351                                                                          begin
    352                                                                              if (!second_frame_done)
    353                                                                                  begin
    354             1                    ***0***                                             state <= CCC_DATA ;
    355             1                    ***0***                                             o_hot_join_tx_en   <= 1'b1   ;
    356             1                    ***0***                                             o_hot_join_pp_od   <= 1'b1   ; //push-pull
    357             1                    ***0***                                             o_hot_join_tx_mode <= 3'b001 ; //SERIALIZING Mode
    358             1                    ***0***                                             o_hot_join_cnt_en  <= 1'b1   ; //Enable Bits Counter
    359             1                    ***0***                                             second_frame_done  <= 1'b1   ;
    360                                                                                  end
    361                                                                              else
    362                                                                                  begin
    363             1                    ***0***                                             state <= HJ_IDLE ;
    364             1                    ***0***                                             second_frame_done  <= 1'b0   ;
    365             1                    ***0***                                             o_hot_join_tx_mode <= 3'b010 ; //STOP Mode for a smooth mux select with i3c_engine
    366             1                    ***0***                                             o_hot_join_done    <= 1'b1   ;
    367                                                                                      if (!i_hot_join_support && hot_join_cfg_aval_busy)
    368                                                                                          begin
    369             1                    ***0***                                                     o_hot_join_ctrl_role_pass <= 1'b1 ;  //i3c_main_controller will enable CRH
    370                                                                                          end
    371                                                                                  end
    372                                                                          end   
    373                                                                      else
    374                                                                          begin
    375             1                    ***0***                                     state <= PARITY_BIT ;
    376                                                                          end                        
    377                                                                  end 
    378                                                              endcase    
    379                                              
    380                                                              if (!i_hot_join_enable)
    381                                                                  begin
    382             1                        200                             state <= HJ_IDLE ; //supporting immediate hj_disable for all states

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         92        21        71    22.82%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_hot_join --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                             hot_join_cfg_ack_nack           0           0        0.00 
                            hot_join_cfg_aval_busy           0           0        0.00 
                               hot_join_cfg_en_dis           0           0        0.00 
                                    i_hot_join_ccc           0           0        0.00 
                                    i_hot_join_clk           1           1      100.00 
                     i_hot_join_configuration[0-2]           0           0        0.00 
                                 i_hot_join_enable           0           0        0.00 
                               i_hot_join_nack_ack           1           1      100.00 
                                  i_hot_join_rst_n           1           1      100.00 
                           i_hot_join_rx_mode_done           1           1      100.00 
                           i_hot_join_scl_neg_edge           1           1      100.00 
                           i_hot_join_scl_pos_edge           1           1      100.00 
                                i_hot_join_support           0           0        0.00 
                           i_hot_join_tx_mode_done           1           1      100.00 
                        i_hot_join_tx_pp_mode_done           1           1      100.00 
                                o_hot_join_acc_rej           0           0        0.00 
                                 o_hot_join_cnt_en           0           0        0.00 
                         o_hot_join_ctrl_role_pass           0           0        0.00 
                                o_hot_join_daa_req           0           0        0.00 
                                   o_hot_join_done           0           0        0.00 
                                  o_hot_join_pp_od           0           0        0.00 
                         o_hot_join_regf_addr[9-6]           0           0        0.00 
                           o_hot_join_regf_addr[5]           0           1       50.00 
                           o_hot_join_regf_addr[4]           0           0        0.00 
                         o_hot_join_regf_addr[3-1]           0           1       50.00 
                           o_hot_join_regf_addr[0]           0           0        0.00 
                             o_hot_join_regf_rd_en           0           1       50.00 
                                  o_hot_join_rx_en           0           0        0.00 
                           o_hot_join_rx_mode[2-0]           0           0        0.00 
                                  o_hot_join_tx_en           0           0        0.00 
                           o_hot_join_tx_mode[2-0]           0           0        0.00 
                                 second_frame_done           0           0        0.00 
                                        state[2-0]           0           0        0.00 

Total Node Count     =         46 
Toggled Node Count   =          8 
Untoggled Node Count =         38 

Toggle Coverage      =      22.82% (21 of 92 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_ibi
=== Design Unit: work.IBI
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                       101         8        93     7.92%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_ibi

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File IBI.v
------------------------------------IF Branch------------------------------------
    122                                        3     Count coming in to IF
    122             1                          1         if (!i_ibi_rst_n) 
    124             1                          2         else    
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    135                                       30     Count coming in to IF
    135             1                          1         if (!i_ibi_rst_n) 
    137             1                         29         else    
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    156                                      361     Count coming in to IF
    156             1                          1         if (!i_ibi_rst_n) 
    174             1                        360         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    176                                      360     Count coming in to CASE
    177             1                        360         		IDLE: begin
    208             1                    ***0***         		ACK: begin  //Entered in LOW SCL with TX driving 0 OD
    232             1                    ***0***         	    MDB: begin
    251             1                    ***0***         	    MDB_T_BIT:begin     
    273             1                    ***0***         	    PAYLOAD: begin      
    290             1                    ***0***         		NACK: begin // Entered in LOW SCL with TX driving High imp. OD
    308             1                    ***0***         		REP_START: begin  
    342             1                    ***0***         		BDCST: begin // Entered in HIGH SCL with TX driving 0 PP TX enabled
    355             1                    ***0***         		DISABLE_INT_CCC_BDCST: begin       
    372             1                    ***0***                 PARITY: begin
    405             1                    ***0***                 TGT_ACK: begin       
    441             1                    ***0***               DISABLE_INT_CCC_DIRECT: begin       
    457             1                    ***0***         		TGT_ADDRESS : begin
    477             1                    ***0***         		DISABLE_INT_BYTE: begin 
    497             1                    ***0***         		END_IBI:         begin       // Entered from NACK in High SCL with TX driving High Imp 
    510             1                    ***0***         		 STOP :    begin      
                                         ***0***     All False Count
Branch totals: 1 hit of 17 branches = 5.88%

------------------------------------IF Branch------------------------------------
    178                                      360     Count coming in to IF
    178             1                    ***0***                       if (i_ibi_en) // Received in SCL High    		
    202             1                        360                      else   
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    180                                  ***0***     Count coming in to IF
    180             1                    ***0***                             if (i_ibi_cfg_reg[0]) // CTRLR ACK/NACK
    192             1                    ***0***                             else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    184                                  ***0***     Count coming in to IF
    184             1                    ***0***                                         if (i_ibi_scl_neg_edge)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    194                                  ***0***     Count coming in to IF
    194             1                    ***0***                                     if (i_ibi_scl_neg_edge)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    209                                  ***0***     Count coming in to IF
    209             1                    ***0***                       if(i_ibi_scl)  	//wait for HIGH SCL level
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    211                                  ***0***     Count coming in to IF
    211             1                    ***0***                         if (i_ibi_bcr_reg[2])
    222             1                    ***0***                         else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    233                                  ***0***     Count coming in to IF
    233             1                    ***0***         	         if(i_ibi_rx_mode_done_ff1)          
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    237                                  ***0***     Count coming in to IF
    237             1                    ***0***         	          if(i_ibi_rx_mode_done_ff2)     
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    240                                  ***0***     Count coming in to IF
    240             1                    ***0***         	                    if (!i_ibi_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    253                                  ***0***     Count coming in to IF
    253             1                    ***0***         	                   if (!i_ibi_cfg_reg[1]) // Additional Payload: 1: Read .. 0:Terminate
    262             1                    ***0***         	                   else     
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    255                                  ***0***     Count coming in to IF
    255             1                    ***0***         	                           if (i_ibi_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    278                                  ***0***     Count coming in to IF
    278             1                    ***0***                             if (i_ibi_payload_done)	    
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    291                                  ***0***     Count coming in to IF
    291             1                    ***0***         		    if(i_ibi_scl) //wait for HIGH
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    293                                  ***0***     Count coming in to IF
    293             1                    ***0***         		        if (i_ibi_cfg_reg[3:2] == 2'b00) // Keep IBI enabled 
    297             1                    ***0***                         else     
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    310                                  ***0***     Count coming in to IF
    310             1                    ***0***                                  if (end_ibi_flag == 2'b01) 
    316             1                    ***0***                                  else if (end_ibi_flag == 2'b00) // Entered in HIGH SCL with TX driving High imp. OD 
    325             1                    ***0***                                  else if (end_ibi_flag == 2'b10)
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    328                                  ***0***     Count coming in to IF
    328             1                    ***0***                                       if (i_ibi_ser_mode_done)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    332                                  ***0***     Count coming in to IF
    332             1                    ***0***                                       if(ibi_ser_mode_done_pulse)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    343                                  ***0***     Count coming in to IF
    343             1                    ***0***                              if (i_ibi_tx_mode_done_ff2)   // Entered in the low SCL of last bit 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    356                                  ***0***     Count coming in to IF
    356             1                    ***0***         		                  if (!i_ibi_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    362                                  ***0***     Count coming in to IF
    362             1                    ***0***         		                  if (i_ibi_tx_mode_done_ff1)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    373                                  ***0***     Count coming in to IF
    373             1                    ***0***                            if(parity_to_SR_flag == 2'b11)
    383             1                    ***0***                     	   else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    375                                  ***0***     Count coming in to IF
    375             1                    ***0***         		                         if (ibi_ser_mode_done_pulse)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    385                                  ***0***     Count coming in to IF
    385             1                    ***0***                     	           if (ibi_ser_mode_done_pulse)                	   
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    387                                  ***0***     Count coming in to IF
    387             1                    ***0***         		                          if(parity_to_SR_flag == 2'b00)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    394                                  ***0***     Count coming in to IF
    394             1                    ***0***                                           if(parity_to_SR_flag == 2'b01)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    406                                  ***0***     Count coming in to IF
    406             1                    ***0***                        if(i_ibi_scl) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    408                                  ***0***     Count coming in to IF
    408             1                    ***0***                          if (i_ibi_ack_nack)
    434             1                    ***0***                          else    
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    413                                  ***0***     Count coming in to IF
    413             1                    ***0***                                 if (tgt_address_flag)
    420             1                    ***0***                                else     
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    422                                  ***0***     Count coming in to IF
    422             1                    ***0***                                     if (i_ibi_cfg_reg[3:2] == 2'b01) //disable Direct tgt 
    427             1                    ***0***                                     else if (i_ibi_cfg_reg[3:2] == 2'b11)// disable for all tgts           
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    442                                  ***0***     Count coming in to IF
    442             1                    ***0***                                  if (!i_ibi_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    448                                  ***0***     Count coming in to IF
    448             1                    ***0***         		                  if (i_ibi_tx_mode_done_ff1)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    459                                  ***0***     Count coming in to IF
    459             1                    ***0***         		                if (ibi_ser_mode_done_pulse) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    464                                  ***0***     Count coming in to IF
    464             1                    ***0***         		                if(!i_ibi_scl && i_ibi_tx_mode_done_ff3)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    480                                  ***0***     Count coming in to IF
    480             1                    ***0***         		                  if (!i_ibi_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    486                                  ***0***     Count coming in to IF
    486             1                    ***0***         		                  if (ibi_ser_mode_done_pulse)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    501                                  ***0***     Count coming in to IF
    501             1                    ***0***         		                  if (!i_ibi_scl) // wait for Low SCL and maintaing High imp.
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    512                                  ***0***     Count coming in to IF
    512             1                    ***0***         		             if (!i_ibi_scl)
    517             1                    ***0***                            else  if (i_ibi_ser_mode_done)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      11         0        11     0.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_ibi --

  File IBI.v
----------------Focused Condition View-------------------
Line       293 Item    1  (i_ibi_cfg_reg[3:2] == 0)
Condition totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_ibi_cfg_reg[3:2] == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:    ***0***  (i_ibi_cfg_reg[3:2] == 0)_0  -                             
  Row   2:    ***0***  (i_ibi_cfg_reg[3:2] == 0)_1  -                             

----------------Focused Condition View-------------------
Line       310 Item    1  (end_ibi_flag == 1)
Condition totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (end_ibi_flag == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (end_ibi_flag == 1)_0  -                             
  Row   2:    ***0***  (end_ibi_flag == 1)_1  -                             

----------------Focused Condition View-------------------
Line       316 Item    1  (end_ibi_flag == 0)
Condition totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (end_ibi_flag == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (end_ibi_flag == 0)_0  -                             
  Row   2:    ***0***  (end_ibi_flag == 0)_1  -                             

----------------Focused Condition View-------------------
Line       325 Item    1  (end_ibi_flag == 2)
Condition totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (end_ibi_flag == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (end_ibi_flag == 2)_0  -                             
  Row   2:    ***0***  (end_ibi_flag == 2)_1  -                             

----------------Focused Condition View-------------------
Line       373 Item    1  (parity_to_SR_flag == 3)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (parity_to_SR_flag == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (parity_to_SR_flag == 3)_0  -                             
  Row   2:    ***0***  (parity_to_SR_flag == 3)_1  -                             

----------------Focused Condition View-------------------
Line       387 Item    1  (parity_to_SR_flag == 0)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (parity_to_SR_flag == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (parity_to_SR_flag == 0)_0  -                             
  Row   2:    ***0***  (parity_to_SR_flag == 0)_1  -                             

----------------Focused Condition View-------------------
Line       394 Item    1  (parity_to_SR_flag == 1)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (parity_to_SR_flag == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (parity_to_SR_flag == 1)_0  -                             
  Row   2:    ***0***  (parity_to_SR_flag == 1)_1  -                             

----------------Focused Condition View-------------------
Line       422 Item    1  (i_ibi_cfg_reg[3:2] == 1)
Condition totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_ibi_cfg_reg[3:2] == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:    ***0***  (i_ibi_cfg_reg[3:2] == 1)_0  -                             
  Row   2:    ***0***  (i_ibi_cfg_reg[3:2] == 1)_1  -                             

----------------Focused Condition View-------------------
Line       427 Item    1  (i_ibi_cfg_reg[3:2] == 3)
Condition totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_ibi_cfg_reg[3:2] == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:    ***0***  (i_ibi_cfg_reg[3:2] == 3)_0  -                             
  Row   2:    ***0***  (i_ibi_cfg_reg[3:2] == 3)_1  -                             

----------------Focused Condition View-------------------
Line       464 Item    1  (~i_ibi_scl && i_ibi_tx_mode_done_ff3)
Condition totals: 0 of 2 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
               i_ibi_scl         N  No hits                  Hit '_0' and '_1'
  i_ibi_tx_mode_done_ff3         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  i_ibi_scl_0               i_ibi_tx_mode_done_ff3        
  Row   2:    ***0***  i_ibi_scl_1               -                             
  Row   3:    ***0***  i_ibi_tx_mode_done_ff3_0  ~i_ibi_scl                    
  Row   4:    ***0***  i_ibi_tx_mode_done_ff3_1  ~i_ibi_scl                    


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      4         2         2    50.00%

================================Expression Details================================

Expression Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_ibi --

  File IBI.v
----------------Focused Expression View-----------------
Line       126 Item    1  (~regf_wr_en_prev & ibi_regf_wr_en)
Expression totals: 0 of 2 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  regf_wr_en_prev         N  No hits                  Hit '_0' and '_1'
   ibi_regf_wr_en         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  regf_wr_en_prev_0     ibi_regf_wr_en                
  Row   2:    ***0***  regf_wr_en_prev_1     ibi_regf_wr_en                
  Row   3:          1  ibi_regf_wr_en_0      ~regf_wr_en_prev              
  Row   4:    ***0***  ibi_regf_wr_en_1      ~regf_wr_en_prev              

----------------Focused Expression View-----------------
Line       139 Item    1  (~ibi_ser_mode_done_prev & i_ibi_ser_mode_done)
Expression totals: 2 of 2 input terms covered = 100.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  ibi_ser_mode_done_prev         Y
     i_ibi_ser_mode_done         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  ibi_ser_mode_done_prev_0  i_ibi_ser_mode_done           
  Row   2:          1  ibi_ser_mode_done_prev_1  i_ibi_ser_mode_done           
  Row   3:          1  i_ibi_ser_mode_done_0     ~ibi_ser_mode_done_prev       
  Row   4:          1  i_ibi_ser_mode_done_1     ~ibi_ser_mode_done_prev       


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                      16         1        15     6.25%
    FSM Transitions                 39         0        39     0.00%

================================FSM Details================================

FSM Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_ibi --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 177                IDLE                   0
 290                NACK                   2
 208                 ACK                   1
 510                STOP                  15
 232                 MDB                   3
 251           MDB_T_BIT                  14
 273             PAYLOAD                   4
 308           REP_START                   5
 457         TGT_ADDRESS                  13
 342               BDCST                   6
 405             TGT_ACK                  17
 355DISABLE_INT_CCC_BDCST                   9
 372              PARITY                  16
 477    DISABLE_INT_BYTE                  11
 441DISABLE_INT_CCC_DIRECT                  10
 497             END_IBI                  12
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                   1          
    Uncovered States :
    ------------------
                   State
                   -----
                    NACK
                     ACK
                    STOP
                     MDB
               MDB_T_BIT
                 PAYLOAD
               REP_START
             TGT_ADDRESS
                   BDCST
                 TGT_ACK
    DISABLE_INT_CCC_BDCST
                  PARITY
        DISABLE_INT_BYTE
    DISABLE_INT_CCC_DIRECT
                 END_IBI
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 196                   0          IDLE -> NACK        
 186                   1          IDLE -> ACK         
 299                   2          NACK -> REP_START   
 295                   3          NACK -> STOP        
 158                   4          NACK -> IDLE        
 224                   5          ACK -> STOP         
 214                   6          ACK -> MDB          
 158                   7          ACK -> IDLE         
 519                   8          STOP -> IDLE        
 244                   9          MDB -> MDB_T_BIT    
 158                  10          MDB -> IDLE         
 264                  11          MDB_T_BIT -> PAYLOAD
 258                  12          MDB_T_BIT -> STOP   
 158                  13          MDB_T_BIT -> IDLE   
 283                  14          PAYLOAD -> IDLE     
 334                  15          REP_START -> TGT_ADDRESS
 318                  16          REP_START -> BDCST  
 314                  17          REP_START -> IDLE   
 469                  18          TGT_ADDRESS -> TGT_ACK
 158                  19          TGT_ADDRESS -> IDLE 
 345                  20          BDCST -> TGT_ACK    
 158                  21          BDCST -> IDLE       
 436                  22          TGT_ACK -> STOP     
 429                  23          TGT_ACK -> DISABLE_INT_CCC_BDCST
 424                  24          TGT_ACK -> DISABLE_INT_CCC_DIRECT
 415                  25          TGT_ACK -> DISABLE_INT_BYTE
 158                  26          TGT_ACK -> IDLE     
 367                  27          DISABLE_INT_CCC_BDCST -> PARITY
 158                  28          DISABLE_INT_CCC_BDCST -> IDLE
 399                  29          PARITY -> STOP      
 392                  30          PARITY -> DISABLE_INT_BYTE
 380                  31          PARITY -> REP_START 
 158                  32          PARITY -> IDLE      
 491                  33          DISABLE_INT_BYTE -> PARITY
 158                  34          DISABLE_INT_BYTE -> IDLE
 452                  35          DISABLE_INT_CCC_DIRECT -> PARITY
 158                  36          DISABLE_INT_CCC_DIRECT -> IDLE
 505                  37          END_IBI -> REP_START
 158                  38          END_IBI -> IDLE     


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                  16         1        15     6.25%
        FSM Transitions             39         0        39     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     162        31       131    19.13%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_ibi --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File IBI.v
    23                                               module IBI(
    24                                                   input        i_ibi_clk,
    25                                                   input        i_ibi_rst_n,
    26                                                   input        i_ibi_en,
    27                                                   input        i_ibi_scl_neg_edge,
    28                                                   input        i_ibi_scl_pos_edge,
    29                                                   input  [7:0] i_ibi_bcr_reg,
    30                                                   input  [7:0] i_ibi_cfg_reg,
    31                                                   input  [7:0] i_ibi_payload_size_reg,
    32                                                   input  [7:0] i_ibi_tgt_address,
    33                                                   input        i_ibi_ser_mode_done,
    34                                                   input        i_ibi_scl,
    35                                                   input        i_ibi_rx_mode_done,
    36                                                   input        i_ibi_payload_done,
    37                                                   input        i_ibi_ack_nack,
    38                                                  
    39                                                   output reg       o_ibi_pp_od,    
    40                                                   output reg [11:0] o_ibi_regf_address,
    41                                                   output reg       o_ibi_regf_rd_en,
    42                                                   output reg       o_ibi_rx_en,
    43                                                   output reg       o_ibi_tx_en,
    44                                                   output reg       o_ibi_regf_wr_en,
    45                                                   output reg [2:0] o_ibi_rx_mode,
    46                                                   output reg [2:0] o_ibi_tx_mode,
    47                                                   output reg       o_ibi_payload_en,
    48                                                   output reg       o_ibi_cnt_en,
    49                                                   output reg       o_ibi_ser_rx_tx ,
    50                                                   output reg       o_ibi_done
    51                                                  );
    52                                                  
    53                                                  
    54                                               //-------------------------------- states encoding in Binare ----------------------------------------------
    55                                               
    56                                               localparam IDLE     	             = 5'b00000 ; 
    57                                               localparam ACK       	             = 5'b00001 ;
    58                                               localparam NACK       	             = 5'b00010 ;
    59                                               localparam MDB       	             = 5'b00011 ;
    60                                               localparam PAYLOAD    		         = 5'b00100 ;
    61                                               localparam REP_START                 = 5'b00101 ;
    62                                               localparam BDCST                     = 5'b00110 ;
    63                                               localparam DISABLE_ALL_INT           = 5'b00111 ;
    64                                               localparam DISABLE_TGT_INT           = 5'b01000 ;
    65                                               localparam DISABLE_INT_CCC_BDCST     = 5'b01001 ;
    66                                               localparam DISABLE_INT_CCC_DIRECT    = 5'b01010 ;
    67                                               localparam DISABLE_INT_BYTE          = 5'b01011 ;
    68                                               localparam END_IBI                   = 5'b01100 ;
    69                                               localparam TGT_ADDRESS               = 5'b01101 ;
    70                                               localparam MDB_T_BIT                 = 5'b01110 ;
    71                                               localparam STOP                      = 5'b01111 ;
    72                                               localparam PARITY                    = 5'b10000 ;
    73                                               localparam TGT_ACK                   = 5'b10001 ;
    74                                               
    75                                               
    76                                               
    77                                               //--------------------------------- parameters and defines ------------------------------------------
    78                                               /*To get BCR from Target Address :
    79                                                1) Target Address value - 7'h08 = Target index
    80                                                2) Base Address + 6 + 8*(Target index)
    81                                               h08 -> 206
    82                                               h09->  214
    83                                               h10->  222
    84                                               H11 -> 230
    85                                               */
    86                                               localparam FIRST_TGT_ADDRESS = 7'h08;
    87                                               localparam BASE_ADDRESS = 200; 
    88                                               localparam OFFSET = 6;
    89                                               localparam TGT_ADDR_OFFSET = 8;
    90                                               
    91                                               //--------------------------------- parameters and defines in RegFile ------------------------------------------
    92                                               localparam MDB_ADDRESS = 8'd107; //MDB location in RegFile
    93                                               localparam BDCST_WRITE_ADDRESS = 8'd46; //  write for broadcasring location in RegFile 8'h7E
    94                                               localparam EVENT_DISABLE_DIRECT_CCC_ADDRESS = 8'd103; // "Event" interrupt "DISEC" Direct location in RegFile 8'h81
    95                                               localparam EVENT_DISABLE_BDCST_CCC_ADDRESS =8'd104; //Disable "Event" interrupt "DISEC" Broadcast location in RegFile 8'h01
    96                                               localparam EVENT_DISABLE_BYTE_ADDRESS=10'd392; //Disable Target Events Command Byte location in RegFile 8'b00001011
    97                                               localparam ARBITRATION_REG_ADDRESS = 8'd48; 
    98                                               localparam PAYLOAD_SIZE_REG_ADDRESS ='d102;	
    99                                               localparam IBI_CFG_REG_ADDRESS ='d101;
    100                                              
    101                                              
    102                                              
    103                                              //--------------------------------- internal wires declaration ------------------------------------------
    104                                              reg [4:0] state ;
    105                                              reg [1:0] end_ibi_flag;
    106                                              reg [1:0] parity_to_SR_flag;
    107                                              reg tgt_address_flag;
    108                                              //--------------------------------- shift rx mode done 2 cycles ------------------------------------------
    109                                              
    110                                              reg i_ibi_rx_mode_done_ff1, i_ibi_rx_mode_done_ff2;
    111             1                         64     always @(posedge i_ibi_clk or negedge i_ibi_rst_n )
    112                                                  begin
    113             1                         64           i_ibi_rx_mode_done_ff1 <= i_ibi_rx_mode_done; 
    114             1                         64           i_ibi_rx_mode_done_ff2 <= i_ibi_rx_mode_done_ff1;
    115                                                  end
    116                                              //----------------------------------Pulse Generator for RegFile wr_en ------------------------------------//
    117                                              reg ibi_regf_wr_en;
    118                                              reg regf_wr_en_prev;
    119                                                
    120             1                          3     always@(posedge i_ibi_clk or negedge i_ibi_rst_n )
    121                                                  begin
    122                                                  if (!i_ibi_rst_n) 
    123             1                          1           regf_wr_en_prev  <= 1'b0;
    124                                                  else    
    125             1                          2           regf_wr_en_prev  <=   ibi_regf_wr_en ;  
    126             1                          3           o_ibi_regf_wr_en <= ~(regf_wr_en_prev) & ibi_regf_wr_en ;
    127                                                  end
    128                                              //----------------------------------Pulse Generator for tx mode done ------------------------------------//
    129                                              reg ibi_ser_mode_done_prev;
    130                                              reg ibi_ser_mode_done_pulse;
    131                                              
    132                                                
    133             1                         30     always@(posedge i_ibi_clk or negedge i_ibi_rst_n )
    134                                                  begin
    135                                                  if (!i_ibi_rst_n) 
    136             1                          1           regf_wr_en_prev  <= 1'b0;
    137                                                  else    
    138             1                         29           ibi_ser_mode_done_prev  <=   i_ibi_ser_mode_done ;  
    139             1                         30           ibi_ser_mode_done_pulse <= ~(ibi_ser_mode_done_prev) & i_ibi_ser_mode_done ;
    140                                                  end
    141                                              //--------------------------------- shift ser mode done 3 cycles ------------------------------------------
    142                                              
    143                                              reg i_ibi_tx_mode_done_ff1, i_ibi_tx_mode_done_ff2, i_ibi_tx_mode_done_ff3;
    144             1                         48     always @(posedge i_ibi_clk or negedge i_ibi_rst_n )
    145                                                  begin
    146             1                         48           i_ibi_tx_mode_done_ff1 <= i_ibi_ser_mode_done; 
    147             1                         48           i_ibi_tx_mode_done_ff2 <= i_ibi_tx_mode_done_ff1;
    148             1                         48           i_ibi_tx_mode_done_ff3 <= i_ibi_tx_mode_done_ff2;
    149                                                  end
    150                                              
    151                                              //--------------------------------- controller main fsm ---------------------------------------------------
    152                                              
    153             1                        361     always @(posedge i_ibi_clk or negedge i_ibi_rst_n) 
    154                                                begin: IBI
    155                                                  
    156                                                  if (!i_ibi_rst_n) 
    157                                                  	begin
    158             1                          1         	state <= IDLE;
    159             1                          1         	o_ibi_pp_od <= 1'b0;
    160             1                          1         	o_ibi_regf_address <= 12'b0;
    161             1                          1             o_ibi_regf_rd_en   <= 1'b0;
    162             1                          1             ibi_regf_wr_en     <= 1'b0;
    163             1                          1             o_ibi_rx_mode      <= 3'b0;
    164             1                          1             o_ibi_tx_mode      <= 3'b0;
    165             1                          1             o_ibi_done         <= 1'b0;
    166             1                          1             o_ibi_tx_en        <= 1'b0;
    167             1                          1             o_ibi_rx_en        <= 1'b0;
    168             1                          1             o_ibi_payload_en   <= 1'b0;
    169             1                          1             o_ibi_ser_rx_tx    <=1'b0;
    170             1                          1             end_ibi_flag       <= 2'b00;
    171             1                          1             o_ibi_cnt_en       <= 1'b0;
    172                                                  	end
    173                                              
    174                                                  else
    175                                                  	begin
    176                                                  		case(state)
    177                                                  		IDLE: begin
    178                                                                if (i_ibi_en) // Received in SCL High    		
    179                                                                   begin
    180                                                                      if (i_ibi_cfg_reg[0]) // CTRLR ACK/NACK
    181                                                                          begin
    182             1                    ***0***                                     o_ibi_regf_rd_en <=1'b1; 
    183             1                    ***0***                                     o_ibi_regf_address <= ((i_ibi_tgt_address[7:1] - FIRST_TGT_ADDRESS) << 3) + OFFSET + BASE_ADDRESS ; // to get the target BCR register Address
    184                                                                                  if (i_ibi_scl_neg_edge)
    185                                                                                      begin
    186             1                    ***0***                                             state <= ACK;
    187             1                    ***0***                                             o_ibi_tx_en <= 1'b1;
    188             1                    ***0***                                             o_ibi_tx_mode <= 3'b100;//CTRL ACK OPen-Drain 0
    189             1                    ***0***                                             o_ibi_pp_od <= 1'b0;
    190                                                                                      end
    191                                                                          end
    192                                                                      else 
    193                                                                          begin
    194                                                                              if (i_ibi_scl_neg_edge)
    195                                                                                 begin
    196             1                    ***0***                                        state <= NACK;
    197             1                    ***0***                                        o_ibi_tx_en <= 1'b0; 
    198             1                    ***0***                                        o_ibi_pp_od <= 1'b0;
    199                                                                                 end
    200                                                                          end
    201                                                                   end
    202                                                               else   
    203                                                                    begin  
    204             1                        360                              o_ibi_tx_en        <= 1'b0;
    205                                                                    end
    206                                                  		      end
    207                                                  		      
    208                                                  		ACK: begin  //Entered in LOW SCL with TX driving 0 OD
    209                                                                if(i_ibi_scl)  	//wait for HIGH SCL level
    210                                                                  begin 		 
    211                                                                  if (i_ibi_bcr_reg[2])
    212                                                                   //0 : No data after IBI.. 1: MDB then Payload the payload continuity determined by T-bit  
    213                                                                      begin
    214             1                    ***0***                                state <= MDB ; 
    215             1                    ***0***                                o_ibi_regf_rd_en <=1'b0;
    216             1                    ***0***                                o_ibi_cnt_en <= 1'b1;
    217             1                    ***0***                                o_ibi_rx_en <= 1'b1;
    218             1                    ***0***                                o_ibi_tx_en <= 1'b0;
    219             1                    ***0***                                o_ibi_pp_od <= 1'b1;
    220             1                    ***0***                                o_ibi_rx_mode <= 3'b001; //Deserializing
    221                                                                      end
    222                                                                  else 
    223                                                                      begin  		                      
    224             1                    ***0***         		              state <= STOP;
    225                                                                      end
    226                                                                  end   
    227                                                  	         end
    228                                                  	         
    229                                                  	         
    230                                                  	         
    231                                                  	         
    232                                                  	    MDB: begin
    233                                                  	         if(i_ibi_rx_mode_done_ff1)          
    234                                                  	           begin
    235             1                    ***0***         	            ibi_regf_wr_en <= 1'b1;
    236                                                  	           end
    237                                                  	          if(i_ibi_rx_mode_done_ff2)     
    238                                                  	            begin   
    239             1                    ***0***         	               o_ibi_regf_address <= MDB_ADDRESS; //MDB location in RegFile
    240                                                  	                    if (!i_ibi_scl)
    241                                                  		                  begin
    242             1                    ***0***         	                       o_ibi_rx_en <= 1'b0;
    243             1                    ***0***         	                       o_ibi_cnt_en <= 1'b0;
    244             1                    ***0***         	                       state <= MDB_T_BIT;
    245             1                    ***0***         	                       o_ibi_tx_mode <= 3'b100; // driving SDA LOW to create SR 
    246                                                  	                      end
    247                                                  	            end       	              
    248                                                  	         end     
    249                                                  	         
    250                                                  	         
    251                                                  	    MDB_T_BIT:begin     
    252             1                    ***0***         	                    ibi_regf_wr_en <= 1'b0;
    253                                                  	                   if (!i_ibi_cfg_reg[1]) // Additional Payload: 1: Read .. 0:Terminate
    254                                                  	                       begin  
    255                                                  	                           if (i_ibi_scl)
    256                                                  		                         begin
    257             1                    ***0***         		                          o_ibi_tx_mode <= 3'b100; // driving SDA LOW to create SR
    258             1                    ***0***         		                          state <= STOP;
    259             1                    ***0***         		                          o_ibi_tx_en <= 1'b1;
    260                                                  		                         end
    261                                                  		                   end      
    262                                                  	                   else     
    263                                                  	                        begin
    264             1                    ***0***         	                            state <= PAYLOAD;
    265             1                    ***0***         	                            o_ibi_payload_en <= 1'b1;  
    266             1                    ***0***                                         o_ibi_ser_rx_tx <=1'b1;
    267                                                  	                        end
    268                                                  	              end         
    269                                                  	         
    270                                                  	         
    271                                                  	         
    272                                                  	         
    273                                                  	    PAYLOAD: begin      
    274                                                  	               // same process as Data-In Sdr mode 
    275                                                  	               // 8-bit frame then a T-bit with specific number of frames to be received 
    276                                                  	               // SDR take payload enable signal 
    277                                                  	               // frame counter take payload max no frames RegFile[102]   
    278                                                                      if (i_ibi_payload_done)	    
    279                                                                          begin
    280             1                    ***0***                                 o_ibi_payload_en <= 1'b0;
    281             1                    ***0***                                  o_ibi_done  <= 1'b1;
    282             1                    ***0***                                  o_ibi_ser_rx_tx <= 1'b0;
    283             1                    ***0***         		                state <= IDLE;
    284                                                                          end       
    285                                                  	             end  
    286                                                  		     
    287                                               // SDA should be maintained high during both low&high of SCL during ack bit    		     
    288                                               // then high for the next low of SCL and then go down in High SCL making Rep. Start
    289                                               
    290                                                  		NACK: begin // Entered in LOW SCL with TX driving High imp. OD
    291                                                  		    if(i_ibi_scl) //wait for HIGH
    292                                                  		      begin
    293                                                  		        if (i_ibi_cfg_reg[3:2] == 2'b00) // Keep IBI enabled 
    294                                                                    begin                      
    295             1                    ***0***                            state <= STOP;
    296                                                                    end    
    297                                                                  else     
    298                                                                    begin   
    299             1                    ***0***                             state <= REP_START;
    300             1                    ***0***                             end_ibi_flag <= 2'b00;
    301             1                    ***0***                             o_ibi_tx_mode <= 3'b100; // driving SDA LOW PP
    302             1                    ***0***                             o_ibi_tx_en <= 1'b1;
    303                                                                   end
    304                                                                end   
    305                                                  		     end
    306                                                  		      
    307                                                  		      
    308                                                  		REP_START: begin  
    309             1                    ***0***                                  o_ibi_pp_od <= 1'b1;
    310                                                                           if (end_ibi_flag == 2'b01) 
    311                                                                              begin
    312             1                    ***0***                                         o_ibi_tx_mode <= 3'b100; // driving SDA LOW PP
    313             1                    ***0***                                         o_ibi_done <= 1'b1;
    314             1                    ***0***                                         state <= IDLE;
    315                                                                              end
    316                                                                           else if (end_ibi_flag == 2'b00) // Entered in HIGH SCL with TX driving High imp. OD 
    317                                                                              begin
    318             1                    ***0***                                         state <= BDCST; 
    319             1                    ***0***                                         o_ibi_tx_mode <= 3'b001; // Serializing
    320             1                    ***0***                                         o_ibi_regf_rd_en   <= 1'b1 ; 
    321             1                    ***0***                                         o_ibi_regf_address <= BDCST_WRITE_ADDRESS; // 8'h7E/write for broadcasring
    322             1                    ***0***                                         o_ibi_cnt_en <= 1'b1;
    323                                                                              end    
    324                                                                              
    325                                                                           else if (end_ibi_flag == 2'b10)
    326                                                                              begin
    327             1                    ***0***                                       o_ibi_tx_mode <= 3'b000; // Rep_Start
    328                                                                                if (i_ibi_ser_mode_done)
    329                                                                                   begin   
    330             1                    ***0***                                             o_ibi_regf_address <= ARBITRATION_REG_ADDRESS;//((i_ibi_tgt_address[7:1] - FIRST_TGT_ADDRESS) * 4'd9) + TGT_ADDR_OFFSET + BASE_ADDRESS;
    331                                                                                   end   
    332                                                                                if(ibi_ser_mode_done_pulse)
    333                                                                                   begin 
    334             1                    ***0***                                             state <= TGT_ADDRESS; 
    335             1                    ***0***                                             o_ibi_tx_en <= 1'b1;
    336             1                    ***0***                                             o_ibi_tx_mode  <= 3'b001;
    337             1                    ***0***                                             o_ibi_cnt_en <= 1'b1; 
    338                                                                                   end   
    339                                                                              end        
    340                                                  		           end
    341                                                  		           
    342                                                  		BDCST: begin // Entered in HIGH SCL with TX driving 0 PP TX enabled
    343                                                                       if (i_ibi_tx_mode_done_ff2)   // Entered in the low SCL of last bit 
    344                                                                          begin      
    345             1                    ***0***                                    state <= TGT_ACK;
    346             1                    ***0***                                    o_ibi_pp_od <= 1'b0;
    347             1                    ***0***                                    o_ibi_tx_en <= 1'b0;
    348             1                    ***0***                                    o_ibi_rx_en <= 1'b1;
    349             1                    ***0***                                    o_ibi_rx_mode <= 3'b0; //ACK mode
    350             1                    ***0***                                    o_ibi_regf_rd_en <= 1'b1; 
    351             1                    ***0***                                    o_ibi_cnt_en <= 1'b0;
    352                                                                          end       
    353                                                  		       end
    354                                                  		       
    355                                                  		DISABLE_INT_CCC_BDCST: begin       
    356                                                  		                  if (!i_ibi_scl)
    357                                                  		                      begin
    358             1                    ***0***         		                          o_ibi_tx_en  <= 1'b1;
    359             1                    ***0***         		                          o_ibi_pp_od  <= 1'b1;
    360             1                    ***0***         		                          o_ibi_tx_mode <= 3'b001; //Serializing mode
    361                                                  		                      end
    362                                                  		                  if (i_ibi_tx_mode_done_ff1)
    363                                                  		                      begin
    364             1                    ***0***         		                          o_ibi_cnt_en <= 1'b0; 
    365             1                    ***0***         		                          o_ibi_tx_mode <= 3'b011; //Parity mode
    366             1                    ***0***                                           o_ibi_regf_address <= EVENT_DISABLE_BYTE_ADDRESS; //Disable Target Events Command Byte
    367             1                    ***0***                                           state <= PARITY;
    368             1                    ***0***                                           parity_to_SR_flag <= 2'b00;
    369                                                                                end    
    370                                                                           end     
    371                                                                           
    372                                                          PARITY: begin
    373                                                                     if(parity_to_SR_flag == 2'b11)
    374                                                  		                       begin
    375                                                  		                         if (ibi_ser_mode_done_pulse)
    376                                                  		                              begin
    377             1                    ***0***         		                                  o_ibi_regf_rd_en <= 1'b1;
    378             1                    ***0***         		                                  o_ibi_cnt_en <= 1'b0; 
    379             1                    ***0***         		                                  end_ibi_flag <= 2'b10;
    380             1                    ***0***                                                   state <= REP_START;
    381                                                                                        end    
    382                                                                                 end       
    383                                                              	   else 
    384                                                              	       begin
    385                                                              	           if (ibi_ser_mode_done_pulse)                	   
    386                                                  		                      begin
    387                                                  		                          if(parity_to_SR_flag == 2'b00)
    388                                                  		                              begin
    389             1                    ***0***         		                                  o_ibi_regf_rd_en <= 1'b1;
    390             1                    ***0***         		                                  o_ibi_cnt_en <= 1'b1; 
    391             1                    ***0***         		                                  o_ibi_tx_mode <= 3'b001; //Serializing mode
    392             1                    ***0***                                                   state <= DISABLE_INT_BYTE;
    393                                                                                        end    
    394                                                                                    if(parity_to_SR_flag == 2'b01)
    395                                                  		                              begin
    396             1                    ***0***         		                                  o_ibi_regf_rd_en <= 1'b1;
    397             1                    ***0***         		                                  o_ibi_cnt_en <= 1'b0; 
    398             1                    ***0***         		                                  o_ibi_tx_mode <= 3'b010; //STOP mode
    399             1                    ***0***                                                   state <= STOP;
    400                                                                                        end                              
    401                                                                                end         
    402                                                                          end    
    403                                                                  end              
    404                                                                  
    405                                                          TGT_ACK: begin       
    406                                                                 if(i_ibi_scl) 
    407                                                                  begin
    408                                                                   if (i_ibi_ack_nack)
    409                                                                      begin
    410             1                    ***0***                                 o_ibi_cnt_en <= 1'b1;
    411             1                    ***0***                                 o_ibi_rx_en  <= 1'b0;
    412             1                    ***0***                                 o_ibi_tx_mode <= 3'b100; // Driving 0 once it enabled to create Ack handoff
    413                                                                          if (tgt_address_flag)
    414                                                                              begin
    415             1                    ***0***                                         state <= DISABLE_INT_BYTE;
    416             1                    ***0***                                         o_ibi_regf_rd_en <= 1'b1;
    417             1                    ***0***         		                        o_ibi_cnt_en <= 1'b1; 
    418             1                    ***0***                                         o_ibi_regf_address <= EVENT_DISABLE_BYTE_ADDRESS; // "Event" interrupt "DISEC" Direct
    419                                                                              end
    420                                                                         else     
    421                                                                           begin
    422                                                                              if (i_ibi_cfg_reg[3:2] == 2'b01) //disable Direct tgt 
    423                                                                                 begin
    424             1                    ***0***                                           state <= DISABLE_INT_CCC_DIRECT;
    425             1                    ***0***                                           o_ibi_regf_address <= EVENT_DISABLE_DIRECT_CCC_ADDRESS; // "Event" interrupt "DISEC" Direct
    426                                                                                 end   
    427                                                                              else if (i_ibi_cfg_reg[3:2] == 2'b11)// disable for all tgts           
    428                                                                                  begin
    429             1                    ***0***                                           state <= DISABLE_INT_CCC_BDCST;
    430             1                    ***0***                                           o_ibi_regf_address <= EVENT_DISABLE_BDCST_CCC_ADDRESS; //Disable "Event" interrupt "DISEC" Broadcast
    431                                                                                  end    		                
    432                                                                           end        
    433                                                                      end
    434                                                                   else    
    435                                                                      begin
    436             1                    ***0***                               state <= STOP;
    437                                                                      end
    438                                                                  end
    439                                                                end      
    440                                                                  
    441                                                        DISABLE_INT_CCC_DIRECT: begin       
    442                                                                           if (!i_ibi_scl)
    443                                                  		                      begin
    444             1                    ***0***         		                          o_ibi_tx_en  <= 1'b1;
    445             1                    ***0***         		                          o_ibi_pp_od  <= 1'b1;
    446             1                    ***0***         		                          o_ibi_tx_mode <= 3'b001; //Serializing mode
    447                                                  		                      end  
    448                                                  		                  if (i_ibi_tx_mode_done_ff1)
    449                                                  		                      begin
    450             1                    ***0***         		                            o_ibi_tx_mode <= 3'b011; //Parity mode
    451             1                    ***0***         		                            o_ibi_cnt_en <= 1'b0;  
    452             1                    ***0***                                             state <= PARITY;
    453             1                    ***0***                                             parity_to_SR_flag <= 2'b11;
    454                                                                                end    
    455                                                                           end    
    456                                                  		                  
    457                                                  		TGT_ADDRESS : begin
    458             1                    ***0***         		                o_ibi_tx_mode <= 3'b001;  
    459                                                  		                if (ibi_ser_mode_done_pulse) 
    460                                                  		                  begin
    461             1                    ***0***         		                    o_ibi_pp_od <= 1'b0;
    462             1                    ***0***         		                    o_ibi_tx_en <= 1'b0;
    463                                                  		                  end
    464                                                  		                if(!i_ibi_scl && i_ibi_tx_mode_done_ff3)
    465                                                  		                      begin
    466             1                    ***0***         		                          o_ibi_regf_rd_en   <= 1'b1  ; 
    467             1                    ***0***         		                          o_ibi_cnt_en <= 1'b0;
    468             1                    ***0***                                           o_ibi_regf_address <= EVENT_DISABLE_BYTE_ADDRESS; //Disable Target Events Command Byte
    469             1                    ***0***                                           state <= TGT_ACK;
    470             1                    ***0***                                           tgt_address_flag <=1'b1;
    471             1                    ***0***                                           o_ibi_rx_en <= 1'b1;
    472             1                    ***0***                                           o_ibi_rx_mode <= 3'b0; //ACK mode
    473                                                                                end       
    474                                                                        end        
    475                                                  		              
    476                                                  		              
    477                                                  		DISABLE_INT_BYTE: begin 
    478             1                    ***0***         		                   o_ibi_regf_rd_en <= 1'b1;
    479             1                    ***0***         		                   o_ibi_tx_en <= 1'b1;
    480                                                  		                  if (!i_ibi_scl)
    481                                                  		                      begin
    482             1                    ***0***         		                          o_ibi_tx_en  <= 1'b1;
    483             1                    ***0***         		                          o_ibi_pp_od  <= 1'b1;
    484             1                    ***0***         		                          o_ibi_tx_mode <= 3'b001; //Serializing mode
    485                                                  		                      end
    486                                                  		                  if (ibi_ser_mode_done_pulse)
    487                                                  		                      begin
    488             1                    ***0***         		                          o_ibi_cnt_en <= 1'b0; 
    489             1                    ***0***         		                          o_ibi_tx_mode <= 3'b011; //Parity mode
    490             1                    ***0***                                           o_ibi_regf_address <= EVENT_DISABLE_BYTE_ADDRESS; //Disable Target Events Command Byte
    491             1                    ***0***                                           state <= PARITY;
    492             1                    ***0***                                           parity_to_SR_flag <= 2'b01;
    493                                                                                end                   
    494                                                  		                  end
    495                                                  		                 
    496                                                  		                 
    497                                                  		END_IBI:         begin       // Entered from NACK in High SCL with TX driving High Imp 
    498             1                    ***0***                                   o_ibi_pp_od <= 1'b1; // Rep. Start is PP      		
    499                                                                           // o_ibi_tx_mode <= 3'b101; // Driving 1... in case of ACK this creating a STOP
    500             1                    ***0***                                   ibi_regf_wr_en <= 1'b0;
    501                                                  		                  if (!i_ibi_scl) // wait for Low SCL and maintaing High imp.
    502                                                  		                      begin
    503             1                    ***0***         		                          end_ibi_flag <= 2'b01;
    504             1                    ***0***         		                          o_ibi_tx_mode <= 3'b100; // Driving 0
    505             1                    ***0***         		                          state <= REP_START;
    506                                                  		                      end    
    507                                                  		                 end     
    508                                                  		                 
    509                                                  		                     
    510                                                  		 STOP :    begin      
    511             1                    ***0***         		             ibi_regf_wr_en <= 1'b0; 
    512                                                  		             if (!i_ibi_scl)
    513                                                  		                  begin
    514             1                    ***0***         		                      o_ibi_tx_en <= 1'b1;
    515             1                    ***0***         		                      o_ibi_tx_mode <= 3'b010; //STOP
    516                                                  		                  end
    517                                                                     else  if (i_ibi_ser_mode_done)
    518                                                                          begin 
    519             1                    ***0***                                      state       <= IDLE ;
    520             1                    ***0***                                      o_ibi_done  <= 1'b1;
    521             1                    ***0***                                      o_ibi_tx_en <= 1'b0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        176        53       123    30.11%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_ibi --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                 end_ibi_flag[1-0]           0           0        0.00 
                                    i_ibi_ack_nack           1           1      100.00 
                                i_ibi_bcr_reg[0-7]           1           1      100.00 
                                  i_ibi_cfg_reg[0]           0           1       50.00 
                                i_ibi_cfg_reg[1-7]           0           0        0.00 
                                         i_ibi_clk           1           1      100.00 
                                          i_ibi_en           0           0        0.00 
                                i_ibi_payload_done           0           0        0.00 
                       i_ibi_payload_size_reg[0-1]           0           1       50.00 
                       i_ibi_payload_size_reg[2-7]           0           0        0.00 
                                       i_ibi_rst_n           1           1      100.00 
                                i_ibi_rx_mode_done           1           1      100.00 
                            i_ibi_rx_mode_done_ff1           1           1      100.00 
                            i_ibi_rx_mode_done_ff2           1           1      100.00 
                                         i_ibi_scl           1           1      100.00 
                                i_ibi_scl_neg_edge           1           1      100.00 
                                i_ibi_scl_pos_edge           1           1      100.00 
                               i_ibi_ser_mode_done           1           1      100.00 
                            i_ibi_tgt_address[0-1]           0           1       50.00 
                            i_ibi_tgt_address[2-3]           0           0        0.00 
                              i_ibi_tgt_address[4]           0           1       50.00 
                              i_ibi_tgt_address[5]           0           0        0.00 
                              i_ibi_tgt_address[6]           0           1       50.00 
                              i_ibi_tgt_address[7]           0           0        0.00 
                            i_ibi_tx_mode_done_ff1           1           1      100.00 
                            i_ibi_tx_mode_done_ff2           1           1      100.00 
                            i_ibi_tx_mode_done_ff3           1           1      100.00 
                                    ibi_regf_wr_en           0           0        0.00 
                            ibi_ser_mode_done_prev           1           1      100.00 
                           ibi_ser_mode_done_pulse           1           1      100.00 
                                      o_ibi_cnt_en           0           0        0.00 
                                        o_ibi_done           0           0        0.00 
                                  o_ibi_payload_en           0           0        0.00 
                                       o_ibi_pp_od           0           0        0.00 
                          o_ibi_regf_address[11-0]           0           0        0.00 
                                  o_ibi_regf_rd_en           0           0        0.00 
                                  o_ibi_regf_wr_en           0           0        0.00 
                                       o_ibi_rx_en           0           0        0.00 
                                o_ibi_rx_mode[2-0]           0           0        0.00 
                                   o_ibi_ser_rx_tx           0           0        0.00 
                                       o_ibi_tx_en           0           0        0.00 
                                o_ibi_tx_mode[2-0]           0           0        0.00 
                            parity_to_SR_flag[1-0]           0           0        0.00 
                                   regf_wr_en_prev           0           0        0.00 
                                        state[4-0]           0           0        0.00 
                                  tgt_address_flag           0           0        0.00 

Total Node Count     =         88 
Toggled Node Count   =         23 
Untoggled Node Count =         65 

Toggle Coverage      =      30.11% (53 of 176 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_controller_crh
=== Design Unit: work.controller_crh
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                       207         4       203     1.93%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_crh

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_crh.v
------------------------------------IF Branch------------------------------------
    165                                      365     Count coming in to IF
    165             1                          1       if(!i_crh_rst_n)
    190             1                        364       else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    192                                      364     Count coming in to CASE
    193             1                        364             IDLE : begin
    239             1                    ***0***             ACK_TO_SEC_CR : begin //ack to the sec cr
    259             1                    ***0***             NACK_TO_SEC_CR : begin //nack to the sec cr
    276             1                    ***0***             REP_START : begin
    339             1                    ***0***               BROADCAST_ADDR : begin 
    365             1                    ***0***               ACK : begin 
    598             1                    ***0***               CCC_CODE: begin 
    616             1                    ***0***               ADDRESS : begin
    636             1                    ***0***               PAR_BIT : begin
    1084            1                    ***0***               DEF_BYTE : begin 
    1104            1                    ***0***               DATA_RETURNED_1 : begin
    1147            1                    ***0***                DATA_RETURNED_2 : begin 
    1188            1                    ***0***                  DATA_SENT_1 : begin
    1207            1                    ***0***                  HANDOFF : begin 
    1248            1                    ***0***                 TESTING : begin 
    1276            1                    ***0***                 MONITOR : begin
                                         ***0***     All False Count
Branch totals: 1 hit of 17 branches = 5.88%

------------------------------------IF Branch------------------------------------
    201                                      364     Count coming in to IF
    201             1                    ***0***               if(i_crh_en && !dont_repeat)
    231             1                        364               else
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    203                                  ***0***     Count coming in to IF
    203             1                    ***0***                   if(i_crh_initiated_request) //initiated by active controller
    213             1                    ***0***                   else   //controller role request condition
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    215                                  ***0***     Count coming in to IF
    215             1                    ***0***                       if(i_crh_cfg_reg[0]) // controller ack 
    222             1                    ***0***                       else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    241                                  ***0***     Count coming in to IF
    241             1                    ***0***             if(i_crh_tx_mode_done )
    250             1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    261                                  ***0***     Count coming in to IF
    261             1                    ***0***             if(i_crh_tx_mode_done )
    268             1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    278                                  ***0***     Count coming in to IF
    278             1                    ***0***               if(i_crh_tx_mode_done  )
    329             1                    ***0***               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    280                                  ***0***     Count coming in to CASE
    281             1                    ***0***                       GETSTATUS , GETCAPS , GETMXDS , GETSTATUS_DEF , GETACCCR : begin
    281             2                    ***0***     
    281             3                    ***0***     
    281             4                    ***0***     
    281             5                    ***0***     
    313             1                    ***0***                         DISEC , ENTASx , DEFTGTS: begin
    313             2                    ***0***     
    313             3                    ***0***     
                                         ***0***     All False Count
Branch totals: 0 hits of 9 branches = 0.00%

------------------------------------IF Branch------------------------------------
    282                                  ***0***     Count coming in to IF
    282             1                    ***0***                         if(REP_START_COUNT == 1'b0) 
    295             1                    ***0***                         else if(REP_START_COUNT == 1'b1) 
    307             1                    ***0***                         else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    342                                  ***0***     Count coming in to IF
    342             1                    ***0***                 if(i_crh_tx_pp_mode_done)
    357             1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    351                                  ***0***     Count coming in to CASE
    352             1                    ***0***                      DISEC : begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    371                                  ***0***     Count coming in to IF
    371             1                    ***0***                 if(i_crh_rx_mode_done && i_crh_scl_neg_edge)
    590             1                    ***0***                 else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    373                                  ***0***     Count coming in to IF
    373             1                    ***0***                     if(!i_crh_rx_nack_ack)
    460             1                    ***0***                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    375                                  ***0***     Count coming in to CASE
    376             1                    ***0***                           GETSTATUS , GETCAPS , GETMXDS , GETSTATUS_DEF , GETACCCR : begin
    376             2                    ***0***     
    376             3                    ***0***     
    376             4                    ***0***     
    376             5                    ***0***     
    423             1                    ***0***                           DISEC , DEFTGTS , ENTASx  : begin
    423             2                    ***0***     
    423             3                    ***0***     
                                         ***0***     All False Count
Branch totals: 0 hits of 9 branches = 0.00%

------------------------------------IF Branch------------------------------------
    377                                  ***0***     Count coming in to IF
    377             1                    ***0***                             if(ACK_COUNT == 2'b00 )
    406             1                    ***0***                             else if(ACK_COUNT == 2'b01)
    418             1                    ***0***                             else 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    387                                  ***0***     Count coming in to IF
    387             1                    ***0***                                 if(int_state == GETSTATUS || int_state == GETSTATUS_DEF)
    391             1                    ***0***                                 else if(int_state == GETCAPS)
    395             1                    ***0***                                 else if(int_state == GETMXDS)
    399             1                    ***0***                                 else if(int_state == GETACCCR)
                                         ***0***     All False Count
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    431                                  ***0***     Count coming in to IF
    431             1                    ***0***                            if(int_state == DISEC)
    435             1                    ***0***                            else if(int_state == DEFTGTS)
    439             1                    ***0***                             else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b00)
    443             1                    ***0***                             else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b01)
    447             1                    ***0***                             else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b10)
    451             1                    ***0***                             else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b11)
                                         ***0***     All False Count
Branch totals: 0 hits of 7 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    462                                  ***0***     Count coming in to CASE
    463             1                    ***0***                           GETSTATUS : begin
    486             1                    ***0***                           GETCAPS : begin
    494             1                    ***0***                           GETMXDS : begin
    502             1                    ***0***                           DISEC : begin
    518             1                    ***0***                           ENTASx : begin
    538             1                    ***0***                           GETSTATUS_DEF : begin
    567             1                    ***0***                           DEFTGTS : begin
                                         ***0***     All False Count
Branch totals: 0 hits of 8 branches = 0.00%

------------------------------------IF Branch------------------------------------
    464                                  ***0***     Count coming in to IF
    464             1                    ***0***                            if(i_crh_getstatus_data[7:6] == 2'b11)
    476             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    503                                  ***0***     Count coming in to IF
    503             1                    ***0***                             if(i_crh_CRHDLY[2] == 1'b1)
    512             1                    ***0***                               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    519                                  ***0***     Count coming in to IF
    519             1                    ***0***                           if(i_crh_CRCAP2[3] || i_crh_CRCAP2[2]) //deep sleep capable + delayed handoff 
    528             1                    ***0***                           else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    539                                  ***0***     Count coming in to IF
    539             1                    ***0***                           if(i_crh_PRECR[0])
    548             1                    ***0***                           else if(i_crh_PRECR[1:0] == 2'b10)
    557             1                    ***0***                           else if(i_crh_PRECR[1:0] == 2'b00)
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    568                                  ***0***     Count coming in to IF
    568             1                    ***0***                           if(i_crh_PRECR[1]) 
    577             1                    ***0***                           else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    600                                  ***0***     Count coming in to IF
    600             1                    ***0***                 if(i_crh_tx_pp_mode_done )
    609             1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    617                                  ***0***     Count coming in to IF
    617             1                    ***0***                 if(i_crh_tx_pp_mode_done)
    627             1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    638                                  ***0***     Count coming in to IF
    638             1                    ***0***                 if(i_crh_tx_pp_mode_done )
    1076            1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    640                                  ***0***     Count coming in to CASE
    641             1                    ***0***                       GETSTATUS : begin
    704             1                    ***0***                         GETCAPS  : begin 
    763             1                    ***0***                         GETMXDS : begin
    811             1                    ***0***                         DISEC : begin
    851             1                    ***0***                         ENTASx : begin
    892             1                    ***0***                         GETSTATUS_DEF : begin 
    963             1                    ***0***                         DEFTGTS : begin 
    1042            1                    ***0***                         GETACCCR : begin
                                         ***0***     All False Count
Branch totals: 0 hits of 9 branches = 0.00%

------------------------------------IF Branch------------------------------------
    642                                  ***0***     Count coming in to IF
    642             1                    ***0***                         if(PAR_BIT_COUNT == 6'd0)
    659             1                    ***0***                         else if(PAR_BIT_COUNT == 6'd1)
    669             1                    ***0***                         else if(PAR_BIT_COUNT == 6'd2)
    698             1                    ***0***                         else
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    648                                  ***0***     Count coming in to IF
    648             1                    ***0***                             if(i_crh_initiated_request) //address of the target to be sent the controller role 
    652             1                    ***0***                               else //address of the target wining the arbitration 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    672                                  ***0***     Count coming in to IF
    672             1                    ***0***                             if(i_crh_getstatus_data[7:6] == 2'b11)
    685             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    705                                  ***0***     Count coming in to IF
    705             1                    ***0***                           if(PAR_BIT_COUNT == 6'd0)
    718             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd1)
    735             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd2)
    746             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd3)
    758             1                    ***0***                           else
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    724                                  ***0***     Count coming in to IF
    724             1                    ***0***                               if(i_crh_initiated_request) //address of the target to be sent the controller role 
    728             1                    ***0***                               else //address of the target wining the arbitration 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    764                                  ***0***     Count coming in to IF
    764             1                    ***0***                           if(PAR_BIT_COUNT == 6'd0)
    777             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd1)
    794             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd2)
    806             1                    ***0***                           else
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    783                                  ***0***     Count coming in to IF
    783             1                    ***0***                               if(i_crh_initiated_request) //address of the target to be sent the controller role 
    787             1                    ***0***                               else //address of the target wining the arbitration 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    812                                  ***0***     Count coming in to IF
    812             1                    ***0***                           if(PAR_BIT_COUNT == 6'd0)
    826             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd1)
    845             1                    ***0***                           else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    836                                  ***0***     Count coming in to IF
    836             1                    ***0***                               if(i_crh_CRHDLY[2] == 1'b1)
    840             1                    ***0***                               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    855                                  ***0***     Count coming in to IF
    855             1                    ***0***                           if(i_crh_CRHDLY[1:0] == 2'b00)
    859             1                    ***0***                           else if(i_crh_CRHDLY[1:0] == 2'b01)
    863             1                    ***0***                           else if(i_crh_CRHDLY[1:0] == 2'b10)
    867             1                    ***0***                           else if(i_crh_CRHDLY[1:0] == 2'b11)
                                         ***0***     All False Count
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    872                                  ***0***     Count coming in to IF
    872             1                    ***0***                           if(i_crh_CRCAP2[3] || i_crh_CRCAP2[2]) //deep sleep capable + delayed handoff 
    881             1                    ***0***                           else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    893                                  ***0***     Count coming in to IF
    893             1                    ***0***                           if(PAR_BIT_COUNT == 6'd0)
    906             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd1)
    923             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd2)
    933             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd3)
    958             1                    ***0***                           else
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    912                                  ***0***     Count coming in to IF
    912             1                    ***0***                               if(i_crh_initiated_request) //address of the target to be sent the controller role 
    916             1                    ***0***                               else //address of the target wining the arbitration 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    942                                  ***0***     Count coming in to IF
    942             1                    ***0***                               if(i_crh_PRECR[0])
    947             1                    ***0***                               else if(i_crh_PRECR[1:0] == 2'b10)
    952             1                    ***0***                               else if(i_crh_PRECR[1:0] == 2'b00)
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    966                                  ***0***     Count coming in to IF
    966             1                    ***0***                               if( PAR_BIT_COUNT == ((i_crh_tgts_count+1)*4 + 1) )
    988             1                    ***0***                               else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    977                                  ***0***     Count coming in to IF
    977             1                    ***0***                                   if(i_crh_PRECR[1]) 
    982             1                    ***0***                                   else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1001                                 ***0***     Count coming in to IF
    1001            1                    ***0***                                   if( DATA_SENT_COUNT == 6'd0 )
    1005            1                    ***0***                                   else if (DATA_SENT_COUNT == 6'd1)
    1009            1                    ***0***                                   else if (DATA_SENT_COUNT == 6'd2)
    1013            1                    ***0***                                   else if (DATA_SENT_COUNT == 6'd3)
    1017            1                    ***0***                                   else if(DATA_SENT_COUNT == 6'd4)
    1021            1                    ***0***                                   else if(DATA_SENT_COUNT == counter*4 + 6'd1)
    1025            1                    ***0***                                   else if(DATA_SENT_COUNT == counter*4 + 6'd2)
    1029            1                    ***0***                                   else if(DATA_SENT_COUNT == counter*4 + 6'd3)
    1033            1                    ***0***                                   else if(DATA_SENT_COUNT == counter*4 + 6'd4)
                                         ***0***     All False Count
Branch totals: 0 hits of 10 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1043                                 ***0***     Count coming in to IF
    1043            1                    ***0***                         if(PAR_BIT_COUNT == 6'd0)
    1060            1                    ***0***                         else if(PAR_BIT_COUNT == 6'd1)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1049                                 ***0***     Count coming in to IF
    1049            1                    ***0***                             if(i_crh_initiated_request) //address of the target to be sent the controller role 
    1053            1                    ***0***                               else //address of the target wining the arbitration 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1086                                 ***0***     Count coming in to IF
    1086            1                    ***0***                 if(i_crh_tx_pp_mode_done)
    1095            1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    1106                                 ***0***     Count coming in to CASE
    1107            1                    ***0***                       GETSTATUS : begin 
    1112            1                    ***0***                       GETCAPS : begin
    1118            1                    ***0***                       GETMXDS : begin
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1127                                 ***0***     Count coming in to IF
    1127            1                    ***0***                 if(i_crh_rx_pp_mode_done ) 
    1139            1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    1150                                 ***0***     Count coming in to CASE
    1151            1                    ***0***                        GETSTATUS : begin 
    1156            1                    ***0***                        GETCAPS : begin 
    1161            1                    ***0***                        GETSTATUS_DEF : begin
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1168                                 ***0***     Count coming in to IF
    1168            1                    ***0***                  if(i_crh_rx_pp_mode_done)
    1181            1                    ***0***                  else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1190                                 ***0***     Count coming in to IF
    1190            1                    ***0***                    if(i_crh_tx_pp_mode_done)
    1199            1                    ***0***                    else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1218                                 ***0***     Count coming in to IF
    1218            1                    ***0***                    else */if(i_crh_stop_is_sent)
    1225            1                    ***0***                    else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1232                                 ***0***     Count coming in to IF
    1232            1                    ***0***                   if(!i_crh_crhpoverlap && stop_is_sent ) //overlap condition
    1237            1                    ***0***                   else if(i_crh_crhpoverlap && stop_is_sent )
    1242            1                    ***0***                   else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1250                                 ***0***     Count coming in to IF
    1250            1                    ***0***                    if(i_crh_newcrlock) //
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1256                                 ***0***     Count coming in to IF
    1256            1                    ***0***                        if(i_crh_rx_mode_done ) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1258                                 ***0***     Count coming in to IF
    1258            1                    ***0***                            if(i_crh_start_detected) //new controller pulled sda low 
    1265            1                    ***0***                            else if(!i_crh_start_detected && i_crh_scl_pos_edge) //new controller didn't pull sda low & former controller needs to drive sda low 
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1277                                 ***0***     Count coming in to IF
    1277            1                    ***0***                   if(i_crh_sda_low)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1279                                 ***0***     Count coming in to IF
    1279            1                    ***0***                       if(!i_crh_timer_cas) //need to be edited to 100us or higher 
    1299            1                    ***0***                       else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1281                                 ***0***     Count coming in to IF
    1281            1                    ***0***                           if(i_crh_scl_neg_edge) //new controller pulled the scl low
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      69         0        69     0.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_crh --

  File controller_crh.v
----------------Focused Condition View-------------------
Line       201 Item    1  (i_crh_en && ~dont_repeat)
Condition totals: 0 of 2 input terms covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
     i_crh_en         N  '_1' not hit             Hit '_1'
  dont_repeat         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_crh_en_0            -                             
  Row   2:    ***0***  i_crh_en_1            ~dont_repeat                  
  Row   3:    ***0***  dont_repeat_0         i_crh_en                      
  Row   4:    ***0***  dont_repeat_1         i_crh_en                      

----------------Focused Condition View-------------------
Line       371 Item    1  (i_crh_rx_mode_done && i_crh_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_crh_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_crh_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_crh_rx_mode_done_0  -                             
  Row   2:    ***0***  i_crh_rx_mode_done_1  i_crh_scl_neg_edge            
  Row   3:    ***0***  i_crh_scl_neg_edge_0  i_crh_rx_mode_done            
  Row   4:    ***0***  i_crh_scl_neg_edge_1  i_crh_rx_mode_done            

----------------Focused Condition View-------------------
Line       377 Item    1  (ACK_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (ACK_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (ACK_COUNT == 0)_0    -                             
  Row   2:    ***0***  (ACK_COUNT == 0)_1    -                             

----------------Focused Condition View-------------------
Line       387 Item    1  ((int_state == 0) || (int_state == 13))
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
   (int_state == 0)         N  No hits                  Hit '_0' and '_1'
  (int_state == 13)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 0)_0    ~(int_state == 13)            
  Row   2:    ***0***  (int_state == 0)_1    -                             
  Row   3:    ***0***  (int_state == 13)_0   ~(int_state == 0)             
  Row   4:    ***0***  (int_state == 13)_1   ~(int_state == 0)             

----------------Focused Condition View-------------------
Line       391 Item    1  (int_state == 2)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (int_state == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 2)_0    -                             
  Row   2:    ***0***  (int_state == 2)_1    -                             

----------------Focused Condition View-------------------
Line       395 Item    1  (int_state == 5)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (int_state == 5)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 5)_0    -                             
  Row   2:    ***0***  (int_state == 5)_1    -                             

----------------Focused Condition View-------------------
Line       399 Item    1  (int_state == 12)
Condition totals: 0 of 1 input term covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (int_state == 12)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 12)_0   -                             
  Row   2:    ***0***  (int_state == 12)_1   -                             

----------------Focused Condition View-------------------
Line       406 Item    1  (ACK_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (ACK_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (ACK_COUNT == 1)_0    -                             
  Row   2:    ***0***  (ACK_COUNT == 1)_1    -                             

----------------Focused Condition View-------------------
Line       431 Item    1  (int_state == 1)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (int_state == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 1)_0    -                             
  Row   2:    ***0***  (int_state == 1)_1    -                             

----------------Focused Condition View-------------------
Line       435 Item    1  (int_state == 6)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (int_state == 6)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 6)_0    -                             
  Row   2:    ***0***  (int_state == 6)_1    -                             

----------------Focused Condition View-------------------
Line       439 Item    1  ((int_state == 3) && (i_crh_CRHDLY[1:0] == 0))
Condition totals: 0 of 2 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
          (int_state == 3)         N  No hits                  Hit '_0' and '_1'
  (i_crh_CRHDLY[1:0] == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (int_state == 3)_0          -                             
  Row   2:    ***0***  (int_state == 3)_1          (i_crh_CRHDLY[1:0] == 0)      
  Row   3:    ***0***  (i_crh_CRHDLY[1:0] == 0)_0  (int_state == 3)              
  Row   4:    ***0***  (i_crh_CRHDLY[1:0] == 0)_1  (int_state == 3)              

----------------Focused Condition View-------------------
Line       443 Item    1  ((int_state == 3) && (i_crh_CRHDLY[1:0] == 1))
Condition totals: 0 of 2 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
          (int_state == 3)         N  No hits                  Hit '_0' and '_1'
  (i_crh_CRHDLY[1:0] == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (int_state == 3)_0          -                             
  Row   2:    ***0***  (int_state == 3)_1          (i_crh_CRHDLY[1:0] == 1)      
  Row   3:    ***0***  (i_crh_CRHDLY[1:0] == 1)_0  (int_state == 3)              
  Row   4:    ***0***  (i_crh_CRHDLY[1:0] == 1)_1  (int_state == 3)              

----------------Focused Condition View-------------------
Line       447 Item    1  ((int_state == 3) && (i_crh_CRHDLY[1:0] == 2))
Condition totals: 0 of 2 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
          (int_state == 3)         N  No hits                  Hit '_0' and '_1'
  (i_crh_CRHDLY[1:0] == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (int_state == 3)_0          -                             
  Row   2:    ***0***  (int_state == 3)_1          (i_crh_CRHDLY[1:0] == 2)      
  Row   3:    ***0***  (i_crh_CRHDLY[1:0] == 2)_0  (int_state == 3)              
  Row   4:    ***0***  (i_crh_CRHDLY[1:0] == 2)_1  (int_state == 3)              

----------------Focused Condition View-------------------
Line       451 Item    1  ((int_state == 3) && (i_crh_CRHDLY[1:0] == 3))
Condition totals: 0 of 2 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
          (int_state == 3)         N  No hits                  Hit '_0' and '_1'
  (i_crh_CRHDLY[1:0] == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (int_state == 3)_0          -                             
  Row   2:    ***0***  (int_state == 3)_1          (i_crh_CRHDLY[1:0] == 3)      
  Row   3:    ***0***  (i_crh_CRHDLY[1:0] == 3)_0  (int_state == 3)              
  Row   4:    ***0***  (i_crh_CRHDLY[1:0] == 3)_1  (int_state == 3)              

----------------Focused Condition View-------------------
Line       464 Item    1  (i_crh_getstatus_data[7:6] == 3)
Condition totals: 0 of 1 input term covered = 0.00%

                        Input Term   Covered  Reason for no coverage   Hint
                       -----------  --------  -----------------------  --------------
  (i_crh_getstatus_data[7:6] == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                          Non-masking condition(s)      
 ---------  ---------  --------------------                -------------------------     
  Row   1:    ***0***  (i_crh_getstatus_data[7:6] == 3)_0  -                             
  Row   2:    ***0***  (i_crh_getstatus_data[7:6] == 3)_1  -                             

----------------Focused Condition View-------------------
Line       519 Item    1  (i_crh_CRCAP2[3] || i_crh_CRCAP2[2])
Condition totals: 0 of 2 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  i_crh_CRCAP2[3]         N  No hits                  Hit '_0' and '_1'
  i_crh_CRCAP2[2]         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_crh_CRCAP2[3]_0     ~i_crh_CRCAP2[2]              
  Row   2:    ***0***  i_crh_CRCAP2[3]_1     -                             
  Row   3:    ***0***  i_crh_CRCAP2[2]_0     ~i_crh_CRCAP2[3]              
  Row   4:    ***0***  i_crh_CRCAP2[2]_1     ~i_crh_CRCAP2[3]              

----------------Focused Condition View-------------------
Line       548 Item    1  (i_crh_PRECR[1:0] == 2)
Condition totals: 0 of 1 input term covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (i_crh_PRECR[1:0] == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  (i_crh_PRECR[1:0] == 2)_0  -                             
  Row   2:    ***0***  (i_crh_PRECR[1:0] == 2)_1  -                             

----------------Focused Condition View-------------------
Line       557 Item    1  (i_crh_PRECR[1:0] == 0)
Condition totals: 0 of 1 input term covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (i_crh_PRECR[1:0] == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  (i_crh_PRECR[1:0] == 0)_0  -                             
  Row   2:    ***0***  (i_crh_PRECR[1:0] == 0)_1  -                             

----------------Focused Condition View-------------------
Line       642 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       659 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       669 Item    1  (PAR_BIT_COUNT == 2)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 2)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 2)_1  -                             

----------------Focused Condition View-------------------
Line       672 Item    1  (i_crh_getstatus_data[7:6] == 3)
Condition totals: 0 of 1 input term covered = 0.00%

                        Input Term   Covered  Reason for no coverage   Hint
                       -----------  --------  -----------------------  --------------
  (i_crh_getstatus_data[7:6] == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                          Non-masking condition(s)      
 ---------  ---------  --------------------                -------------------------     
  Row   1:    ***0***  (i_crh_getstatus_data[7:6] == 3)_0  -                             
  Row   2:    ***0***  (i_crh_getstatus_data[7:6] == 3)_1  -                             

----------------Focused Condition View-------------------
Line       705 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       718 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       735 Item    1  (PAR_BIT_COUNT == 2)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 2)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 2)_1  -                             

----------------Focused Condition View-------------------
Line       746 Item    1  (PAR_BIT_COUNT == 3)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 3)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 3)_1  -                             

----------------Focused Condition View-------------------
Line       764 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       777 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       794 Item    1  (PAR_BIT_COUNT == 2)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 2)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 2)_1  -                             

----------------Focused Condition View-------------------
Line       812 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       826 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       855 Item    1  (i_crh_CRHDLY[1:0] == 0)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (i_crh_CRHDLY[1:0] == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (i_crh_CRHDLY[1:0] == 0)_0  -                             
  Row   2:    ***0***  (i_crh_CRHDLY[1:0] == 0)_1  -                             

----------------Focused Condition View-------------------
Line       859 Item    1  (i_crh_CRHDLY[1:0] == 1)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (i_crh_CRHDLY[1:0] == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (i_crh_CRHDLY[1:0] == 1)_0  -                             
  Row   2:    ***0***  (i_crh_CRHDLY[1:0] == 1)_1  -                             

----------------Focused Condition View-------------------
Line       863 Item    1  (i_crh_CRHDLY[1:0] == 2)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (i_crh_CRHDLY[1:0] == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (i_crh_CRHDLY[1:0] == 2)_0  -                             
  Row   2:    ***0***  (i_crh_CRHDLY[1:0] == 2)_1  -                             

----------------Focused Condition View-------------------
Line       867 Item    1  (i_crh_CRHDLY[1:0] == 3)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (i_crh_CRHDLY[1:0] == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (i_crh_CRHDLY[1:0] == 3)_0  -                             
  Row   2:    ***0***  (i_crh_CRHDLY[1:0] == 3)_1  -                             

----------------Focused Condition View-------------------
Line       872 Item    1  (i_crh_CRCAP2[3] || i_crh_CRCAP2[2])
Condition totals: 0 of 2 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  i_crh_CRCAP2[3]         N  No hits                  Hit '_0' and '_1'
  i_crh_CRCAP2[2]         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_crh_CRCAP2[3]_0     ~i_crh_CRCAP2[2]              
  Row   2:    ***0***  i_crh_CRCAP2[3]_1     -                             
  Row   3:    ***0***  i_crh_CRCAP2[2]_0     ~i_crh_CRCAP2[3]              
  Row   4:    ***0***  i_crh_CRCAP2[2]_1     ~i_crh_CRCAP2[3]              

----------------Focused Condition View-------------------
Line       893 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       906 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       923 Item    1  (PAR_BIT_COUNT == 2)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 2)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 2)_1  -                             

----------------Focused Condition View-------------------
Line       933 Item    1  (PAR_BIT_COUNT == 3)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 3)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 3)_1  -                             

----------------Focused Condition View-------------------
Line       947 Item    1  (i_crh_PRECR[1:0] == 2)
Condition totals: 0 of 1 input term covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (i_crh_PRECR[1:0] == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  (i_crh_PRECR[1:0] == 2)_0  -                             
  Row   2:    ***0***  (i_crh_PRECR[1:0] == 2)_1  -                             

----------------Focused Condition View-------------------
Line       952 Item    1  (i_crh_PRECR[1:0] == 0)
Condition totals: 0 of 1 input term covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (i_crh_PRECR[1:0] == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  (i_crh_PRECR[1:0] == 0)_0  -                             
  Row   2:    ***0***  (i_crh_PRECR[1:0] == 0)_1  -                             

----------------Focused Condition View-------------------
Line       966 Item    1  (PAR_BIT_COUNT == (((i_crh_tgts_count + 1) * 4) + 1))
Condition totals: 0 of 1 input term covered = 0.00%

                                             Input Term   Covered  Reason for no coverage   Hint
                                            -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == (((i_crh_tgts_count + 1) * 4) + 1))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                               Non-masking condition(s)      
 ---------  ---------  --------------------                                     -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == (((i_crh_tgts_count + 1) * 4) + 1))_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == (((i_crh_tgts_count + 1) * 4) + 1))_1  -                             

----------------Focused Condition View-------------------
Line       1001 Item    1  (DATA_SENT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       1005 Item    1  (DATA_SENT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       1009 Item    1  (DATA_SENT_COUNT == 2)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == 2)_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == 2)_1  -                             

----------------Focused Condition View-------------------
Line       1013 Item    1  (DATA_SENT_COUNT == 3)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == 3)_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == 3)_1  -                             

----------------Focused Condition View-------------------
Line       1017 Item    1  (DATA_SENT_COUNT == 4)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == 4)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == 4)_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == 4)_1  -                             

----------------Focused Condition View-------------------
Line       1021 Item    1  (DATA_SENT_COUNT == ((counter * 4) + 1))
Condition totals: 0 of 1 input term covered = 0.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == ((counter * 4) + 1))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 1))_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 1))_1  -                             

----------------Focused Condition View-------------------
Line       1025 Item    1  (DATA_SENT_COUNT == ((counter * 4) + 2))
Condition totals: 0 of 1 input term covered = 0.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == ((counter * 4) + 2))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 2))_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 2))_1  -                             

----------------Focused Condition View-------------------
Line       1029 Item    1  (DATA_SENT_COUNT == ((counter * 4) + 3))
Condition totals: 0 of 1 input term covered = 0.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == ((counter * 4) + 3))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 3))_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 3))_1  -                             

----------------Focused Condition View-------------------
Line       1033 Item    1  (DATA_SENT_COUNT == ((counter * 4) + 4))
Condition totals: 0 of 1 input term covered = 0.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == ((counter * 4) + 4))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 4))_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 4))_1  -                             

----------------Focused Condition View-------------------
Line       1043 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       1060 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       1232 Item    1  (~i_crh_crhpoverlap && stop_is_sent)
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  i_crh_crhpoverlap         N  No hits                  Hit '_0' and '_1'
       stop_is_sent         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_crh_crhpoverlap_0   stop_is_sent                  
  Row   2:    ***0***  i_crh_crhpoverlap_1   -                             
  Row   3:    ***0***  stop_is_sent_0        ~i_crh_crhpoverlap            
  Row   4:    ***0***  stop_is_sent_1        ~i_crh_crhpoverlap            

----------------Focused Condition View-------------------
Line       1237 Item    1  (i_crh_crhpoverlap && stop_is_sent)
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  i_crh_crhpoverlap         N  No hits                  Hit '_0' and '_1'
       stop_is_sent         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_crh_crhpoverlap_0   -                             
  Row   2:    ***0***  i_crh_crhpoverlap_1   stop_is_sent                  
  Row   3:    ***0***  stop_is_sent_0        i_crh_crhpoverlap             
  Row   4:    ***0***  stop_is_sent_1        i_crh_crhpoverlap             

----------------Focused Condition View-------------------
Line       1265 Item    1  (~i_crh_start_detected && i_crh_scl_pos_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  i_crh_start_detected         N  No hits                  Hit '_0' and '_1'
    i_crh_scl_pos_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  i_crh_start_detected_0  i_crh_scl_pos_edge            
  Row   2:    ***0***  i_crh_start_detected_1  -                             
  Row   3:    ***0***  i_crh_scl_pos_edge_0    ~i_crh_start_detected         
  Row   4:    ***0***  i_crh_scl_pos_edge_1    ~i_crh_start_detected         


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                      26         2        24     7.69%
    FSM Transitions                 65         0        65     0.00%

================================FSM Details================================

FSM Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_crh --

FSM_ID: ACK_COUNT
    Current State Object : ACK_COUNT
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 377                 st0                   0
 406                 st1                   1
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                     st0                   1          
    Uncovered States :
    ------------------
                   State
                   -----
                     st1
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 404                   0          st0 -> st1          
 416                   1          st1 -> st0          


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   2         1         1    50.00%
        FSM Transitions              2         0         2     0.00%
FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 193                IDLE                   0
 259      NACK_TO_SEC_CR                   7
 239       ACK_TO_SEC_CR                   6
 276           REP_START                   1
 339      BROADCAST_ADDR                   5
 616             ADDRESS                   3
 365                 ACK                   2
1207             HANDOFF                  11
 598            CCC_CODE                   4
1104     DATA_RETURNED_1                  15
 636             PAR_BIT                  13
1188         DATA_SENT_1                  10
1147     DATA_RETURNED_2                  14
1084            DEF_BYTE                  12
1248             TESTING                   9
1276             MONITOR                   8
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                 365          
    Uncovered States :
    ------------------
                   State
                   -----
          NACK_TO_SEC_CR
           ACK_TO_SEC_CR
               REP_START
          BROADCAST_ADDR
                 ADDRESS
                     ACK
                 HANDOFF
                CCC_CODE
         DATA_RETURNED_1
                 PAR_BIT
             DATA_SENT_1
         DATA_RETURNED_2
                DEF_BYTE
                 TESTING
                 MONITOR
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 227                   0          IDLE -> NACK_TO_SEC_CR
 220                   1          IDLE -> ACK_TO_SEC_CR
 209                   2          IDLE -> REP_START   
 264                   3          NACK_TO_SEC_CR -> IDLE
 247                   4          ACK_TO_SEC_CR -> REP_START
 167                   5          ACK_TO_SEC_CR -> IDLE
 322                   6          REP_START -> BROADCAST_ADDR
 304                   7          REP_START -> ADDRESS
 167                   8          REP_START -> IDLE   
 344                   9          BROADCAST_ADDR -> ACK
 167                  10          BROADCAST_ADDR -> IDLE
 625                  11          ADDRESS -> ACK      
 167                  12          ADDRESS -> IDLE     
 583                  13          ACK -> REP_START    
 467                  14          ACK -> HANDOFF      
 455                  15          ACK -> CCC_CODE     
 415                  16          ACK -> DATA_RETURNED_1
 167                  17          ACK -> IDLE         
1239                  18          HANDOFF -> TESTING  
 167                  19          HANDOFF -> IDLE     
 607                  20          CCC_CODE -> PAR_BIT 
 167                  21          CCC_CODE -> IDLE    
1137                  22          DATA_RETURNED_1 -> PAR_BIT
 167                  23          DATA_RETURNED_1 -> IDLE
1062                  24          PAR_BIT -> HANDOFF  
1057                  25          PAR_BIT -> REP_START
1000                  26          PAR_BIT -> DATA_SENT_1
 930                  27          PAR_BIT -> DATA_RETURNED_2
 903                  28          PAR_BIT -> DEF_BYTE 
 167                  29          PAR_BIT -> IDLE     
1197                  30          DATA_SENT_1 -> PAR_BIT
 167                  31          DATA_SENT_1 -> IDLE 
1178                  32          DATA_RETURNED_2 -> PAR_BIT
 167                  33          DATA_RETURNED_2 -> IDLE
1093                  34          DEF_BYTE -> PAR_BIT 
 167                  35          DEF_BYTE -> IDLE    
1270                  36          TESTING -> MONITOR  
1260                  37          TESTING -> IDLE     
1301                  38          MONITOR -> IDLE     


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                  16         1        15     6.25%
        FSM Transitions             39         0        39     0.00%
FSM_ID: int_state
    Current State Object : int_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 641           GETSTATUS                   0
 704             GETCAPS                   2
 763             GETMXDS                   5
 811               DISEC                   1
 892       GETSTATUS_DEF                  13
 851              ENTASx                   3
 248            GETACCCR                  12
 963             DEFTGTS                   6
    Uncovered States :
    ------------------
                   State
                   -----
               GETSTATUS
                 GETCAPS
                 GETMXDS
                   DISEC
           GETSTATUS_DEF
                  ENTASx
                GETACCCR
                 DEFTGTS
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 694                   0          GETSTATUS -> GETCAPS
 756                   1          GETCAPS -> GETMXDS  
 210                   2          GETCAPS -> GETSTATUS
 804                   3          GETMXDS -> DISEC    
 248                   4          GETMXDS -> GETCAPS  
 210                   5          GETMXDS -> GETSTATUS
 842                   6          DISEC -> GETSTATUS_DEF
 838                   7          DISEC -> ENTASx     
 248                   8          DISEC -> GETCAPS    
 210                   9          DISEC -> GETSTATUS  
 955                  10          GETSTATUS_DEF -> GETACCCR
 945                  11          GETSTATUS_DEF -> DEFTGTS
 248                  12          GETSTATUS_DEF -> GETCAPS
 210                  13          GETSTATUS_DEF -> GETSTATUS
 888                  14          ENTASx -> GETACCCR  
 879                  15          ENTASx -> GETSTATUS_DEF
 248                  16          ENTASx -> GETCAPS   
 210                  17          ENTASx -> GETSTATUS 
 248                  18          GETACCCR -> GETCAPS 
 210                  19          GETACCCR -> GETSTATUS
 985                  20          DEFTGTS -> GETACCCR 
 980                  21          DEFTGTS -> GETSTATUS_DEF
 248                  22          DEFTGTS -> GETCAPS  
 210                  23          DEFTGTS -> GETSTATUS


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   8         0         8     0.00%
        FSM Transitions             24         0        24     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     538        31       507     5.76%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_crh --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_crh.v
    35                                               module controller_crh (
    36                                               //inputs from system top  
    37                                               input  wire              i_crh_clk,
    38                                               input  wire              i_crh_rst_n,
    39                                               //inputs from i3c_engine
    40                                               input  wire              i_crh_en,
    41                                               input  wire              i_crh_initiated_request,
    42                                               input  wire              i_crh_stop_is_sent,
    43                                               //inputs from reg file
    44                                               input  wire  [7:0]       i_crh_CRHDLY,
    45                                               input  wire  [7:0]       i_crh_getstatus_data,
    46                                               input  wire  [7:0]       i_crh_CRCAP2,
    47                                               input  wire  [7:0]       i_crh_PRECR,
    48                                               input  wire  [7:0]       i_crh_cfg_reg,
    49                                               input  wire  [7:0]       i_crh_tgts_count,
    50                                               //inputs from controller tx
    51                                               input  wire              i_crh_tx_mode_done,
    52                                               input  wire              i_crh_tx_pp_mode_done,
    53                                               input  wire              i_crh_sda_low,
    54                                               //inputs from controller rx
    55                                               input  wire              i_crh_rx_mode_done,
    56                                               input  wire              i_crh_rx_pp_mode_done,
    57                                               input  wire              i_crh_rx_nack_ack, //if>>0 then ack, if>>1 then nack --from RX
    58                                               input  wire              i_crh_scl_neg_edge,
    59                                               input  wire              i_crh_scl_pos_edge,
    60                                               input  wire              i_crh_start_detected,
    61                                               //inputs from timer 
    62                                               input  wire              i_crh_crhpoverlap,
    63                                               input  wire              i_crh_newcrlock,
    64                                               input  wire              i_crh_timer_cas,
    65                                               //outputs to controller tx
    66                                               output  reg              o_crh_tx_en, //TX enable 
    67                                               output  reg  [2:0]       o_crh_tx_mode, //define the mode of TX
    68                                               //outputs to controller rx
    69                                               output  reg              o_crh_rx_en,
    70                                               output  reg  [2:0]       o_crh_rx_mode,
    71                                               //outputs to reg file
    72                                               output  reg              o_crh_regf_wr_en,
    73                                               output  reg              o_crh_regf_rd_en, //to be edited to pulse
    74                                               output  reg  [11:0]       o_crh_regf_addr,
    75                                               //outputs to i3c_engine
    76                                               output  reg              o_crh_done,
    77                                               //output  reg              o_crh_ncr_win,
    78                                               //output  reg              o_crh_ncr_take_control,
    79                                               output  reg              o_crh_send_stop,
    80                                               //outputs to bits counter
    81                                               output  reg              o_crh_pp_od,
    82                                               output  reg              o_crh_cnt_en,
    83                                               output  reg              o_crh_rx_cnt_en,
    84                                               //outputs to timer
    85                                               output  reg              o_crh_timer_set,
    86                                               output  reg  [1:0]       o_crh_timer_entasx,
    87                                               //outputs to frame counter
    88                                               output  reg              o_crh_fcnt_en,
    89                                               //outputs to scl generation
    90                                               output  reg              o_crh_scl_idle
    91                                               );
    92                                               
    93                                               
    94                                               reg [3:0] state ;
    95                                               reg [3:0] int_state ;
    96                                               
    97                                               reg       REP_START_COUNT ;
    98                                               reg [1:0] ACK_COUNT ;
    99                                               reg [5:0] PAR_BIT_COUNT ;
    100                                              reg [5:0] DATA_SENT_COUNT ;
    101                                              reg [5:0] counter ;
    102                                              reg       preparing_done ;
    103                                              reg       stop_is_sent ;
    104                                              reg       dont_repeat ;
    105                                              
    106                                              
    107                                              
    108                                              
    109                                              // parameters and defines in RegFile
    110                                              localparam BROADCAST_ADDR_REG_FILE = 9'd46 ; //broadcast address in reg file (7E+w)
    111                                              localparam ARBITRATION_ADDR_REG_FILE = 10'd48 ; //arbitration address 
    112                                              localparam TARGET_ADDR_REG_FILE =  9'd0   ; 
    113                                              localparam GETSTATUS_ADDR_REG_FILE = 9'd387 ; 
    114                                              localparam GETMXDS_ADDR_REG_FILE = 9'd381    ; 
    115                                              localparam GETCAPS_ADDR_REG_FILE = 9'd384    ; 
    116                                              localparam DISEC_ADDR_REG_FILE = 9'd104    ; 
    117                                              localparam ENTAS0_ADDR_REG_FILE = 9'd393    ;
    118                                              localparam ENTAS1_ADDR_REG_FILE = 9'd394    ;
    119                                              localparam ENTAS2_ADDR_REG_FILE = 9'd395    ;
    120                                              localparam ENTAS3_ADDR_REG_FILE = 9'd396    ;
    121                                              localparam DEFTGTS_ADDR_REG_FILE = 9'd397   ;
    122                                              localparam GETACCCR_ADDR_REG_FILE  = 9'd389    ;
    123                                              localparam DEF_BYTE_REG_FILE = 9'd382    ;
    124                                              localparam CRCAPS1_ADDR_REG_FILE = 9'd385    ;
    125                                              localparam CRHDLY1_ADDR_REG_FILE = 9'd383    ;
    126                                              localparam GETSTATUS_LSB_ADDR_REG_FILE = 9'd390    ;
    127                                              localparam CRCAPS2_ADDR_REG_FILE  = 9'd386    ;
    128                                              localparam PRECR_ADDR_REG_FILE = 9'd388 ; 
    129                                              localparam GETSTATUS_MSB_ADDR_REG_FILE = 9'd408 ;
    130                                              localparam DISEC_DATA_ADDR_REG_FILE  =  9'd406   ;
    131                                              
    132                                              
    133                                              //internal states
    134                                              localparam GETSTATUS         = 4'b0000 ;
    135                                              localparam DISEC             = 4'b0001 ;
    136                                              localparam ENTASx            = 4'b0011 ;
    137                                              localparam GETCAPS           = 4'b0010 ;
    138                                              localparam DEFTGTS           = 4'b0110 ;
    139                                              localparam DEFGRPA           = 4'b0111 ;
    140                                              localparam GETMXDS           = 4'b0101 ;
    141                                              localparam DEFTGT            = 4'b0100 ;
    142                                              localparam GETACCCR          = 4'b1100 ;
    143                                              localparam GETSTATUS_DEF     = 4'b1101 ;
    144                                              
    145                                              //global states
    146                                              localparam IDLE              = 4'b0000 ;
    147                                              localparam REP_START         = 4'b0001 ;
    148                                              localparam ADDRESS           = 4'b0011 ; //address sent by active cr
    149                                              localparam ACK               = 4'b0010 ; //ack to controller
    150                                              localparam ACK_TO_SEC_CR     = 4'b0110 ; //ack to sec controller
    151                                              localparam NACK_TO_SEC_CR    = 4'b0111 ; //nack to sec controller
    152                                              localparam BROADCAST_ADDR    = 4'b0101 ;
    153                                              localparam CCC_CODE          = 4'b0100 ; 
    154                                              localparam DEF_BYTE          = 4'b1100 ;
    155                                              localparam PAR_BIT           = 4'b1101 ;
    156                                              localparam DATA_RETURNED_1   = 4'b1111 ;
    157                                              localparam DATA_RETURNED_2   = 4'b1110 ;
    158                                              localparam DATA_SENT_1       = 4'b1010 ;
    159                                              localparam HANDOFF           = 4'b1011 ;
    160                                              localparam TESTING           = 4'b1001 ;
    161                                              localparam MONITOR           = 4'b1000 ;
    162                                              
    163             1                        365     always@(posedge i_crh_clk or negedge i_crh_rst_n)
    164                                              begin 
    165                                                if(!i_crh_rst_n)
    166                                                  begin
    167             1                          1           state                   <= IDLE ;
    168             1                          1           o_crh_tx_en             <= 1'b0      ;
    169             1                          1           o_crh_tx_mode           <= 3'b0      ;
    170             1                          1           o_crh_rx_en             <= 1'b0      ;
    171             1                          1           o_crh_rx_cnt_en         <= 1'b0      ;
    172             1                          1           o_crh_rx_mode           <= 2'b0      ;
    173             1                          1           o_crh_cnt_en            <= 1'b0      ; 
    174             1                          1           o_crh_fcnt_en           <= 1'b0      ;
    175             1                          1           o_crh_pp_od             <= 1'b1      ;
    176             1                          1           o_crh_done              <= 1'b0      ;
    177             1                          1           o_crh_regf_rd_en        <= 1'b0      ;
    178             1                          1           o_crh_regf_wr_en        <= 1'b0      ;  // write enable output  reg to reg file 
    179             1                          1           o_crh_regf_addr         <= 9'b000000 ;
    180             1                          1           o_crh_scl_idle          <= 1'b0      ;
    181             1                          1           o_crh_timer_set         <= 1'b0      ;
    182             1                          1           o_crh_timer_entasx      <= 2'b00     ;
    183             1                          1           REP_START_COUNT         <= 1'd0      ;
    184             1                          1           ACK_COUNT               <= 2'd0      ;
    185             1                          1           PAR_BIT_COUNT           <= 6'd0      ;
    186             1                          1           DATA_SENT_COUNT         <= 6'd0      ;
    187             1                          1           counter                 <= 6'd1      ;
    188             1                          1           dont_repeat             <= 1'b0      ;
    189                                                  end
    190                                                else 
    191                                                  begin 
    192                                                    case(state)
    193                                                      IDLE : begin
    194             1                        364               o_crh_scl_idle          <= 1'b0      ;
    195             1                        364               o_crh_pp_od             <= 1'b0      ;
    196             1                        364               o_crh_timer_set         <= 1'b0      ;
    197             1                        364               o_crh_timer_entasx      <= 2'b00     ;
    198             1                        364               o_crh_regf_rd_en        <= 1'b1      ;
    199             1                        364               o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;
    200             1                        364                dont_repeat             <= 1'b0      ;
    201                                                        if(i_crh_en && !dont_repeat)
    202                                                          begin
    203                                                            if(i_crh_initiated_request) //initiated by active controller
    204                                                              begin
    205             1                    ***0***                       o_crh_tx_en             <= 1'b1      ;
    206             1                    ***0***                       o_crh_tx_mode           <= 3'b110    ;
    207             1                    ***0***                       o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    208             1                    ***0***                       o_crh_scl_idle          <= 1'b0      ;
    209             1                    ***0***                       state                   <= REP_START ;
    210             1                    ***0***                       int_state               <= GETSTATUS ;   
    211                                                              end
    212                                              
    213                                                            else   //controller role request condition
    214                                                              begin
    215                                                                if(i_crh_cfg_reg[0]) // controller ack 
    216                                                                  begin
    217             1                    ***0***                           o_crh_tx_en             <= 1'b1      ;
    218             1                    ***0***                           o_crh_tx_mode           <= 3'b111    ; //ack in tx
    219             1                    ***0***                           o_crh_pp_od             <= 1'b1      ;
    220             1                    ***0***                           state                   <= ACK_TO_SEC_CR ;
    221                                                                  end
    222                                                                else
    223                                                                  begin
    224             1                    ***0***                           o_crh_tx_en             <= 1'b1      ;
    225             1                    ***0***                           o_crh_tx_mode           <= 3'b101    ; //nack(high-z) in tx
    226             1                    ***0***                           o_crh_pp_od             <= 1'b1      ;
    227             1                    ***0***                           state                   <= NACK_TO_SEC_CR ;
    228                                                                  end
    229                                                              end 
    230                                                           end  
    231                                                        else
    232                                                          begin
    233             1                        364                   state <= IDLE ; 
    234                                                          end 
    235                                                               
    236                                                          
    237                                                      end 
    238                                                      
    239                                                      ACK_TO_SEC_CR : begin //ack to the sec cr
    240             1                    ***0***             o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    241                                                      if(i_crh_tx_mode_done )
    242                                                        begin
    243             1                    ***0***                 o_crh_rx_en             <= 1'b0      ;
    244             1                    ***0***                 o_crh_tx_en             <= 1'b1      ;
    245             1                    ***0***                 o_crh_tx_mode           <= 3'b110    ;
    246             1                    ***0***                 o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    247             1                    ***0***                 state <= REP_START ;
    248             1                    ***0***                 int_state <= GETCAPS ;
    249                                                        end
    250                                                      else
    251                                                        begin
    252             1                    ***0***                 state <= ACK_TO_SEC_CR ;
    253                                                        end 
    254                                                      
    255                                                        
    256                                                        end 
    257                                                        
    258                                                        
    259                                                      NACK_TO_SEC_CR : begin //nack to the sec cr
    260             1                    ***0***             o_crh_pp_od             <= 1'b1      ; 
    261                                                      if(i_crh_tx_mode_done )
    262                                                        begin
    263             1                    ***0***                 o_crh_pp_od             <= 1'b0      ; 
    264             1                    ***0***                 state <= IDLE ;
    265             1                    ***0***                 o_crh_scl_idle          <= 1'b1      ;
    266             1                    ***0***                 o_crh_done              <= 1'b1      ;
    267                                                        end
    268                                                      else
    269                                                        begin
    270             1                    ***0***                 state <= NACK_TO_SEC_CR ;
    271                                                        end 
    272                                                      
    273                                              
    274                                                        end 
    275                                                        
    276                                                      REP_START : begin
    277                                                       
    278                                                        if(i_crh_tx_mode_done  )
    279                                                          begin
    280                                                            case(int_state)
    281                                                                GETSTATUS , GETCAPS , GETMXDS , GETSTATUS_DEF , GETACCCR : begin
    282                                                                  if(REP_START_COUNT == 1'b0) 
    283                                                                    begin
    284                                                                      
    285             1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    286             1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    287             1                    ***0***                             o_crh_tx_mode           <= 3'b001    ; 
    288             1                    ***0***                             o_crh_pp_od             <= 1'b1      ; //push-pull
    289             1                    ***0***                             o_crh_regf_wr_en        <= 1'b0      ;
    290             1                    ***0***                             o_crh_regf_rd_en        <= 1'b1      ;
    291             1                    ***0***                             o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;
    292             1                    ***0***                             state                   <= BROADCAST_ADDR ;
    293             1                    ***0***                             REP_START_COUNT         <= REP_START_COUNT + 1'b1 ;
    294                                                                    end 
    295                                                                  else if(REP_START_COUNT == 1'b1) 
    296                                                                    begin
    297             1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    298             1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    299             1                    ***0***                             o_crh_tx_mode           <= 3'b001    ;
    300             1                    ***0***                             o_crh_cnt_en            <= 1'b1      ;
    301             1                    ***0***                             o_crh_pp_od             <= 1'b1      ;
    302             1                    ***0***                             o_crh_regf_wr_en        <= 1'b0      ;
    303             1                    ***0***                             o_crh_regf_rd_en        <= 1'b1      ;
    304             1                    ***0***                             state <= ADDRESS ;
    305             1                    ***0***                             REP_START_COUNT <= 1'b0 ;
    306                                                                    end
    307                                                                  else
    308                                                                    begin
    309             1                    ***0***                             state <= REP_START ;
    310                                                                    end
    311                                                                    
    312                                                                  end
    313                                                                  DISEC , ENTASx , DEFTGTS: begin
    314             1                    ***0***                           o_crh_rx_en             <= 1'b0      ;
    315             1                    ***0***                           o_crh_tx_en             <= 1'b1      ;
    316             1                    ***0***                           o_crh_tx_mode           <= 3'b001    ;
    317             1                    ***0***                           o_crh_cnt_en            <= 1'b1      ;
    318             1                    ***0***                           o_crh_pp_od             <= 1'b1      ; //push-pull
    319             1                    ***0***                           o_crh_regf_rd_en        <= 1'b1      ;
    320             1                    ***0***                           o_crh_regf_wr_en        <= 1'b0      ;
    321             1                    ***0***                           o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;
    322             1                    ***0***                           state <= BROADCAST_ADDR ;
    323                                                                  end
    324                                              
    325                                                                  endcase
    326                                              
    327                                                            
    328                                                          end 
    329                                                        else
    330                                                          begin
    331             1                    ***0***                   state <= REP_START ;
    332                                                          end 
    333                                                                
    334                                              
    335                                                        end 
    336                                                        
    337                                                        
    338                                                        
    339                                                        BROADCAST_ADDR : begin 
    340             1                    ***0***                 o_crh_cnt_en            <= 1'b1      ;
    341                                                          
    342                                                          if(i_crh_tx_pp_mode_done)
    343                                                            begin
    344             1                    ***0***                     state <= ACK ;
    345             1                    ***0***                     o_crh_cnt_en         <= 1'b0      ;
    346             1                    ***0***                     o_crh_pp_od             <= 1'b0      ;
    347             1                    ***0***                     o_crh_tx_en             <= 1'b0 ;
    348             1                    ***0***                     o_crh_rx_en             <= 1'b1      ;       
    349             1                    ***0***                     o_crh_rx_mode           <= 3'b000     ; //ack mode in controller rx
    350             1                    ***0***                     o_crh_rx_cnt_en         <= 1'b0      ;
    351                                                              case(int_state)
    352                                                               DISEC : begin
    353             1                    ***0***                            o_crh_regf_addr <= DISEC_ADDR_REG_FILE     ; 
    354                                                                       end
    355                                                                   endcase
    356                                                            end 
    357                                                          else
    358                                                            begin
    359             1                    ***0***                     state <= BROADCAST_ADDR ;
    360                                                            end
    361                                                          end  
    362                                                         
    363                                                         
    364                                                          
    365                                                        ACK : begin 
    366             1                    ***0***                     o_crh_regf_rd_en        <= 1'b1      ;
    367             1                    ***0***                      o_crh_tx_en             <= 1'b0 ;
    368             1                    ***0***                     o_crh_rx_en             <= 1'b1      ;       
    369             1                    ***0***                     o_crh_rx_mode           <= 2'b00     ; //ack mode in controller rx
    370             1                    ***0***                     o_crh_rx_cnt_en         <= 1'b0      ;
    371                                                          if(i_crh_rx_mode_done && i_crh_scl_neg_edge)
    372                                                            begin
    373                                                              if(!i_crh_rx_nack_ack)
    374                                                                begin
    375                                                                  case(int_state)
    376                                                                    GETSTATUS , GETCAPS , GETMXDS , GETSTATUS_DEF , GETACCCR : begin
    377                                                                      if(ACK_COUNT == 2'b00 )
    378                                                                        begin
    379             1                    ***0***                                 o_crh_rx_en             <= 1'b0      ;
    380             1                    ***0***                                 o_crh_tx_en             <= 1'b1      ;
    381             1                    ***0***                                 o_crh_tx_mode           <= 3'b001    ; 
    382             1                    ***0***                                 o_crh_cnt_en            <= 1'b1      ;
    383             1                    ***0***                                 o_crh_regf_rd_en        <= 1'b1      ;
    384             1                    ***0***                                 o_crh_regf_wr_en        <= 1'b0      ;
    385             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ;
    386             1                    ***0***                                 state <= CCC_CODE ;
    387                                                                          if(int_state == GETSTATUS || int_state == GETSTATUS_DEF)
    388                                                                            begin
    389             1                    ***0***                                     o_crh_regf_addr <= GETSTATUS_ADDR_REG_FILE     ; 
    390                                                                            end
    391                                                                          else if(int_state == GETCAPS)
    392                                                                            begin
    393             1                    ***0***                                     o_crh_regf_addr <= GETCAPS_ADDR_REG_FILE     ; 
    394                                                                            end
    395                                                                          else if(int_state == GETMXDS)
    396                                                                            begin
    397             1                    ***0***                                     o_crh_regf_addr <= GETMXDS_ADDR_REG_FILE     ; 
    398                                                                            end
    399                                                                          else if(int_state == GETACCCR)
    400                                                                            begin
    401             1                    ***0***                                     o_crh_regf_addr <= GETACCCR_ADDR_REG_FILE     ; 
    402                                                                            end
    403                                                                              
    404             1                    ***0***                                 ACK_COUNT <= ACK_COUNT + 2'b1 ;
    405                                                                        end
    406                                                                      else if(ACK_COUNT == 2'b01)
    407                                                                        begin
    408             1                    ***0***                                 o_crh_tx_en             <= 1'b0      ;
    409             1                    ***0***                                 o_crh_rx_en             <= 1'b1      ;
    410             1                    ***0***                                 o_crh_rx_mode           <= 3'b001    ; //deserializing mode in controller rx
    411             1                    ***0***                                 o_crh_rx_cnt_en         <= 1'b1      ;
    412             1                    ***0***                                 o_crh_cnt_en            <= 1'b1      ;
    413             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ;
    414             1                    ***0***                                 o_crh_regf_rd_en        <= 1'b0 ;
    415             1                    ***0***                                 state <= DATA_RETURNED_1 ;
    416             1                    ***0***                                 ACK_COUNT <= 2'b0 ;
    417                                                                        end
    418                                                                      else 
    419                                                                        begin
    420             1                    ***0***                                 state <= ACK ;
    421                                                                        end 
    422                                                                    end
    423                                                                    DISEC , DEFTGTS , ENTASx  : begin
    424             1                    ***0***                            o_crh_rx_en             <= 1'b0      ;
    425             1                    ***0***                            o_crh_tx_en             <= 1'b1      ;
    426             1                    ***0***                            o_crh_tx_mode           <= 3'b001    ; 
    427             1                    ***0***                            o_crh_cnt_en            <= 1'b1      ;
    428             1                    ***0***                            o_crh_regf_rd_en        <= 1'b1      ;
    429             1                    ***0***                            o_crh_regf_wr_en        <= 1'b0      ;
    430             1                    ***0***                            o_crh_pp_od             <= 1'b1      ;
    431                                                                     if(int_state == DISEC)
    432                                                                        begin
    433             1                    ***0***                                 o_crh_regf_addr <= DISEC_ADDR_REG_FILE     ; 
    434                                                                        end
    435                                                                     else if(int_state == DEFTGTS)
    436                                                                        begin
    437             1                    ***0***                                 o_crh_regf_addr <= DEFTGTS_ADDR_REG_FILE     ; 
    438                                                                        end
    439                                                                      else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b00)
    440                                                                        begin
    441             1                    ***0***                                 o_crh_regf_addr <= ENTAS0_ADDR_REG_FILE     ; 
    442                                                                        end
    443                                                                      else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b01)
    444                                                                        begin
    445             1                    ***0***                                 o_crh_regf_addr <= ENTAS1_ADDR_REG_FILE     ; 
    446                                                                        end
    447                                                                      else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b10)
    448                                                                        begin
    449             1                    ***0***                                 o_crh_regf_addr <= ENTAS2_ADDR_REG_FILE     ; 
    450                                                                        end
    451                                                                      else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b11)
    452                                                                        begin
    453             1                    ***0***                                 o_crh_regf_addr <= ENTAS3_ADDR_REG_FILE     ; 
    454                                                                        end
    455             1                    ***0***                            state <= CCC_CODE ;
    456                                                                    end      
    457                                                                           
    458                                                                  endcase
    459                                                                end
    460                                                              else
    461                                                                begin
    462                                                                  case(int_state)
    463                                                                    GETSTATUS : begin
    464                                                                     if(i_crh_getstatus_data[7:6] == 2'b11)
    465                                                                        begin
    466                                                                          //preparing_done <= 1'b1 ;
    467             1                    ***0***                                 state <= HANDOFF ;
    468             1                    ***0***                                 o_crh_rx_en             <= 1'b0      ;
    469             1                    ***0***                                 o_crh_tx_en             <= 1'b1      ;
    470             1                    ***0***                                 o_crh_tx_mode           <= 3'b010    ; 
    471             1                    ***0***                                 o_crh_send_stop         <= 1'b1      ;
    472             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ;
    473                                                                          //preparing_done          <= 1'b0      ;
    474                                                                          
    475                                                                        end
    476                                                                      else
    477                                                                        begin
    478             1                    ***0***                                 o_crh_rx_en             <= 1'b0      ;
    479             1                    ***0***                                 o_crh_tx_en             <= 1'b1      ;
    480             1                    ***0***                                 o_crh_tx_mode           <= 3'b110    ;
    481             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    482             1                    ***0***                                 state <= REP_START ;
    483             1                    ***0***                                 int_state <= GETCAPS ;                      
    484                                                                        end
    485                                                                    end
    486                                                                    GETCAPS : begin
    487             1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    488             1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    489             1                    ***0***                             o_crh_tx_mode           <= 3'b110    ;
    490             1                    ***0***                             o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    491             1                    ***0***                             state <= REP_START ;
    492             1                    ***0***                             int_state <= GETMXDS ;
    493                                                                    end
    494                                                                    GETMXDS : begin
    495             1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    496             1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    497             1                    ***0***                             o_crh_tx_mode           <= 3'b110    ;
    498             1                    ***0***                             o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    499             1                    ***0***                             state <= REP_START ;
    500             1                    ***0***                             int_state <= DISEC ;
    501                                                                    end
    502                                                                    DISEC : begin
    503                                                                      if(i_crh_CRHDLY[2] == 1'b1)
    504                                                                          begin
    505             1                    ***0***                                   o_crh_rx_en             <= 1'b0      ;
    506             1                    ***0***                                   o_crh_tx_en             <= 1'b1      ;
    507             1                    ***0***                                   o_crh_tx_mode           <= 3'b110    ;
    508             1                    ***0***                                   o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    509             1                    ***0***                                   state <= REP_START ;
    510             1                    ***0***                                   int_state <= ENTASx ;
    511                                                                          end
    512                                                                        else
    513                                                                          begin
    514             1                    ***0***                                   state <= REP_START ;
    515             1                    ***0***                                   int_state <= GETSTATUS_DEF ;
    516                                                                          end    
    517                                                                    end
    518                                                                    ENTASx : begin
    519                                                                    if(i_crh_CRCAP2[3] || i_crh_CRCAP2[2]) //deep sleep capable + delayed handoff 
    520                                                                      begin
    521             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    522             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    523             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    524             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    525             1                    ***0***                               state <= REP_START ;
    526             1                    ***0***                               int_state <= GETSTATUS_DEF ;
    527                                                                      end
    528                                                                    else 
    529                                                                      begin
    530             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    531             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    532             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    533             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    534             1                    ***0***                               state <= REP_START ;
    535             1                    ***0***                               int_state <= GETACCCR ;
    536                                                                      end 
    537                                                                    end
    538                                                                    GETSTATUS_DEF : begin
    539                                                                    if(i_crh_PRECR[0])
    540                                                                      begin
    541             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    542             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    543             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    544             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull 
    545             1                    ***0***                               state <= REP_START ;
    546             1                    ***0***                               int_state <= DEFTGTS ;
    547                                                                      end
    548                                                                    else if(i_crh_PRECR[1:0] == 2'b10)
    549                                                                      begin
    550             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    551             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    552             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    553             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    554             1                    ***0***                               state <= REP_START ;
    555             1                    ***0***                               int_state <= GETSTATUS_DEF ;
    556                                                                      end
    557                                                                    else if(i_crh_PRECR[1:0] == 2'b00)
    558                                                                      begin
    559             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    560             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    561             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    562             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull 
    563             1                    ***0***                               state <= REP_START ;
    564             1                    ***0***                               int_state <= GETACCCR ;
    565                                                                      end
    566                                                                    end
    567                                                                    DEFTGTS : begin
    568                                                                    if(i_crh_PRECR[1]) 
    569                                                                      begin
    570             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    571             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    572             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    573             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    574             1                    ***0***                               state <= REP_START ;
    575             1                    ***0***                               int_state <= GETSTATUS_DEF ;
    576                                                                      end
    577                                                                    else
    578                                                                      begin
    579             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    580             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    581             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    582             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    583             1                    ***0***                               state <= REP_START ;
    584             1                    ***0***                               int_state <= GETACCCR ;
    585                                                                      end
    586                                                                    end              
    587                                                                  endcase
    588                                                            end
    589                                                          end
    590                                                          else 
    591                                                            begin
    592             1                    ***0***                     state <= ACK ;
    593                                                            end 
    594                                                          
    595                                                        end
    596                                                        
    597                                                        
    598                                                        CCC_CODE: begin 
    599                                                          
    600                                                          if(i_crh_tx_pp_mode_done )
    601                                                            begin
    602             1                    ***0***                     o_crh_rx_en             <= 1'b0      ;
    603             1                    ***0***                     o_crh_cnt_en            <= 1'b0      ;
    604             1                    ***0***                     o_crh_tx_en             <= 1'b1      ;
    605             1                    ***0***                     o_crh_tx_mode           <= 3'b011    ; 
    606             1                    ***0***                     o_crh_pp_od             <= 1'b1      ;
    607             1                    ***0***                     state <= PAR_BIT ; 
    608                                                            end 
    609                                                          else
    610                                                            begin
    611             1                    ***0***                     state <= CCC_CODE ;
    612                                                            end 
    613                                                            
    614                                                        end
    615                                                        
    616                                                        ADDRESS : begin
    617                                                          if(i_crh_tx_pp_mode_done)
    618                                                            begin
    619             1                    ***0***                     o_crh_cnt_en            <= 1'b0      ;
    620             1                    ***0***                     o_crh_tx_en             <= 1'b0      ;
    621             1                    ***0***                     o_crh_rx_en             <= 1'b1      ;
    622             1                    ***0***                     o_crh_rx_mode           <= 2'b00     ; //ack mode in controller rx
    623             1                    ***0***                     o_crh_rx_cnt_en         <= 1'b0      ;
    624             1                    ***0***                     o_crh_pp_od             <= 1'b0      ; //open drain
    625             1                    ***0***                     state <= ACK  ;
    626                                                            end
    627                                                          else
    628                                                            begin
    629             1                    ***0***                     state <= ADDRESS ;
    630                                                            end
    631                                                            
    632                                                            
    633                                                          end
    634                                                        
    635                                                        
    636                                                        PAR_BIT : begin
    637                                                                
    638                                                          if(i_crh_tx_pp_mode_done )
    639                                                            begin
    640                                                              case(int_state)
    641                                                                GETSTATUS : begin
    642                                                                  if(PAR_BIT_COUNT == 6'd0)
    643                                                                    begin
    644             1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    645             1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    646             1                    ***0***                             o_crh_tx_mode           <= 3'b110    ;
    647             1                    ***0***                             o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    648                                                                      if(i_crh_initiated_request) //address of the target to be sent the controller role 
    649                                                                         begin
    650             1                    ***0***                                 o_crh_regf_addr <= TARGET_ADDR_REG_FILE ; //need to be edited
    651                                                                         end
    652                                                                        else //address of the target wining the arbitration 
    653                                                                         begin
    654             1                    ***0***                                 o_crh_regf_addr <= ARBITRATION_ADDR_REG_FILE  ;
    655                                                                         end
    656             1                    ***0***                             state <= REP_START;
    657             1                    ***0***                             PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    658                                                                    end 
    659                                                                  else if(PAR_BIT_COUNT == 6'd1)
    660                                                                    begin
    661             1                    ***0***                             o_crh_tx_en             <= 1'b0      ;
    662             1                    ***0***                             o_crh_rx_en             <= 1'b1      ;
    663             1                    ***0***                             o_crh_rx_mode           <= 3'b001    ; //deserializing mode in controller rx
    664             1                    ***0***                             o_crh_pp_od             <= 1'b1      ; 
    665             1                    ***0***                             o_crh_regf_rd_en        <= 1'b0      ;
    666             1                    ***0***                             state <= DATA_RETURNED_2 ;
    667             1                    ***0***                             PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    668                                                                    end
    669                                                                  else if(PAR_BIT_COUNT == 6'd2)
    670                                                                    begin
    671                                                                      
    672                                                                      if(i_crh_getstatus_data[7:6] == 2'b11)
    673                                                                        begin
    674                                                                          //preparing_done <= 1'b1 ;
    675             1                    ***0***                                 state <= HANDOFF ;
    676             1                    ***0***                                 PAR_BIT_COUNT <= 1'b0;
    677             1                    ***0***                                 o_crh_rx_en             <= 1'b0      ;
    678             1                    ***0***                                 o_crh_tx_en             <= 1'b1      ;
    679             1                    ***0***                                 o_crh_tx_mode           <= 3'b010    ; 
    680             1                    ***0***                                 o_crh_send_stop         <= 1'b1      ;
    681             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ;
    682                                                                          //preparing_done          <= 1'b0      ;
    683                                                                          
    684                                                                        end
    685                                                                      else
    686                                                                        begin
    687             1                    ***0***                                 o_crh_regf_rd_en        <= 1'b1      ;
    688             1                    ***0***                                 o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    689             1                    ***0***                                 o_crh_rx_en             <= 1'b0      ;
    690             1                    ***0***                                 o_crh_tx_en             <= 1'b1      ;
    691             1                    ***0***                                 o_crh_tx_mode           <= 3'b110    ;
    692             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    693             1                    ***0***                                 state <= REP_START ;
    694             1                    ***0***                                 int_state <= GETCAPS ;     
    695             1                    ***0***                                 PAR_BIT_COUNT <= 1'b0;                 
    696                                                                        end
    697                                                                    end 
    698                                                                  else
    699                                                                    begin
    700             1                    ***0***                             state <= PAR_BIT ;
    701                                                                    end
    702                                                                    
    703                                                                  end
    704                                                                  GETCAPS  : begin 
    705                                                                    if(PAR_BIT_COUNT == 6'd0)
    706                                                                      begin
    707             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    708             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    709             1                    ***0***                               o_crh_tx_mode           <= 3'b001    ; 
    710             1                    ***0***                               o_crh_cnt_en            <= 1'b1      ;
    711             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    712             1                    ***0***                               o_crh_regf_wr_en        <= 1'b0      ;
    713             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    714             1                    ***0***                               o_crh_regf_addr         <= DEF_BYTE_REG_FILE ;
    715             1                    ***0***                               state <= DEF_BYTE ;
    716             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    717                                                                      end 
    718                                                                    else if(PAR_BIT_COUNT == 6'd1)
    719                                                                      begin
    720             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    721             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    722             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    723             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    724                                                                        if(i_crh_initiated_request) //address of the target to be sent the controller role 
    725                                                                         begin
    726             1                    ***0***                                 o_crh_regf_addr <= TARGET_ADDR_REG_FILE ; //need to be edited
    727                                                                         end
    728                                                                        else //address of the target wining the arbitration 
    729                                                                         begin
    730             1                    ***0***                                 o_crh_regf_addr <= ARBITRATION_ADDR_REG_FILE  ;
    731                                                                         end
    732             1                    ***0***                               state <= REP_START ;
    733             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    734                                                                      end
    735                                                                    else if(PAR_BIT_COUNT == 6'd2)
    736                                                                      begin
    737             1                    ***0***                               o_crh_tx_en             <= 1'b0      ;
    738             1                    ***0***                               o_crh_rx_en             <= 1'b1      ;
    739             1                    ***0***                               o_crh_rx_mode           <= 3'b001    ; //deserializing mode in controller rx
    740                                                                        
    741             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    742             1                    ***0***                               o_crh_regf_rd_en        <= 1'b0      ;
    743             1                    ***0***                               state <= DATA_RETURNED_2 ;
    744             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    745                                                                      end
    746                                                                    else if(PAR_BIT_COUNT == 6'd3)
    747                                                                      begin
    748                                                                        //o_crh_regf_rd_en        <= 1'b1      ;
    749             1                    ***0***                               o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    750             1                    ***0***                               PAR_BIT_COUNT <= 6'd0 ;
    751             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    752             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    753             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    754             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    755             1                    ***0***                               state <= REP_START ;
    756             1                    ***0***                               int_state <= GETMXDS ;
    757                                                                      end
    758                                                                    else
    759                                                                      begin
    760             1                    ***0***                               state <= PAR_BIT ;
    761                                                                      end
    762                                                                    end 
    763                                                                  GETMXDS : begin
    764                                                                    if(PAR_BIT_COUNT == 6'd0)
    765                                                                      begin
    766             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    767             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    768             1                    ***0***                               o_crh_tx_mode           <= 3'b001    ; 
    769             1                    ***0***                               o_crh_cnt_en            <= 1'b1      ;
    770             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    771             1                    ***0***                               o_crh_regf_wr_en        <= 1'b0      ;
    772             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    773             1                    ***0***                               o_crh_regf_addr         <= DEF_BYTE_REG_FILE ;
    774             1                    ***0***                               state <= DEF_BYTE ;
    775             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    776                                                                      end 
    777                                                                    else if(PAR_BIT_COUNT == 6'd1)
    778                                                                      begin
    779             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    780             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    781             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    782             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    783                                                                        if(i_crh_initiated_request) //address of the target to be sent the controller role 
    784                                                                         begin
    785             1                    ***0***                                 o_crh_regf_addr <= TARGET_ADDR_REG_FILE ; //need to be edited
    786                                                                         end
    787                                                                        else //address of the target wining the arbitration 
    788                                                                         begin
    789             1                    ***0***                                 o_crh_regf_addr <= ARBITRATION_ADDR_REG_FILE  ;
    790                                                                         end
    791             1                    ***0***                               state <= REP_START ;
    792             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    793                                                                      end
    794                                                                    else if(PAR_BIT_COUNT == 6'd2)
    795                                                                      begin
    796             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    797             1                    ***0***                             	 o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    798             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    799             1                    ***0***                               PAR_BIT_COUNT <= 6'd0 ;
    800             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    801             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    802             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    803             1                    ***0***                               state <= REP_START ;
    804             1                    ***0***                               int_state <= DISEC ;
    805                                                                      end
    806                                                                    else
    807                                                                      begin
    808             1                    ***0***                               state <= PAR_BIT ;
    809                                                                      end
    810                                                                    end 
    811                                                                  DISEC : begin
    812                                                                    if(PAR_BIT_COUNT == 6'd0)
    813                                                                      begin
    814             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    815             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    816             1                    ***0***                               o_crh_tx_mode           <= 3'b001    ; 
    817             1                    ***0***                               o_crh_cnt_en            <= 1'b1      ;
    818             1                    ***0***                               o_crh_fcnt_en           <= 1'b1      ;
    819             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    820             1                    ***0***                               o_crh_regf_wr_en        <= 1'b0      ;
    821             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    822             1                    ***0***                               o_crh_regf_addr <= DISEC_DATA_ADDR_REG_FILE ;
    823             1                    ***0***                               state <= DATA_SENT_1 ;
    824             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    825                                                                      end 
    826                                                                    else if(PAR_BIT_COUNT == 6'd1)
    827                                                                      begin
    828             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    829             1                    ***0***                               o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    830             1                    ***0***                               PAR_BIT_COUNT <= 6'd0 ;
    831             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    832             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    833             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    834             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    835             1                    ***0***                               state <= REP_START ;
    836                                                                        if(i_crh_CRHDLY[2] == 1'b1)
    837                                                                          begin
    838             1                    ***0***                                   int_state <= ENTASx ;
    839                                                                          end
    840                                                                        else
    841                                                                          begin
    842             1                    ***0***                                   int_state <= GETSTATUS_DEF ;
    843                                                                          end    
    844                                                                      end
    845                                                                    else
    846                                                                      begin
    847             1                    ***0***                               state <= PAR_BIT ;
    848                                                                      end
    849                                                                      
    850                                                                    end
    851                                                                  ENTASx : begin
    852             1                    ***0***                           o_crh_timer_set <= 1'b1 ;
    853             1                    ***0***                           o_crh_regf_rd_en        <= 1'b1      ;
    854             1                    ***0***                           o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    855                                                                    if(i_crh_CRHDLY[1:0] == 2'b00)
    856                                                                      begin
    857             1                    ***0***                               o_crh_timer_entasx <= 2'b00 ;
    858                                                                      end
    859                                                                    else if(i_crh_CRHDLY[1:0] == 2'b01)
    860                                                                      begin
    861             1                    ***0***                               o_crh_timer_entasx <= 2'b01 ;
    862                                                                      end
    863                                                                    else if(i_crh_CRHDLY[1:0] == 2'b10)
    864                                                                      begin
    865             1                    ***0***                               o_crh_timer_entasx <= 2'b10 ;
    866                                                                      end
    867                                                                    else if(i_crh_CRHDLY[1:0] == 2'b11)
    868                                                                      begin
    869             1                    ***0***                               o_crh_timer_entasx <= 2'b11 ; 
    870                                                                      end 
    871                                                                    
    872                                                                    if(i_crh_CRCAP2[3] || i_crh_CRCAP2[2]) //deep sleep capable + delayed handoff 
    873                                                                      begin
    874             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    875             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    876             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    877             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    878             1                    ***0***                               state <= REP_START ;
    879             1                    ***0***                               int_state <= GETSTATUS_DEF ;
    880                                                                      end
    881                                                                    else 
    882                                                                      begin
    883             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    884             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    885             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    886             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    887             1                    ***0***                               state <= REP_START ;
    888             1                    ***0***                               int_state <= GETACCCR ;
    889                                                                      end 
    890                                                                    
    891                                                                  end
    892                                                                  GETSTATUS_DEF : begin 
    893                                                                    if(PAR_BIT_COUNT == 6'd0)
    894                                                                      begin
    895             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    896             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    897             1                    ***0***                               o_crh_tx_mode           <= 3'b001    ; 
    898             1                    ***0***                               o_crh_cnt_en            <= 1'b1      ;
    899             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    900             1                    ***0***                               o_crh_regf_wr_en        <= 1'b0      ;
    901             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    902             1                    ***0***                               o_crh_regf_addr         <= DEF_BYTE_REG_FILE ;
    903             1                    ***0***                               state <= DEF_BYTE ;
    904             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    905                                                                      end 
    906                                                                    else if(PAR_BIT_COUNT == 6'd1)
    907                                                                      begin
    908             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    909             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    910             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    911             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    912                                                                        if(i_crh_initiated_request) //address of the target to be sent the controller role 
    913                                                                         begin
    914             1                    ***0***                                 o_crh_regf_addr <= TARGET_ADDR_REG_FILE ; //need to be edited
    915                                                                         end
    916                                                                        else //address of the target wining the arbitration 
    917                                                                         begin
    918             1                    ***0***                                 o_crh_regf_addr <= ARBITRATION_ADDR_REG_FILE  ;
    919                                                                         end
    920             1                    ***0***                               state <= REP_START ;
    921             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    922                                                                      end
    923                                                                    else if(PAR_BIT_COUNT == 6'd2)
    924                                                                      begin
    925             1                    ***0***                               o_crh_tx_en             <= 1'b0      ;
    926             1                    ***0***                               o_crh_rx_en             <= 1'b1      ;
    927             1                    ***0***                               o_crh_rx_mode           <= 3'b001    ; //deserializing mode in controller rx
    928                                              
    929             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    930             1                    ***0***                               state <= DATA_RETURNED_2 ;
    931             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    932                                                                      end
    933                                                                    else if(PAR_BIT_COUNT == 6'd3)
    934                                                                      begin
    935             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    936             1                    ***0***                               o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    937             1                    ***0***                               PAR_BIT_COUNT <= 6'd0 ;
    938             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    939             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    940             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    941             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    942                                                                        if(i_crh_PRECR[0])
    943                                                                          begin
    944             1                    ***0***                                   state <= REP_START ;
    945             1                    ***0***                                   int_state <= DEFTGTS ;
    946                                                                          end
    947                                                                        else if(i_crh_PRECR[1:0] == 2'b10)
    948                                                                          begin
    949             1                    ***0***                                   state <= REP_START ;
    950             1                    ***0***                                   int_state <= GETSTATUS_DEF ;
    951                                                                          end
    952                                                                        else if(i_crh_PRECR[1:0] == 2'b00)
    953                                                                          begin
    954             1                    ***0***                                   state <= REP_START ;
    955             1                    ***0***                                   int_state <= GETACCCR ;
    956                                                                          end
    957                                                                      end
    958                                                                    else
    959                                                                      begin
    960             1                    ***0***                               state <= PAR_BIT ;
    961                                                                      end
    962                                                                  end
    963                                                                  DEFTGTS : begin 
    964                                                                    
    965                                                                    
    966                                                                        if( PAR_BIT_COUNT == ((i_crh_tgts_count+1)*4 + 1) )
    967                                                                          begin
    968             1                    ***0***                                   DATA_SENT_COUNT <= 6'd0 ;
    969             1                    ***0***                                   counter <= 6'd1 ;
    970             1                    ***0***                                   PAR_BIT_COUNT           <= 6'b0      ;
    971             1                    ***0***                                   o_crh_rx_en             <= 1'b0      ;
    972             1                    ***0***                                   o_crh_tx_en             <= 1'b1      ;
    973             1                    ***0***                                   o_crh_tx_mode           <= 3'b110    ;
    974             1                    ***0***                                   o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    975             1                    ***0***                                   o_crh_regf_rd_en        <= 1'b1      ;
    976             1                    ***0***                                   o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ; 
    977                                                                            if(i_crh_PRECR[1]) 
    978                                                                              begin
    979             1                    ***0***                                       state <= REP_START ;
    980             1                    ***0***                                       int_state <= GETSTATUS_DEF ;
    981                                                                              end
    982                                                                            else
    983                                                                              begin
    984             1                    ***0***                                       state <= REP_START ;
    985             1                    ***0***                                       int_state <= GETACCCR ;
    986                                                                              end
    987                                                                          end
    988                                                                        else 
    989                                                                          begin
    990             1                    ***0***                                   PAR_BIT_COUNT           <= PAR_BIT_COUNT + 1'b1 ; 
    991             1                    ***0***                                   DATA_SENT_COUNT         <= DATA_SENT_COUNT + 1'b1 ;
    992             1                    ***0***                                   o_crh_rx_en             <= 1'b0      ;
    993             1                    ***0***                                   o_crh_tx_en             <= 1'b1      ;
    994             1                    ***0***                                   o_crh_tx_mode           <= 3'b001    ; 
    995             1                    ***0***                                   o_crh_cnt_en            <= 1'b1      ;
    996             1                    ***0***                                   o_crh_fcnt_en           <= 1'b1      ;
    997             1                    ***0***                                   o_crh_regf_rd_en        <= 1'b1      ;
    998             1                    ***0***                                   o_crh_regf_wr_en        <= 1'b0      ;
    999             1                    ***0***                                   o_crh_pp_od             <= 1'b1      ;
    1000            1                    ***0***                                   state <= DATA_SENT_1 ; 
    1001                                                                           if( DATA_SENT_COUNT == 6'd0 )
    1002                                                                             begin
    1003            1                    ***0***                                       o_crh_regf_addr <= 9'd35    ;
    1004                                                                             end
    1005                                                                           else if (DATA_SENT_COUNT == 6'd1)
    1006                                                                             begin
    1007            1                    ***0***                                       o_crh_regf_addr <= 9'd35    ; //active controller DA (need to be edited)
    1008                                                                             end
    1009                                                                           else if (DATA_SENT_COUNT == 6'd2)
    1010                                                                             begin
    1011            1                    ***0***                                       o_crh_regf_addr <= 9'd35    ;  //active controller DCR (need to be edited)
    1012                                                                             end
    1013                                                                           else if (DATA_SENT_COUNT == 6'd3)
    1014                                                                             begin
    1015            1                    ***0***                                     	 o_crh_regf_addr <= 9'd35    ; //active controller BCR ( need to be edited) 
    1016                                                                             end
    1017                                                                           else if(DATA_SENT_COUNT == 6'd4)
    1018                                                                             begin
    1019            1                    ***0***                                       o_crh_regf_addr <= BROADCAST_ADDR_REG_FILE ;
    1020                                                                             end
    1021                                                                           else if(DATA_SENT_COUNT == counter*4 + 6'd1)
    1022                                                                               begin
    1023            1                    ***0***                                         o_crh_regf_addr <= 9'd199 +  counter*9   ;
    1024                                                                               end 
    1025                                                                           else if(DATA_SENT_COUNT == counter*4 + 6'd2)
    1026                                                                               begin 
    1027            1                    ***0***                                       	 o_crh_regf_addr <= 9'd198 + counter*9    ;
    1028                                                                               end
    1029                                                                           else if(DATA_SENT_COUNT == counter*4 + 6'd3)
    1030                                                                               begin
    1031            1                    ***0***                                         o_crh_regf_addr <= 9'd197 + counter*9    ;
    1032                                                                               end
    1033                                                                           else if(DATA_SENT_COUNT == counter*4 + 6'd4)
    1034                                                                               begin
    1035            1                    ***0***                                         o_crh_regf_addr <= 9'd199 + counter*9    ; //need to be edited
    1036            1                    ***0***                                         counter <= counter + 1 ;
    1037                                                                               end
    1038                                                                         end //end of the else
    1039                                                               //counter <= 6'd1 ;
    1040                                                                   //PAR_BIT_COUNT <= 6'd0 ;
    1041                                                                 end // end of the state 
    1042                                                                 GETACCCR : begin
    1043                                                                 if(PAR_BIT_COUNT == 6'd0)
    1044                                                                   begin
    1045            1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    1046            1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    1047            1                    ***0***                             o_crh_tx_mode           <= 3'b110    ;
    1048            1                    ***0***                             o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    1049                                                                     if(i_crh_initiated_request) //address of the target to be sent the controller role 
    1050                                                                        begin
    1051            1                    ***0***                                 o_crh_regf_addr <= TARGET_ADDR_REG_FILE ; //need to be edited
    1052                                                                        end
    1053                                                                       else //address of the target wining the arbitration 
    1054                                                                        begin
    1055            1                    ***0***                                 o_crh_regf_addr <= ARBITRATION_ADDR_REG_FILE  ;
    1056                                                                        end
    1057            1                    ***0***                             state <= REP_START;
    1058            1                    ***0***                             PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    1059                                                                   end 
    1060                                                                 else if(PAR_BIT_COUNT == 6'd1)
    1061                                                                   begin
    1062            1                    ***0***                             state <= HANDOFF ;
    1063            1                    ***0***                             PAR_BIT_COUNT <= 6'd0 ;
    1064                                                                     //preparing_done <= 1'b1 ;
    1065            1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    1066            1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    1067            1                    ***0***                             o_crh_tx_mode           <= 3'b010    ; 
    1068            1                    ***0***                             o_crh_send_stop         <= 1'b1      ;
    1069            1                    ***0***                             o_crh_pp_od             <= 1'b1      ;
    1070                                                                     //preparing_done          <= 1'b0      ;
    1071                                                                   
    1072                                                                   end
    1073                                                                 end
    1074                                                            endcase
    1075                                                           end
    1076                                                         else
    1077                                                           begin
    1078            1                    ***0***                     state <= PAR_BIT ;
    1079                                                           end
    1080                                             
    1081                                                       end
    1082                                                       
    1083                                                       
    1084                                                       DEF_BYTE : begin 
    1085                                                         
    1086                                                         if(i_crh_tx_pp_mode_done)
    1087                                                           begin
    1088            1                    ***0***                     o_crh_cnt_en            <= 1'b0      ;
    1089            1                    ***0***                     o_crh_rx_en             <= 1'b0      ;
    1090            1                    ***0***                     o_crh_tx_en             <= 1'b1      ;
    1091            1                    ***0***                     o_crh_tx_mode           <= 3'b011    ; 
    1092            1                    ***0***                     o_crh_pp_od             <= 1'b1      ;
    1093            1                    ***0***                     state <= PAR_BIT ;
    1094                                                           end 
    1095                                                         else
    1096                                                           begin
    1097            1                    ***0***                     state <= DEF_BYTE ;
    1098                                                           end 
    1099                                                           
    1100                                                       end
    1101                                                       
    1102                                                       
    1103                                                      
    1104                                                       DATA_RETURNED_1 : begin
    1105                                                         //data will be saved in reg file depending on the CCC command 
    1106                                                         case(int_state)
    1107                                                               GETSTATUS : begin 
    1108            1                    ***0***                         o_crh_regf_wr_en <= 1'b1 ;
    1109            1                    ***0***                         o_crh_regf_addr <= GETSTATUS_MSB_ADDR_REG_FILE ;
    1110            1                    ***0***                         o_crh_regf_rd_en <= 1'b0 ;
    1111                                                               end
    1112                                                               GETCAPS : begin
    1113            1                    ***0***                         o_crh_regf_wr_en <= 1'b1 ;
    1114            1                    ***0***                         o_crh_regf_addr <= CRCAPS1_ADDR_REG_FILE ;
    1115            1                    ***0***                         o_crh_regf_rd_en <= 1'b0 ;
    1116                                                             
    1117                                                               end
    1118                                                               GETMXDS : begin
    1119            1                    ***0***                         o_crh_regf_wr_en <= 1'b1 ;
    1120            1                    ***0***                         o_crh_regf_addr <= CRHDLY1_ADDR_REG_FILE ;
    1121            1                    ***0***                         o_crh_regf_rd_en <= 1'b0 ;
    1122                                                             
    1123                                                               end
    1124                                                             endcase 
    1125                                             
    1126                                             
    1127                                                         if(i_crh_rx_pp_mode_done ) 
    1128                                                           begin
    1129            1                    ***0***                     o_crh_rx_cnt_en         <= 1'b0      ;
    1130            1                    ***0***                     o_crh_cnt_en            <= 1'b0      ;
    1131            1                    ***0***                     o_crh_rx_en             <= 1'b0      ;
    1132            1                    ***0***                     o_crh_tx_en             <= 1'b1      ;
    1133            1                    ***0***                     o_crh_tx_mode           <= 3'b011    ; 
    1134            1                    ***0***                     o_crh_pp_od             <= 1'b1      ;
    1135            1                    ***0***                     o_crh_regf_wr_en <= 1'b0 ;
    1136            1                    ***0***                     o_crh_regf_rd_en <= 1'b1 ;
    1137            1                    ***0***                     state <= PAR_BIT ;
    1138                                                           end 
    1139                                                         else
    1140                                                           begin
    1141            1                    ***0***                     state <= DATA_RETURNED_1 ;
    1142                                                           end 
    1143                                                           
    1144                                                           
    1145                                                         end
    1146                                                           
    1147                                                        DATA_RETURNED_2 : begin 
    1148            1                    ***0***                  o_crh_rx_cnt_en         <= 1'b1      ;
    1149            1                    ***0***                  o_crh_cnt_en            <= 1'b1      ;
    1150                                                             case(int_state)
    1151                                                                GETSTATUS : begin 
    1152            1                    ***0***                          o_crh_regf_rd_en <= 1'b0 ;
    1153            1                    ***0***                          o_crh_regf_wr_en <= 1'b1 ;
    1154            1                    ***0***                          o_crh_regf_addr <= GETSTATUS_LSB_ADDR_REG_FILE;
    1155                                                                end
    1156                                                                GETCAPS : begin 
    1157            1                    ***0***                          o_crh_regf_rd_en <= 1'b0 ;
    1158            1                    ***0***                          o_crh_regf_wr_en <= 1'b1 ;
    1159            1                    ***0***                          o_crh_regf_addr <= CRCAPS2_ADDR_REG_FILE  ;
    1160                                                                end
    1161                                                                GETSTATUS_DEF : begin
    1162            1                    ***0***                          o_crh_regf_rd_en <= 1'b0 ;
    1163            1                    ***0***                          o_crh_regf_wr_en <= 1'b1 ;
    1164            1                    ***0***                          o_crh_regf_addr <= PRECR_ADDR_REG_FILE ; 
    1165                                                                end
    1166                                                             endcase
    1167                                                             
    1168                                                          if(i_crh_rx_pp_mode_done)
    1169                                                            begin
    1170            1                    ***0***                      o_crh_cnt_en            <= 1'b0      ;
    1171            1                    ***0***                      o_crh_rx_cnt_en         <= 1'b0      ;
    1172            1                    ***0***                      o_crh_rx_en             <= 1'b0      ;
    1173            1                    ***0***                      o_crh_tx_en             <= 1'b1      ;
    1174            1                    ***0***                      o_crh_tx_mode           <= 3'b011    ; 
    1175            1                    ***0***                      o_crh_pp_od             <= 1'b1      ;
    1176            1                    ***0***                      o_crh_regf_wr_en        <= 1'b0 ;
    1177            1                    ***0***                      o_crh_regf_rd_en        <= 1'b1 ; 
    1178            1                    ***0***                      state                   <= PAR_BIT ;
    1179                                                            end
    1180                                                            
    1181                                                          else
    1182                                                            begin
    1183            1                    ***0***                      state <= DATA_RETURNED_2 ;
    1184                                                            end
    1185                                                            
    1186                                                            
    1187                                                          end
    1188                                                          DATA_SENT_1 : begin
    1189                                                            
    1190                                                            if(i_crh_tx_pp_mode_done)
    1191                                                              begin
    1192            1                    ***0***                        o_crh_cnt_en            <= 1'b0      ;
    1193            1                    ***0***                        o_crh_rx_en             <= 1'b0      ;
    1194            1                    ***0***                        o_crh_tx_en             <= 1'b1      ;
    1195            1                    ***0***                        o_crh_tx_mode           <= 3'b011    ; 
    1196            1                    ***0***                        o_crh_pp_od             <= 1'b1      ;
    1197            1                    ***0***                        state <= PAR_BIT ;
    1198                                                              end
    1199                                                            else
    1200                                                              begin
    1201            1                    ***0***                        state <= DATA_SENT_1 ;
    1202                                                              end
    1203                                                                    
    1204                                                                    
    1205                                                                    
    1206                                                          end
    1207                                                          HANDOFF : begin 
    1208                                                            
    1209                                                            /*if(preparing_done)
    1210                                                              begin
    1211                                                                o_crh_rx_en             <= 1'b0      ;
    1212                                                                o_crh_tx_en             <= 1'b1      ;
    1213                                                                o_crh_tx_mode           <= 3'b010    ; 
    1214                                                                o_crh_send_stop         <= 1'b1      ;
    1215                                                                o_crh_pp_od             <= 1'b1      ;
    1216                                                                preparing_done          <= 1'b0      ;
    1217                                                              end
    1218                                                            else */if(i_crh_stop_is_sent)
    1219                                                              begin
    1220            1                    ***0***                        o_crh_send_stop         <= 1'b0      ;
    1221            1                    ***0***                        o_crh_scl_idle <= 1'b1 ;
    1222            1                    ***0***                        o_crh_pp_od    <= 1'b0 ;
    1223            1                    ***0***                        stop_is_sent <= 1'b1 ; 
    1224                                                              end 
    1225                                                            else
    1226                                                              begin
    1227            1                    ***0***                        o_crh_send_stop         <= 1'b0      ;
    1228            1                    ***0***                        state <= HANDOFF ;
    1229                                                              end 
    1230                                                              
    1231                                                              
    1232                                                           if(!i_crh_crhpoverlap && stop_is_sent ) //overlap condition
    1233                                                             begin
    1234            1                    ***0***                       o_crh_tx_en             <= 1'b0      ;
    1235            1                    ***0***                       o_crh_tx_mode           <= 3'b111    ; //high-z 
    1236                                                             end
    1237                                                           else if(i_crh_crhpoverlap && stop_is_sent )
    1238                                                             begin
    1239            1                    ***0***                       state                     <= TESTING   ;
    1240                                                               //o_crh_ncr_take_control        <= 1'b1      ; //ncr will take the tx and rx and regfile   
    1241                                                             end
    1242                                                           else
    1243                                                              begin
    1244            1                    ***0***                        state <= HANDOFF ;
    1245                                                              end 
    1246                                                                             
    1247                                                            end
    1248                                                         TESTING : begin 
    1249                                                            
    1250                                                            if(i_crh_newcrlock) //
    1251                                                              begin
    1252            1                    ***0***                        o_crh_scl_idle          <= 1'b0      ;
    1253            1                    ***0***                        o_crh_tx_en             <= 1'b0      ;
    1254            1                    ***0***                        o_crh_rx_en             <= 1'b1      ;
    1255            1                    ***0***                        o_crh_rx_mode           <= 3'b110    ; //T_bit mode in controller rx (check for start)
    1256                                                                if(i_crh_rx_mode_done ) 
    1257                                                                  begin
    1258                                                                    if(i_crh_start_detected) //new controller pulled sda low 
    1259                                                                      begin
    1260            1                    ***0***                                state                   <= IDLE      ;
    1261                                                                        //o_crh_ncr_win           <= 1'b1      ; //ncr asserted the controller role 
    1262            1                    ***0***                                o_crh_scl_idle          <= 1'b0      ;
    1263            1                    ***0***                                o_crh_done              <= 1'b1      ;
    1264                                                                      end
    1265                                                                    else if(!i_crh_start_detected && i_crh_scl_pos_edge) //new controller didn't pull sda low & former controller needs to drive sda low 
    1266                                                                      begin
    1267            1                    ***0***                                o_crh_rx_en             <= 1'b0      ;
    1268            1                    ***0***                                o_crh_tx_en             <= 1'b1      ;
    1269            1                    ***0***                                o_crh_tx_mode           <= 3'b111    ; //sda being pulled low 
    1270            1                    ***0***                                state                   <= MONITOR  ;
    1271                                                                      end
    1272                                                                  end
    1273                                                              end
    1274                                                                      
    1275                                                            end
    1276                                                         MONITOR : begin
    1277                                                           if(i_crh_sda_low)
    1278                                                             begin
    1279                                                               if(!i_crh_timer_cas) //need to be edited to 100us or higher 
    1280                                                                 begin
    1281                                                                   if(i_crh_scl_neg_edge) //new controller pulled the scl low
    1282                                                                     begin
    1283            1                    ***0***                               state                   <= IDLE ;
    1284                                                                       //o_crh_ncr_win           <= 1'b1      ; //ncr asserted the controller role 
    1285            1                    ***0***                               o_crh_done              <= 1'b1      ;
    1286            1                    ***0***                               dont_repeat             <= 1'b1      ;
    1287            1                    ***0***                               o_crh_scl_idle          <= 1'b0      ;
    1288            1                    ***0***                               o_crh_tx_en             <= 1'b0      ;
    1289                                                                     end
    1290                                                                   /* else //new controller didn't pull the scl low
    1291                                                                     begin
    1292                                                                       state                   <= IDLE ;
    1293                                                                       o_crh_ncr_win           <= 1'b0      ; //ncr didn't assert the controller role 
    1294                                                                       o_crh_done              <= 1'b1      ;
    1295                                                                       o_crh_scl_idle          <= 1'b0      ;
    1296                                                                       o_crh_tx_en             <= 1'b0      ;
    1297                                                                     end */
    1298                                                                 end
    1299                                                               else
    1300                                                                 begin
    1301            1                    ***0***                               state                   <= IDLE ;
    1302                                                                       //o_crh_ncr_win           <= 1'b0      ; //ncr didn't assert the controller role 
    1303            1                    ***0***                               o_crh_done              <= 1'b1      ;
    1304            1                    ***0***                               dont_repeat             <= 1'b1      ;
    1305            1                    ***0***                               o_crh_scl_idle          <= 1'b0      ;
    1306            1                    ***0***                               o_crh_tx_en             <= 1'b0      ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        258        26       232    10.07%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_crh --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                    ACK_COUNT[1-0]           0           0        0.00 
                              DATA_SENT_COUNT[5-0]           0           0        0.00 
                                PAR_BIT_COUNT[5-0]           0           0        0.00 
                                   REP_START_COUNT           0           0        0.00 
                                      counter[5-0]           0           0        0.00 
                                       dont_repeat           0           0        0.00 
                                 i_crh_CRCAP2[0-7]           0           0        0.00 
                                 i_crh_CRHDLY[0-7]           0           0        0.00 
                                  i_crh_PRECR[0-7]           0           0        0.00 
                                i_crh_cfg_reg[0-7]           0           0        0.00 
                                         i_crh_clk           1           1      100.00 
                                 i_crh_crhpoverlap           0           1       50.00 
                                          i_crh_en           0           0        0.00 
                         i_crh_getstatus_data[0-7]           0           0        0.00 
                           i_crh_initiated_request           0           0        0.00 
                                   i_crh_newcrlock           0           1       50.00 
                                       i_crh_rst_n           1           1      100.00 
                                i_crh_rx_mode_done           1           1      100.00 
                                 i_crh_rx_nack_ack           1           1      100.00 
                             i_crh_rx_pp_mode_done           0           0        0.00 
                                i_crh_scl_neg_edge           1           1      100.00 
                                i_crh_scl_pos_edge           1           1      100.00 
                                     i_crh_sda_low           0           0        0.00 
                              i_crh_start_detected           0           0        0.00 
                                i_crh_stop_is_sent           0           0        0.00 
                             i_crh_tgts_count[0-7]           0           0        0.00 
                                   i_crh_timer_cas           1           1      100.00 
                                i_crh_tx_mode_done           1           1      100.00 
                             i_crh_tx_pp_mode_done           1           1      100.00 
                                    int_state[3-0]           0           0        0.00 
                                      o_crh_cnt_en           0           0        0.00 
                                        o_crh_done           0           0        0.00 
                                     o_crh_fcnt_en           0           0        0.00 
                                       o_crh_pp_od           1           0       50.00 
                             o_crh_regf_addr[11-6]           0           0        0.00 
                                o_crh_regf_addr[5]           0           1       50.00 
                                o_crh_regf_addr[4]           0           0        0.00 
                              o_crh_regf_addr[3-1]           0           1       50.00 
                                o_crh_regf_addr[0]           0           0        0.00 
                                  o_crh_regf_rd_en           0           1       50.00 
                                  o_crh_regf_wr_en           0           0        0.00 
                                   o_crh_rx_cnt_en           0           0        0.00 
                                       o_crh_rx_en           0           0        0.00 
                                o_crh_rx_mode[2-0]           0           0        0.00 
                                    o_crh_scl_idle           0           0        0.00 
                                   o_crh_send_stop           0           0        0.00 
                           o_crh_timer_entasx[1-0]           0           0        0.00 
                                   o_crh_timer_set           0           0        0.00 
                                       o_crh_tx_en           0           0        0.00 
                                o_crh_tx_mode[2-0]           0           0        0.00 
                                    preparing_done           0           0        0.00 
                                        state[3-0]           0           0        0.00 
                                      stop_is_sent           0           0        0.00 

Total Node Count     =        129 
Toggled Node Count   =          9 
Untoggled Node Count =        120 

Toggle Coverage      =      10.07% (26 of 258 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_i3c_timer
=== Design Unit: work.i3c_timer_fsm
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        38        22        16    57.89%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i3c_timer

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File i3c_timer_fsm.v
------------------------------------IF Branch------------------------------------
    105                                     6519     Count coming in to IF
    105             1                          1         if (!i_rst_n) 
    121             1                       6518         else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    124                                     6518     Count coming in to CASE
    126             1                          6               IDLE: 
    155             1                       6509               POST_STOP_CALCULATIONS:
    225             1                          2               POST_START_CALCULATIONS:
    304             1                          1               default: 
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    133                                        6     Count coming in to IF
    133             1                          1                     if (i_stop_pattern)
    139             1                          2                     else if (i_start_pattern)
                                               3     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    160                                     6509     Count coming in to IF
    160             1                          1                   if (count == T_CAS)
    165             1                          1                   else if (count == T_CRHPOverlap)                 // bus is ready for new controller handoff
    170             1                          1                   else if (count == T_BUF_FM)                      // bus has enetered free condition 
    175             1                          1                   else if (count == T_AVAL)                        // bus has enetered available condition 
    180             1                          1                   else if (count == T_BUF_FM_P)                    // bus has enetered free condition 
    185             1                    ***0***                   else if (count == T_IDLE)                        // bus has enetered idle condition
    191             1                       6504                   else 
Branch totals: 6 hits of 7 branches = 85.71%

------------------------------------IF Branch------------------------------------
    198                                     6509     Count coming in to IF
    198             1                          1                   if (i_i3c_idle_flag) 
    208             1                       6508                   else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    203                                        1     Count coming in to IF
    203             1                          1                         if (i_i3c_idle_flag && !idle_flag_pulse) 
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    213                                     6509     Count coming in to IF
    213             1                          1                   if (count == stp_to_idle_trans_time + T_NEWCRLOCK_I2C)
    217             1                          1                   else if (count == stp_to_idle_trans_time + T_AVAL)
                                            6507     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    229                                        2     Count coming in to IF
    229             1                          2                   if (!i_chr_set) 
    236             1                    ***0***                   else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------CASE Branch------------------------------------
    239                                  ***0***     Count coming in to CASE
    241             1                    ***0***                         ENTER_ACTIVITY_STATE_0: 
    255             1                    ***0***                         ENTER_ACTIVITY_STATE_1:
    270             1                    ***0***                         ENTER_ACTIVITY_STATE_2:
    285             1                    ***0***                         ENTER_ACTIVITY_STATE_3:
                                         ***0***     All False Count
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    244                                  ***0***     Count coming in to IF
    244             1                    ***0***                             if (count == T_AVAL)
    249             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    258                                  ***0***     Count coming in to IF
    258             1                    ***0***                             if (count == T_ENTAS1)
    263             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    273                                  ***0***     Count coming in to IF
    273             1                    ***0***                             if (count == T_ENTAS2)
    278             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    288                                  ***0***     Count coming in to IF
    288             1                    ***0***                             if (count == T_ENTAS3)
    293             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      14         7         7    50.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i3c_timer --

  File i3c_timer_fsm.v
----------------Focused Condition View-------------------
Line       160 Item    1  (count == 2)
Condition totals: 1 of 1 input term covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 2)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 2)_0        -                             
  Row   2:          1  (count == 2)_1        -                             

----------------Focused Condition View-------------------
Line       165 Item    1  (count == 11)
Condition totals: 1 of 1 input term covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 11)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 11)_0       -                             
  Row   2:          1  (count == 11)_1       -                             

----------------Focused Condition View-------------------
Line       170 Item    1  (count == 25)
Condition totals: 1 of 1 input term covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 25)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 25)_0       -                             
  Row   2:          1  (count == 25)_1       -                             

----------------Focused Condition View-------------------
Line       175 Item    1  (count == 50)
Condition totals: 1 of 1 input term covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 50)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 50)_0       -                             
  Row   2:          1  (count == 50)_1       -                             

----------------Focused Condition View-------------------
Line       180 Item    1  (count == 65)
Condition totals: 1 of 1 input term covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 65)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 65)_0       -                             
  Row   2:          1  (count == 65)_1       -                             

----------------Focused Condition View-------------------
Line       185 Item    1  (count == 10000)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (count == 10000)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 10000)_0    -                             
  Row   2:    ***0***  (count == 10000)_1    -                             

----------------Focused Condition View-------------------
Line       203 Item    1  (i_i3c_idle_flag && ~idle_flag_pulse)
Condition totals: 0 of 2 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  i_i3c_idle_flag         N  '_0' not hit             Hit '_0'
  idle_flag_pulse         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_i3c_idle_flag_0     -                             
  Row   2:          1  i_i3c_idle_flag_1     ~idle_flag_pulse              
  Row   3:          1  idle_flag_pulse_0     i_i3c_idle_flag               
  Row   4:    ***0***  idle_flag_pulse_1     i_i3c_idle_flag               

----------------Focused Condition View-------------------
Line       213 Item    1  (count == (stp_to_idle_trans_time + 15))
Condition totals: 1 of 1 input term covered = 100.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (count == (stp_to_idle_trans_time + 15))         Y

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:          1  (count == (stp_to_idle_trans_time + 15))_0  -                             
  Row   2:          1  (count == (stp_to_idle_trans_time + 15))_1  -                             

----------------Focused Condition View-------------------
Line       217 Item    1  (count == (stp_to_idle_trans_time + 50))
Condition totals: 1 of 1 input term covered = 100.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (count == (stp_to_idle_trans_time + 50))         Y

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:          1  (count == (stp_to_idle_trans_time + 50))_0  -                             
  Row   2:          1  (count == (stp_to_idle_trans_time + 50))_1  -                             

----------------Focused Condition View-------------------
Line       244 Item    1  (count == 50)
Condition totals: 0 of 1 input term covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 50)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 50)_0       -                             
  Row   2:    ***0***  (count == 50)_1       -                             

----------------Focused Condition View-------------------
Line       258 Item    1  (count == 5000)
Condition totals: 0 of 1 input term covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  (count == 5000)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 5000)_0     -                             
  Row   2:    ***0***  (count == 5000)_1     -                             

----------------Focused Condition View-------------------
Line       273 Item    1  (count == 100000)
Condition totals: 0 of 1 input term covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (count == 100000)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 100000)_0   -                             
  Row   2:    ***0***  (count == 100000)_1   -                             

----------------Focused Condition View-------------------
Line       288 Item    1  (count == 2500000)
Condition totals: 0 of 1 input term covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (count == 2500000)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 2500000)_0  -                             
  Row   2:    ***0***  (count == 2500000)_1  -                             


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       3         3         0   100.00%
    FSM Transitions                  4         3         1    75.00%

================================FSM Details================================

FSM Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i3c_timer --

FSM_ID: timer_state
    Current State Object : timer_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 126                IDLE                   4
 225POST_START_CALCULATIONS                   7
 155POST_STOP_CALCULATIONS                   5
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                   3          
    POST_START_CALCULATIONS                   2          
    POST_STOP_CALCULATIONS                6505          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 142                   0                   2          IDLE -> POST_START_CALCULATIONS          
 136                   1                   1          IDLE -> POST_STOP_CALCULATIONS          
 291                   2                   2          POST_START_CALCULATIONS -> IDLE          
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 188                   3          POST_STOP_CALCULATIONS -> IDLE


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   3         3         0   100.00%
        FSM Transitions              4         3         1    75.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      64        46        18    71.87%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i3c_timer --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File i3c_timer_fsm.v
    34                                               module i3c_timer_fsm (
    35                                                                     input  wire          i_clk                      , // system clock 50MHZ from FPGA
    36                                                                     input  wire          i_rst_n                    , // asynch active low reset 
    37                                                                     input  wire          i_start_pattern            , // start pattern flag input from tx
    38                                                                     input  wire          i_stop_pattern             , // stop pattern flag input from tx
    39                                                                     input  wire          i_chr_set                  , // input from crh of activity state set
    40                                                                     input  wire  [1:0]   i_crh_entasx               , // enter activity states input value
    41                                                                     input  wire          i_i3c_idle_flag            , // stop is done and od 
    42                                                                     output reg           o_timer_cas                , // clock after start flag 
    43                                                                     output reg           o_timer_bus_free_pure      , // pure i3c bus condition >> after tcas 
    44                                                                     output reg           o_timer_bus_free_mix_fm    , // clock for bus free condition when fm
    45                                                                     output reg           o_timer_bus_free_mix_fm_p  , // clock for bus free condition when fm+
    46                                                                     output reg           o_timer_bus_aval           , // clock for available bus condition 
    47                                                                     output reg           o_timer_bus_idle           , // clock for idle bus condition 
    48                                                                     output reg           o_timer_crhpol             , // clock for new controller handoff
    49                                                                     output reg           o_timer_newcrlck_i2c       , // clock for new controller driving SDA when i2c
    50                                                                     output reg           o_timer_newcrlck_i3c      ); // clock for new controller driving SDA when i3c
    51                                                
    52                                               //`include "timings.v"
    53                                               
    54                                               
    55                                               // system clock is 50 MHZ >> period is 20 ns 
    56                                               // T_ENTAS3 is default when no target supports ENTASx CCC
    57                                               
    58                                               // -- Start and Stop timings 
    59                                               localparam T_CAS            = 24'd2       ; // 38.4 ns ~ 40 ns //garanteed
    60                                               //localparam T_CBP            = 24'd1       ; // 19.2 ns ~ 20 ns //garanteed 
    61                                               
    62                                               // -- Bus Condition timings
    63                                               // T_AVAL = T_ENTAS0 = T_NEWCRLOCK_I3C = 1 us
    64                                               localparam T_BUF_FM         = 24'd25      ; // 0.5 us = 500 ns >> 500/20 = 25 cycles 
    65                                               localparam T_BUF_FM_P       = 24'd65      ; // 1.3 us = 1300 ns >> 1300/20 = 65 cycles 
    66                                               localparam T_AVAL           = 24'd50      ; // 1 us = 1000 ns >> 1000/20 = 50 cycles
    67                                               localparam T_IDLE           = 24'd10000   ; // 200 us = 200000 ns >> 200000/20 = 10000
    68                                               
    69                                               // -- Activity States timings
    70                                               localparam T_ENTAS1         = 24'd5000    ; // 100 us = 100000 ns >> 100000/20 = 5000 cycles
    71                                               localparam T_ENTAS2         = 24'd100000  ; // 2 ms = 2000000 ns >> 2000000/20 = 100000 cycles
    72                                               localparam T_ENTAS3         = 24'd2500000 ; // 50 ms = 50000000 ns >> 50000000/20 = 2500000 cycles 
    73                                               
    74                                               // -- Control Role Handoff timings
    75                                               localparam T_CRHPOverlap    = 24'd11      ; // (200 + 12 = 212 ns ~ 200 + 10 = 210 ns) >> 21/2 cycles 
    76                                               localparam T_NEWCRLOCK_I2C  = 24'd15      ; // 300 ns >> 300/20 = 15 cycles
    77                                               
    78                                               
    79                                               
    80                                               
    81                                               
    82                                               localparam ENTER_ACTIVITY_STATE_0  = 2'b00 ;
    83                                               localparam ENTER_ACTIVITY_STATE_1  = 2'b01 ;
    84                                               localparam ENTER_ACTIVITY_STATE_2  = 2'b10 ;
    85                                               localparam ENTER_ACTIVITY_STATE_3  = 2'b11 ;
    86                                               
    87                                               localparam IDLE                    = 3'b100;
    88                                               localparam POST_STOP_CALCULATIONS  = 3'b101;
    89                                               localparam POST_START_CALCULATIONS = 3'b111;
    90                                               
    91                                               
    92                                               // timer_states <<<<
    93                                               
    94                                               // TBD after this block is done >>
    95                                               // wire i_i3c_idle_flag  ;
    96                                               // assign i_i3c_idle_flag = i_dda_idle_flag | i_sdr_idle_flag | i_crh_idle_flag;
    97                                               
    98                                               reg  [2:0]   timer_state            ;
    99                                               reg          idle_flag_pulse        ;
    100                                              reg  [23:0]  count                  ;
    101                                              reg  [23:0]  stp_to_idle_trans_time ;
    102                                              
    103             1                       6519     always @(posedge i_clk or negedge i_rst_n) 
    104                                                begin: i3c_timings_counter
    105                                                  if (!i_rst_n) 
    106                                                    begin  
    107             1                          1             o_timer_cas                <= 1'b0 ;     
    108             1                          1             o_timer_bus_free_pure      <= 1'b0 ; 
    109             1                          1             o_timer_bus_free_mix_fm    <= 1'b0 ; 
    110             1                          1             o_timer_bus_free_mix_fm_p  <= 1'b0 ; 
    111             1                          1             o_timer_bus_aval           <= 1'b0 ; 
    112             1                          1             o_timer_bus_idle           <= 1'b0 ; 
    113             1                          1             o_timer_crhpol             <= 1'b0 ; 
    114             1                          1             o_timer_newcrlck_i2c       <= 1'b0 ;
    115             1                          1             o_timer_newcrlck_i3c       <= 1'b0 ;
    116             1                          1             idle_flag_pulse            <= 1'b0 ;
    117             1                          1             count                      <= 24'b0;
    118             1                          1             stp_to_idle_trans_time     <= 24'b0;
    119                                              
    120                                                    end 
    121                                                  else 
    122                                                    begin
    123                                              
    124                                                      case (timer_state)
    125                                              
    126                                                        IDLE: 
    127                                                          begin 
    128             1                          6                   o_timer_cas                <= 1'b0 ;    
    129             1                          6                   idle_flag_pulse            <= 1'b0 ;
    130             1                          6                   count                      <= 24'b0;
    131             1                          6                   stp_to_idle_trans_time     <= 24'b0;
    132                                              
    133                                                              if (i_stop_pattern)
    134                                                                begin 
    135             1                          1                         count       <= count + 1'b1 ;
    136             1                          1                         timer_state <= POST_STOP_CALCULATIONS;
    137                                                                end
    138                                              
    139                                                              else if (i_start_pattern)
    140                                                                begin
    141             1                          2                         count                      <= count + 1'b1 ;
    142             1                          2                         timer_state                <= POST_START_CALCULATIONS;
    143             1                          2                         o_timer_bus_idle           <= 1'b0 ;
    144             1                          2                         o_timer_bus_free_pure      <= 1'b0 ; 
    145             1                          2                         o_timer_bus_free_mix_fm    <= 1'b0 ; 
    146             1                          2                         o_timer_bus_free_mix_fm_p  <= 1'b0 ; 
    147             1                          2                         o_timer_bus_aval           <= 1'b0 ;  
    148             1                          2                         o_timer_crhpol             <= 1'b0 ; 
    149             1                          2                         o_timer_newcrlck_i2c       <= 1'b0 ;
    150             1                          2                         o_timer_newcrlck_i3c       <= 1'b0 ;
    151                                                                end 
    152                                              
    153                                                          end
    154                                              
    155                                                        POST_STOP_CALCULATIONS:
    156                                                          begin 
    157             1                       6509                   count  <= count + 1'b1  ;
    158                                              
    159                                                          //---- bus conditions and controller overlap time  
    160                                                            if (count == T_CAS)
    161                                                              begin: bus_free_pure_condition                 // bus has become in free condition 
    162             1                          1                       o_timer_bus_free_pure     <= 1'b1 ;         //  for any pure I3C device who may concern
    163                                                              end   
    164                                              
    165                                                            else if (count == T_CRHPOverlap)                 // bus is ready for new controller handoff
    166                                                              begin: control_role_handoff_overlap    
    167             1                          1                       o_timer_crhpol            <= 1'b1 ;   
    168                                                              end  
    169                                              
    170                                                            else if (count == T_BUF_FM)                      // bus has enetered free condition 
    171                                                              begin: bus_free_mixed_condition_fmode         //  for fast mode I2C devices who may concern
    172             1                          1                       o_timer_bus_free_mix_fm   <= 1'b1 ;   
    173                                                              end 
    174                                              
    175                                                            else if (count == T_AVAL)                        // bus has enetered available condition 
    176                                                              begin: bus_available_condition                //  IBI is free to take place 
    177             1                          1                       o_timer_bus_aval          <= 1'b1 ;
    178                                                              end
    179                                              
    180                                                            else if (count == T_BUF_FM_P)                    // bus has enetered free condition 
    181                                                              begin: bus_free_mixed_condition_fmode_plus    //  for fast mode plus I2C devices who may concern
    182             1                          1                       o_timer_bus_free_mix_fm_p <= 1'b1 ;
    183                                                              end
    184                                              
    185                                                            else if (count == T_IDLE)                        // bus has enetered idle condition
    186                                                              begin: bus_idle_condition                     //  Hot-Join is free to take place 
    187             1                    ***0***                       o_timer_bus_idle          <= 1'b1 ;
    188             1                    ***0***                       timer_state               <= IDLE ;
    189                                                              end
    190                                              
    191                                                            else 
    192                                                              begin
    193             1                       6504                       timer_state  <= POST_STOP_CALCULATIONS ;
    194             1                       6504                       count        <= count + 1'b1           ;
    195                                                              end
    196                                              
    197                                                          //---- transition from stop to idle (assumed od) 
    198                                                            if (i_i3c_idle_flag) 
    199                                                              begin: capturing_count_and_wait_till_NEWCRLOCK
    200                                              
    201             1                          1                       idle_flag_pulse <= 1'b1 ;
    202                                              
    203                                                                  if (i_i3c_idle_flag && !idle_flag_pulse) 
    204                                                                    begin:capturing_transition_time
    205             1                          1                             stp_to_idle_trans_time <= count ;
    206                                                                  end  
    207                                                              end
    208                                                            else 
    209                                                              begin 
    210             1                       6508                       idle_flag_pulse <= 1'b0 ;
    211                                                              end
    212                                              
    213                                                            if (count == stp_to_idle_trans_time + T_NEWCRLOCK_I2C)
    214                                                              begin: new_ctrl_lock_i2c
    215             1                          1                       o_timer_newcrlck_i2c    <= 1'b1 ;
    216                                                              end                      
    217                                                            else if (count == stp_to_idle_trans_time + T_AVAL)
    218                                                              begin: new_ctrl_lock_i3c
    219             1                          1                       o_timer_newcrlck_i3c    <= 1'b1 ;
    220                                                              end
    221                                              
    222                                                          end
    223                                                       
    224                                              
    225                                                        POST_START_CALCULATIONS:
    226                                                          begin 
    227             1                          2                   count  <= count + 1'b1  ;
    228                                              
    229                                                            if (!i_chr_set) 
    230                                                              begin: no_activity_states_needed 
    231                                                              
    232             1                          2                           o_timer_cas  <= 1'b1  ;
    233             1                          2                           timer_state  <= IDLE  ;         
    234                                              
    235                                                              end 
    236                                                            else 
    237                                                              begin 
    238                                              
    239                                                                case (i_crh_entasx)
    240                                              
    241                                                                  ENTER_ACTIVITY_STATE_0: 
    242                                                                    begin 
    243                                              
    244                                                                      if (count == T_AVAL)
    245                                                                        begin 
    246             1                    ***0***                                 o_timer_cas  <= 1'b1  ;
    247             1                    ***0***                                 timer_state  <= IDLE  ;
    248                                                                        end 
    249                                                                      else
    250                                                                        begin
    251             1                    ***0***                                 o_timer_cas  <= 1'b0  ;
    252             1                    ***0***                                 timer_state  <= POST_START_CALCULATIONS ;
    253                                                                        end        
    254                                                                    end 
    255                                                                  ENTER_ACTIVITY_STATE_1:
    256                                                                    begin 
    257                                              
    258                                                                      if (count == T_ENTAS1)
    259                                                                        begin 
    260             1                    ***0***                                 o_timer_cas  <= 1'b1  ;
    261             1                    ***0***                                 timer_state  <= IDLE  ;
    262                                                                        end 
    263                                                                      else
    264                                                                        begin
    265             1                    ***0***                                 o_timer_cas  <= 1'b0  ;
    266             1                    ***0***                                 timer_state  <= POST_START_CALCULATIONS ;
    267                                                                        end    
    268                                              
    269                                                                    end 
    270                                                                  ENTER_ACTIVITY_STATE_2:
    271                                                                    begin 
    272                                              
    273                                                                      if (count == T_ENTAS2)
    274                                                                        begin 
    275             1                    ***0***                                 o_timer_cas  <= 1'b1  ;
    276             1                    ***0***                                 timer_state  <= IDLE  ;
    277                                                                        end 
    278                                                                      else
    279                                                                        begin
    280             1                    ***0***                                 o_timer_cas  <= 1'b0  ;
    281             1                    ***0***                                 timer_state  <= POST_START_CALCULATIONS ;
    282                                                                        end        
    283                                              
    284                                                                    end 
    285                                                                  ENTER_ACTIVITY_STATE_3:
    286                                                                    begin 
    287                                              
    288                                                                      if (count == T_ENTAS3)
    289                                                                        begin 
    290             1                    ***0***                                 o_timer_cas  <= 1'b1  ;
    291             1                    ***0***                                 timer_state  <= IDLE  ;
    292                                                                        end 
    293                                                                      else
    294                                                                        begin
    295             1                    ***0***                                 o_timer_cas  <= 1'b0  ;
    296             1                    ***0***                                 timer_state  <= POST_START_CALCULATIONS ;
    297                                                                        end        
    298                                              
    299                                                                    end 
    300                                                                endcase
    301                                                              end 
    302                                                          end
    303                                              
    304                                                        default: 
    305             1                          1                      timer_state  <= IDLE ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        138        51        87    36.95%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_i3c_timer --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                      count[23-13]           0           0        0.00 
                                         count[12]           0           1       50.00 
                                       count[11-0]           1           1      100.00 
                                         i_chr_set           0           0        0.00 
                                             i_clk           1           1      100.00 
                                 i_crh_entasx[0-1]           0           0        0.00 
                                   i_i3c_idle_flag           1           1      100.00 
                                           i_rst_n           1           1      100.00 
                                   i_start_pattern           1           1      100.00 
                                    i_stop_pattern           1           1      100.00 
                                   idle_flag_pulse           1           1      100.00 
                                  o_timer_bus_aval           0           1       50.00 
                           o_timer_bus_free_mix_fm           0           1       50.00 
                         o_timer_bus_free_mix_fm_p           0           1       50.00 
                             o_timer_bus_free_pure           0           1       50.00 
                                  o_timer_bus_idle           0           0        0.00 
                                       o_timer_cas           1           1      100.00 
                                    o_timer_crhpol           0           1       50.00 
                              o_timer_newcrlck_i2c           0           1       50.00 
                              o_timer_newcrlck_i3c           0           1       50.00 
                      stp_to_idle_trans_time[23-1]           0           0        0.00 
                         stp_to_idle_trans_time[0]           0           1       50.00 
                                    timer_state[2]           0           0        0.00 
                                  timer_state[1-0]           1           1      100.00 

Total Node Count     =         69 
Toggled Node Count   =         21 
Untoggled Node Count =         48 

Toggle Coverage      =      36.95% (51 of 138 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_controller_tx
=== Design Unit: work.controller_tx
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        38        24        14    63.15%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_tx

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_tx.v
------------------------------------IF Branch------------------------------------
    83                                      3732     Count coming in to IF
    83              1                          1             if(~i_rst_n)
    96              1                       3688             else if (i_ser_en)
    277             1                         43             else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    98                                      3688     Count coming in to CASE
    99              1                       3347                   START_BIT   : begin
    124             1                        273                   SERIALIZING : begin
    162             1                         66                   PARITY      : begin
    192             1                          2                   STOP        : begin
    204             1                    ***0***                   CTRL_ACK    : begin
    236             1                    ***0***                     CTRL_NACK  : begin
    248             1                    ***0***                   REPEATED_START : begin
    267             1                    ***0***                   Hold_Zero    : begin
                                         ***0***     All False Count
Branch totals: 4 hits of 9 branches = 44.44%

------------------------------------IF Branch------------------------------------
    106                                     3347     Count coming in to IF
    106             1                       3231                                   if (i_ser_scl)
                                             116     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    111                                     3231     Count coming in to IF
    111             1                          1                                       if (i_timer_cas)
    116             1                       3230                                       else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    128                                      273     Count coming in to IF
    128             1                        189                                   if(i_ser_count_done)
    132             1                         84                                   else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    138                                      273     Count coming in to IF
    138             1                          3                                     if (i_ser_scl_pos_edge && !i_ser_count)
    142             1                        270                                     else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    147                                      273     Count coming in to IF
    147             1                         36                                   if (!i_ser_scl)
                                             237     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    152                                      273     Count coming in to IF
    152             1                         13                                    if(i_ser_count == 3'b1)
    156             1                        260                                       else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    172                                       66     Count coming in to IF
    172             1                          3                                   if (!i_ser_scl)
    177             1                         63                                     else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    186                                       66     Count coming in to IF
    186             1                          1                                   if (i_ser_scl_pos_edge)
                                              65     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    197                                        2     Count coming in to IF
    197             1                          2                                   if (i_ser_scl)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    210                                  ***0***     Count coming in to IF
    210             1                    ***0***                                 if (i_ser_scl_pos_edge)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    242                                  ***0***     Count coming in to IF
    242             1                    ***0***                                 if (i_ser_scl_pos_edge)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    252                                  ***0***     Count coming in to IF
    252             1                    ***0***                                   if (!i_ser_scl)
    256             1                    ***0***                                   else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    261                                  ***0***     Count coming in to IF
    261             1                    ***0***                                   if (i_ser_scl_pos_edge)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       1         1         0   100.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_tx --

  File controller_tx.v
----------------Focused Condition View-------------------
Line       152 Item    1  (i_ser_count == 1)
Condition totals: 1 of 1 input term covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (i_ser_count == 1)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (i_ser_count == 1)_0  -                             
  Row   2:          1  (i_ser_count == 1)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      69        49        20    71.01%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_tx --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_tx.v
    33                                               module controller_tx (
    34                                                   input   wire           i_clk               ,
    35                                                   input   wire           i_rst_n             ,
    36                                                   input   wire           i_ser_scl           ,
    37                                                   input   wire           i_ser_scl_neg_edge  ,
    38                                                   input   wire           i_ser_scl_pos_edge  ,
    39                                                   input   wire           i_ser_en            , // to enable the serializer as long as we're in TX
    40                                                   input   wire           i_ser_valid         , // to load a new frame "must be a pulse" //UNUSED
    41                                                   input   wire  [2:0]    i_ser_count         ,
    42                                                   input   wire           i_ser_count_done    ,
    43                                                   input   wire  [2:0]    i_ser_mode          ,
    44                                                   input   wire  [7:0]    i_ser_regf_data     ,
    45                                                   input   wire           i_timer_cas         , // input from timer block for start condition
    46                                                   output  reg            o_ser_sda_low       ,//added by mostafa 
    47                                                   output  reg            o_stop_pattern      , // output to i3c_timer block
    48                                                   output  reg            o_start_pattern     , // output to i3c_timer block
    49                                                   output  reg            o_ser_s_data        ,
    50                                                   output  reg            o_ser_mode_done     ,
    51                                                   output  reg            o_ser_pp_mode_done  , //early mode_done for push_pull short periods
    52                                                   output  reg            o_tx_daa_done       ,
    53                                                   output  reg            o_ser_to_parity_transition
    54                                               
    55                                                   );
    56                                               
    57                                               
    58                                                 //-- i_ser_mode parameters --------------------------------------------------
    59                                               
    60                                               
    61                                                   localparam START_BIT      = 3'b000 ;
    62                                                   localparam SERIALIZING    = 3'b001 ;
    63                                                   localparam PARITY         = 3'b011 ;
    64                                                   localparam STOP           = 3'b010 ;
    65                                                   localparam CTRL_ACK       = 3'b111 ;  //  To be changed from 3'b100 to 3'b111 in HJ and I2C
    66                                                   localparam Hold_Zero      = 3'b100 ;
    67                                                   localparam CTRL_NACK      = 3'b101 ;
    68                                                   localparam REPEATED_START = 3'b110 ;
    69                                                   //localparam EXIT_PATTERN   = 3'b ;
    70                                               
    71                                               
    72                                               
    73                                                 //-- internal wires declaration ---------------------------------------------
    74                                               reg last_bit_flag ;
    75                                               reg parity_counter;
    76                                               
    77                                                 //-- transmitter ------------------------------------------------
    78                                               
    79              1                       3732         always @(posedge i_clk or negedge i_rst_n)
    80                                                     begin : proc_serializer
    81                                               
    82                                               
    83                                                       if(~i_rst_n)
    84                                                         begin
    85              1                          1                 o_ser_mode_done    <= 1'b0 ;
    86              1                          1                 o_ser_pp_mode_done <= 1'b0 ;
    87              1                          1                 o_ser_s_data  <=  1'b1 ;
    88              1                          1                 o_ser_to_parity_transition <= 1'b0 ;
    89              1                          1                 o_ser_sda_low <= 1'b0 ;
    90              1                          1                 last_bit_flag <= 1'b0 ;
    91                                               
    92              1                          1                 o_tx_daa_done <= 1'b0;
    93                                                          // temp            <=  ser_p_mux_out;
    94                                                         end
    95                                               
    96                                                       else if (i_ser_en)
    97                                                         begin
    98                                                           case (i_ser_mode)
    99                                                             START_BIT   : begin
    100             1                       3347                                   o_start_pattern <= 1'b0 ; 
    101             1                       3347                                   o_stop_pattern  <= 1'b0 ;
    102             1                       3347                                   o_ser_mode_done <= 1'b0 ;
    103             1                       3347                                   o_ser_to_parity_transition <= 1'b0;
    104             1                       3347                                   o_ser_s_data    <= 1'b1 ; // need to check if it will make problems to anyone
    105             1                       3347                                   o_ser_sda_low <= 1'b0 ;
    106                                                                            if (i_ser_scl)
    107                                                                              begin
    108             1                       3231                                       o_ser_s_data    <= 1'b0 ;
    109             1                       3231                                       o_start_pattern <= 1'b1 ;
    110                                              
    111                                                                                if (i_timer_cas)
    112                                                                                  begin
    113             1                          1                                           o_start_pattern <= 1'b0 ;
    114             1                          1                                           o_ser_mode_done <= 1'b1 ;
    115                                                                                  end
    116                                                                                else
    117                                                                                  begin
    118             1                       3230                                           o_start_pattern <= 1'b1 ;
    119             1                       3230                                           o_ser_mode_done <= 1'b0 ;
    120                                                                                  end
    121                                              
    122                                                                              end
    123                                                                          end
    124                                                            SERIALIZING : begin
    125             1                        273                                 o_ser_mode_done <= 1'b0;
    126             1                        273                                 o_ser_to_parity_transition <= 1'b1;
    127             1                        273                                 o_ser_sda_low <= 1'b0 ;
    128                                                                            if(i_ser_count_done)
    129                                                                              begin
    130             1                        189                                         o_ser_mode_done <= 1'b1;
    131                                                                              end
    132                                                                            else
    133                                                                              begin
    134             1                         84                                         o_ser_mode_done <= 1'b0;
    135                                                                              end
    136                                              
    137                                                                              //for push-pull
    138                                                                              if (i_ser_scl_pos_edge && !i_ser_count)
    139                                                                                begin
    140             1                          3                                         o_ser_pp_mode_done <= 1'b1 ;
    141                                                                                end
    142                                                                              else
    143                                                                                begin
    144             1                        270                                         o_ser_pp_mode_done <= 1'b0 ;
    145                                                                                end
    146                                              
    147                                                                            if (!i_ser_scl)
    148                                                                              begin
    149             1                         36                                       o_ser_s_data    <= i_ser_regf_data[i_ser_count] ;
    150                                                                              end
    151                                              
    152                                                                             if(i_ser_count == 3'b1)
    153                                                                                  begin
    154             1                         13                                             o_tx_daa_done <= 1'b1;
    155                                                                                  end
    156                                                                                else
    157                                                                                  begin
    158             1                        260                                             o_tx_daa_done <= 1'b0;
    159                                                                                  end
    160                                                                        end
    161                                              
    162                                                            PARITY      : begin
    163             1                         66                                   o_ser_mode_done    <= 1'b0 ;
    164             1                         66                                   o_ser_pp_mode_done <= 1'b0 ;
    165             1                         66                                   o_ser_to_parity_transition <= 1'b0;
    166             1                         66                                   o_ser_sda_low <= 1'b0 ;
    167                                                                           /*if (i_ser_count_done)
    168                                                                              o_ser_mode_done <= 1'b1;
    169                                                                            else
    170                                                                              o_ser_mode_done <= 1'b0; */
    171                                                                               //unused-wrong implementation
    172                                                                            if (!i_ser_scl)
    173                                                                              begin
    174             1                          3                                       o_ser_s_data    <= ~^i_ser_regf_data ;
    175                                                                                //o_ser_mode_done    <= 1'b1 ;
    176                                                                              end
    177                                                                              else
    178             1                         63                                       o_ser_mode_done    <= 1'b1 ;
    179                                              
    180                                                                          //  if(i_ser_scl) begin
    181                                                                          //    o_ser_mode_done    <= 1'b1 ;
    182                                                                           // end
    183                                              
    184                                              
    185                                                                            //for push-pull
    186                                                                            if (i_ser_scl_pos_edge)
    187                                                                              begin
    188             1                          1                                       o_ser_pp_mode_done <= 1'b1 ;
    189                                                                              end
    190                                                                          end
    191                                              
    192                                                            STOP        : begin
    193             1                          2                                   o_ser_s_data    <= 1'b0 ;
    194             1                          2                                   o_ser_mode_done <= 1'b0;
    195             1                          2                                   o_ser_to_parity_transition <= 1'b0;
    196             1                          2                                   o_ser_sda_low <= 1'b0 ;
    197                                                                            if (i_ser_scl)
    198                                                                              begin
    199             1                          2                                       o_stop_pattern  <= 1'b1 ;
    200             1                          2                                       o_ser_s_data    <= 1'b1 ;
    201             1                          2                                       o_ser_mode_done <= 1'b1 ;
    202                                                                              end
    203                                                                          end
    204                                                            CTRL_ACK    : begin
    205             1                    ***0***                                   o_start_pattern <= 1'b0 ;
    206             1                    ***0***                                   o_ser_s_data <= 1'b0 ;
    207             1                    ***0***                                   o_ser_sda_low <= 1'b1 ; //added by mostafa
    208             1                    ***0***                                   o_ser_mode_done <= 1'b0;
    209             1                    ***0***                                   o_ser_to_parity_transition <= 1'b0;
    210                                                                          if (i_ser_scl_pos_edge)
    211                                                                              begin
    212                                                                                //o_ser_s_data    <= 1'b1 ;
    213             1                    ***0***                                       o_ser_mode_done <= 1'b1 ;
    214             1                    ***0***                                       o_ser_sda_low <= 1'b0 ; //added by mostafa
    215             1                    ***0***                                       o_start_pattern <= 1'b1 ;
    216                                                                              end
    217                                                                          
    218                                                                          
    219                                                                          
    220                                                                              
    221                                              
    222                                                                              
    223                                                                              
    224                                                                              
    225                                                                              
    226                                                                            /*if (i_ser_scl)
    227                                                                              begin
    228                                                                                o_start_pattern <= 1'b1 ;
    229                                                                              end */
    230                                                                              
    231                                                                              
    232                                                                              
    233                                                                          end
    234                                              
    235                                              
    236                                                              CTRL_NACK  : begin
    237             1                    ***0***                                   o_ser_sda_low <= 1'b0 ;
    238             1                    ***0***                                   o_ser_s_data <= 1'b1 ;
    239             1                    ***0***                                   o_ser_mode_done <= 1'b0;
    240             1                    ***0***                                   o_ser_to_parity_transition <= 1'b0;
    241                                              
    242                                                                          if (i_ser_scl_pos_edge)
    243                                                                              begin
    244             1                    ***0***                                       o_ser_mode_done <= 1'b1 ;
    245                                                                              end
    246                                                                         end
    247                                              
    248                                                            REPEATED_START : begin
    249             1                    ***0***                                   o_ser_sda_low <= 1'b0 ;
    250             1                    ***0***                                   o_ser_mode_done <= 1'b0 ;
    251             1                    ***0***                                   o_ser_to_parity_transition <= 1'b0;
    252                                                                            if (!i_ser_scl)
    253                                                                              begin
    254             1                    ***0***                                       o_ser_s_data    <= 1'b1 ;
    255                                                                              end
    256                                                                            else
    257                                                                              begin
    258             1                    ***0***                                       o_ser_s_data    <= 1'b0 ;
    259                                                                              end
    260                                              
    261                                                                            if (i_ser_scl_pos_edge)
    262                                                                              begin
    263             1                    ***0***                                       o_ser_mode_done <= 1'b1 ;
    264                                                                              end
    265                                                                          end
    266                                              
    267                                                            Hold_Zero    : begin
    268             1                    ***0***                                   o_ser_s_data    <= 1'b0 ;
    269                                                                           end
    270                                                                           
    271                                                                           
    272                                                           /* EXIT_PATTERN : begin
    273                                                                           end */
    274                                                            
    275                                                          endcase
    276                                                        end
    277                                                      else
    278                                                          begin
    279             1                         43                     o_ser_sda_low <= 1'b0 ;
    280             1                         43                     o_ser_s_data       <= 1'b1 ;
    281             1                         43                     o_ser_mode_done    <= 1'b0 ;
    282             1                         43                     o_ser_pp_mode_done <= 1'b0 ;
    283             1                         43                     last_bit_flag      <= 1'b0 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         66        56        10    84.84%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_tx --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                             i_clk           1           1      100.00 
                                           i_rst_n           1           1      100.00 
                                  i_ser_count[0-2]           1           1      100.00 
                                  i_ser_count_done           1           1      100.00 
                                          i_ser_en           1           1      100.00 
                                   i_ser_mode[0-1]           1           1      100.00 
                                     i_ser_mode[2]           0           0        0.00 
                              i_ser_regf_data[0-7]           1           1      100.00 
                                         i_ser_scl           1           1      100.00 
                                i_ser_scl_neg_edge           1           1      100.00 
                                i_ser_scl_pos_edge           1           1      100.00 
                                       i_ser_valid           0           0        0.00 
                                       i_timer_cas           1           1      100.00 
                                     last_bit_flag           0           0        0.00 
                                   o_ser_mode_done           1           1      100.00 
                                o_ser_pp_mode_done           1           1      100.00 
                                      o_ser_s_data           1           1      100.00 
                                     o_ser_sda_low           0           0        0.00 
                        o_ser_to_parity_transition           1           1      100.00 
                                   o_start_pattern           1           1      100.00 
                                    o_stop_pattern           1           1      100.00 
                                     o_tx_daa_done           1           1      100.00 
                                    parity_counter           0           0        0.00 

Total Node Count     =         33 
Toggled Node Count   =         28 
Untoggled Node Count =          5 

Toggle Coverage      =      84.84% (56 of 66 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_bits_counter
=== Design Unit: work.bits_counter
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        13         8         5    61.53%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_bits_counter

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File bits_counter.v
------------------------------------IF Branch------------------------------------
    55                                       356     Count coming in to IF
    55              1                          1             if (!i_rst_n)
    61              1                        100             else if (i_cnt_en)
    96              1                        255             else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    63                                       100     Count coming in to IF
    63              1                    ***0***                     if(i_bits_cnt_regf_rx_tx && i_ctrl_rx_cnt_en) // RX condition 
    79              1                        100                     else                    // TX condition 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    65                                   ***0***     Count coming in to IF
    65              1                    ***0***                             if (i_scl_neg_edge) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    67                                   ***0***     Count coming in to IF
    67              1                    ***0***                                     if (!cnt_bit_count )
    72              1                    ***0***                                     else    
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    81                                       100     Count coming in to IF
    81              1                         25                             if (i_scl_pos_edge) 
                                              75     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    83                                        25     Count coming in to IF
    83              1                          3                                     if (!cnt_bit_count )
    88              1                         22                                     else    
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_bits_counter --

  File bits_counter.v
----------------Focused Condition View-------------------
Line       63 Item    1  (i_bits_cnt_regf_rx_tx && i_ctrl_rx_cnt_en)
Condition totals: 0 of 2 input terms covered = 0.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_bits_cnt_regf_rx_tx         N  No hits                  Hit '_0' and '_1'
       i_ctrl_rx_cnt_en         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:    ***0***  i_bits_cnt_regf_rx_tx_0  -                             
  Row   2:    ***0***  i_bits_cnt_regf_rx_tx_1  i_ctrl_rx_cnt_en              
  Row   3:    ***0***  i_ctrl_rx_cnt_en_0       i_bits_cnt_regf_rx_tx         
  Row   4:    ***0***  i_ctrl_rx_cnt_en_1       i_bits_cnt_regf_rx_tx         


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      13         9         4    69.23%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_bits_counter --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File bits_counter.v
    33                                               module bits_counter(
    34                                                   input  wire       i_cnt_en              ,  
    35                                                   input  wire       i_ctrl_rx_cnt_en      , // controller is in DATA IN state 
    36                                                   input  wire       i_rst_n               ,
    37                                                   input  wire       i_bits_cnt_clk        ,
    38                                                   input  wire       i_sdr_ctrl_pp_od      , //UNUSED
    39                                                   input  wire       i_scl_pos_edge        ,  
    40                                                   input  wire       i_scl_neg_edge        ,  
    41                                                   input  wire       i_bits_cnt_regf_rx_tx ,  // 0 for TX , 1 for RX
    42                                                   output reg        o_cnt_done            ,
    43                                                   output wire [2:0] o_cnt_bit_count
    44                                                   );
    45                                               
    46                                               // INTERNAL SIGNALS 
    47                                                   reg [2:0] cnt_bit_count ;
    48                                                   
    49                                               // OUTPUT 
    50                                                   assign o_cnt_bit_count = cnt_bit_count;
    51                                                   
    52                                               // COUNTER CORE
    53              1                        356     always @ (posedge i_bits_cnt_clk or negedge i_rst_n)
    54                                                   begin : counter
    55                                                       if (!i_rst_n)
    56                                                           begin 
    57              1                          1                     cnt_bit_count <= 3'b111 ;
    58              1                          1                     o_cnt_done    <= 1'b0   ;    
    59                                                           end
    60                                                           
    61                                                       else if (i_cnt_en)
    62                                                           begin
    63                                                               if(i_bits_cnt_regf_rx_tx && i_ctrl_rx_cnt_en) // RX condition 
    64                                                                   begin
    65                                                                       if (i_scl_neg_edge) 
    66                                                                           begin 
    67                                                                               if (!cnt_bit_count )
    68                                                                                    begin
    69              1                    ***0***                                             cnt_bit_count <= 3'b111 ;
    70              1                    ***0***                                             o_cnt_done    <= 1'b1   ;    
    71                                                                                    end
    72                                                                               else    
    73                                                                                    begin               
    74              1                    ***0***                                             cnt_bit_count <= cnt_bit_count - 1'd1 ;
    75              1                    ***0***                                             o_cnt_done    <= 1'b0                 ;
    76                                                                                    end
    77                                                                           end
    78                                                                   end
    79                                                               else                    // TX condition 
    80                                                                   begin
    81                                                                       if (i_scl_pos_edge) 
    82                                                                           begin 
    83                                                                               if (!cnt_bit_count )
    84                                                                                    begin
    85              1                          3                                             cnt_bit_count <= 3'b111 ;
    86              1                          3                                             o_cnt_done    <= 1'b1   ;    
    87                                                                                    end
    88                                                                               else    
    89                                                                                    begin               
    90              1                         22                                             cnt_bit_count <= cnt_bit_count - 1'd1 ;
    91              1                         22                                             o_cnt_done    <= 1'b0                 ;
    92                                                                                    end
    93                                                                           end
    94                                                                   end        
    95                                                           end
    96                                                       else
    97                                                             begin
    98              1                        255                       cnt_bit_count <= 3'b111 ;
    99              1                        255                       o_cnt_done    <= 1'b0   ;    

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         30        26         4    86.66%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_bits_counter --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                cnt_bit_count[2-0]           1           1      100.00 
                                    i_bits_cnt_clk           1           1      100.00 
                             i_bits_cnt_regf_rx_tx           0           0        0.00 
                                          i_cnt_en           1           1      100.00 
                                  i_ctrl_rx_cnt_en           0           0        0.00 
                                           i_rst_n           1           1      100.00 
                                    i_scl_neg_edge           1           1      100.00 
                                    i_scl_pos_edge           1           1      100.00 
                                  i_sdr_ctrl_pp_od           1           1      100.00 
                              o_cnt_bit_count[0-2]           1           1      100.00 
                                        o_cnt_done           1           1      100.00 

Total Node Count     =         15 
Toggled Node Count   =         13 
Untoggled Node Count =          2 

Toggle Coverage      =      86.66% (26 of 30 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_controller_rx
=== Design Unit: work.controller_rx
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        35        10        25    28.57%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_rx

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_RX.v
------------------------------------IF Branch------------------------------------
    79                                       975     Count coming in to IF
    79              1                          1         if(!i_rst_n)
    90              1                        731         else if (i_sdr_rx_en)
    219             1                        243         else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    94                                       731     Count coming in to CASE
    95              1                        664               ACK           : begin // NEED TO BE REDONE
    108             1                    ***0***               DESERIALIZING : begin
    136             1                    ***0***                         T_BIT : begin
    165             1                    ***0***                   CHECK_FOR_START : begin                                
    200             1                         67                 ARBITRATION    : begin           // 2024 note : should be treated as idle state 
                                         ***0***     All False Count
Branch totals: 2 hits of 6 branches = 33.33%

------------------------------------IF Branch------------------------------------
    101                                      664     Count coming in to IF
    101             1                        641                                 if (i_sdr_rx_scl)
                                              23     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    114                                  ***0***     Count coming in to IF
    114             1                    ***0***                                 if (i_sdr_rx_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    123                                  ***0***     Count coming in to IF
    123             1                    ***0***                                 if (!i_sdr_rx_des_count && i_sdr_rx_scl_pos_edge )
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    129                                  ***0***     Count coming in to IF
    129             1                    ***0***                                 if (!i_sdr_rx_des_count )
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    142                                  ***0***     Count coming in to IF
    142             1                    ***0***                                 if (i_sdr_rx_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    144                                  ***0***     Count coming in to IF
    144             1                    ***0***                                     if (!i_sdr_rx_sda)
    149             1                    ***0***                                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    151                                  ***0***     Count coming in to IF
    151             1                    ***0***                                         if (i_fcnt_last_frame)
    156             1                    ***0***                                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    168                                  ***0***     Count coming in to IF
    168             1                    ***0***                                 if (!i_timer_cas)
    194             1                    ***0***     								               else //added by mostafa
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    170                                  ***0***     Count coming in to IF
    170             1                    ***0***                                     if(!i_sdr_rx_scl) //added by mostafa
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    172                                  ***0***     Count coming in to IF
    172             1                    ***0***                                         if (!i_sdr_rx_sda)
    177             1                    ***0***                                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    181                                  ***0***     Count coming in to IF
    181             1                    ***0***                                             if (i_fcnt_last_frame)
    186             1                    ***0***                                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    202                                       67     Count coming in to IF
    202             1                         24                                     if ( i_sdr_rx_scl && !sdr_rx_arbitration_lost)
    207             1                    ***0***                                      else if ( (i_sdr_rx_des_count=='b0) && sdr_rx_arbitration_lost)
    212             1                         21                                     else if (i_sdr_rx_scl)
                                              22     All False Count
Branch totals: 3 hits of 4 branches = 75.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       4         1         3    25.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_rx --

  File controller_RX.v
----------------Focused Condition View-------------------
Line       202 Item    1  (i_sdr_rx_scl && ~sdr_rx_arbitration_lost)
Condition totals: 1 of 2 input terms covered = 50.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
             i_sdr_rx_scl         Y
  sdr_rx_arbitration_lost         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  i_sdr_rx_scl_0             -                             
  Row   2:          1  i_sdr_rx_scl_1             ~sdr_rx_arbitration_lost      
  Row   3:          1  sdr_rx_arbitration_lost_0  i_sdr_rx_scl                  
  Row   4:    ***0***  sdr_rx_arbitration_lost_1  i_sdr_rx_scl                  

----------------Focused Condition View-------------------
Line       207 Item    1  ((i_sdr_rx_des_count == 0) && sdr_rx_arbitration_lost)
Condition totals: 0 of 2 input terms covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_sdr_rx_des_count == 0)         N  '_1' not hit             Hit '_1'
    sdr_rx_arbitration_lost         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:          1  (i_sdr_rx_des_count == 0)_0  -                             
  Row   2:    ***0***  (i_sdr_rx_des_count == 0)_1  sdr_rx_arbitration_lost       
  Row   3:          1  sdr_rx_arbitration_lost_0    (i_sdr_rx_des_count == 0)     
  Row   4:    ***0***  sdr_rx_arbitration_lost_1    (i_sdr_rx_des_count == 0)     


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         0         2     0.00%

================================Expression Details================================

Expression Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_rx --

  File controller_RX.v
-----------Focused Expression View (Bimodal)------------
Line       204 Item    1  (i_sdr_rx_tx_ser_data ^ i_sdr_rx_sda)
Expression totals: 0 of 2 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage                  Hint
             -----------  --------  --------------------------------------  --------------
    i_sdr_rx_tx_ser_data         N  Both rows hit for same output ->0      Hit either row for output ->1
            i_sdr_rx_sda         N  Both rows hit for same output ->0      Hit either row for output ->1

    Rows:   Hits(->0)   Hits(->1)  FEC Target                Non-masking condition(s)           

---------  ----------  ----------  --------------------      -------------------------          
 Row   1:           1           0  i_sdr_rx_tx_ser_data_0    -                                  
 Row   2:           1           0  i_sdr_rx_tx_ser_data_1    -                                  
 Row   3:           1           0  i_sdr_rx_sda_0            -                                  
 Row   4:           1           0  i_sdr_rx_sda_1            -                                  


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      48        22        26    45.83%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_rx --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_RX.v
    36                                               module controller_rx(
    37                                                   input   wire           i_clk                  , // system clk
    38                                                   input   wire           i_rst_n                , // system reset
    39                                                   input   wire           i_sdr_rx_scl           , // scl bus input from scl_generation
    40                                                   input   wire           i_sdr_rx_en            , // rx block enable from sdr_controller
    41                                                   input   wire           i_sdr_rx_sda           , // sda bus input from sda_handling
    42                                                   input   wire  [2:0]    i_sdr_rx_des_count     , // bit count input from bits_counter
    43                                                   input   wire  [2:0]    i_sdr_rx_mode          , // rx mode input 0 >> deser, 1 >> Tbit
    44                                                   input   wire           i_fcnt_last_frame      , // last frame flag from frame_counter
    45                                               	  input   wire           i_timer_cas            , //added by mostafa
    46                                               	  input   wire           i_sdr_rx_scl_pos_edge  , //added by mostafa
    47                                                   //output  reg            o_sdr_rx_valid       , // flag for ready valid parallel data
    48                                                   input   wire           i_sdr_rx_tx_ser_data     ,
    49                                                	  output  reg            o_crh_start_detected    ,
    50                                                   output  reg            o_sdr_rx_nack_ack      , // Ack output for the sdr_controller
    51                                                   output  reg            o_sdr_rx_rd_abort      , // T_bit 0 >> abort reading , T_bit 1 >> check i_fcnt_last_frame
    52                                                   output  reg   [7:0]    o_sdr_rx_regf_data_wr  , // receiver parallel data output to reg file
    53                                                   output  reg            o_sdr_rx_mode_done     , // rx block done flag
    54                                                   output  reg            o_sdr_rx_pp_mode_done,
    55                                                   //output  reg            last_bit_flag  ,
    56                                                   output  wire           o_sdr_rx_arbitration_lost
    57                                                   );
    58                                               
    59                                               
    60                                               
    61                                               reg [7:0] arbitrated_adress ;
    62                                               
    63                                               reg sdr_rx_arbitration_lost ;
    64                                               assign o_sdr_rx_arbitration_lost = sdr_rx_arbitration_lost ;
    65                                               
    66                                               //-- i_ser_mode parameters --------------------------------------------------
    67                                               
    68                                               localparam ACK             = 3'b000 ; // 0
    69                                               localparam DESERIALIZING   = 3'b001 ; // 1
    70                                               localparam T_BIT           = 3'b011 ; // 3
    71                                               localparam ARBITRATION     = 3'b010 ; // 2
    72                                               localparam CHECK_FOR_START = 3'b110 ; // 6
    73                                               
    74                                               
    75                                               //-- reciever --------------------------------------------------
    76                                               
    77              1                        975     always @(posedge i_clk or negedge i_rst_n)
    78                                                 begin : proc_deserializer
    79                                                   if(!i_rst_n)
    80                                                     begin
    81              1                          1             o_sdr_rx_nack_ack            <=  1'b1 ;
    82              1                          1             o_sdr_rx_rd_abort            <=  1'b0 ;
    83              1                          1             o_sdr_rx_mode_done           <=  1'b0 ;
    84              1                          1             o_sdr_rx_pp_mode_done <= 1'b0 ;
    85              1                          1             o_sdr_rx_regf_data_wr        <=  8'b0 ;
    86              1                          1             sdr_rx_arbitration_lost   <=  1'b0 ;
    87              1                          1             arbitrated_adress <='b0;
    88                                               
    89                                                     end
    90                                                   else if (i_sdr_rx_en)
    91                                                     begin
    92              1                        731             o_sdr_rx_mode_done <=  1'b0 ;
    93              1                        731             o_sdr_rx_pp_mode_done <= 1'b0 ;
    94                                                       case (i_sdr_rx_mode)
    95                                                         ACK           : begin // NEED TO BE REDONE
    96                                               
    97              1                        664                                 o_sdr_rx_mode_done <=  1'b0 ;
    98              1                        664                                 o_sdr_rx_pp_mode_done <= 1'b0 ;
    99              1                        664                                 sdr_rx_arbitration_lost <=1'b0;
    100                                                                          // missing 
    101                                                                          if (i_sdr_rx_scl)
    102                                                                            begin
    103             1                        641                                     o_sdr_rx_nack_ack  <= i_sdr_rx_sda ; // 1sda >> nack , 0sda >> ack
    104             1                        641                                     o_sdr_rx_mode_done <= 1'b1         ;
    105                                                                            end
    106                                                                        end
    107                                              
    108                                                        DESERIALIZING : begin
    109             1                    ***0***                                 o_sdr_rx_mode_done <=  1'b0 ;
    110             1                    ***0***                                 o_sdr_rx_pp_mode_done <= 1'b0 ;
    111                                                                          //last_bit_flag      <=  1'b0 ;
    112             1                    ***0***                                 sdr_rx_arbitration_lost <=1'b0;
    113                                              
    114                                                                          if (i_sdr_rx_scl)
    115                                                                            begin
    116             1                    ***0***                                     o_sdr_rx_regf_data_wr[i_sdr_rx_des_count] <= i_sdr_rx_sda ;
    117                                                                            end
    118                                                                          /*if(&i_sdr_rx_des_count && )
    119                                                                            begin
    120                                                                              last_bit_flag <= 1'b1 ;
    121                                                                            end */
    122                                              
    123                                                                          if (!i_sdr_rx_des_count && i_sdr_rx_scl_pos_edge )
    124                                                                            begin
    125                                                                              //last_bit_flag <= 1'b1 ;
    126             1                    ***0***                                     o_sdr_rx_pp_mode_done <=  1'b1 ;
    127                                                                            end
    128                                              
    129                                                                          if (!i_sdr_rx_des_count )
    130                                                                            begin
    131             1                    ***0***                                     o_sdr_rx_mode_done <=  1'b1 ;
    132                                                                            end
    133                                              
    134                                                                        end
    135                                              
    136                                                                  T_BIT : begin
    137                                              
    138             1                    ***0***                                 o_sdr_rx_mode_done <=  1'b0 ;
    139             1                    ***0***                                 o_sdr_rx_pp_mode_done <= 1'b0 ;
    140             1                    ***0***                                 sdr_rx_arbitration_lost <=1'b0;
    141                                              
    142                                                                          if (i_sdr_rx_scl)
    143                                                                            begin
    144                                                                              if (!i_sdr_rx_sda)
    145                                                                                begin
    146             1                    ***0***                                         o_sdr_rx_rd_abort  <=  1'b1 ;
    147             1                    ***0***                                         o_sdr_rx_mode_done <=  1'b1 ;
    148                                                                                end
    149                                                                              else
    150                                                                                begin
    151                                                                                  if (i_fcnt_last_frame)
    152                                                                                    begin
    153             1                    ***0***                                             o_sdr_rx_rd_abort  <=  1'b1 ;
    154             1                    ***0***                                             o_sdr_rx_mode_done <=  1'b1 ;
    155                                                                                    end
    156                                                                                  else
    157                                                                                    begin
    158             1                    ***0***                                             o_sdr_rx_rd_abort  <=  1'b0 ;
    159             1                    ***0***                                             o_sdr_rx_mode_done <=  1'b1 ;
    160                                                                                    end
    161                                                                                end
    162                                                                            end
    163                                                                        end
    164                                              
    165                                                            CHECK_FOR_START : begin                                
    166             1                    ***0***                                 o_sdr_rx_mode_done <=  1'b0 ;
    167             1                    ***0***                                 o_sdr_rx_pp_mode_done <= 1'b0 ;
    168                                                                          if (!i_timer_cas)
    169                                                                            begin
    170                                                                              if(!i_sdr_rx_scl) //added by mostafa
    171                                              								                  begin
    172                                                                                  if (!i_sdr_rx_sda)
    173                                                                                    begin
    174             1                    ***0***      								                        o_crh_start_detected <= 1'b1 ; //added by mostafa
    175             1                    ***0***                                             o_sdr_rx_mode_done <=  1'b1 ;
    176                                                                                    end
    177                                                                                  else
    178                                                                                    begin
    179             1                    ***0***     									                      o_crh_start_detected <= 1'b0 ; //added by mostafa
    180             1                    ***0***     									                      o_sdr_rx_mode_done <=  1'b1 ;
    181                                                                                      if (i_fcnt_last_frame)
    182                                                                                        begin
    183             1                    ***0***                                                 o_sdr_rx_rd_abort  <=  1'b1 ;
    184                                                                                          //o_sdr_rx_mode_done <=  1'b1 ;
    185                                                                                        end
    186                                                                                      else
    187                                                                                        begin
    188             1                    ***0***                                                 o_sdr_rx_rd_abort  <=  1'b0 ;
    189                                                                                          //o_sdr_rx_mode_done <=  1'b1 ;
    190                                                                                        end
    191                                                                                    end
    192                                                                                end
    193                                                                              end
    194                                              								               else //added by mostafa
    195                                              								                 begin
    196             1                    ***0***     								                   o_sdr_rx_mode_done <=  1'b0 ;
    197                                              								                 end
    198                                                                        end
    199                                              
    200                                                          ARBITRATION    : begin           // 2024 note : should be treated as idle state 
    201                                              
    202                                                                              if ( i_sdr_rx_scl && !sdr_rx_arbitration_lost)
    203                                                                                 begin
    204             1                         24                                           sdr_rx_arbitration_lost <= i_sdr_rx_tx_ser_data^i_sdr_rx_sda;  // 1 if they arent the same
    205             1                         24                                           arbitrated_adress [i_sdr_rx_des_count-1] <= i_sdr_rx_sda ;
    206                                                                                  end
    207                                                                               else if ( (i_sdr_rx_des_count=='b0) && sdr_rx_arbitration_lost)
    208                                                                                  begin
    209             1                    ***0***                                           o_sdr_rx_regf_data_wr <= arbitrated_adress ;
    210             1                    ***0***                                           o_sdr_rx_mode_done <=  1'b1 ;
    211                                                                                 end
    212                                                                              else if (i_sdr_rx_scl)
    213                                                                                 begin
    214             1                         21                                           arbitrated_adress [i_sdr_rx_des_count-1] <= i_sdr_rx_sda ;
    215                                                                                  end
    216                                                                           end
    217                                                      endcase
    218                                                    end
    219                                                  else
    220                                                    begin
    221             1                        243             o_sdr_rx_rd_abort <= 1'b0 ;
    222             1                        243             sdr_rx_arbitration_lost <= 1'b0 ;
    223             1                        243             o_sdr_rx_mode_done <=  1'b0 ;
    224             1                        243             o_sdr_rx_pp_mode_done <=  1'b0 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         76        37        39    48.68%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_controller_rx --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                              arbitrated_adress[7]           0           0        0.00 
                              arbitrated_adress[6]           1           1      100.00 
                            arbitrated_adress[5-1]           0           1       50.00 
                              arbitrated_adress[0]           1           1      100.00 
                                             i_clk           1           1      100.00 
                                 i_fcnt_last_frame           0           0        0.00 
                                           i_rst_n           1           1      100.00 
                           i_sdr_rx_des_count[0-2]           1           1      100.00 
                                       i_sdr_rx_en           1           1      100.00 
                                  i_sdr_rx_mode[0]           0           0        0.00 
                                  i_sdr_rx_mode[1]           1           1      100.00 
                                  i_sdr_rx_mode[2]           0           0        0.00 
                                      i_sdr_rx_scl           1           1      100.00 
                             i_sdr_rx_scl_pos_edge           1           1      100.00 
                                      i_sdr_rx_sda           1           1      100.00 
                              i_sdr_rx_tx_ser_data           1           1      100.00 
                                       i_timer_cas           1           1      100.00 
                              o_crh_start_detected           0           0        0.00 
                         o_sdr_rx_arbitration_lost           0           0        0.00 
                                o_sdr_rx_mode_done           1           1      100.00 
                                 o_sdr_rx_nack_ack           1           1      100.00 
                             o_sdr_rx_pp_mode_done           0           0        0.00 
                                 o_sdr_rx_rd_abort           0           0        0.00 
                        o_sdr_rx_regf_data_wr[7-0]           0           0        0.00 
                           sdr_rx_arbitration_lost           0           0        0.00 

Total Node Count     =         38 
Toggled Node Count   =         16 
Untoggled Node Count =         22 

Toggle Coverage      =      48.68% (37 of 76 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_frame_counter
=== Design Unit: work.frame_counter
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         3         1         2    33.33%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_frame_counter

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File frame_counter.v
------------------------------------IF Branch------------------------------------
    37                                         1     Count coming in to IF
    37              1                          1       if(~i_fcnt_rst_n)
    42              1                    ***0***       else if(i_fcnt_en && ~count_done)
    47              1                    ***0***       else 
Branch totals: 1 hit of 3 branches = 33.33%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_frame_counter --

  File frame_counter.v
----------------Focused Condition View-------------------
Line       42 Item    1  (i_fcnt_en && ~count_done)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   i_fcnt_en         N  No hits                  Hit '_0' and '_1'
  count_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_fcnt_en_0           -                             
  Row   2:    ***0***  i_fcnt_en_1           ~count_done                   
  Row   3:    ***0***  count_done_0          i_fcnt_en                     
  Row   4:    ***0***  count_done_1          i_fcnt_en                     


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         0         1     0.00%

================================Expression Details================================

Expression Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_frame_counter --

  File frame_counter.v
----------------Focused Expression View-----------------
Line       34 Item    1  (count == i_fcnt_no_frms)
Expression totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (count == i_fcnt_no_frms)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:          1  (count == i_fcnt_no_frms)_0  -                             
  Row   2:    ***0***  (count == i_fcnt_no_frms)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       8         5         3    62.50%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_frame_counter --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File frame_counter.v
    22                                               module frame_counter(
    23                                                   input  wire  [7:0] i_fcnt_no_frms ,
    24                                                   input  wire  i_fcnt_clk           ,
    25                                                   input  wire  i_fcnt_rst_n         ,
    26                                                   input  wire  i_fcnt_en            ,
    27                                                   output reg   o_fcnt_last_frame
    28                                                   );
    29                                               	
    30              1                          1     reg [3:0] count = 4'b0 ;
    31                                               wire      count_done   ;
    32                                               
    33                                               // for tx : assign count_done = (count == i_fcnt_no_frms - 1'b1)? 1'b1 : 1'b0 ; we need to create mux at integration
    34              1                          2     assign count_done = (count == i_fcnt_no_frms)? 1'b1 : 1'b0 ;
    35              1                          1     always@(posedge i_fcnt_en or negedge i_fcnt_rst_n)
    36                                               begin 
    37                                                 if(~i_fcnt_rst_n)
    38                                                   begin 
    39              1                          1           o_fcnt_last_frame <= 1'b0 ;
    40              1                          1           count <= 4'b0 ;
    41                                                   end
    42                                                 else if(i_fcnt_en && ~count_done)
    43                                                   begin
    44              1                    ***0***           o_fcnt_last_frame <= 1'b0 ;
    45              1                    ***0***           count <= count + 4'b1 ;
    46                                                   end
    47                                                 else 
    48                                                   begin
    49              1                    ***0***           o_fcnt_last_frame <= 1'b1 ; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         34         4        30    11.76%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_frame_counter --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                        count[3-0]           0           0        0.00 
                                        count_done           0           0        0.00 
                                        i_fcnt_clk           1           1      100.00 
                                         i_fcnt_en           0           0        0.00 
                               i_fcnt_no_frms[0-7]           0           0        0.00 
                                      i_fcnt_rst_n           1           1      100.00 
                                 o_fcnt_last_frame           0           0        0.00 

Total Node Count     =         17 
Toggled Node Count   =          2 
Untoggled Node Count =         15 

Toggle Coverage      =      11.76% (4 of 34 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_open_drain_behav_model/u_tri_state_buf_n
=== Design Unit: work.tri_state_buf_n
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_open_drain_behav_model/u_tri_state_buf_n

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf_n.v
------------------------------------IF Branch------------------------------------
    8                                        114     Count coming in to IF
    8               1                         57     	assign o_tri_state = (~i_tri_state_en)? i_tri_state_data:1'bz;
    8               2                         57     	assign o_tri_state = (~i_tri_state_en)? i_tri_state_data:1'bz;
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         0         1     0.00%

================================Expression Details================================

Expression Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_open_drain_behav_model/u_tri_state_buf_n --

  File tri_state_buf_n.v
----------------Focused Expression View-----------------
Line       8 Item    1  (~i_tri_state_en? i_tri_state_data: 1'bZ)
Expression totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  i_tri_state_data         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   3:          1  i_tri_state_data_0    ~i_tri_state_en               
  Row   4:    ***0***  i_tri_state_data_1    ~i_tri_state_en               


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_open_drain_behav_model/u_tri_state_buf_n --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf_n.v
    3                                                module tri_state_buf_n (
    4                                                	input  wire  i_tri_state_data ,
    5                                                	input  wire  i_tri_state_en   ,
    6                                                	output wire  o_tri_state       );
    7                                                
    8               1                        117     	assign o_tri_state = (~i_tri_state_en)? i_tri_state_data:1'bz;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          6         4         2    66.66%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_open_drain_behav_model/u_tri_state_buf_n --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                  i_tri_state_data           0           0        0.00 
                                    i_tri_state_en           1           1      100.00 
                                       o_tri_state           1           1      100.00 

Total Node Count     =          3 
Toggled Node Count   =          2 
Untoggled Node Count =          1 

Toggle Coverage      =      66.66% (4 of 6 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_open_drain_behav_model
=== Design Unit: work.open_drain_behav_model
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          6         6         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_open_drain_behav_model --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     i_behav_model           1           1      100.00 
                                        o_behav_od           1           1      100.00 
                                               sda           1           1      100.00 

Total Node Count     =          3 
Toggled Node Count   =          3 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (6 of 6 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model/u_push_tri_state_buf
=== Design Unit: work.tri_state_buf
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model/u_push_tri_state_buf

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf.v
------------------------------------IF Branch------------------------------------
    8                                          5     Count coming in to IF
    8               1                          1     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;
    8               2                          4     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         0         1     0.00%

================================Expression Details================================

Expression Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model/u_push_tri_state_buf --

  File tri_state_buf.v
----------------Focused Expression View-----------------
Line       8 Item    1  (i_tri_state_en? i_tri_state_data: 1'bZ)
Expression totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  i_tri_state_data         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   3:          1  i_tri_state_data_0    i_tri_state_en                
  Row   4:    ***0***  i_tri_state_data_1    i_tri_state_en                


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model/u_push_tri_state_buf --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf.v
    3                                                module tri_state_buf (
    4                                                	input  wire  i_tri_state_data ,
    5                                                	input  wire  i_tri_state_en   ,
    6                                                	output wire  o_tri_state       );
    7                                                
    8               1                          9     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          6         2         4    33.33%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model/u_push_tri_state_buf --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                  i_tri_state_data           0           0        0.00 
                                    i_tri_state_en           0           0        0.00 
                                       o_tri_state           1           1      100.00 

Total Node Count     =          3 
Toggled Node Count   =          1 
Untoggled Node Count =          2 

Toggle Coverage      =      33.33% (2 of 6 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model/u_pull_tri_state_buf
=== Design Unit: work.tri_state_buf
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model/u_pull_tri_state_buf

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf.v
------------------------------------IF Branch------------------------------------
    8                                          3     Count coming in to IF
    8               1                          1     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;
    8               2                          2     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         0         1     0.00%

================================Expression Details================================

Expression Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model/u_pull_tri_state_buf --

  File tri_state_buf.v
----------------Focused Expression View-----------------
Line       8 Item    1  (i_tri_state_en? i_tri_state_data: 1'bZ)
Expression totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  i_tri_state_data         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   3:    ***0***  i_tri_state_data_0    i_tri_state_en                
  Row   4:    ***0***  i_tri_state_data_1    i_tri_state_en                


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model/u_pull_tri_state_buf --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf.v
    3                                                module tri_state_buf (
    4                                                	input  wire  i_tri_state_data ,
    5                                                	input  wire  i_tri_state_en   ,
    6                                                	output wire  o_tri_state       );
    7                                                
    8               1                          5     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          6         4         2    66.66%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model/u_pull_tri_state_buf --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                  i_tri_state_data           0           0        0.00 
                                    i_tri_state_en           1           1      100.00 
                                       o_tri_state           1           1      100.00 

Total Node Count     =          3 
Toggled Node Count   =          2 
Untoggled Node Count =          1 

Toggle Coverage      =      66.66% (4 of 6 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model
=== Design Unit: work.push_pull_behav_model
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File push_pull_behav_model.v
------------------------------------IF Branch------------------------------------
    14                                         7     Count coming in to IF
    14              1                          2     	assign tri_state_push_in = (i_push_pull_en) ? (!i_sda_push_pull) : 0 ;
    14              2                          5     	assign tri_state_push_in = (i_push_pull_en) ? (!i_sda_push_pull) : 0 ;
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File push_pull_behav_model.v
    3                                                module push_pull_behav_model(
    4                                                	input   wire   i_sda_push_pull   , // 1 push :: 0 pull
    5                                                	input   wire   i_push_pull_en    ,
    6                                                	inout   wire   sda               ,
    7                                                	output  wire   o_sda_push_pull  );
    8                                                
    9                                                	wire tri_state_pull_in ;
    10                                               	wire tri_state_push_in ;
    11                                               
    12                                               	assign o_sda_push_pull   = sda;
    13                                               	assign tri_state_pull_in = (i_push_pull_en) ? (i_sda_push_pull)  : 0 ;
    14              1                         11     	assign tri_state_push_in = (i_push_pull_en) ? (!i_sda_push_pull) : 0 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         12        10         2    83.33%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling/u_push_pull_behav_model --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                    i_push_pull_en           1           1      100.00 
                                   i_sda_push_pull           1           1      100.00 
                                   o_sda_push_pull           1           1      100.00 
                                               sda           1           1      100.00 
                                 tri_state_pull_in           1           1      100.00 
                                 tri_state_push_in           0           0        0.00 

Total Node Count     =          6 
Toggled Node Count   =          5 
Untoggled Node Count =          1 

Toggle Coverage      =      83.33% (10 of 12 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_sda_handling
=== Design Unit: work.sda_handling
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         4         0   100.00%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sda_handling.v
------------------------------------IF Branch------------------------------------
    53                                       120     Count coming in to IF
    53              1                          3     assign o_handling_s_data = (i_handling_sel_pp_od )?  push_pull_out : open_drain_out ;
    53              2                        117     assign o_handling_s_data = (i_handling_sel_pp_od )?  push_pull_out : open_drain_out ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    60                                       119     Count coming in to IF
    60              1                          1         if (i_handling_sel_pp_od)
    65              1                        118         else
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      5         5         0   100.00%

================================Expression Details================================

Expression Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling --

  File sda_handling.v
----------------Focused Expression View-----------------
Line       49 Item    1  (i_handling_pp_en && i_handling_sel_pp_od)
Expression totals: 2 of 2 input terms covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
      i_handling_pp_en         Y
  i_handling_sel_pp_od         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  i_handling_pp_en_0      -                             
  Row   2:          1  i_handling_pp_en_1      i_handling_sel_pp_od          
  Row   3:          1  i_handling_sel_pp_od_0  i_handling_pp_en              
  Row   4:          1  i_handling_sel_pp_od_1  i_handling_pp_en              

-----------Focused Expression View (Bimodal)------------
Line       53 Item    1  (i_handling_sel_pp_od? push_pull_out: open_drain_out)
Expression totals: 3 of 3 input terms covered = 100.00%

              Input Term   Covered  Reason for no coverage                  Hint
             -----------  --------  --------------------------------------  --------------
    i_handling_sel_pp_od         Y
           push_pull_out         Y
          open_drain_out         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target                Non-masking condition(s)           

---------  ----------  ----------  --------------------      -------------------------          
 Row   1:           1           1  i_handling_sel_pp_od_0    -                                  
 Row   2:           0           1  i_handling_sel_pp_od_1    -                                  
 Row   3:           1           0  push_pull_out_0           i_handling_sel_pp_od               
 Row   4:           0           1  push_pull_out_1           i_handling_sel_pp_od               
 Row   5:           1           0  open_drain_out_0          ~i_handling_sel_pp_od              
 Row   6:           0           1  open_drain_out_1          ~i_handling_sel_pp_od              


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       7         7         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sda_handling.v
    33                                               module sda_handling(
    34                                                 input   wire   i_handling_s_data     ,
    35                                               	input   wire   i_handling_sel_pp_od  , 	//push-pull_open-drain: takes 1 when push-pull and 0 when open-drain
    36                                               	input   wire   i_handling_pp_en      ,
    37                                               	inout   wire   sda	                 ,
    38                                               	output  wire   o_handling_s_data    );
    39                                               
    40                                               
    41                                               //-- internal wires declaration -----------------------------------------------
    42                                               
    43                                               	wire          open_drain_out ;
    44                                               	wire          push_pull_out  ;
    45                                               	reg           open_drain_in  ;
    46                                               	reg           push_pull_in   ;
    47                                               	wire          push_pull_enable ;
    48                                               
    49              1                         18     assign push_pull_enable = i_handling_pp_en && i_handling_sel_pp_od ; 
    50                                               
    51                                               //-- SDA from PP/OD to Rx MUX ------------------------------------------------
    52                                               
    53              1                        124     assign o_handling_s_data = (i_handling_sel_pp_od )?  push_pull_out : open_drain_out ;
    54                                               
    55                                               
    56                                               //-- SDA from Tx to PP/OD DEMUX -----------------------------------------------
    57                                               
    58              1                        119     always@(*)
    59                                                 begin : demux_combo_logic
    60                                                   if (i_handling_sel_pp_od)
    61                                                     begin
    62              1                          1             open_drain_in = 1'b1 ;  //--------- because it is active low
    63              1                          1             push_pull_in  = i_handling_s_data ;
    64                                                     end
    65                                                   else
    66                                                     begin
    67              1                        118             open_drain_in = i_handling_s_data ;
    68              1                        118             push_pull_in  = 1'b0 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20        20         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_sda_handling --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                  i_handling_pp_en           1           1      100.00 
                                 i_handling_s_data           1           1      100.00 
                              i_handling_sel_pp_od           1           1      100.00 
                                 o_handling_s_data           1           1      100.00 
                                     open_drain_in           1           1      100.00 
                                    open_drain_out           1           1      100.00 
                                  push_pull_enable           1           1      100.00 
                                      push_pull_in           1           1      100.00 
                                     push_pull_out           1           1      100.00 
                                               sda           1           1      100.00 

Total Node Count     =         10 
Toggled Node Count   =         10 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (20 of 20 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_scl_generation
=== Design Unit: work.scl_generation
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        19        17         2    89.47%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_scl_generation

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File scl_generation.v
------------------------------------IF Branch------------------------------------
    66                                       530     Count coming in to IF
    66              1                          1         if (!i_sdr_ctrl_rst_n)
    76              1                        529         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    78                                       529     Count coming in to CASE
    79              1                        262               LOW:
    100             1                        267               HIGH:
                                         ***0***     All False Count
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    82                                       262     Count coming in to IF
    82              1                    ***0***                    if (i_scl_gen_stall) state <=   LOW  ;
    83              1                        262                    else
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    85                                       262     Count coming in to IF
    85              1                         87                         if (switch)
    91              1                        175                         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    103                                      267     Count coming in to IF
    103             1                         87                     if ((switch && !i_sdr_ctrl_scl_idle) || (i_timer_cas) )
    109             1                        180                     else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    124                                    10835     Count coming in to IF
    124             1                          1         if (!i_sdr_ctrl_rst_n)
    131             1                          2         else if (i_sdr_scl_gen_pp_od)
    146             1                      10832         else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    133                                        2     Count coming in to IF
    133             1                          1               if (count >= 7'd2)               // lw kan by3d already
    138             1                          1               else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    148                                    10832     Count coming in to IF
    148             1                         87               if (count == 7'd62)
    153             1                         86               else if (count == 7'd125)
    158             1                      10659               else
Branch totals: 3 hits of 3 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         6         0   100.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_scl_generation --

  File scl_generation.v
----------------Focused Condition View-------------------
Line       103 Item    1  ((switch && ~i_sdr_ctrl_scl_idle) || i_timer_cas)
Condition totals: 3 of 3 input terms covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
               switch         Y
  i_sdr_ctrl_scl_idle         Y
          i_timer_cas         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  switch_0               ~i_timer_cas                  
  Row   2:          1  switch_1               ~i_sdr_ctrl_scl_idle          
  Row   3:          1  i_sdr_ctrl_scl_idle_0  switch                        
  Row   4:          1  i_sdr_ctrl_scl_idle_1  (~i_timer_cas && switch)      
  Row   5:          1  i_timer_cas_0          ~(switch && ~i_sdr_ctrl_scl_idle)
  Row   6:          1  i_timer_cas_1          ~(switch && ~i_sdr_ctrl_scl_idle)

----------------Focused Condition View-------------------
Line       133 Item    1  (count >= 2)
Condition totals: 1 of 1 input term covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count >= 2)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count >= 2)_0        -                             
  Row   2:          1  (count >= 2)_1        -                             

----------------Focused Condition View-------------------
Line       148 Item    1  (count == 62)
Condition totals: 1 of 1 input term covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 62)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 62)_0       -                             
  Row   2:          1  (count == 62)_1       -                             

----------------Focused Condition View-------------------
Line       153 Item    1  (count == 125)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (count == 125)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 125)_0      -                             
  Row   2:          1  (count == 125)_1      -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      33        32         1    96.96%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_scl_generation --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File scl_generation.v
    34                                               module scl_generation(
    35                                                   input  wire       i_sdr_ctrl_clk          ,   // 50 MHz clock
    36                                                   input  wire       i_sdr_ctrl_rst_n        ,
    37                                                   input  wire       i_sdr_scl_gen_pp_od     ,   // 1: Push-Pull      // 0: for Open-Drain
    38                                               
    39                                                   input  wire       i_scl_gen_stall         ,   // 1 for stalling
    40                                                   input  wire       i_sdr_ctrl_scl_idle     ,
    41                                                   input  wire       i_timer_cas             ,
    42                                                   
    43                                                   output reg        o_scl_pos_edge          ,
    44                                                   output reg        o_scl_neg_edge          ,
    45                                                   output reg        o_scl                  );
    46                                               
    47                                               
    48                                               //-- states encoding in gray ---------------------------------------------
    49                                               
    50                                               localparam LOW  = 1'b0 ;
    51                                               localparam HIGH = 1'b1 ;
    52                                               
    53                                               
    54                                               //-- internal wires declaration -------------------------------------------
    55                                               
    56                                               reg          state   ;  //assigned at fsm
    57                                               reg  [6:0]   count   ;  //assigned at counter
    58                                               reg          switch  ;  //assigned at counter
    59                                               
    60                                               
    61                                               //-- scl generation fsm ---------------------------------------------------
    62                                               
    63              1                        530     always @(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n)
    64                                                 begin: scl_generation_fsm
    65                                               
    66                                                   if (!i_sdr_ctrl_rst_n)
    67                                                     begin
    68                                                       //-- state
    69              1                          1               state   <=  HIGH   ;
    70                                                       //-- outputs
    71              1                          1               o_scl   <=  1'b1  ;
    72              1                          1               o_scl_pos_edge <= 1'b0;
    73              1                          1               o_scl_neg_edge <= 1'b0;
    74                                                     end
    75                                               
    76                                                   else
    77                                                     begin
    78                                                       case (state)
    79                                                         LOW:
    80                                                           begin
    81              1                        262                     o_scl_neg_edge <= 1'b0;
    82              1                    ***0***                    if (i_scl_gen_stall) state <=   LOW  ;
    83                                                              else
    84                                                               begin
    85                                                                   if (switch)
    86                                                                     begin
    87              1                         87                             o_scl <=   1'b1 ;
    88              1                         87                             state <=   HIGH ;
    89              1                         87                             o_scl_pos_edge <= 1'b1;
    90                                                                     end
    91                                                                   else
    92                                                                     begin
    93              1                        175                             o_scl <=   1'b0 ;
    94              1                        175                             state <=   LOW  ;
    95              1                        175                             o_scl_pos_edge <= 1'b0;
    96                                                                     end
    97                                                               end
    98                                                           end
    99                                               
    100                                                        HIGH:
    101                                                          begin
    102             1                        267                 o_scl_pos_edge <= 1'b0;
    103                                                              if ((switch && !i_sdr_ctrl_scl_idle) || (i_timer_cas) )
    104                                                                begin
    105             1                         87                         o_scl <=   1'b0 ;
    106             1                         87                         state <=   LOW  ;
    107             1                         87                         o_scl_neg_edge <= 1'b1;
    108                                                                end
    109                                                              else
    110                                                                begin
    111             1                        180                         o_scl <=   1'b1 ;
    112             1                        180                         state <=   HIGH ;
    113             1                        180                         o_scl_neg_edge <= 1'b0;
    114                                                                end
    115                                                          end
    116                                                      endcase
    117                                                    end
    118                                                end
    119                                              //-- switch generation counter --------------------------------------------
    120                                              
    121             1                      10835     always @(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n)
    122                                                begin: scl_generation_counter
    123                                              
    124                                                  if (!i_sdr_ctrl_rst_n)
    125                                                    begin
    126             1                          1               count  <= 7'b1 ;
    127             1                          1               switch <= 1'b0 ;
    128                                                    end
    129                                              
    130                                                // 50 MHz/4 = 12.5 MHz for Push-Pull
    131                                                  else if (i_sdr_scl_gen_pp_od)
    132                                                    begin
    133                                                        if (count >= 7'd2)               // lw kan by3d already
    134                                                          begin
    135             1                          1                   count  <= 7'b1 ;             // restart counting
    136             1                          1                   switch <= 1'b1 ;             // flag for only one clk cycle indictes that i have stwitched btn O.D and P.P
    137                                                          end
    138                                                        else
    139                                                          begin
    140             1                          1                   count  <= count + 1'b1 ;
    141             1                          1                   switch <= 1'b0 ;
    142                                                          end
    143                                                    end
    144                                              
    145                                                // 50 MHz/125 = 400 KHz for Open-Drain
    146                                                  else
    147                                                    begin
    148                                                        if (count == 7'd62)
    149                                                          begin
    150             1                         87                   switch <= 1'b1;
    151             1                         87                   count  <= count + 1'b1;
    152                                                          end
    153                                                        else if (count == 7'd125)
    154                                                          begin
    155             1                         86                   count  <= 7'b1 ;
    156             1                         86                   switch <= 1'b1;
    157                                                          end
    158                                                        else
    159                                                          begin
    160             1                      10659                   count <= count + 1'b1;
    161             1                      10659                   switch <= 1'b0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         36        34         2    94.44%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_scl_generation --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                        count[6-0]           1           1      100.00 
                                   i_scl_gen_stall           0           0        0.00 
                                    i_sdr_ctrl_clk           1           1      100.00 
                                  i_sdr_ctrl_rst_n           1           1      100.00 
                               i_sdr_ctrl_scl_idle           1           1      100.00 
                               i_sdr_scl_gen_pp_od           1           1      100.00 
                                       i_timer_cas           1           1      100.00 
                                             o_scl           1           1      100.00 
                                    o_scl_neg_edge           1           1      100.00 
                                    o_scl_pos_edge           1           1      100.00 
                                             state           1           1      100.00 
                                            switch           1           1      100.00 

Total Node Count     =         18 
Toggled Node Count   =         17 
Untoggled Node Count =          1 

Toggle Coverage      =      94.44% (34 of 36 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_scl_staller
=== Design Unit: work.scl_staller
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         5         2         3    40.00%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_scl_staller

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File scl_staller.v
------------------------------------IF Branch------------------------------------
    36                                         2     Count coming in to IF
    36              1                          1       if(~i_stall_rst_n)
    41              1                    ***0***       else if(i_stall_flag)
                                               1     All False Count
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    43                                   ***0***     Count coming in to IF
    43              1                    ***0***           if (i_stall_cycles == count)  
    49              1                    ***0***           else 
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       1         0         1     0.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_scl_staller --

  File scl_staller.v
----------------Focused Condition View-------------------
Line       43 Item    1  (i_stall_cycles == count)
Condition totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_stall_cycles == count)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:    ***0***  (i_stall_cycles == count)_0  -                             
  Row   2:    ***0***  (i_stall_cycles == count)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       8         4         4    50.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_scl_staller --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File scl_staller.v
    23                                               module scl_staller(
    24                                               input wire       i_stall_clk ,
    25                                               input wire       i_stall_rst_n,
    26                                               input wire       i_stall_flag,
    27                                               input wire [3:0] i_stall_cycles,
    28                                               output reg       o_stall_done,
    29                                               output reg       o_scl_stall
    30                                                   );
    31                                                   
    32              1                          1      reg [3:0] count = 4'b0 ;
    33                                                   
    34              1                          2     always@(posedge i_stall_clk or negedge i_stall_rst_n)
    35                                                begin 
    36                                                 if(~i_stall_rst_n)
    37                                                   begin 
    38              1                          1           o_scl_stall <= 1'b0 ;
    39              1                          1           count <= 4'b0 ;
    40                                                   end
    41                                                 else if(i_stall_flag)
    42                                                   begin
    43                                                     if (i_stall_cycles == count)  
    44                                                       begin
    45              1                    ***0***                 o_scl_stall <= 1'b0 ;
    46              1                    ***0***                 count <= 4'b0 ;
    47              1                    ***0***                 o_stall_done <= 1'b1;
    48                                                       end        
    49                                                     else 
    50                                                       begin      
    51                                                            
    52              1                    ***0***     count <= count + 4'b1 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         26         4        22    15.38%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_scl_staller --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                        count[3-0]           0           0        0.00 
                                       i_stall_clk           1           1      100.00 
                               i_stall_cycles[0-3]           0           0        0.00 
                                      i_stall_flag           0           0        0.00 
                                     i_stall_rst_n           1           1      100.00 
                                       o_scl_stall           0           0        0.00 
                                      o_stall_done           0           0        0.00 

Total Node Count     =         13 
Toggled Node Count   =          2 
Untoggled Node Count =         11 

Toggle Coverage      =      15.38% (4 of 26 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_reg_file
=== Design Unit: work.reg_file
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         7         6         1    85.71%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_reg_file

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File reg_file_new.v
------------------------------------IF Branch------------------------------------
    162                                      142     Count coming in to IF
    162             1                          1      		if (!i_regf_rst_n)
    257             1                        141      		else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    301                                      141     Count coming in to IF
    301             1                         58      		    if (i_regf_rd_en && !i_regf_wr_en)  // read // enable should be a pulse
    305             1                         75      		    else if (i_regf_wr_en && !i_regf_rd_en)  // write
                                               8     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    311                                      141     Count coming in to IF
    311             1                    ***0***      			if (reg_array[409][0] && reg_array[405][1]) //CRCAP1[0] supports hot-join & HJ_CFG[2] enables hot-join
    316             1                        141      			else
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         2         4    33.33%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_reg_file --

  File reg_file_new.v
----------------Focused Condition View-------------------
Line       301 Item    1  (i_regf_rd_en && ~i_regf_wr_en)
Condition totals: 1 of 2 input terms covered = 50.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  i_regf_rd_en         Y
  i_regf_wr_en         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_regf_rd_en_0        -                             
  Row   2:          1  i_regf_rd_en_1        ~i_regf_wr_en                 
  Row   3:          1  i_regf_wr_en_0        i_regf_rd_en                  
  Row   4:    ***0***  i_regf_wr_en_1        i_regf_rd_en                  

----------------Focused Condition View-------------------
Line       305 Item    1  (i_regf_wr_en && ~i_regf_rd_en)
Condition totals: 1 of 2 input terms covered = 50.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  i_regf_wr_en         Y
  i_regf_rd_en         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_regf_wr_en_0        -                             
  Row   2:          1  i_regf_wr_en_1        ~i_regf_rd_en                 
  Row   3:          1  i_regf_rd_en_0        i_regf_wr_en                  
  Row   4:    ***0***  i_regf_rd_en_1        i_regf_wr_en                  

----------------Focused Condition View-------------------
Line       311 Item    1  (reg_array[409][0] && reg_array[405][1])
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  reg_array[409][0]         N  '_1' not hit             Hit '_1'
  reg_array[405][1]         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  reg_array[409][0]_0   -                             
  Row   2:    ***0***  reg_array[409][0]_1   reg_array[405][1]             
  Row   3:    ***0***  reg_array[405][1]_0   reg_array[409][0]             
  Row   4:    ***0***  reg_array[405][1]_1   reg_array[409][0]             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     107       105         2    98.13%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_reg_file --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File reg_file_new.v
    33                                               module reg_file #(parameter WIDTH = 8 , DEPTH = 2**12 , ADDR = 12 )
    34                                               
    35                                               	( input  wire			     i_regf_clk  		  ,   // clock , connected to the 50mhz clock , input from controller
    36                                               	  input  wire			     i_regf_rst_n	     ,  	// active low reset , input from controller
    37                                               	  input  wire			     i_regf_rd_en 	  ,  	// read data enable , input from controller
    38                                               	  input  wire			     i_regf_wr_en 	  ,  	// write data enable, pulse at the end of the last bit , input from controller
    39                                               	  input  wire [ADDR-1:0]  i_regf_addr  	  ,  	// adress of the reg file , input from controller
    40                                               	  input  wire [WIDTH-1:0] i_regf_data_wr	  ,	// data write  , input from rx
    41                                               
    42                                               
    43                                               
    44                                               /////////////////////////////////////////// HDR //////////////////////////////////////////
    45                                               	  input wire  [ADDR-1:0]  i_engine_configuration      ,   // location of configuration it has only 2 values either normal conf = 1000 or dummy conf = 900
    46                                               
    47                                               	  output reg [15:0]      o_frmcnt_data_len 			      ,
    48                                               		output reg [2:0] 		   o_cccnt_CMD_ATTR 			      ,
    49                                               		output reg [3:0]	     o_engine_TID 	 			        ,	 	
    50                                               		output reg [7:0]		   o_ccc_CMD  	 	 	 	 	        ,
    51                                               		output reg [4:0]	     o_cccnt_DEV_INDEX 	 	 	      ,
    52                                               		output reg [2:0]		   o_frmcnt_DTT  	   	 	        ,
    53                                               		output reg [2:0]		   o_engine_MODE  		 	 	      ,
    54                                               		output reg  			     o_cccnt_RnW 	 		 		        ,
    55                                               		output reg 				     o_cccnt_WROC 				        ,
    56                                               		output reg 				     o_cccnt_TOC 		 	 	 	        ,
    57                                               		output reg 				     o_engine_CP  		  	 	      ,
    58                                               ////////////////////////////////////////////////////////////////////////////////////////////
    59                                               
    60                                               
    61                                               	  output reg              o_ser_rx_tx		  			   ,
    62                                               	  output reg  [WIDTH-1:0] o_regf_data_rd    			   ,	// data read   ,  output to tx
    63                                               	  output reg  [WIDTH-1:0] o_regf_num_frames 	 		   ,	
    64                                               	  //outputs for crh
    65                                               	  output reg  [WIDTH-1:0] o_crh_CRHDLY	 	 	  			,
    66                                               	  output reg  [WIDTH-1:0] o_crh_getstatus_data 			,
    67                                               	  output reg  [WIDTH-1:0] o_crh_CRCAP2	 	 	  			,
    68                                               	  output reg  [WIDTH-1:0] o_crh_PRECR	 	 	  			,
    69                                               	  output reg  [WIDTH-1:0] o_crh_cfg_reg	 	  			,
    70                                               	  output reg  [WIDTH-1:0] o_crh_tgts_count     			,
    71                                               	  output reg  [WIDTH-1:0] o_regf_ibi_cfg 	     			,
    72                                               	  output reg  [WIDTH-1:0] o_regf_ibi_payload_size_reg ,
    73                                               	  output reg  [WIDTH-1:0] o_i_ibi_tgt_address 			,
    74                                               	  output wire [2:0]       o_regf_hj_cfg     				,
    75                                               	  output wire             o_regf_hj_support 
    76                                               	 );
    77                                               
    78                                               
    79                                               //--------------------------------- parameters and defines in RegFile ------------------------------------------	
    80                                               localparam ARBITRATION_REG_ADDRESS = 8'd48; 	
    81                                               localparam IBI_CFG_REG_ADDRESS ='d101;	
    82                                               localparam PAYLOAD_SIZE_REG_ADDRESS ='d102;
    83                                               localparam EVENT_DISABLE_DIRECT_CCC_ADDRESS = 8'd103; // "Event" interrupt "DISEC" Direct location in RegFile 8'h81
    84                                               localparam EVENT_DISABLE_BDCST_CCC_ADDRESS =8'd104; //Disable "Event" interrupt "DISEC" Broadcast location in RegFile 8'h01
    85                                               localparam MDB_ADDRESS = 8'd107; //MDB location in RegFile
    86                                               localparam BDCST_WRITE_ADDRESS = 8'd46; //  write for broadcasring location in RegFile 8'h7E
    87                                               localparam EVENT_DISABLE_BYTE_ADDRESS=10'd392; //Disable Target Events Command Byte location in RegFile
    88                                               
    89                                               //////////////////              CONTROLLER ROLE HANDOFF PARAMETERS              /////////////////
    90                                                localparam BROADCAST_ADDR_REG_FILE = 12'd46 ; //broadcast address in reg file (7E+w)
    91                                                localparam ARBITRATION_ADDR_REG_FILE = 9'd48 ; //arbitration address 
    92                                                localparam TARGET_ADDR_REG_FILE =  9'd0   ; 
    93                                                localparam GETSTATUS_ADDR_REG_FILE = 9'd387 ; 
    94                                                localparam GETMXDS_ADDR_REG_FILE = 9'd381    ; 
    95                                                localparam GETCAPS_ADDR_REG_FILE = 9'd384    ; 
    96                                                localparam DISEC_ADDR_REG_FILE = 9'd104    ; 
    97                                                localparam ENTAS0_ADDR_REG_FILE = 9'd393    ;
    98                                                localparam ENTAS1_ADDR_REG_FILE = 9'd394    ;
    99                                                localparam ENTAS2_ADDR_REG_FILE = 9'd395    ;
    100                                               localparam ENTAS3_ADDR_REG_FILE = 9'd396    ;
    101                                               localparam DEFTGTS_ADDR_REG_FILE = 9'd397   ;
    102                                               localparam GETACCCR_ADDR_REG_FILE  = 9'd389    ;
    103                                               localparam DEF_BYTE_REG_FILE = 9'd382    ;
    104                                               localparam CRCAPS1_ADDR_REG_FILE = 9'd385    ;
    105                                               localparam CRHDLY1_ADDR_REG_FILE = 9'd383    ; 
    106                                               localparam GETSTATUS_LSB_ADDR_REG_FILE = 9'd390    ;
    107                                               localparam CRCAPS2_ADDR_REG_FILE  = 9'd386    ;
    108                                               localparam PRECR_ADDR_REG_FILE = 9'd388 ; 
    109                                               localparam CRH_CFG_REG_FILE = 9'd407 ;
    110                                               localparam TGTS_COUNT_REG_FILE = 9'd35 ;
    111                                               localparam GETSTATUS_MSB_ADDR_REG_FILE = 9'd408 ;
    112                                               localparam DISEC_DATA_ADDR_REG_FILE  =  9'd406   ;
    113                                              
    114                                              
    115                                              
    116                                               localparam DUMMY_CONFIGURATION = 12'd450 ;
    117                                              //--------------------------------- ----------------------------------- ------------------------------------------	
    118                                              	
    119                                              
    120                                              
    121                                               reg [WIDTH-1:0] reg_array [DEPTH-1:0] ;  // 32 entry * 8 bits
    122                                               integer I, J ,K ;
    123                                              
    124                                              /////////////////////////////////////////////      HDR     ///////////////////////////////////////////////////////
    125                                              reg [31:0] DWORD_0_Vector ;
    126                                              reg [31:0] DWORD_1_Vector ;
    127                                              
    128             1                         65     always @(*) begin 
    129             1                         65     	DWORD_0_Vector [7:0]   = reg_array [i_engine_configuration] ;
    130             1                         65     	DWORD_0_Vector [15:8]  = reg_array [i_engine_configuration + 1] ;
    131             1                         65     	DWORD_0_Vector [23:16] = reg_array [i_engine_configuration + 2] ;  
    132             1                         65     	DWORD_0_Vector [31:24] = reg_array [i_engine_configuration + 3] ;  
    133                                              
    134             1                         65     	DWORD_1_Vector [7:0]   = reg_array [i_engine_configuration + 4] ;
    135             1                         65     	DWORD_1_Vector [15:8]  = reg_array [i_engine_configuration + 5] ;
    136             1                         65     	DWORD_1_Vector [23:16] = reg_array [i_engine_configuration + 6] ;  
    137             1                         65     	DWORD_1_Vector [31:24] = reg_array [i_engine_configuration + 7] ; 
    138                                              end 
    139                                              
    140                                              //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    141                                              
    142                                              
    143                                              
    144                                              
    145                                              
    146                                              
    147                                              
    148                                              
    149                                              
    150                                              
    151                                              
    152                                              
    153                                              
    154                                                // Always checking on bit 0 of the frame, but we will only read it in ACK state when the data is Address 
    155                                                //assign o_ser_rx_tx  = reg_array[0][0] ; 
    156                                              
    157             1                         66     assign o_regf_hj_cfg      = reg_array[405][2:0] ;
    158             1                         66     assign o_regf_hj_support  = reg_array[409][0]   ;
    159                                              
    160             1                        142      always @(posedge i_regf_clk or negedge i_regf_rst_n)
    161                                               	begin: regf_file_always
    162                                               		if (!i_regf_rst_n)
    163                                               			begin
    164                                               				
    165                                               				/////////////////////////////////////////////      HDR     ///////////////////////////////////////////////////////
    166                                               				// DWORD0 for Dummy configuration .. that's a fixed configurations that doesn't change so it's made on the reset condition
    167                                               				// so whenever is needed to excute this dummy configuration the engine just has to give the input "i_engine_configuration" a value equals "DUMMY_CONFIGURATION" value .. say 'd 900
    168             1                          1      				reg_array[DUMMY_CONFIGURATION]     <= 8'b1000_0001 ;		// 413
    169             1                          1      				reg_array[DUMMY_CONFIGURATION + 1] <= 8'b1000_1111 ;		// 414
    170             1                          1      				reg_array[DUMMY_CONFIGURATION + 2] <= 8'b0000_0000 ;		// 415
    171             1                          1      				reg_array[DUMMY_CONFIGURATION + 3] <= 8'b0001_1000 ;		// 416 
    172                                              
    173                                              				//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    174                                              
    175                                              
    176                                              
    177                                              
    178             1                          1      				o_regf_data_rd    <= 'b0 ;
    179             1                          1      				o_regf_num_frames <= 'b0 ;     // editted by nour
    180             1                          1     				o_regf_ibi_cfg  <= 'b0 ;
    181             1                          1      		   		o_regf_ibi_payload_size_reg <= 'b0 ;
    182             1                          1      		   		o_i_ibi_tgt_address <= 'b0 ;
    183                                              
    184             1                          1      				reg_array[TARGET_ADDR_REG_FILE]   <= 8'b10101000   	 ; // Target Address , Address[0] = 0 for TX, 1 for RX
    185             1                          1      				reg_array[1]   <= 'b00000010    ; // Number of frames
    186             1                          1      				reg_array[2]   <= 'b00000001  	 ;
    187             1                          1      				reg_array[3]   <= 'b00000010  	 ;
    188             1                          1      				reg_array[4]   <= 'b00000110  	 ;
    189                                              
    190                                              
    191             1                          1      				for (I=5; I < 46 ; I = I +1) // SDR RX Data bytes
    191             2                         41     
    192             1                         41     	 			reg_array[I] <= 'b0 ;
    193                                              
    194             1                          1                for (J=50; J < 381 ; J = J +1) // UNUSED
    194             2                        331     
    195             1                        331                     reg_array[J] <= 'b0 ;
    196                                              
    197             1                          1      				reg_array[46]  <= 'b11111100 ; // 7'h7E broadcast address with rnw = 0 *write*
    198             1                          1      				reg_array[47]  <= 'b11111101 ; // 7'h7E broadcast address with rnw = 1 *read*
    199             1                          1      				reg_array[49]  <= 'b00000111 ; // ENTDAA CCC
    200             1                          1      				reg_array[50]  <= 'b00100000 ; // 2024 : ENTHDR_DDR CCC (20 in hexadecimal)
    201                                              
    202                                               				//////////// Hot-Join Registers ////////////
    203             1                          1      				reg_array[401] <= 'b00000000     ;   //ENEC CCC
    204             1                          1      				reg_array[402] <= 'b00001011     ;   //ENEC BYTE //including ENINT, ENCR, ENHJ
    205             1                          1      				reg_array[403] <= 'b00000001     ;   //DISEC CCC
    206             1                          1      				reg_array[404] <= 'b00000000     ;   //DISEC BYTE //including DISINT, DISCR, DISHJ
    207                                               				//reg_array[405] <= 'bxxxxx000     ;   //HJ_CFG
    208             1                          1      				reg_array[409] <= 'bxxxxx000  	 ;   //CRCAP1 
    209                                               				//reg_array[404] <= 'bxxxx0x00     ;   //DISEC BYTE //including DISINT, DISCR, DISHJ
    210             1                          1      				reg_array[405] <= 'bxxxxx111     ;   //HJ_CFG
    211                                               				//reg_array[409] <= 'bxxxxx001  	 ;   //CRCAP1 
    212                                              
    213                                              				//////////// IBI Registers ////////////
    214             1                          1     				reg_array[BDCST_WRITE_ADDRESS]<= 'b11111101 ; //'h7E/1 BDCST Write
    215             1                          1      				reg_array[ARBITRATION_REG_ADDRESS]  <= 'b01010011 ; // Arbitration Address [7:1] = h9
    216             1                          1      				reg_array[PAYLOAD_SIZE_REG_ADDRESS] <= 'b00000011 ; // PAYLOAD MAX SIZE
    217             1                          1      				reg_array[EVENT_DISABLE_DIRECT_CCC_ADDRESS] <= 'h81       ; // "Event" interrupt "DISEC" Direct location in RegFile 8'h81
    218             1                          1      				reg_array[EVENT_DISABLE_BDCST_CCC_ADDRESS] <= 'h01; //Disable "Event" interrupt "DISEC" Broadcast location in RegFile 8'h01
    219             1                          1      				reg_array[EVENT_DISABLE_BYTE_ADDRESS] <= 'b00001011 ; // Disable Target Events Command Byte location in RegFile 8'b00001011
    220             1                          1      				reg_array[IBI_CFG_REG_ADDRESS] <= 'b00000001 ; /// Ack + mdb only 
    221                                              
    222                                                            //// controller role registers //////
    223             1                          1                    reg_array[BROADCAST_ADDR_REG_FILE]   <= {7'h7E , 1'b0} ; //broadcast address 7'h7E + W = 8'hFC  
    224             1                          1                    reg_array[GETSTATUS_ADDR_REG_FILE]   <= 'h90 ;
    225             1                          1                    reg_array[GETMXDS_ADDR_REG_FILE]   <= 'h94 ;
    226             1                          1                    reg_array[GETCAPS_ADDR_REG_FILE]   <= 'h95 ; 
    227             1                          1                    reg_array[DISEC_ADDR_REG_FILE]   <= 'h01 ;
    228             1                          1                    reg_array[ENTAS0_ADDR_REG_FILE]   <= 'h02 ;
    229             1                          1                    reg_array[ENTAS1_ADDR_REG_FILE]   <= 'h03 ;
    230             1                          1                    reg_array[ENTAS2_ADDR_REG_FILE]   <= 'h04 ;
    231             1                          1                    reg_array[ENTAS3_ADDR_REG_FILE]   <= 'h05 ;
    232             1                          1                    reg_array[DEFTGTS_ADDR_REG_FILE]   <= 'h08 ;
    233             1                          1                    reg_array[GETACCCR_ADDR_REG_FILE]   <= 'h91 ;
    234             1                          1                    reg_array[DEF_BYTE_REG_FILE]        <= 'h91 ; 
    235             1                          1                    reg_array[DISEC_DATA_ADDR_REG_FILE] <= 'h09 ; //hot join disabled + interrupts disabled
    236                                                             //for testing 
    237             1                          1                    reg_array[ARBITRATION_ADDR_REG_FILE]  <= 'b01010011 ;
    238             1                          1                    reg_array[CRHDLY1_ADDR_REG_FILE] <= 'h02 ;
    239             1                          1                    reg_array[GETSTATUS_LSB_ADDR_REG_FILE] <= 'h02 ;
    240             1                          1                    reg_array[CRCAPS2_ADDR_REG_FILE] <= 'h02 ;
    241             1                          1                    reg_array[PRECR_ADDR_REG_FILE] <= 'h02 ;
    242             1                          1                    reg_array[CRH_CFG_REG_FILE] <= 'h01 ;
    243             1                          1                    reg_array[TGTS_COUNT_REG_FILE] <= 'h02 ;
    244                                              
    245             1                          1                     for (K=454; K< DEPTH; K = K +1) 	 	
    245             2                       3642     
    246             1                       3642                     reg_array[K] <= 'b0 ;
    247                                                             
    248                                                             
    249             1                          1                    o_crh_CRHDLY <= reg_array[CRHDLY1_ADDR_REG_FILE] ;
    250             1                          1                    o_crh_getstatus_data <= reg_array[GETSTATUS_LSB_ADDR_REG_FILE] ;
    251             1                          1                    o_crh_CRCAP2 <= reg_array[CRCAPS2_ADDR_REG_FILE] ;
    252             1                          1                    o_crh_PRECR <= reg_array[PRECR_ADDR_REG_FILE] ;
    253             1                          1                    o_crh_cfg_reg <= reg_array[CRH_CFG_REG_FILE] ;
    254             1                          1                    o_crh_tgts_count <= reg_array[TGTS_COUNT_REG_FILE] ; 
    255                                              
    256                                               			end
    257                                               		else
    258                                               		  begin
    259                                              
    260                                              
    261                                               		  	/////////////////////////////////////////////      HDR     ///////////////////////////////////////////////////////
    262             1                        141      		  		o_frmcnt_data_len <= DWORD_1_Vector [31:16] ;
    263                                              
    264             1                        141      		  		o_cccnt_CMD_ATTR  <= DWORD_0_Vector [2:0]   ;
    265             1                        141      		  		o_engine_TID 	 	<= DWORD_0_Vector [6:3]   ;
    266             1                        141      		  		o_ccc_CMD  	 	 	<= DWORD_0_Vector [14:7]  ;
    267             1                        141      		  		o_engine_CP  		<= DWORD_0_Vector [15]    ;
    268             1                        141      		  		o_cccnt_DEV_INDEX <= DWORD_0_Vector [20:16] ;
    269             1                        141      		  		o_frmcnt_DTT  	   <= DWORD_0_Vector [25:23] ;
    270             1                        141      		  		o_engine_MODE  	<= DWORD_0_Vector [28:26] ;
    271             1                        141      		  		o_cccnt_RnW 	 	<= DWORD_0_Vector [29]    ;
    272             1                        141      		  		o_cccnt_WROC 		<= DWORD_0_Vector [30]    ;
    273             1                        141      		  		o_cccnt_TOC 		<= DWORD_0_Vector [31]    ;
    274                                              
    275                                              
    276             1                        141      		  		reg_array [i_engine_configuration - 1] = 8'b0000_0000 ; //zerozzzz location to ba serialized in ZEROS state 
    277                                              
    278                                              			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    279                                              
    280                                              
    281                                              
    282                                              
    283                                              
    284                                              
    285                                              
    286             1                        141      		    o_crh_CRHDLY <= reg_array[CRHDLY1_ADDR_REG_FILE] ;
    287             1                        141                                      o_crh_getstatus_data <= reg_array[GETSTATUS_LSB_ADDR_REG_FILE] ;
    288             1                        141                                      o_crh_CRCAP2 <= reg_array[CRCAPS2_ADDR_REG_FILE] ;
    289             1                        141                                      o_crh_PRECR <= reg_array[PRECR_ADDR_REG_FILE] ;
    290             1                        141                                      o_crh_cfg_reg <= reg_array[CRH_CFG_REG_FILE] ;
    291             1                        141                                      o_crh_tgts_count <= reg_array[TGTS_COUNT_REG_FILE] ; 
    292                                                                               
    293                                                                                                        
    294             1                        141      		    o_regf_num_frames <= reg_array[1]     ; //editted by nour
    295             1                        141     		    o_ser_rx_tx       <= reg_array [0][0] ; //Yaseen's Edit
    296                                              
    297             1                        141     		   o_regf_ibi_cfg  <= reg_array[IBI_CFG_REG_ADDRESS];
    298             1                        141      		   o_regf_ibi_payload_size_reg <= reg_array[PAYLOAD_SIZE_REG_ADDRESS];
    299             1                        141      		   o_i_ibi_tgt_address <= reg_array[ARBITRATION_REG_ADDRESS]; //Arbitrated Address
    300                                              			
    301                                               		    if (i_regf_rd_en && !i_regf_wr_en)  // read // enable should be a pulse
    302                                               			  begin
    303             1                         58      				o_regf_data_rd <= reg_array [i_regf_addr] ;
    304                                               			  end
    305                                               		    else if (i_regf_wr_en && !i_regf_rd_en)  // write
    306                                               			  begin
    307             1                         75      			  	reg_array [i_regf_addr] <= i_regf_data_wr ;
    308                                               			  end
    309                                              
    310                                               			//////////// ENHJ/DISHJ Defining-Bits Logic ////////////
    311                                               			if (reg_array[409][0] && reg_array[405][1]) //CRCAP1[0] supports hot-join & HJ_CFG[2] enables hot-join
    312                                               				begin
    313             1                    ***0***      					reg_array[402][3] <= 1'b1 ; //ENEC_BYTE[3]  >> ENHJ=1
    314             1                    ***0***      					reg_array[404][3] <= 1'b0 ; //DISEC_BYTE[3] >> DISHJ=0
    315                                               				end
    316                                               			else
    317                                               				begin
    318             1                        141      					reg_array[402][3] <= 1'b0 ; //ENEC_BYTE[3]  >> ENHJ=0
    319             1                        141      					reg_array[404][3] <= 1'b1 ; //DISEC_BYTE[3] >> DISHJ=1

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        670       227       443    33.88%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_reg_file --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                             DWORD_0_Vector[31-29]           1           1      100.00 
                             DWORD_0_Vector[28-27]           0           1       50.00 
                                DWORD_0_Vector[26]           0           0        0.00 
                             DWORD_0_Vector[25-14]           1           1      100.00 
                             DWORD_0_Vector[13-12]           0           0        0.00 
                             DWORD_0_Vector[11-10]           1           1      100.00 
                                 DWORD_0_Vector[9]           0           0        0.00 
                               DWORD_0_Vector[8-3]           1           1      100.00 
                               DWORD_0_Vector[2-1]           0           0        0.00 
                                 DWORD_0_Vector[0]           1           1      100.00 
                             DWORD_1_Vector[31-24]           0           0        0.00 
                             DWORD_1_Vector[23-15]           1           1      100.00 
                                DWORD_1_Vector[14]           0           0        0.00 
                             DWORD_1_Vector[13-11]           1           1      100.00 
                                DWORD_1_Vector[10]           0           1       50.00 
                               DWORD_1_Vector[9-0]           1           1      100.00 
                                           I[31-0]           0           0        0.00 
                                           J[31-0]           0           0        0.00 
                                           K[31-0]           0           0        0.00 
                      i_engine_configuration[0-11]           0           0        0.00 
                                  i_regf_addr[0-9]           1           1      100.00 
                                i_regf_addr[10-11]           1           0       50.00 
                                        i_regf_clk           1           1      100.00 
                               i_regf_data_wr[0-7]           1           1      100.00 
                                      i_regf_rd_en           1           1      100.00 
                                      i_regf_rst_n           1           1      100.00 
                                      i_regf_wr_en           1           1      100.00 
                                      o_ccc_CMD[7]           1           1      100.00 
                                    o_ccc_CMD[6-5]           0           0        0.00 
                                    o_ccc_CMD[4-3]           1           1      100.00 
                                      o_ccc_CMD[2]           0           0        0.00 
                                    o_ccc_CMD[1-0]           1           1      100.00 
                             o_cccnt_CMD_ATTR[2-1]           0           0        0.00 
                               o_cccnt_CMD_ATTR[0]           1           1      100.00 
                            o_cccnt_DEV_INDEX[4-0]           1           1      100.00 
                                       o_cccnt_RnW           1           1      100.00 
                                       o_cccnt_TOC           1           1      100.00 
                                      o_cccnt_WROC           1           1      100.00 
                                 o_crh_CRCAP2[7-0]           0           0        0.00 
                                 o_crh_CRHDLY[7-0]           0           0        0.00 
                                  o_crh_PRECR[7-0]           0           0        0.00 
                                o_crh_cfg_reg[7-0]           0           0        0.00 
                         o_crh_getstatus_data[7-0]           0           0        0.00 
                             o_crh_tgts_count[7-0]           0           0        0.00 
                                       o_engine_CP           1           1      100.00 
                                o_engine_MODE[2-1]           0           1       50.00 
                                  o_engine_MODE[0]           0           0        0.00 
                                 o_engine_TID[3-0]           1           1      100.00 
                                 o_frmcnt_DTT[2-0]           1           1      100.00 
                           o_frmcnt_data_len[15-8]           0           0        0.00 
                            o_frmcnt_data_len[7-0]           1           1      100.00 
                            o_i_ibi_tgt_address[7]           0           0        0.00 
                            o_i_ibi_tgt_address[6]           0           1       50.00 
                            o_i_ibi_tgt_address[5]           0           0        0.00 
                            o_i_ibi_tgt_address[4]           0           1       50.00 
                          o_i_ibi_tgt_address[3-2]           0           0        0.00 
                          o_i_ibi_tgt_address[1-0]           0           1       50.00 
                               o_regf_data_rd[7-0]           1           1      100.00 
                                o_regf_hj_cfg[0-2]           0           0        0.00 
                                 o_regf_hj_support           0           0        0.00 
                               o_regf_ibi_cfg[7-1]           0           0        0.00 
                                 o_regf_ibi_cfg[0]           0           1       50.00 
                  o_regf_ibi_payload_size_reg[7-2]           0           0        0.00 
                  o_regf_ibi_payload_size_reg[1-0]           0           1       50.00 
                            o_regf_num_frames[7-2]           0           0        0.00 
                              o_regf_num_frames[1]           0           1       50.00 
                              o_regf_num_frames[0]           0           0        0.00 
                                       o_ser_rx_tx           0           0        0.00 

Total Node Count     =        335 
Toggled Node Count   =        106 
Untoggled Node Count =        229 

Toggle Coverage      =      33.88% (227 of 670 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_clk_divider
=== Design Unit: work.clk_divider
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_clk_divider

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File clk_divider.v
------------------------------------IF Branch------------------------------------
    41                                     21671     Count coming in to IF
    41              1                          2         if(!i_rst_n)
    46              1                      21669         else 
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       3         3         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_clk_divider --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File clk_divider.v
    32                                               module clk_divider (
    33                                               	                input   wire    i_clk_in   ,  // XC7S15 FTGB196ABX FPGA Clk >> 100 MHZ (10 ns) 
    34                                               	                input   wire    i_rst_n    ,
    35                                               	                output  reg     o_clk_out );  // output divided clk by 2 >> 50 MHZ (20 ns)
    36                                               
    37                                               
    38              1                      21671     always @(posedge i_clk_in or negedge i_rst_n)
    39                                                 begin: clk_divider_by_2
    40                                               
    41                                                   if(!i_rst_n)
    42                                                     begin 
    43              1                          2             o_clk_out <= 1'b0 ;
    44                                                     end 
    45                                               
    46                                                   else 
    47                                                     begin 
    48              1                      21669             o_clk_out <= ~o_clk_out;  // delay of one clock cycle will be done by default so no need to count 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          6         6         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_clk_divider --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                          i_clk_in           1           1      100.00 
                                           i_rst_n           1           1      100.00 
                                         o_clk_out           1           1      100.00 

Total Node Count     =          3 
Toggled Node Count   =          3 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (6 of 6 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_enthdr
=== Design Unit: work.enthdr
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        18        17         1    94.44%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_enthdr

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ENTHDR.v
------------------------------------IF Branch------------------------------------
    76                                     10835     Count coming in to IF
    76              1                          1          if(!i_rst_n)
    88              1                      10834          else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    99                                     10834     Count coming in to CASE
    100             1                         25                IDLE:         
    127             1                       1977                BROADCAST:  
    153             1                       1261                ACK:         
    176             1                       7446                ENTHDR_DDR: 
    197             1                        125                PARITY:     
    217             1                    ***0***                default:
Branch totals: 5 hits of 6 branches = 83.33%

------------------------------------IF Branch------------------------------------
    105                                       25     Count coming in to IF
    105             1                          2                    if (i_i3cengine_en)
    117             1                         23                    else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    130                                     1977     Count coming in to IF
    130             1                          2                  if (i_tx_mode_done && i_scl_neg_edge )  // ****(scl neg edge condition check)
    138             1                       1975                  else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    156                                     1261     Count coming in to IF
    156             1                          2                  if(!i_rx_ack_nack && i_scl_neg_edge && i_rx_mode_done ) //if ACK next state is ENTHDR_DDR
    165             1                       1259                  else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    178                                     7446     Count coming in to IF
    178             1                          1                  if(i_tx_mode_done && i_scl_neg_edge)     // ****(scl neg edge condition check)
    185             1                       7445                  else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    199                                      125     Count coming in to IF
    199             1                          1                   if(i_tx_mode_done && i_scl_neg_edge )    ///*** T bit completion plus scl falling edge condition should be added
    206             1                        124                   else
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       9         8         1    88.88%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_enthdr --

  File ENTHDR.v
----------------Focused Condition View-------------------
Line       130 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         Y
  i_scl_neg_edge         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_tx_mode_done_0      -                             
  Row   2:          1  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:          1  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:          1  i_scl_neg_edge_1      i_tx_mode_done                

----------------Focused Condition View-------------------
Line       156 Item    1  ((~i_rx_ack_nack && i_scl_neg_edge) && i_rx_mode_done)
Condition totals: 2 of 3 input terms covered = 66.66%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
   i_rx_ack_nack         Y
  i_scl_neg_edge         Y
  i_rx_mode_done         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_rx_ack_nack_0       (i_rx_mode_done && i_scl_neg_edge)
  Row   2:          1  i_rx_ack_nack_1       -                             
  Row   3:          1  i_scl_neg_edge_0      ~i_rx_ack_nack                
  Row   4:          1  i_scl_neg_edge_1      (i_rx_mode_done && ~i_rx_ack_nack)
  Row   5:    ***0***  i_rx_mode_done_0      (~i_rx_ack_nack && i_scl_neg_edge)
  Row   6:          1  i_rx_mode_done_1      (~i_rx_ack_nack && i_scl_neg_edge)

----------------Focused Condition View-------------------
Line       178 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         Y
  i_scl_neg_edge         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_tx_mode_done_0      -                             
  Row   2:          1  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:          1  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:          1  i_scl_neg_edge_1      i_tx_mode_done                

----------------Focused Condition View-------------------
Line       199 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         Y
  i_scl_neg_edge         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_tx_mode_done_0      -                             
  Row   2:          1  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:          1  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:          1  i_scl_neg_edge_1      i_tx_mode_done                


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       5         5         0   100.00%
    FSM Transitions                  8         5         3    62.50%

================================FSM Details================================

FSM Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_enthdr --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 100                IDLE                   0
 127           BROADCAST                   1
 153                 ACK                   3
 176          ENTHDR_DDR                   2
 197              PARITY                   6
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                  25          
               BROADCAST                1977          
                     ACK                1261          
              ENTHDR_DDR                7447          
                  PARITY                 125          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 107                   0                   2          IDLE -> BROADCAST             
 132                   1                   2          BROADCAST -> ACK              
 158                   3                   2          ACK -> ENTHDR_DDR             
 180                   5                   1          ENTHDR_DDR -> PARITY          
 202                   7                   1          PARITY -> IDLE                
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
  78                   2          BROADCAST -> IDLE   
  78                   4          ACK -> IDLE         
  78                   6          ENTHDR_DDR -> IDLE  


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   5         5         0   100.00%
        FSM Transitions              8         5         3    62.50%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      81        73         8    90.12%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_enthdr --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ENTHDR.v
    33                                               module enthdr (
    34                                                 input   wire             i_clk           ,
    35                                                 input   wire             i_rst_n         ,
    36                                                 input   wire             i_i3cengine_en  ,
    37                                                 input   wire             i_tx_mode_done  ,
    38                                                 input   wire             i_rx_ack_nack   ,
    39                                                 input   wire             i_scl_neg_edge  ,
    40                                                 input   wire             i_rx_mode_done  ,
    41                                                 input   wire             i_scl_pos_edge  ,
    42                                                 
    43                                                 output  wire             o_pp_od         , 
    44                                                 output  reg              o_bit_cnt_en    ,   
    45                                                 output  reg              o_regf_rd_en    ,
    46                                                 output  reg     [11:0]   o_regf_addr     ,
    47                                                 output  reg              o_tx_en         ,
    48                                                 output  reg     [2:0]    o_tx_mode       ,
    49                                                 output  reg              o_rx_en         ,
    50                                                 output  reg     [2:0]    o_rx_mode       ,
    51                                                 output  reg              o_i3cengine_done       // Flag to indicate that the CCC is sent               
    52                                                 );
    53                                               
    54                                               
    55                                                //----------------Internal Signals----------------//
    56                                                
    57                                                reg [2:0] state;
    58                                                
    59                                                
    60                                                //----------------States Encoding----------------//
    61                                                localparam IDLE         = 3'b000 ;
    62                                                localparam BROADCAST    = 3'b001 ;
    63                                                localparam ACK          = 3'b011 ;
    64                                                localparam ENTHDR_DDR   = 3'b010 ;
    65                                                localparam PARITY       = 3'b110 ; 
    66                                                
    67                                                
    68                                               
    69                                                assign o_pp_od = 1'b0  ; 
    70                                               
    71                                               
    72                                               
    73                                                //----------------ENTHDR0 CCC FSM----------------//
    74              1                      10835      always@(posedge i_clk or negedge i_rst_n)
    75                                                  begin
    76                                                    if(!i_rst_n)
    77                                                      begin
    78              1                          1              state <= IDLE;
    79              1                          1              o_regf_rd_en        <= 1'b0;
    80              1                          1              o_tx_en             <= 1'b0;
    81              1                          1              o_rx_en             <= 1'b0;
    82              1                          1              o_i3cengine_done    <= 1'b0;
    83              1                          1              o_tx_mode           <= 3'b0;
    84              1                          1              o_rx_mode           <= 3'b0;
    85              1                          1              o_regf_addr         <= 12'b0;
    86              1                          1              o_bit_cnt_en        <= 1'b0;
    87                                                      end
    88                                                    else 
    89                                                      begin
    90              1                      10834              o_regf_rd_en        <= 1'b0;
    91              1                      10834              o_tx_en             <= 1'b0;
    92              1                      10834              o_rx_en             <= 1'b0;
    93              1                      10834              o_i3cengine_done    <= 1'b0;
    94              1                      10834              o_tx_mode           <= 3'b0;
    95              1                      10834              o_rx_mode           <= 3'b0;
    96              1                      10834              o_regf_addr         <= 12'b0;
    97              1                      10834              o_bit_cnt_en        <= 1'b0;
    98                                                       
    99                                                       case(state)
    100                                                         IDLE:         
    101                                                           begin
    102             1                         25                   o_rx_en       <= 1'b1;
    103             1                         25                   o_regf_rd_en  <= 1'b1;
    104             1                         25                   o_regf_addr   <= 12'b000000101110;
    105                                                             if (i_i3cengine_en)
    106                                                                 begin
    107             1                          2                          state         <= BROADCAST;
    108             1                          2                          o_rx_en       <= 1'b1;   // rx block enable
    109             1                          2                          o_rx_mode     <= 3'b010; // arbitration state   
    110                                                                   
    111             1                          2                          o_regf_rd_en  <= 1'b1;
    112             1                          2                          o_regf_addr   <= 12'b000000101110; // 9'd46 >> broadcast address in reg file ('h7E+w)
    113             1                          2                          o_tx_en       <= 1'b1;
    114             1                          2                          o_tx_mode     <= 3'b001;         // serializing state in TX
    115             1                          2                          o_bit_cnt_en  <= 1'b1;
    116                                                                 end
    117                                                             else 
    118                                                                 begin
    119                                               
    120             1                         23                          state         <= IDLE;
    121                                                                 end
    122                                                             end
    123                                               
    124                                                           
    125                                               
    126                                               
    127                                                         BROADCAST:  
    128                                                          begin
    129                                                           
    130                                                           if (i_tx_mode_done && i_scl_neg_edge )  // ****(scl neg edge condition check)
    131                                                             begin
    132             1                          2                     state      <= ACK;
    133             1                          2                     o_rx_en    <= 1'b1;
    134             1                          2                     o_tx_en    <= 1'b0;
    135             1                          2                     o_rx_mode  <= 3'b000;  // ACK mode in rx   
    136             1                          2                     o_bit_cnt_en  <= 1'b0;
    137                                                             end
    138                                                           else 
    139                                                             begin
    140             1                       1975                      state <= BROADCAST; 
    141             1                       1975                      o_rx_en       <= 1'b1;   // rx block enable
    142             1                       1975                      o_rx_mode     <= 3'b010; // arbitration state   
    143                                                               
    144             1                       1975                      o_regf_rd_en  <= 1'b1;
    145             1                       1975                      o_regf_addr   <= 12'b000000101110; // 9'd46 >> broadcast address in reg file ('h7E+w)
    146             1                       1975                      o_tx_en       <= 1'b1;
    147             1                       1975                      o_tx_mode     <= 3'b001;         // serializing state in TX
    148             1                       1975                      o_bit_cnt_en  <= 1'b1;
    149                                                             end
    150                                                          end
    151                                               
    152                                               
    153                                                         ACK:         
    154                                                          begin
    155                                               
    156                                                           if(!i_rx_ack_nack && i_scl_neg_edge && i_rx_mode_done ) //if ACK next state is ENTHDR_DDR
    157                                                             begin
    158             1                          2                      state               <= ENTHDR_DDR;
    159             1                          2                      o_regf_rd_en        <= 1'b1;  
    160             1                          2                      o_regf_addr         <= 'd50;  //*** DDR Mode value added in the regfile but needs to be rechecked  
    161             1                          2                      o_tx_mode           <= 3'b001;
    162             1                          2                      o_tx_en             <= 1'b1;
    163             1                          2                       o_bit_cnt_en       <= 1'b1;                
    164                                                             end
    165                                                           else 
    166                                                             begin
    167             1                       1259                      state <= ACK;    //*** check: if not ack is received, what should be done?
    168             1                       1259                      o_rx_en    <= 1'b1;
    169             1                       1259                      o_tx_en    <= 1'b0;
    170             1                       1259                      o_rx_mode  <= 3'b000;  // ACK mode in rx   
    171             1                       1259                      o_bit_cnt_en  <= 1'b0;
    172                                                             end
    173                                                           end
    174                                               
    175                                               
    176                                                         ENTHDR_DDR: 
    177                                                          begin
    178                                                           if(i_tx_mode_done && i_scl_neg_edge)     // ****(scl neg edge condition check)
    179                                                             begin
    180             1                          1                      state         <= PARITY;  // next state is parity to send the T bit
    181             1                          1                      o_tx_en       <= 1'b1;
    182             1                          1                      o_tx_mode     <= 3'b011;
    183             1                          1                      o_bit_cnt_en  <= 1'b1;
    184                                                             end
    185                                                           else
    186                                                             begin
    187             1                       7445                      state               <= ENTHDR_DDR;
    188             1                       7445                      o_regf_rd_en        <= 1'b1;  
    189             1                       7445                      o_regf_addr         <= 'd50;  //*** DDR Mode value added in the regfile but needs to be rechecked  
    190             1                       7445                      o_tx_mode           <= 3'b001;
    191             1                       7445                      o_tx_en             <= 1'b1;
    192             1                       7445                      o_bit_cnt_en        <= 1'b1; 
    193                                                             end
    194                                                           end
    195                                               
    196                                               
    197                                                         PARITY:     
    198                                                          begin
    199                                                            if(i_tx_mode_done && i_scl_neg_edge )    ///*** T bit completion plus scl falling edge condition should be added
    200                                                             begin
    201             1                          1                      o_i3cengine_done <= 1'b1;
    202             1                          1                      state            <= IDLE;
    203             1                          1                      o_bit_cnt_en     <= 1'b0;
    204             1                          1                      o_tx_en          <= 1'b0;
    205                                                             end
    206                                                            else
    207                                                             begin
    208             1                        124                      o_i3cengine_done <= 1'b0;
    209             1                        124                      state            <= PARITY;
    210             1                        124                      o_bit_cnt_en     <= 1'b1;
    211             1                        124                      o_tx_en          <= 1'b1;
    212             1                        124                      o_tx_mode        <= 3'b011;
    213                                                             
    214                                                             end
    215                                                           end
    216                                              
    217                                                         default:
    218                                                          begin
    219             1                    ***0***                  o_regf_rd_en        <= 1'b0;
    220             1                    ***0***                  o_tx_en             <= 1'b0;
    221             1                    ***0***                  o_rx_en             <= 1'b0;
    222             1                    ***0***                  o_i3cengine_done    <= 1'b0;
    223             1                    ***0***                  o_tx_mode           <= 3'b0;
    224             1                    ***0***                  o_rx_mode           <= 3'b0;
    225             1                    ***0***                  o_regf_addr         <= 12'b0;
    226             1                    ***0***                  state               <= IDLE;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         70        48        22    68.57%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_enthdr --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                             i_clk           1           1      100.00 
                                    i_i3cengine_en           1           1      100.00 
                                           i_rst_n           1           1      100.00 
                                     i_rx_ack_nack           1           1      100.00 
                                    i_rx_mode_done           1           1      100.00 
                                    i_scl_neg_edge           1           1      100.00 
                                    i_scl_pos_edge           1           1      100.00 
                                    i_tx_mode_done           1           1      100.00 
                                      o_bit_cnt_en           1           1      100.00 
                                  o_i3cengine_done           1           1      100.00 
                                           o_pp_od           0           0        0.00 
                                 o_regf_addr[11-6]           0           0        0.00 
                                  o_regf_addr[5-1]           1           1      100.00 
                                    o_regf_addr[0]           0           0        0.00 
                                      o_regf_rd_en           1           1      100.00 
                                           o_rx_en           1           1      100.00 
                                      o_rx_mode[2]           0           0        0.00 
                                      o_rx_mode[1]           1           1      100.00 
                                      o_rx_mode[0]           0           0        0.00 
                                           o_tx_en           1           1      100.00 
                                      o_tx_mode[2]           0           0        0.00 
                                    o_tx_mode[1-0]           1           1      100.00 
                                        state[2-0]           1           1      100.00 

Total Node Count     =         35 
Toggled Node Count   =         24 
Untoggled Node Count =         11 

Toggle Coverage      =      68.57% (48 of 70 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_hdr_engine
=== Design Unit: work.hdr_engine
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        21         8        13    38.09%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_hdr_engine

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File HDR_Engine.v
------------------------------------IF Branch------------------------------------
    80                                        33     Count coming in to IF
    80              1                          1         if (!i_sys_rst_n) 
    90              1                          4         else if (i_i3cengine_hdrengine_en)
    249             1                         28         else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    94                                         4     Count coming in to CASE
    95              1                          1               IDLE : begin
    135             1                          3               CCC : begin
    201             1                    ***0***               DDR_MODE : begin
                                         ***0***     All False Count
Branch totals: 2 hits of 4 branches = 50.00%

------------------------------------IF Branch------------------------------------
    96                                         1     Count coming in to IF
    96              1                          1                   if(i_CP) begin
    117             1                    ***0***                   else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    136                                        3     Count coming in to IF
    136             1                          2                 if((i_TOC && i_ccc_done)||(i_MODE != 'd6)) begin     // ||(i_MODE != 'd6) assuming mode will not be changed unless an exit pattern was sent before it. -laila
    143             1                    ***0***                 else if ((!i_TOC && i_ccc_done) && (i_MODE == 'd6)) begin
    195             1                          1                 else
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    149                                  ***0***     Count coming in to IF
    149             1                    ***0***                       if(!i_CP) 
    156             1                    ***0***                       else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    164                                  ***0***     Count coming in to IF
    164             1                    ***0***                       if(i_ccc_done && ccc_done && !i_CP ) begin
    181             1                    ***0***                       else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    202                                  ***0***     Count coming in to IF
    202             1                    ***0***                 if ((i_TOC && i_ddr_mode_done)||(i_MODE != 'd6)) begin
    207             1                    ***0***                 else if ((!i_TOC && i_ddr_mode_done) && (i_MODE == 'd6)) begin
    242             1                    ***0***                 else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    211                                  ***0***     Count coming in to IF
    211             1                    ***0***                       if (!i_CP) begin
    226             1                    ***0***                       else begin
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      15         1        14     6.66%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_hdr_engine --

  File HDR_Engine.v
----------------Focused Condition View-------------------
Line       136 Item    1  ((i_TOC && i_ccc_done) || (i_MODE != 6))
Condition totals: 1 of 3 input terms covered = 33.33%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
          i_TOC         N  '_0' not hit             Hit '_0'
     i_ccc_done         Y
  (i_MODE != 6)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_TOC_0               ~(i_MODE != 6)                
  Row   2:          1  i_TOC_1               i_ccc_done                    
  Row   3:          1  i_ccc_done_0          (~(i_MODE != 6) && i_TOC)     
  Row   4:          1  i_ccc_done_1          i_TOC                         
  Row   5:          1  (i_MODE != 6)_0       ~(i_TOC && i_ccc_done)        
  Row   6:    ***0***  (i_MODE != 6)_1       ~(i_TOC && i_ccc_done)        

----------------Focused Condition View-------------------
Line       143 Item    1  ((~i_TOC && i_ccc_done) && (i_MODE == 6))
Condition totals: 0 of 3 input terms covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
          i_TOC         N  '_0' not hit             Hit '_0'
     i_ccc_done         N  No hits                  Hit '_0' and '_1'
  (i_MODE == 6)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_TOC_0               ((i_MODE == 6) && i_ccc_done) 
  Row   2:          1  i_TOC_1               -                             
  Row   3:    ***0***  i_ccc_done_0          ~i_TOC                        
  Row   4:    ***0***  i_ccc_done_1          ((i_MODE == 6) && ~i_TOC)     
  Row   5:    ***0***  (i_MODE == 6)_0       (~i_TOC && i_ccc_done)        
  Row   6:    ***0***  (i_MODE == 6)_1       (~i_TOC && i_ccc_done)        

----------------Focused Condition View-------------------
Line       164 Item    1  ((i_ccc_done && ccc_done) && ~i_CP)
Condition totals: 0 of 3 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  i_ccc_done         N  No hits                  Hit '_0' and '_1'
    ccc_done         N  No hits                  Hit '_0' and '_1'
        i_CP         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_ccc_done_0          -                             
  Row   2:    ***0***  i_ccc_done_1          (~i_CP && ccc_done)           
  Row   3:    ***0***  ccc_done_0            i_ccc_done                    
  Row   4:    ***0***  ccc_done_1            (~i_CP && i_ccc_done)         
  Row   5:    ***0***  i_CP_0                (i_ccc_done && ccc_done)      
  Row   6:    ***0***  i_CP_1                (i_ccc_done && ccc_done)      

----------------Focused Condition View-------------------
Line       202 Item    1  ((i_TOC && i_ddr_mode_done) || (i_MODE != 6))
Condition totals: 0 of 3 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
            i_TOC         N  No hits                  Hit '_0' and '_1'
  i_ddr_mode_done         N  No hits                  Hit '_0' and '_1'
    (i_MODE != 6)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_TOC_0               ~(i_MODE != 6)                
  Row   2:    ***0***  i_TOC_1               i_ddr_mode_done               
  Row   3:    ***0***  i_ddr_mode_done_0     (~(i_MODE != 6) && i_TOC)     
  Row   4:    ***0***  i_ddr_mode_done_1     i_TOC                         
  Row   5:    ***0***  (i_MODE != 6)_0       ~(i_TOC && i_ddr_mode_done)   
  Row   6:    ***0***  (i_MODE != 6)_1       ~(i_TOC && i_ddr_mode_done)   

----------------Focused Condition View-------------------
Line       207 Item    1  ((~i_TOC && i_ddr_mode_done) && (i_MODE == 6))
Condition totals: 0 of 3 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
            i_TOC         N  No hits                  Hit '_0' and '_1'
  i_ddr_mode_done         N  No hits                  Hit '_0' and '_1'
    (i_MODE == 6)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_TOC_0               ((i_MODE == 6) && i_ddr_mode_done)
  Row   2:    ***0***  i_TOC_1               -                             
  Row   3:    ***0***  i_ddr_mode_done_0     ~i_TOC                        
  Row   4:    ***0***  i_ddr_mode_done_1     ((i_MODE == 6) && ~i_TOC)     
  Row   5:    ***0***  (i_MODE == 6)_0       (~i_TOC && i_ddr_mode_done)   
  Row   6:    ***0***  (i_MODE == 6)_1       (~i_TOC && i_ddr_mode_done)   


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       3         2         1    66.66%
    FSM Transitions                  6         1         5    16.66%

================================FSM Details================================

FSM Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_hdr_engine --

FSM_ID: next_state
    Current State Object : next_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
  95                IDLE                   0
 201            DDR_MODE                   2
 135                 CCC                   1
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                   1          
                     CCC                   1          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
  98                   1                   1          IDLE -> CCC                   
    Uncovered States :
    ------------------
                   State
                   -----
                DDR_MODE
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 120                   0          IDLE -> DDR_MODE    
 228                   2          DDR_MODE -> CCC     
  87                   3          DDR_MODE -> IDLE    
 168                   4          CCC -> DDR_MODE     
  87                   5          CCC -> IDLE         


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   3         2         1    66.66%
        FSM Transitions              6         1         5    16.66%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     108        26        82    24.07%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_hdr_engine --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File HDR_Engine.v
    32                                               module hdr_engine (
    33                                                   input   wire            i_sys_clk                             ,
    34                                                   input   wire            i_sys_rst_n                           ,
    35                                                   input   wire            i_i3cengine_hdrengine_en              , 
    36                                                   input   wire            i_ccc_done                            ,
    37                                                   input   wire            i_ddr_mode_done                       ,
    38                                                   input   wire            i_TOC                                 , //term of completion if 0 restart/ 1 exit needed for exit
    39                                                   input   wire            i_CP                                  , // Cmnd present=1 if CCC 0 for Normal Transcation
    40                                                   input   wire  [2:0]     i_MODE                                ,
    41                                                   //input   wire  [3:0]     i_TID                               ,
    42                                                   //to_blocks
    43                                                   output  reg             o_i3cengine_hdrengine_done            ,
    44                                                   output  reg             o_ddrmode_en                          ,
    45                                                   output  reg             o_ccc_en                              ,
    46                                               
    47                                                   output  reg   [11:0]     o_regf_addr_special                  ,
    48                                                   
    49                                                   output  reg             o_tx_en_sel                           ,
    50                                                   output  reg             o_rx_en_sel                           ,
    51                                                   output  reg             o_tx_mode_sel                         ,
    52                                                   output  reg             o_rx_mode_sel                         ,
    53                                                   output  reg             o_regf_rd_en_sel                      ,
    54                                                   output  reg             o_regf_wr_en_sel                      ,
    55                                                   output  reg             o_regf_addr_sel                       ,
    56                                                   output  reg             o_scl_pp_od_sel                       ,
    57                                                   output  reg             o_bit_cnt_en_sel                      ,
    58                                                   output  reg             o_frm_cnt_en_sel                      ,
    59                                                   output  reg             o_sdahand_pp_od_sel                    
    60                                               
    61                                                   //output  reg  [3:0]     o_TID
    62                                               
    63                                                   );
    64                                               /////////////parameters////////////
    65                                               localparam  IDLE          = 2'b00;
    66                                               localparam  CCC           = 2'b01;
    67                                               localparam  DDR_MODE      = 2'b10;
    68                                               
    69                                               reg [1:0] current_state, next_state;
    70                                               reg ccc_done;
    71                                               
    72                                               /////////////Mux Selection Parameters///////////////
    73                                               localparam DDR_SEL=1'b0;
    74                                               localparam CCC_SEL=1'b1;
    75                                               
    76                                               //--------------------------------- main ------------------------------------------------
    77                                               
    78              1                         33     always @(posedge i_sys_clk or negedge i_sys_rst_n ) 
    79                                                 begin: hdr_engine_fsm
    80                                                   if (!i_sys_rst_n) 
    81                                                       begin
    82              1                          1                 o_i3cengine_hdrengine_done      <= 1'b0   ;
    83              1                          1                 o_ddrmode_en                    <= 1'b0   ;
    84              1                          1                 o_ccc_en                        <= 1'b0   ;
    85              1                          1                 o_regf_addr_special             <= 12'd1000 ;
    86                                                           //current_state                   <= IDLE ;
    87              1                          1                 next_state                   <= IDLE ;
    88                                                       end
    89                                               
    90                                                   else if (i_i3cengine_hdrengine_en)
    91                                                     begin
    92              1                          4           o_regf_addr_special             <= 12'd1000 ;
    93                                                       //current_state <= next_state;
    94                                                       case (next_state)    //case (current_state)
    95                                                         IDLE : begin
    96                                                             if(i_CP) begin
    97              1                          1                          o_ccc_en        <= 1'b1 ;
    98              1                          1                          next_state      <= CCC ;
    99                                               
    100                                                                   // mux selectors         
    101             1                          1                          o_tx_en_sel            <=CCC_SEL;  
    102             1                          1                          o_rx_en_sel            <=CCC_SEL;
    103             1                          1                          o_tx_mode_sel          <=CCC_SEL;
    104             1                          1                          o_rx_mode_sel          <=CCC_SEL;
    105             1                          1                          o_regf_rd_en_sel       <=CCC_SEL;
    106             1                          1                          o_regf_wr_en_sel       <=CCC_SEL;
    107             1                          1                          o_regf_addr_sel        <=CCC_SEL;
    108             1                          1                          o_scl_pp_od_sel        <=CCC_SEL;
    109             1                          1                          o_bit_cnt_en_sel       <=CCC_SEL;
    110             1                          1                          o_frm_cnt_en_sel       <=CCC_SEL;
    111             1                          1                          o_sdahand_pp_od_sel    <=CCC_SEL;    
    112                                                                   
    113                                                                   
    114                                                                   
    115                                                                
    116                                                               end
    117                                                            else 
    118                                                            begin
    119             1                    ***0***                     o_ddrmode_en      <= 1'b1 ;
    120             1                    ***0***                     next_state        <= DDR_MODE ;
    121             1                    ***0***                          o_tx_en_sel            <=DDR_SEL;  
    122             1                    ***0***                          o_rx_en_sel            <=DDR_SEL;
    123             1                    ***0***                          o_tx_mode_sel          <=DDR_SEL;
    124             1                    ***0***                          o_rx_mode_sel          <=DDR_SEL;
    125             1                    ***0***                          o_regf_rd_en_sel       <=DDR_SEL;
    126             1                    ***0***                          o_regf_wr_en_sel       <=DDR_SEL;
    127             1                    ***0***                          o_regf_addr_sel        <=DDR_SEL;
    128             1                    ***0***                          o_scl_pp_od_sel        <=DDR_SEL;
    129             1                    ***0***                          o_bit_cnt_en_sel       <=DDR_SEL;
    130             1                    ***0***                          o_frm_cnt_en_sel       <=DDR_SEL;
    131             1                    ***0***                          o_sdahand_pp_od_sel    <=DDR_SEL;  
    132                                              
    133                                                            end
    134                                                        end
    135                                                        CCC : begin
    136                                                          if((i_TOC && i_ccc_done)||(i_MODE != 'd6)) begin     // ||(i_MODE != 'd6) assuming mode will not be changed unless an exit pattern was sent before it. -laila
    137             1                          2                       o_ccc_en    <= 1'b0 ;
    138             1                          2                       o_i3cengine_hdrengine_done      <= 1'b1 ;             
    139                                                                ///tid puts on output when the command is done
    140                                              
    141                                              
    142                                                          end
    143                                                          else if ((!i_TOC && i_ccc_done) && (i_MODE == 'd6)) begin
    144             1                    ***0***                   ccc_done                      <= 1'b0 ; //******signal 3mltha 3shan a3rf arg3 ll ddrmode*//////
    145             1                    ***0***                   o_ccc_en                      <= 1'b0 ;
    146             1                    ***0***                   o_regf_addr_special           <= 12'd1000;
    147             1                    ***0***                   o_i3cengine_hdrengine_done    <= 1'b0 ;
    148                                                            ///tid puts on output when the command is done
    149                                                                if(!i_CP) 
    150                                                                begin
    151             1                    ***0***                         ccc_done   <= 1'b1 ;
    152             1                    ***0***                         o_regf_addr_special <= 12'd450; //go to special address to get dummy value
    153             1                    ***0***                         o_ccc_en   <= 1'b1 ;
    154             1                    ***0***                         next_state <= CCC ; ////********lma yru7 y3ml al dummy hwdeh ddr azay*******//////////
    155                                                                end
    156                                                                else
    157                                                                  begin
    158             1                    ***0***                           o_ccc_en                      <= 1'b1 ;
    159             1                    ***0***                           o_regf_addr_special           <= 12'd1000;
    160             1                    ***0***                           next_state                    <= CCC ;    
    161                                                                  end
    162                                              
    163                                                                ////****/////
    164                                                                if(i_ccc_done && ccc_done && !i_CP ) begin
    165             1                    ***0***                         o_regf_addr_special           <= 12'd1000;
    166             1                    ***0***                         o_ccc_en   <= 1'b0 ;
    167             1                    ***0***                         o_ddrmode_en <= 1'b1 ;
    168             1                    ***0***                         next_state   <= DDR_MODE ;
    169             1                    ***0***                          o_tx_en_sel            <=DDR_SEL;  
    170             1                    ***0***                          o_rx_en_sel            <=DDR_SEL;
    171             1                    ***0***                          o_tx_mode_sel          <=DDR_SEL;
    172             1                    ***0***                          o_rx_mode_sel          <=DDR_SEL;
    173             1                    ***0***                          o_regf_rd_en_sel       <=DDR_SEL;
    174             1                    ***0***                          o_regf_wr_en_sel       <=DDR_SEL;
    175             1                    ***0***                          o_regf_addr_sel        <=DDR_SEL;
    176             1                    ***0***                          o_scl_pp_od_sel        <=DDR_SEL;
    177             1                    ***0***                          o_bit_cnt_en_sel       <=DDR_SEL;
    178             1                    ***0***                          o_frm_cnt_en_sel       <=DDR_SEL;
    179             1                    ***0***                          o_sdahand_pp_od_sel    <=DDR_SEL;   
    180                                                                end
    181                                                                else
    182             1                    ***0***                         next_state   <= CCC ;
    183             1                    ***0***                         o_tx_en_sel            <=CCC_SEL;  
    184             1                    ***0***                         o_rx_en_sel            <=CCC_SEL;
    185             1                    ***0***                         o_tx_mode_sel          <=CCC_SEL;
    186             1                    ***0***                         o_rx_mode_sel          <=CCC_SEL;
    187             1                    ***0***                         o_regf_rd_en_sel       <=CCC_SEL;
    188             1                    ***0***                         o_regf_wr_en_sel       <=CCC_SEL;
    189             1                    ***0***                         o_regf_addr_sel        <=CCC_SEL;
    190             1                    ***0***                         o_scl_pp_od_sel        <=CCC_SEL;
    191             1                    ***0***                         o_bit_cnt_en_sel       <=CCC_SEL;
    192             1                    ***0***                         o_frm_cnt_en_sel       <=CCC_SEL;
    193             1                    ***0***                         o_sdahand_pp_od_sel    <=CCC_SEL;  
    194                                                          end
    195                                                          else
    196             1                          1                       o_i3cengine_hdrengine_done      <= 1'b0 ;
    197                                                        end
    198                                                        
    199                                              
    200                                              
    201                                                        DDR_MODE : begin
    202                                                          if ((i_TOC && i_ddr_mode_done)||(i_MODE != 'd6)) begin
    203             1                    ***0***                   o_ddrmode_en    <= 1'b0 ;
    204             1                    ***0***                   o_i3cengine_hdrengine_done      <= 1'b1 ;
    205                                                            //tid puts on output when it is done
    206                                                          end
    207                                                          else if ((!i_TOC && i_ddr_mode_done) && (i_MODE == 'd6)) begin
    208             1                    ***0***                   o_ddrmode_en    <= 1'b0 ;
    209             1                    ***0***                   o_i3cengine_hdrengine_done    <= 1'b0 ;
    210                                                            //tid puts on output when it is done
    211                                                                if (!i_CP) begin
    212             1                    ***0***                         o_ddrmode_en <= 1'b1 ;
    213             1                    ***0***                         next_state   <= DDR_MODE ;
    214             1                    ***0***                          o_tx_en_sel            <=DDR_SEL;  
    215             1                    ***0***                          o_rx_en_sel            <=DDR_SEL;
    216             1                    ***0***                          o_tx_mode_sel          <=DDR_SEL;
    217             1                    ***0***                          o_rx_mode_sel          <=DDR_SEL;
    218             1                    ***0***                          o_regf_rd_en_sel       <=DDR_SEL;
    219             1                    ***0***                          o_regf_wr_en_sel       <=DDR_SEL;
    220             1                    ***0***                          o_regf_addr_sel        <=DDR_SEL;
    221             1                    ***0***                          o_scl_pp_od_sel        <=DDR_SEL;
    222             1                    ***0***                          o_bit_cnt_en_sel       <=DDR_SEL;
    223             1                    ***0***                          o_frm_cnt_en_sel       <=DDR_SEL;
    224             1                    ***0***                          o_sdahand_pp_od_sel    <=DDR_SEL;  
    225                                                                end
    226                                                                else begin
    227             1                    ***0***                         o_ccc_en <= 1'b1 ;
    228             1                    ***0***                         next_state <= CCC ;
    229             1                    ***0***                          o_tx_en_sel            <=CCC_SEL;  
    230             1                    ***0***                          o_rx_en_sel            <=CCC_SEL;
    231             1                    ***0***                          o_tx_mode_sel          <=CCC_SEL;
    232             1                    ***0***                          o_rx_mode_sel          <=CCC_SEL;
    233             1                    ***0***                          o_regf_rd_en_sel       <=CCC_SEL;
    234             1                    ***0***                          o_regf_wr_en_sel       <=CCC_SEL;
    235             1                    ***0***                          o_regf_addr_sel        <=CCC_SEL;
    236             1                    ***0***                          o_scl_pp_od_sel        <=CCC_SEL;
    237             1                    ***0***                          o_bit_cnt_en_sel       <=CCC_SEL;
    238             1                    ***0***                          o_frm_cnt_en_sel       <=CCC_SEL;
    239             1                    ***0***                          o_sdahand_pp_od_sel    <=CCC_SEL;  
    240                                                                end
    241                                                          end
    242                                                          else
    243                                                            begin
    244             1                    ***0***                     o_i3cengine_hdrengine_done      <= 1'b0 ;
    245                                                            end
    246                                                        end
    247                                                      endcase
    248                                                    end
    249                                                  else
    250                                                  begin
    251             1                         28           o_i3cengine_hdrengine_done      <= 1'b0   ;
    252             1                         28           o_ddrmode_en                    <= 1'b0   ;
    253             1                         28           o_ccc_en                        <= 1'b0   ;  

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         82        21        61    25.60%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_hdr_engine --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                          ccc_done           0           0        0.00 
                                current_state[1-0]           0           0        0.00 
                                              i_CP           1           1      100.00 
                                         i_MODE[0]           0           0        0.00 
                                       i_MODE[1-2]           0           1       50.00 
                                             i_TOC           1           1      100.00 
                                        i_ccc_done           1           1      100.00 
                                   i_ddr_mode_done           1           1      100.00 
                          i_i3cengine_hdrengine_en           1           1      100.00 
                                         i_sys_clk           1           1      100.00 
                                       i_sys_rst_n           1           1      100.00 
                                     next_state[1]           0           0        0.00 
                                     next_state[0]           0           1       50.00 
                                  o_bit_cnt_en_sel           0           0        0.00 
                                          o_ccc_en           1           1      100.00 
                                      o_ddrmode_en           0           0        0.00 
                                  o_frm_cnt_en_sel           0           0        0.00 
                        o_i3cengine_hdrengine_done           1           1      100.00 
                                   o_regf_addr_sel           0           0        0.00 
                         o_regf_addr_special[11-0]           0           0        0.00 
                                  o_regf_rd_en_sel           0           0        0.00 
                                  o_regf_wr_en_sel           0           0        0.00 
                                       o_rx_en_sel           0           0        0.00 
                                     o_rx_mode_sel           0           0        0.00 
                                   o_scl_pp_od_sel           0           0        0.00 
                               o_sdahand_pp_od_sel           0           0        0.00 
                                       o_tx_en_sel           0           0        0.00 
                                     o_tx_mode_sel           0           0        0.00 

Total Node Count     =         41 
Toggled Node Count   =          9 
Untoggled Node Count =         32 

Toggle Coverage      =      25.60% (21 of 82 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_rd_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          9       always @ ( * )
    31                                                 begin
    32              1                          9         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         6        18    25.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-3]           0           0        0.00 
                                        data_in[4]           0           1       50.00 
                                        data_in[5]           0           0        0.00 
                                        data_in[6]           0           1       50.00 
                                        data_in[7]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          2 
Untoggled Node Count =         10 

Toggle Coverage      =      25.00% (6 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_rd_address_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_address_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                         10       always @ ( * )
    31                                                 begin
    32              1                         10         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        222        28       194    12.61%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_address_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                     data_in[0-48]           0           0        0.00 
                                    data_in[49-51]           0           1       50.00 
                                       data_in[52]           0           0        0.00 
                                       data_in[53]           0           1       50.00 
                                    data_in[54-72]           0           0        0.00 
                                    data_in[73-75]           0           1       50.00 
                                       data_in[76]           0           0        0.00 
                                       data_in[77]           0           1       50.00 
                                    data_in[78-84]           0           0        0.00 
                                    data_in[85-89]           1           1      100.00 
                                    data_in[90-95]           0           0        0.00 
                                    data_out[11-6]           0           0        0.00 
                                     data_out[5-1]           1           1      100.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =        111 
Toggled Node Count   =         10 
Untoggled Node Count =        101 

Toggle Coverage      =      12.61% (28 of 222 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_wr_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_wr_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          4       always @ ( * )
    31                                                 begin
    32              1                          4         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_wr_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_wr_data_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_wr_data_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50         0        50     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_wr_data_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                     data_in[0-15]           0           0        0.00 
                                     data_out[7-0]           0           0        0.00 

Total Node Count     =         25 
Toggled Node Count   =          0 
Untoggled Node Count =         25 

Toggle Coverage      =       0.00% (0 of 50 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/scl_pp_od_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_pp_od_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          8       always @ ( * )
    31                                                 begin
    32              1                          8         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         9        15    37.50%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_pp_od_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                       ctrl_sel[1]           0           0        0.00 
                                       ctrl_sel[2]           1           1      100.00 
                                      data_in[0-1]           0           0        0.00 
                                        data_in[2]           1           1      100.00 
                                      data_in[3-5]           0           0        0.00 
                                        data_in[6]           1           0       50.00 
                                        data_in[7]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          4 
Untoggled Node Count =          8 

Toggle Coverage      =      37.50% (9 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/scl_idle_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_idle_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          8       always @ ( * )
    31                                                 begin
    32              1                          8         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         8        16    33.33%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_idle_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                       ctrl_sel[1]           0           0        0.00 
                                       ctrl_sel[2]           1           1      100.00 
                                      data_in[0-1]           0           0        0.00 
                                        data_in[2]           1           1      100.00 
                                      data_in[3-7]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          4 
Untoggled Node Count =          8 

Toggle Coverage      =      33.33% (8 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/tx_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/tx_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                         14       always @ ( * )
    31                                                 begin
    32              1                         14         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24        10        14    41.66%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/tx_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                       ctrl_sel[1]           0           0        0.00 
                                       ctrl_sel[2]           1           1      100.00 
                                      data_in[0-1]           0           0        0.00 
                                        data_in[2]           1           1      100.00 
                                      data_in[3-6]           0           0        0.00 
                                        data_in[7]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          5 
Untoggled Node Count =          7 

Toggle Coverage      =      41.66% (10 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/tx_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/tx_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                         13       always @ ( * )
    31                                                 begin
    32              1                         13         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         60        14        46    23.33%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/tx_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                       ctrl_sel[1]           0           0        0.00 
                                       ctrl_sel[2]           1           1      100.00 
                                      data_in[0-6]           0           0        0.00 
                                        data_in[7]           1           1      100.00 
                                     data_in[8-20]           0           0        0.00 
                                    data_in[21-22]           1           1      100.00 
                                       data_in[23]           0           0        0.00 
                                       data_out[2]           0           0        0.00 
                                     data_out[1-0]           1           1      100.00 

Total Node Count     =         30 
Toggled Node Count   =          7 
Untoggled Node Count =         23 

Toggle Coverage      =      23.33% (14 of 60 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/rx_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/rx_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          7       always @ ( * )
    31                                                 begin
    32              1                          7         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         5        19    20.83%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/rx_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                        data_in[0]           0           0        0.00 
                                        data_in[1]           0           1       50.00 
                                      data_in[2-6]           0           0        0.00 
                                        data_in[7]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          2 
Untoggled Node Count =         10 

Toggle Coverage      =      20.83% (5 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/rx_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/rx_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          7       always @ ( * )
    31                                                 begin
    32              1                          7         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         60         4        56     6.66%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/rx_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                     data_in[0-21]           0           0        0.00 
                                       data_in[22]           1           1      100.00 
                                       data_in[23]           0           0        0.00 
                                       data_out[2]           0           0        0.00 
                                       data_out[1]           1           1      100.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         30 
Toggled Node Count   =          2 
Untoggled Node Count =         28 

Toggle Coverage      =       6.66% (4 of 60 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/bit_cnt_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/bit_cnt_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                         11       always @ ( * )
    31                                                 begin
    32              1                         11         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         8        16    33.33%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/bit_cnt_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                       ctrl_sel[1]           0           0        0.00 
                                       ctrl_sel[2]           1           1      100.00 
                                      data_in[0-6]           0           0        0.00 
                                        data_in[7]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          4 
Untoggled Node Count =          8 

Toggle Coverage      =      33.33% (8 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/bit_rx_cnt_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/bit_rx_cnt_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          3       always @ ( * )
    31                                                 begin
    32              1                          3         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/bit_rx_cnt_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/fcnt_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/fcnt_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          3       always @ ( * )
    31                                                 begin
    32              1                          3         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/fcnt_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/fcnt_no_frms_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/fcnt_no_frms_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          3       always @ ( * )
    31                                                 begin
    32              1                          3         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        150         5       145     3.33%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/fcnt_no_frms_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                        data_in[0]           0           0        0.00 
                                        data_in[1]           0           1       50.00 
                                      data_in[2-8]           0           0        0.00 
                                        data_in[9]           0           1       50.00 
                                    data_in[10-16]           0           0        0.00 
                                       data_in[17]           0           1       50.00 
                                    data_in[18-39]           0           0        0.00 
                                    data_in[40-41]           0           1       50.00 
                                    data_in[42-63]           0           0        0.00 
                                     data_out[7-0]           0           0        0.00 

Total Node Count     =         75 
Toggled Node Count   =          0 
Untoggled Node Count =         75 

Toggle Coverage      =       3.33% (5 of 150 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/bits_cnt_regf_rx_tx_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/bits_cnt_regf_rx_tx_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          3       always @ ( * )
    31                                                 begin
    32              1                          3         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/bits_cnt_regf_rx_tx_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/scl_stall_flag_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         0         2     0.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_stall_flag_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                    ***0***       always @ ( * )
    31                                                 begin
    32              1                    ***0***         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_stall_flag_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/scl_stall_cycles_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         0         2     0.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_stall_cycles_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                    ***0***       always @ ( * )
    31                                                 begin
    32              1                    ***0***         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         78         0        78     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_stall_cycles_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                     data_in[0-31]           0           0        0.00 
                                     data_out[3-0]           0           0        0.00 

Total Node Count     =         39 
Toggled Node Count   =          0 
Untoggled Node Count =         39 

Toggle Coverage      =       0.00% (0 of 78 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/u_fcnt_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_fcnt_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          2       always @ ( * )
    31                                                 begin
    32              1                          2         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/u_fcnt_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/sda_handling_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/sda_handling_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                        120       always @ ( * )
    31                                                 begin
    32              1                        120         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         6         2    75.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/sda_handling_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           1           1      100.00 
                                        data_in[1]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          3 
Untoggled Node Count =          1 

Toggle Coverage      =      75.00% (6 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_rd_en_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_en_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         0         8     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_en_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =          4 
Toggled Node Count   =          0 
Untoggled Node Count =          4 

Toggle Coverage      =       0.00% (0 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_wr_en_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_wr_en_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         0         8     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_wr_en_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =          4 
Toggled Node Count   =          0 
Untoggled Node Count =          4 

Toggle Coverage      =       0.00% (0 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_rd_address__hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_address__hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         74         0        74     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_address__hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                     data_in[0-23]           0           0        0.00 
                                    data_out[11-0]           0           0        0.00 

Total Node Count     =         37 
Toggled Node Count   =          0 
Untoggled Node Count =         37 

Toggle Coverage      =       0.00% (0 of 74 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/tx_en_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/tx_en_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         0         8     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/tx_en_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =          4 
Toggled Node Count   =          0 
Untoggled Node Count =          4 

Toggle Coverage      =       0.00% (0 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/rx_en_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/rx_en_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         0         8     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/rx_en_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =          4 
Toggled Node Count   =          0 
Untoggled Node Count =          4 

Toggle Coverage      =       0.00% (0 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/tx_mode_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/tx_mode_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20         0        20     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/tx_mode_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-5]           0           0        0.00 
                                     data_out[2-0]           0           0        0.00 

Total Node Count     =         10 
Toggled Node Count   =          0 
Untoggled Node Count =         10 

Toggle Coverage      =       0.00% (0 of 20 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/rx_mode_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/rx_mode_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20         0        20     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/rx_mode_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-5]           0           0        0.00 
                                     data_out[2-0]           0           0        0.00 

Total Node Count     =         10 
Toggled Node Count   =          0 
Untoggled Node Count =         10 

Toggle Coverage      =       0.00% (0 of 20 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/scl_pp_od_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_pp_od_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          2       always @ ( * )
    31                                                 begin
    32              1                          2         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         0         8     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_pp_od_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =          4 
Toggled Node Count   =          0 
Untoggled Node Count =          4 

Toggle Coverage      =       0.00% (0 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/bit_cnt_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/bit_cnt_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         0         8     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/bit_cnt_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =          4 
Toggled Node Count   =          0 
Untoggled Node Count =          4 

Toggle Coverage      =       0.00% (0 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/frm_cnt_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/frm_cnt_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         0         8     0.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/frm_cnt_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =          4 
Toggled Node Count   =          0 
Untoggled Node Count =          4 

Toggle Coverage      =       0.00% (0 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/reg_rd_en_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/reg_rd_en_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                         11       always @ ( * )
    31                                                 begin
    32              1                         11         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         6         2    75.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/reg_rd_en_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           1           1      100.00 
                                        data_in[1]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          3 
Untoggled Node Count =          1 

Toggle Coverage      =      75.00% (6 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/reg_wr_en_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/reg_wr_en_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          5       always @ ( * )
    31                                                 begin
    32              1                          5         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         3         5    37.50%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/reg_wr_en_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           1           0       50.00 

Total Node Count     =          4 
Toggled Node Count   =          1 
Untoggled Node Count =          3 

Toggle Coverage      =      37.50% (3 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_rd_address_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_address_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                         11       always @ ( * )
    31                                                 begin
    32              1                         11         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         74        27        47    36.48%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_address_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           0           0        0.00 
                                      data_in[1-5]           1           1      100.00 
                                     data_in[6-23]           0           0        0.00 
                                    data_out[11-6]           1           0       50.00 
                                     data_out[5-4]           1           1      100.00 
                                     data_out[3-2]           1           0       50.00 
                                       data_out[1]           1           1      100.00 
                                       data_out[0]           1           0       50.00 

Total Node Count     =         37 
Toggled Node Count   =          9 
Untoggled Node Count =         28 

Toggle Coverage      =      36.48% (27 of 74 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_wr_data_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_wr_data_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          4       always @ ( * )
    31                                                 begin
    32              1                          4         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50        10        40    20.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_wr_data_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                     data_in[0-15]           0           0        0.00 
                                     data_out[7-0]           1           0       50.00 

Total Node Count     =         25 
Toggled Node Count   =          1 
Untoggled Node Count =         24 

Toggle Coverage      =      20.00% (10 of 50 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/scl_pp_od_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_pp_od_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          7       always @ ( * )
    31                                                 begin
    32              1                          7         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         6         2    75.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/scl_pp_od_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           1           1      100.00 
                                        data_in[1]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          3 
Untoggled Node Count =          1 

Toggle Coverage      =      75.00% (6 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/reg_wr_en_config_data_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/reg_wr_en_config_data_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                         26       always @ ( * )
    31                                                 begin
    32              1                         26         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         7         1    87.50%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/reg_wr_en_config_data_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           1           0       50.00 
                                        data_in[1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          3 
Untoggled Node Count =          1 

Toggle Coverage      =      87.50% (7 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_rd_address_config_data_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_address_config_data_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                        213       always @ ( * )
    31                                                 begin
    32              1                        213         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         74        45        29    60.81%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_rd_address_config_data_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           1           0       50.00 
                                        data_in[1]           1           1      100.00 
                                      data_in[2-3]           1           0       50.00 
                                      data_in[4-5]           1           1      100.00 
                                     data_in[6-11]           1           0       50.00 
                                    data_in[12-14]           1           1      100.00 
                                    data_in[15-23]           0           0        0.00 
                                   data_out[11-10]           1           0       50.00 
                                     data_out[9-0]           1           1      100.00 

Total Node Count     =         37 
Toggled Node Count   =         17 
Untoggled Node Count =         20 

Toggle Coverage      =      60.81% (45 of 74 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/regf_wr_data_config_data_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_wr_data_config_data_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                        208       always @ ( * )
    31                                                 begin
    32              1                        208         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50        42         8    84.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/regf_wr_data_config_data_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-7]           1           0       50.00 
                                     data_in[8-15]           1           1      100.00 
                                     data_out[7-0]           1           1      100.00 

Total Node Count     =         25 
Toggled Node Count   =         17 
Untoggled Node Count =          8 

Toggle Coverage      =      84.00% (42 of 50 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT/reg_rd_en_config_data_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL/DUT/reg_rd_en_config_data_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File gen_mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                         30       always @ ( * )
    31                                                 begin
    32              1                         30         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];  //data_in[starting from(ctrl_sel*BUS_WIDTH) +: BUS_WIDTH]

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         8         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT/reg_rd_en_config_data_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          4 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (8 of 8 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL/DUT
=== Design Unit: work.sdr_hdr_transition_top
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                       1502       365      1137    24.30%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL/DUT --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                bit_cnt_en_mux_out           1           1      100.00 
                             bit_cnt_en_mux_sel[0]           1           1      100.00 
                             bit_cnt_en_mux_sel[1]           0           0        0.00 
                             bit_cnt_en_mux_sel[2]           1           1      100.00 
                             bit_rx_cnt_en_mux_out           0           0        0.00 
                        bit_rx_cnt_en_mux_sel[0-2]           0           0        0.00 
                       bits_cnt_regf_rx_tx_mux_out           0           0        0.00 
                      bits_cnt_regf_rx_tx_sel[0-2]           0           0        0.00 
                                      ccc_CMD[0-1]           1           1      100.00 
                                        ccc_CMD[2]           0           0        0.00 
                                      ccc_CMD[3-4]           1           1      100.00 
                                      ccc_CMD[5-6]           0           0        0.00 
                                        ccc_CMD[7]           1           1      100.00 
                                    ccc_bit_cnt_en           0           0        0.00 
                                    ccc_frm_cnt_en           0           0        0.00 
                                    ccc_regf_rd_en           0           0        0.00 
                                    ccc_regf_wr_en           0           0        0.00 
                                ccc_regfaddr[0-11]           0           0        0.00 
                                         ccc_rx_en           0           0        0.00 
                                  ccc_rx_mode[0-2]           0           0        0.00 
                                         ccc_tx_en           0           0        0.00 
                                  ccc_tx_mode[0-2]           0           0        0.00 
                                 cccnt_CMD_ATTR[0]           1           1      100.00 
                               cccnt_CMD_ATTR[1-2]           0           0        0.00 
                              cccnt_DEV_INDEX[0-4]           1           1      100.00 
                                         cccnt_RnW           1           1      100.00 
                                         cccnt_TOC           1           1      100.00 
                                        cccnt_WROC           1           1      100.00 
                                           chr_set           0           0        0.00 
                                   crh_CRCAP2[0-7]           0           0        0.00 
                                   crh_CRHDLY[0-7]           0           0        0.00 
                                    crh_PRECR[0-7]           0           0        0.00 
                                  crh_cfg_reg[0-7]           0           0        0.00 
                                        crh_cnt_en           0           0        0.00 
                                          crh_done           0           0        0.00 
                                            crh_en           0           0        0.00 
                                   crh_entasx[0-1]           0           0        0.00 
                                       crh_fcnt_en           0           0        0.00 
                           crh_getstatus_data[0-7]           0           0        0.00 
                              crh_ncr_take_control           0           0        0.00 
                                       crh_ncr_win           0           0        0.00 
                                         crh_pp_od           1           0       50.00 
                                  crh_regf_addr[0]           0           0        0.00 
                                crh_regf_addr[1-3]           0           1       50.00 
                                  crh_regf_addr[4]           0           0        0.00 
                                  crh_regf_addr[5]           0           1       50.00 
                               crh_regf_addr[6-11]           0           0        0.00 
                                    crh_regf_rd_en           0           1       50.00 
                                    crh_regf_wr_en           0           0        0.00 
                                     crh_rx_cnt_en           0           0        0.00 
                                         crh_rx_en           0           0        0.00 
                                  crh_rx_mode[0-2]           0           0        0.00 
                               crh_rx_pp_mode_done           0           0        0.00 
                                      crh_scl_idle           0           0        0.00 
                                       crh_sda_low           0           0        0.00 
                                     crh_send_stop           0           0        0.00 
                                crh_start_detected           0           0        0.00 
                                  crh_stop_is_sent           0           0        0.00 
                               crh_tgts_count[0-7]           0           0        0.00 
                                     crh_timer_set           0           0        0.00 
                                         crh_tx_en           0           0        0.00 
                                  crh_tx_mode[0-2]           0           0        0.00 
                                   daa_bits_cnt_en           0           0        0.00 
                                          daa_done           0           0        0.00 
                                            daa_en           0           0        0.00 
                                         daa_error           0           0        0.00 
                                       daa_fcnt_en           0           0        0.00 
                             daa_fcnt_no_frms[0-7]           0           0        0.00 
                                         daa_pp_od           0           0        0.00 
                               daa_regf_addr[0-11]           0           0        0.00 
                             daa_regf_data_wr[0-7]           0           0        0.00 
                                    daa_regf_rd_en           0           0        0.00 
                             daa_regf_wr_data[0-7]           0           0        0.00 
                                    daa_regf_wr_en           0           0        0.00 
                                     daa_rx_cnt_en           0           0        0.00 
                                         daa_rx_en           0           0        0.00 
                                  daa_rx_mode[0-2]           0           0        0.00 
                             daa_stall_cycles[0-3]           0           0        0.00 
                                    daa_stall_flag           0           0        0.00 
                                         daa_tx_en           0           0        0.00 
                                  daa_tx_mode[0-2]           0           0        0.00 
                                    ddr_bit_cnt_en           0           0        0.00 
                                    ddr_frm_cnt_en           0           0        0.00 
                            ddr_regf_address[0-11]           0           0        0.00 
                                    ddr_regf_rd_en           0           0        0.00 
                                    ddr_regf_wr_en           0           0        0.00 
                                         ddr_rx_en           0           0        0.00 
                                  ddr_rx_mode[0-2]           0           0        0.00 
                                         ddr_tx_en           0           0        0.00 
                                  ddr_tx_mode[0-2]           0           0        0.00 
                                      deser_s_data           1           1      100.00 
                                         engine_CP           1           1      100.00 
                                    engine_MODE[0]           0           0        0.00 
                                  engine_MODE[1-2]           0           1       50.00 
                                   engine_TID[0-3]           1           1      100.00 
                   engine_configuration_addr[0-11]           0           0        0.00 
                                 enthdr_bit_cnt_en           1           1      100.00 
                                       enthdr_done           1           1      100.00 
                                         enthdr_en           1           1      100.00 
                                      enthdr_pp_od           0           0        0.00 
                               enthdr_regf_addr[0]           0           0        0.00 
                             enthdr_regf_addr[1-5]           1           1      100.00 
                            enthdr_regf_addr[6-11]           0           0        0.00 
                                 enthdr_regf_rd_en           1           1      100.00 
                                      enthdr_rx_en           1           1      100.00 
                                 enthdr_rx_mode[0]           0           0        0.00 
                                 enthdr_rx_mode[1]           1           1      100.00 
                                 enthdr_rx_mode[2]           0           0        0.00 
                                      enthdr_tx_en           1           1      100.00 
                               enthdr_tx_mode[0-1]           1           1      100.00 
                                 enthdr_tx_mode[2]           0           0        0.00 
                                   fcnt_en_mux_out           0           0        0.00 
                              fcnt_en_mux_sel[0-2]           0           0        0.00 
                                   fcnt_no_frms[0]           0           0        0.00 
                                   fcnt_no_frms[1]           0           1       50.00 
                                 fcnt_no_frms[2-7]           0           0        0.00 
                         fcnt_no_frms_mux_out[0-7]           0           0        0.00 
                             fcnt_no_frms_sel[0-2]           0           0        0.00 
                                   frmcnt_DTT[0-2]           1           1      100.00 
                              frmcnt_data_len[0-7]           1           1      100.00 
                             frmcnt_data_len[8-15]           0           0        0.00 
                            hdr_bit_cnt_en_mux_out           0           0        0.00 
                                hdr_bit_cnt_en_sel           0           0        0.00 
                                hdr_frm_cnt_en_sel           0           0        0.00 
                        hdr_frm_cnt_en_sel_mux_out           0           0        0.00 
                                     hdr_rx_en_sel           0           0        0.00 
                                   hdr_rx_mode_sel           0           0        0.00 
                                 hdr_scl_pp_od_sel           0           0        0.00 
                             hdr_sdahand_pp_od_sel           0           0        0.00 
                                     hdr_tx_en_sel           0           0        0.00 
                                   hdr_tx_mode_sel           0           0        0.00 
                                      hdrengine_en           1           1      100.00 
                                    hdrengine_exit           1           1      100.00 
                                        hj_acc_rej           0           0        0.00 
                                     hj_bit_cnt_en           0           0        0.00 
                                            hj_ccc           0           0        0.00 
                                   hj_cfg_reg[0-2]           0           0        0.00 
                                        hj_cr_pass           0           0        0.00 
                                         hj_crh_en           0           0        0.00 
                                         hj_daa_en           0           0        0.00 
                                        hj_daa_req           0           0        0.00 
                                           hj_done           0           0        0.00 
                                             hj_en           0           0        0.00 
                                          hj_pp_od           0           0        0.00 
                                   hj_regf_addr[0]           0           0        0.00 
                                 hj_regf_addr[1-3]           0           1       50.00 
                                   hj_regf_addr[4]           0           0        0.00 
                                   hj_regf_addr[5]           0           1       50.00 
                                hj_regf_addr[6-11]           0           0        0.00 
                                     hj_regf_rd_en           0           1       50.00 
                                          hj_rx_en           0           0        0.00 
                                   hj_rx_mode[0-2]           0           0        0.00 
                                    hj_support_reg           0           0        0.00 
                                          hj_tx_en           0           0        0.00 
                                   hj_tx_mode[0-2]           0           0        0.00 
                                    i2c_bit_cnt_en           0           0        0.00 
                                 i2c_bit_rx_cnt_en           0           0        0.00 
                                          i2c_done           0           0        0.00 
                                            i2c_en           0           0        0.00 
                                       i2c_fcnt_en           0           0        0.00 
                                         i2c_pp_od           0           0        0.00 
                               i2c_regf_addr[0-11]           0           0        0.00 
                                    i2c_regf_rd_en           0           0        0.00 
                                         i2c_rx_en           0           1       50.00 
                                  i2c_rx_mode[0-2]           0           0        0.00 
                                      i2c_rx_valid           0           0        0.00 
                                         i2c_tx_en           0           0        0.00 
                                  i2c_tx_mode[0-2]           0           0        0.00 
                                    i3c_bit_cnt_en           0           0        0.00 
                                     i3c_ibi_en_tb           0           0        0.00 
                                     i3c_idle_flag           1           1      100.00 
                                         i3c_pp_od           1           1      100.00 
                                    i3c_regf_rd_en           0           0        0.00 
                                      i3c_rx_valid           0           0        0.00 
                                      i3c_scl_idle           1           1      100.00 
                                         i3c_tx_en           1           1      100.00 
                                    i3c_tx_mode[0]           0           0        0.00 
                                    i3c_tx_mode[1]           1           1      100.00 
                                    i3c_tx_mode[2]           0           0        0.00 
                                        i_ccc_done           1           1      100.00 
                                   i_ccc_en_dis_hj           0           0        0.00 
                                   i_controller_en           1           1      100.00 
                             i_data_config_mux_sel           1           1      100.00 
                                   i_ddr_mode_done           1           1      100.00 
                                     i_i3c_i2c_sel           1           1      100.00 
                                i_regf_config[0-7]           1           1      100.00 
                               i_regf_rd_en_config           1           1      100.00 
                     i_regf_wr_address_config[0-2]           1           1      100.00 
                    i_regf_wr_address_config[3-11]           0           0        0.00 
                               i_regf_wr_en_config           1           1      100.00 
                                         i_sdr_clk           1           1      100.00 
                                       i_sdr_rst_n           1           1      100.00 
                                        ibi_cnt_en           0           0        0.00 
                                          ibi_done           0           0        0.00 
                                            ibi_en           0           0        0.00 
                                    ibi_payload_en           0           0        0.00 
                         ibi_payload_size_reg[0-1]           0           1       50.00 
                         ibi_payload_size_reg[2-7]           0           0        0.00 
                                         ibi_pp_od           0           0        0.00 
                            ibi_regf_address[0-11]           0           0        0.00 
                                    ibi_regf_rd_en           0           0        0.00 
                                    ibi_regf_wr_en           0           0        0.00 
                                         ibi_rx_en           0           0        0.00 
                                  ibi_rx_mode[0-2]           0           0        0.00 
                                     ibi_ser_rx_tx           0           0        0.00 
                              ibi_tgt_address[0-1]           0           1       50.00 
                              ibi_tgt_address[2-3]           0           0        0.00 
                                ibi_tgt_address[4]           0           1       50.00 
                                ibi_tgt_address[5]           0           0        0.00 
                                ibi_tgt_address[6]           0           1       50.00 
                                ibi_tgt_address[7]           0           0        0.00 
                                         ibi_tx_en           0           0        0.00 
                                  ibi_tx_mode[0-2]           0           0        0.00 
                                      o_ccc_enable           1           1      100.00 
                                       o_ctrl_done           1           1      100.00 
                                  o_ddrmode_enable           0           0        0.00 
                      o_regf_address_special[0-11]           0           0        0.00 
                                    o_sdr_rx_valid           1           1      100.00 
                                    regf_data_mode           1           1      100.00 
                                 regf_data_rd[0-7]           1           1      100.00 
                                 regf_data_wr[0-7]           0           0        0.00 
                                   regf_ibi_cfg[0]           0           1       50.00 
                                 regf_ibi_cfg[1-7]           0           0        0.00 
                 regf_rd_address_hdr_mux_out[0-11]           0           0        0.00 
                       regf_rd_address_hdr_mux_sel           0           0        0.00 
                              regf_rd_address_mode           1           1      100.00 
                   regf_rd_address_mode_mux_out[0]           1           0       50.00 
                   regf_rd_address_mode_mux_out[1]           1           1      100.00 
                 regf_rd_address_mode_mux_out[2-3]           1           0       50.00 
                 regf_rd_address_mode_mux_out[4-5]           1           1      100.00 
                regf_rd_address_mode_mux_out[6-11]           1           0       50.00 
                      regf_rd_address_mux_out[0-9]           1           1      100.00 
                    regf_rd_address_mux_out[10-11]           1           0       50.00 
                      regf_rd_address_mux_sel[0-2]           0           0        0.00 
                    regf_rd_address_sdr_mux_out[0]           0           0        0.00 
                  regf_rd_address_sdr_mux_out[1-5]           1           1      100.00 
                 regf_rd_address_sdr_mux_out[6-11]           0           0        0.00 
                            regf_rd_en_hdr_mux_out           0           0        0.00 
                            regf_rd_en_hdr_mux_sel           0           0        0.00 
                                   regf_rd_en_mode           1           1      100.00 
                           regf_rd_en_mode_mux_out           1           1      100.00 
                                regf_rd_en_mux_out           1           1      100.00 
                           regf_rd_en_mux_sel[0-2]           0           0        0.00 
                            regf_rd_en_sdr_mux_out           1           1      100.00 
                    regf_wr_data_mode_mux_out[0-7]           1           0       50.00 
                         regf_wr_data_mux_out[0-7]           1           1      100.00 
                              regf_wr_data_mux_sel           0           0        0.00 
                     regf_wr_data_sdr_mux_out[0-7]           0           0        0.00 
                                        regf_wr_en           0           0        0.00 
                            regf_wr_en_hdr_mux_out           0           0        0.00 
                            regf_wr_en_hdr_mux_sel           0           0        0.00 
                                   regf_wr_en_mode           1           1      100.00 
                           regf_wr_en_mode_mux_out           1           0       50.00 
                                regf_wr_en_mux_out           1           1      100.00 
                           regf_wr_en_mux_sel[0-2]           0           0        0.00 
                            regf_wr_en_sdr_mux_out           0           0        0.00 
                          regfcrc_rx_data_out[0-7]           0           0        0.00 
                               rx_arbitration_lost           0           0        0.00 
                                 rx_en_hdr_mux_out           0           0        0.00 
                                     rx_en_mux_out           1           1      100.00 
                                rx_en_mux_sel[0-2]           0           0        0.00 
                                      rx_mode_done           1           1      100.00 
                          rx_mode_hdr_mux_out[0-2]           0           0        0.00 
                                rx_mode_mux_out[0]           0           0        0.00 
                                rx_mode_mux_out[1]           1           1      100.00 
                                rx_mode_mux_out[2]           0           0        0.00 
                              rx_mode_mux_sel[0-2]           0           0        0.00 
                                               scl           1           1      100.00 
                                     scl_ccc_pp_od           0           0        0.00 
                                     scl_ddr_pp_od           0           0        0.00 
                                     scl_gen_stall           0           0        0.00 
                               scl_idle_mux_sel[0]           1           1      100.00 
                               scl_idle_mux_sel[1]           0           0        0.00 
                               scl_idle_mux_sel[2]           1           1      100.00 
                                      scl_neg_edge           1           1      100.00 
                                      scl_pos_edge           1           1      100.00 
                             scl_pp_od_hdr_mux_out           0           0        0.00 
                                    scl_pp_od_mode           1           1      100.00 
                                 scl_pp_od_mux_out           1           1      100.00 
                              scl_pp_od_mux_sel[0]           1           1      100.00 
                              scl_pp_od_mux_sel[1]           0           0        0.00 
                              scl_pp_od_mux_sel[2]           1           1      100.00 
                             scl_pp_od_sdr_mux_out           1           1      100.00 
                             scl_stall_cycles[0-3]           0           0        0.00 
                     scl_stall_cycles_mux_out[0-3]           0           0        0.00 
                         scl_stall_cycles_sel[0-2]           0           0        0.00 
                                    scl_stall_done           0           0        0.00 
                            scl_stall_flag_mux_out           0           0        0.00 
                           scl_stall_flag_sel[0-2]           0           0        0.00 
                                               sda           1           1      100.00 
                                           sda_sel           1           1      100.00 
                                    sdr_bit_cnt_en           0           0        0.00 
                                 sdr_bit_rx_cnt_en           0           0        0.00 
                            sdr_cnt_bit_count[0-2]           1           1      100.00 
                                sdr_ctrl_addr_done           0           0        0.00 
                                 sdr_ctrl_cnt_done           1           1      100.00 
                                 sdr_ctrl_ibi_done           0           0        0.00 
                           sdr_ctrl_ibi_payload_en           0           0        0.00 
                               sdr_ctrl_last_frame           0           0        0.00 
                                 sdr_ctrl_scl_idle           0           0        0.00 
                                sdr_ctrl_ser_valid           0           0        0.00 
                                          sdr_done           0           0        0.00 
                                            sdr_en           0           0        0.00 
                                       sdr_fcnt_en           0           0        0.00 
                              sdr_ibi_payload_done           0           0        0.00 
                                         sdr_pp_od           0           0        0.00 
                               sdr_regf_addr[0-11]           0           0        0.00 
                                    sdr_regf_rd_en           0           0        0.00 
                                         sdr_rx_en           0           0        0.00 
                                  sdr_rx_mode[0-2]           0           0        0.00 
                                   sdr_rx_rd_abort           0           0        0.00 
                                      sdr_rx_valid           0           0        0.00 
                              sdr_scl_idle_mux_out           1           1      100.00 
                                         sdr_tx_en           0           0        0.00 
                                  sdr_tx_mode[0-2]           0           0        0.00 
                                      ser_hdr_data           0           0        0.00 
                                     ser_mode_done           1           1      100.00 
                                      ser_nack_ack           1           1      100.00 
                                  ser_pp_mode_done           1           1      100.00 
                                         ser_rx_tx           0           0        0.00 
                      ser_rx_tx_bits_count_mux_out           0           0        0.00 
                            ser_rx_tx_mux_sel[0-2]           0           0        0.00 
                                        ser_s_data           1           1      100.00 
                                ser_s_data_mux_out           1           1      100.00 
                          ser_to_parity_transition           1           1      100.00 
                                        stall_flag           0           0        0.00 
                                     start_pattern           1           1      100.00 
                                      stop_pattern           1           1      100.00 
                                     sys_clk_50mhz           1           1      100.00 
                                       target_nack           0           0        0.00 
                                    timer_bus_aval           0           1       50.00 
                             timer_bus_free_mix_fm           0           1       50.00 
                           timer_bus_free_mix_fm_p           0           1       50.00 
                               timer_bus_free_pure           0           1       50.00 
                                    timer_bus_idle           0           0        0.00 
                                         timer_cas           1           1      100.00 
                                      timer_crhpol           0           1       50.00 
                                timer_newcrlck_i2c           0           1       50.00 
                                timer_newcrlck_i3c           0           1       50.00 
                                       tx_daa_done           1           1      100.00 
                                 tx_en_hdr_mux_out           0           0        0.00 
                                     tx_en_mux_out           1           1      100.00 
                                  tx_en_mux_sel[0]           1           1      100.00 
                                  tx_en_mux_sel[1]           0           0        0.00 
                                  tx_en_mux_sel[2]           1           1      100.00 
                          tx_mode_hdr_mux_out[0-2]           0           0        0.00 
                              tx_mode_mux_out[0-1]           1           1      100.00 
                                tx_mode_mux_out[2]           0           0        0.00 
                                tx_mode_mux_sel[0]           1           1      100.00 
                                tx_mode_mux_sel[1]           0           0        0.00 
                                tx_mode_mux_sel[2]           1           1      100.00 

Total Node Count     =        751 
Toggled Node Count   =        158 
Untoggled Node Count =        593 

Toggle Coverage      =      24.30% (365 of 1502 bins)

=================================================================================
=== Instance: /SDR_HDR_TB_FINAL
=== Design Unit: work.SDR_HDR_TB_FINAL
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        16        13         3    81.25%

================================Branch Details================================

Branch Coverage for instance /SDR_HDR_TB_FINAL

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File SDR_HDR_TB_FINAL.sv
------------------------------------IF Branch------------------------------------
    137                                       40     Count coming in to IF
    137             1                          1     	 if (i == 'b0)
                                              39     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    144                                       40     Count coming in to IF
    144             1                         24     	 if(cg.i_data_config_mux_sel == 1'b1) begin
                                              16     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    163                                       40     Count coming in to IF
    163             1                          5             if(send_enthdr) begin
                                              35     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    172                                       40     Count coming in to IF
    172             1                    ***0***             if(!cg.RAND_CP && cg.RAND_TOC && DUT.u_i3c_engine.o_hdrengine_en)
                                              40     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    285                                        5     Count coming in to IF
    285             1                          1     if(BROADCAST == EXPECTED_BROADCAST)
                                               4     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    298                                        5     Count coming in to IF
    298             1                          1     if(ENTHDR0 == EXPECTED_ENTHDR0) begin
                                               4     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    317                                        1     Count coming in to IF
    317             1                          1     			if(!scl_tb)       //drive ack when scl is low
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    324                                        1     Count coming in to IF
    324             1                          1     						if(!scl_tb)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         3         3    50.00%

================================Condition Details================================

Condition Coverage for instance /SDR_HDR_TB_FINAL --

  File SDR_HDR_TB_FINAL.sv
----------------Focused Condition View-------------------
Line       137 Item    1  (i == 0)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    (i == 0)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (i == 0)_0            -                             
  Row   2:          1  (i == 0)_1            -                             

----------------Focused Condition View-------------------
Line       172 Item    1  (~cg.RAND_CP && cg.RAND_TOC && DUT.u_i3c_engine.o_hdrengine_en)
Condition totals: 0 of 3 input terms covered = 0.00%

                       Input Term   Covered  Reason for no coverage   Hint
                      -----------  --------  -----------------------  --------------
                       cg.RAND_CP         N  '_0' not hit             Hit '_0'
                      cg.RAND_TOC         N  '_1' not hit             Hit '_1'
  DUT.u_i3c_engine.o_hdrengine_en         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                         Non-masking condition(s)      
 ---------  ---------  --------------------               -------------------------     
  Row   1:    ***0***  cg.RAND_CP_0                       (cg.RAND_TOC && DUT.u_i3c_engine.o_hdrengine_en)
  Row   2:          1  cg.RAND_CP_1                       -                             
  Row   3:          1  cg.RAND_TOC_0                      ~cg.RAND_CP                   
  Row   4:    ***0***  cg.RAND_TOC_1                      (~cg.RAND_CP && DUT.u_i3c_engine.o_hdrengine_en)
  Row   5:          1  DUT.u_i3c_engine.o_hdrengine_en_0  (~cg.RAND_CP && cg.RAND_TOC)  
  Row   6:    ***0***  DUT.u_i3c_engine.o_hdrengine_en_1  (~cg.RAND_CP && cg.RAND_TOC)  

----------------Focused Condition View-------------------
Line       285 Item    1  (BROADCAST == 252)
Condition totals: 1 of 1 input term covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (BROADCAST == 252)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (BROADCAST == 252)_0  -                             
  Row   2:          1  (BROADCAST == 252)_1  -                             

----------------Focused Condition View-------------------
Line       298 Item    1  (ENTHDR0 == 64)
Condition totals: 1 of 1 input term covered = 100.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  (ENTHDR0 == 64)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (ENTHDR0 == 64)_0     -                             
  Row   2:          1  (ENTHDR0 == 64)_1     -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      3         3         0   100.00%

================================Expression Details================================

Expression Coverage for instance /SDR_HDR_TB_FINAL --

  File SDR_HDR_TB_FINAL.sv
----------------Focused Expression View-----------------
Line       161 Item    1  ((~i_data_config_mux_sel_tb && i_controller_en_tb) && i_i3c_i2c_sel_tb)
Expression totals: 3 of 3 input terms covered = 100.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  i_data_config_mux_sel_tb         Y
        i_controller_en_tb         Y
          i_i3c_i2c_sel_tb         Y

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:          1  i_data_config_mux_sel_tb_0  (i_i3c_i2c_sel_tb && i_controller_en_tb)
  Row   2:          1  i_data_config_mux_sel_tb_1  -                             
  Row   3:          1  i_controller_en_tb_0        ~i_data_config_mux_sel_tb     
  Row   4:          1  i_controller_en_tb_1        (i_i3c_i2c_sel_tb && ~i_data_config_mux_sel_tb)
  Row   5:          1  i_i3c_i2c_sel_tb_0          (~i_data_config_mux_sel_tb && i_controller_en_tb)
  Row   6:          1  i_i3c_i2c_sel_tb_1          (~i_data_config_mux_sel_tb && i_controller_en_tb)


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      97        94         3    96.90%

================================Statement Details================================

Statement Coverage for instance /SDR_HDR_TB_FINAL --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File SDR_HDR_TB_FINAL.sv
    17                                               module SDR_HDR_TB_FINAL ();
    18                                               
    19                                               	//--------------------------------------------- 1.Testbench signals-----------------------------------//
    20                                               	// Clock and reset signals
    21                                                   reg          i_clk_tb           		;
    22                                                   reg          i_rst_n_tb         		;  
    23                                                   
    24                                                   // Design Inputs   
    25                                                   reg          i_controller_en_tb     	;        
    26                                                   reg          i_i3c_i2c_sel_tb 			;
    27                                                   //reg          i_hdr_en_tb				   ; // enable signal for the hdr mode
    28                                                   reg          i_ccc_en_dis_hj_tb			;
    29                                               
    30                                                   reg   [7:0]  i_regf_config_tb            ;
    31                                                   reg          i_data_config_mux_sel_tb    ;  //1: to write configurations to the controller ,     0:i3c blocks to access reg file  
    32                                                   reg   [11:0] i_regf_wr_address_config_tb ;
    33                                                   reg          i_regf_wr_en_config_tb      ;
    34                                                   reg          i_regf_rd_en_config_tb      ;
    35                                               
    36                                                   reg          i_ccc_done_tb            ; // done signal from CCC block
    37                                                   reg          i_ddr_mode_done_tb    	; // done signal from ddr block
    38                                               
    39                                                   wire         sda_tb                		;
    40                                               
    41                                                  
    42                                                   // Design Output
    43                                                   wire         o_sdr_rx_valid_tb     	  ; // output to host >> valid data are loaded
    44                                                   wire         o_ctrl_done_tb        	  ; // sdr block done signal
    45                                                   wire         scl_tb                	  ;
    46                                                   wire         o_ddrmode_enable_tb        ; // enable for the ddr block
    47                                                   wire         o_ccc_enable_tb            ; // enable for the CCC block
    48                                                   wire  [11:0] o_regf_address_special_tb  ; // regf special address
    49                                               
    50                                               
    51                                               //------------------------------------------------Internal Wires----------------------------------------//
    52                                                   logic               sda_drive             ;
    53                                                   bit frame_ended;
    54                                                   event event_a;
    55                                               
    56                                               
    57                                               //------------------------------------------------2.Clock Generetaion----------------------------------------//
    58                                               
    59                                               //always #(CLK_PERIOD/2) i_clk_tb = ~i_clk_tb;
    60                                               initial begin
    61              1                          1     	i_clk_tb = 'b0;
    62              1                      43340     	while(running == 1)
    63              1                      43339     		#(CLK_PERIOD/2) i_clk_tb = ~i_clk_tb;
    63              2                      43339     
    64                                               end
    65                                               
    66                                               //------------------------------------------------3.Tasks and Covergroups-----------------------------------//
    67                                                   
    68                                               //create object from the class inside the  package	
    69                                                configuration cg;
    70                                               
    71                                               // create a covergroup
    72                                               covergroup CovPort();
    73                                                 
    74                                                 // 1.checking input values coverage after randomization
    75                                                 CP1: coverpoint cg.i_controller_en {
    76                                                   bins zero = {0};
    77                                                   bins one =  {1};
    78                                                 }
    79                                               
    80                                                 CP2: coverpoint cg.i_i3c_i2c_sel {
    81                                                   bins zero = {0};
    82                                                   bins one  = {1};
    83                                                 }
    84                                                 CP3: coverpoint cg.i_data_config_mux_sel {
    85                                                 	 bins zero  = {0};
    86                                                 	 bins one   = {1};
    87                                                 }
    88                                               
    89                                                 CP4: coverpoint cg.RAND_TOC {
    90                                                 	 bins zero  = {0};
    91                                                 	 bins one   = {1};
    92                                                 }
    93                                               
    94                                                 CP5: coverpoint cg.RAND_CP {
    95                                                 	 bins zero  = {0};
    96                                                 	 bins one   = {1};
    97                                                 }
    98                                               /*
    99                                                EN_I3C_MUX : cross CP1,CP2,CP3 {
    100                                                 bins write_config = binsof(CP1.one) && binsof(CP2.one) && binsof(CP3.one);   // to ensure that all configurations are written
    101                                                 bins write_data = binsof(CP1.one) && binsof(CP2.one) && binsof(CP3.zero); // to start writing data instead of configuration
    102                                                 bins en_i2c = binsof(CP1.one) && binsof(CP2.zero) && binsof(CP3.zero);
    103                                                 ignore_bins not_important = EN_I3C_MUX with (CP1 == 0); 
    104                                               } */
    105                                              /*
    106                                               ENGINE_CASES: cross CP4,CP5 {
    107                                               	 bins CP0_TOC0 = binsof(CP4.zero) && binsof(CP5.zero);
    108                                               	 bins CP0_TOC1 = binsof(CP4.zero) && binsof(CP5.one);	 
    109                                               	 bins CP1_TOC0 = binsof(CP4.one) && binsof(CP5.zero);
    110                                               	 bins CP1_TOC1 = binsof(CP4.one) && binsof(CP5.one);
    111                                               } */
    112                                                /*
    113                                                // 2. checking output coverage
    114                                                // 2.1 ENTHDR states coverage check
    115                                                CP6: coverpoint DUT.u_enthdr.state {
    116                                                  bins  t1 = (IDLE       => BROADCAST);
    117                                                  bins  t2 = (BROADCAST  => ACK);
    118                                                  bins  t3 = (ACK        => ENTHDR_DDR);
    119                                                  bins  t4 = (ENTHDR_DDR => PARITY);
    120                                                  bins  t5 = (PARITY     => IDLE);
    121                                                }  */
    122                                              endgroup : CovPort
    123                                              
    124                                                //create handle from this covergroup
    125                                              CovPort xyz;
    126                                              
    127                                              task run ();
    128                                              begin
    129                                              	bit send_enthdr;
    130                                              	int i;
    131             1                          1       for (i =0 ; i < 40; i++) begin
    131             2                         40     
    132                                                	 //frame_ended = 1'b0;
    133             1                         40     	 cg = new();
    134             1                         40     	 cg.randomize();
    135                                                  
    136                                                  // put initial value for the mux to be 1 to write configuration in the first loop
    137                                              	 if (i == 'b0)
    138                                              	 begin
    139             1                          1     	 	 cg.i_data_config_mux_sel = 1'b1;
    140             1                          1     	 	 cg.i_regf_wr_en_config = 1'b1;   	
    141                                              	 end
    142                                                  
    143                                                  // write configurations if : initially sel = 1 or randomized value of the sel is 1
    144                                              	 if(cg.i_data_config_mux_sel == 1'b1) begin
    145             1                         24     	 		 write_configurations();
    146                                              	 end
    147                                              	 
    148             1                         40     	 	  i_controller_en_tb            = cg.i_controller_en  			;               
    149             1                         40             i_i3c_i2c_sel_tb              = cg.i_i3c_i2c_sel     			;           
    150             1                         40             i_data_config_mux_sel_tb      = cg.i_data_config_mux_sel        ;                    
    151             1                         40             i_regf_wr_en_config_tb        = cg.i_regf_wr_en_config          ;   
    152             1                         40             i_regf_rd_en_config_tb        = cg.i_regf_rd_en_config          ;    
    153                                                      //i_hdr_en_tb                   = cg.i_hdr_en            			;
    154             1                         40             i_ccc_done_tb                 = cg.i_ccc_done          			;
    155             1                         40             i_ddr_mode_done_tb            = cg.i_ddr_mode_done     			;
    156                                              	 
    157                                                     
    158                                              //<---------------------- Checking Output ----------------------------->//
    159                                                      
    160                                                // Test Case 1: Check that ENTHDR CCC is sent.
    161             1                         40             send_enthdr = i_controller_en_tb && i_i3c_i2c_sel_tb && ~i_data_config_mux_sel_tb ;
    162                                                      
    163                                                      if(send_enthdr) begin
    164             1                          5             	check_output(); // function that reads the sda line and compares it with the correct CCC
    165             1                          5             	frame_ended = 1'b1;
    166             1                          5             	#(CLK_PERIOD)
    167             1                          5             	frame_ended = 1'b0;
    168                                                      end
    169                                              
    170                                              
    171                                                 // Test Case 2: Normal transaction(CP=0) with exit pattern(TOC=1) after it followed by stop bit.
    172                                                      if(!cg.RAND_CP && cg.RAND_TOC && DUT.u_i3c_engine.o_hdrengine_en)
    173                                                      	begin
    174                                                      		//check that ddr block is enabled and then the engine returns to sdr mode and sends stop bit
    175             1                    ***0***             		->event_a;
    176             1                    ***0***             		#(100000*CLK_PERIOD)
    177             1                    ***0***             		i_ddr_mode_done_tb = 1'b1;
    178                                              
    179                                              
    180                                                      	end
    181                                              /*
    182                                              
    183                                                    // Test Case 3: CCC(CP=1) with exit pattern(TOC=1) after it followed by stop bit.
    184                                                      if(cg.RAND_CP && cg.RAND_TOC && DUT.u_i3c_engine.o_hdrengine_en)
    185                                                      	begin
    186                                                      		//check that ccc block is enabled and then the engine returns to sdr mode and sends stop bit
    187                                                      		//->event_a;
    188                                                      		#(100000*CLK_PERIOD)
    189                                                      		i_ccc_mode_done_tb = 1'b1;
    190                                              
    191                                                      	end
    192                                              
    193                                                     // Test Case 4: Normal Transaction(CP=0) with restart pattern(TOC=0) after it block is enabled again.
    194                                                      if(!cg.RAND_CP && !cg.RAND_TOC && DUT.u_i3c_engine.o_hdrengine_en)
    195                                                      	begin
    196                                                      		//check that ddr block is enabled and
    197                                                      		//->event_a;
    198                                                      		#(100000*CLK_PERIOD)
    199                                                      		i_ddr_mode_done_tb = 1'b1;
    200                                              
    201                                                     // Test Case 5: CCC(CP=1) with restart pattern(TOC=0) after it block is enabled again.
    202                                                      if(cg.RAND_CP && !cg.RAND_TOC && DUT.u_i3c_engine.o_hdrengine_en)
    203                                                      	begin
    204                                                      		//check that ddr block is enabled and
    205                                                      		//->event_a;
    206                                                      		#(100000*CLK_PERIOD)
    207                                                      		i_ddr_mode_done_tb = 1'b1;        		
    208                                              
    209                                                      	end  
    210                                                      	*/	     	
    211                                                    end
    212                                                      	// check that all inputs are as needed : en = 1, sel = i3c, mux_sel = 0, crossbins check:
    213             1                          1             xyz.sample();
    214                                              
    215             1                          1     			#(CLK_PERIOD);
    216                                              
    217                                                   end
    218                                               
    219                                              	endtask
    220                                              
    221                                              task write_configurations();
    222                                              	begin
    223                                              		     // DWORD0
    224             1                         24     	 #(2*CLK_PERIOD)																		    			; 
    225             1                         24     		i_regf_config_tb     = { cg.RAND_CMD[0] , cg.RAND_TID , cg.RAND_CMD_ATTR }  												    ;
    226             1                         24         	i_regf_wr_address_config_tb = config_location 															;
    227                                                  	    
    228             1                         24           #(2*CLK_PERIOD)  																		; 
    229             1                         24     		i_regf_config_tb     = { cg.RAND_CP , cg.RAND_CMD[7:1] } 															    ;
    230             1                         24         	i_regf_wr_address_config_tb = config_location + 'd1 														;
    231                                              
    232             1                         24           #(2*CLK_PERIOD)  																		; 
    233             1                         24     		i_regf_config_tb     = { cg.RAND_DTT[0] , cg.RAND_RESERVED , cg.RAND_DEV_INDEX }  											    ;		    
    234             1                         24         	i_regf_wr_address_config_tb = config_location + 'd2 														;
    235                                              
    236             1                         24           #(2*CLK_PERIOD)  																		; 
    237             1                         24     		i_regf_config_tb     = { cg.RAND_TOC , cg.RAND_WROC , cg.RAND_RnW ,cg.RAND_MODE , cg.RAND_DTT[2:1]} 										;
    238             1                         24         	i_regf_wr_address_config_tb = config_location + 'd3 														;
    239                                              
    240                                                    // DWORD 1
    241             1                         24            #(2*CLK_PERIOD) ;  																		; 
    242             1                         24     		i_regf_config_tb     = cg.RAND_DEF_BYTE     																;
    243             1                         24         	i_regf_wr_address_config_tb  = config_location + 'd4 														;	
    244                                              
    245             1                         24            #(2*CLK_PERIOD) ; 																		; 
    246             1                         24     		i_regf_config_tb     = cg.RAND_DATA_TWO     																;
    247             1                         24         	i_regf_wr_address_config_tb  = config_location + 'd5 														;
    248                                              
    249             1                         24            #(2*CLK_PERIOD) ; 																		; 
    250             1                         24     		i_regf_config_tb     = cg.RAND_DATA_THREE     																;
    251             1                         24         	i_regf_wr_address_config_tb  = config_location + 'd6 														;
    252                                              
    253             1                         24            #(2*CLK_PERIOD) ; 																		; 
    254             1                         24     		i_regf_config_tb     = cg.RAND_DATA_FOUR     																;
    255             1                         24         	i_regf_wr_address_config_tb  = config_location + 'd7 														;
    256                                                
    257             1                         24             #(CLK_PERIOD) ;
    258                                              	end
    259                                              endtask : write_configurations
    260                                              
    261                                              
    262                                              task check_output ();
    263                                              	begin
    264                                              		logic [7:0] BROADCAST; // 7'h7E+ R/w bit
    265                                              		logic [8:0] ENTHDR0; 
    266                                              
    267             1                          5     		BROADCAST = 8'b0; // 7'h7E+ R/w bit
    268             1                          5     		ENTHDR0 = 9'b0;
    269                                              		// ddr code: 0x20 + T-bit
    270                                              		//frame_ended = 1'b0;
    271                                              		// once you see the start condition--> sample the first data 7E then sample 'h20 then the parity bit
    272                                              		/*bit start_condition;
    273                                              		start_condition = ~sda_tb &&  ~scl_tb 
    274                                              		if(start_condition) begin
    275                                              			data_check[i] <= //sda
    276                                              		end
    277                                              */
    278             1                          5     for(int i=0; i < 8 ; i++)   //receive first 8 bits of 7E and write bit
    278             2                         40     
    279                                               	begin  
    280             1                         40     	   @(posedge scl_tb)
    281             1                         40     	   	BROADCAST['d7 - i] = sda_tb;
    282                                               	end
    283                                              
    284             1                          5     @(negedge scl_tb)
    285                                              if(BROADCAST == EXPECTED_BROADCAST)
    286                                               begin
    287             1                          1     		$display("Broadcast frame is received");
    288             1                          1     		send_ack();
    289                                               end
    290                                              
    291             1                          5     for(int i=0; i < 9 ; i++)   //receive first 8 bits of 7E and write bit
    291             2                         45     
    292                                               	begin  
    293             1                         45     	   @(posedge scl_tb)
    294             1                         45     	   	ENTHDR0['d8 - i] = sda_tb;
    295                                               	end
    296                                               //@(negedge scl_tb)
    297                                              
    298                                              if(ENTHDR0 == EXPECTED_ENTHDR0) begin
    299             1                          1     	$display("ENTHDR frame is received");
    300             1                          1     	frame_ended = 1'b1;
    301             1                          1     	#(2*CLK_PERIOD)
    302             1                          1     	frame_ended = 1'b0;
    303                                              
    304                                              	//@(frame_ended.triggered);
    305                                              	//$display($time,"\tEvent triggered");
    306                                              
    307                                              end	   		
    308                                              
    309                                              
    310                                              		
    311                                              	end 
    312                                              endtask
    313                                              
    314                                              task send_ack;
    315                                              	begin
    316             1                          1     		#(30*CLK_PERIOD)
    317                                              			if(!scl_tb)       //drive ack when scl is low
    318                                              			  begin  	
    319             1                          1     					sda_drive = 1'b0; //ack bit
    320                                              
    321             1                          1     				  @(negedge scl_tb)
    322             1                          1     				  #(30*CLK_PERIOD)
    323                                              
    324                                              						if(!scl_tb)
    325             1                          1     				 			sda_drive = 'bz;     
    326                                              			  end
    327                                              	end
    328                                              endtask
    329                                              
    330                                              
    331                                              task reset;
    332                                              	begin
    333             1                          1     	   i_rst_n_tb 		      = 1'b1;
    334             1                          1     		# (CLK_PERIOD)
    335             1                          1     		i_rst_n_tb 				= 1'b0; // activated
    336             1                          1     		# (CLK_PERIOD)
    337             1                          1     		i_rst_n_tb 				= 1'b1; // de-activated
    338                                              
    339                                              	end	
    340                                              	endtask
    341                                              
    342                                              	task initialize; 
    343                                              	begin
    344             1                          1     		i_clk_tb 				= 1'b0;
    345             1                          1     		i_rst_n_tb 				= 1'b1;
    346             1                          1     		i_i3c_i2c_sel_tb        = 1'b1;  //i3c mode
    347             1                          1     		i_controller_en_tb      = 1'b0;
    348             1                          1     		i_ccc_en_dis_hj_tb      = 1'b0;
    349             1                          1           i_ccc_done_tb			= 1'b0;
    350             1                          1           i_ddr_mode_done_tb      = 1'b0;
    351             1                          1     		sda_drive 				= 1'bz;
    352                                              		//i_ddr_pp_od_tb			= 1'b0;
    353                                              		//i_ddr_pp_od_tb			= 1'b0;
    354             1                          1     		i_data_config_mux_sel_tb   = 1'b1;
    355             1                          1     		i_regf_rd_en_config_tb   	= 1'b0;								
    356             1                          1         	i_regf_wr_en_config_tb   	= 1'b1;
    357                                              
    358                                              	end
    359                                              	endtask
    360                                              
    361                                              //------------------------------------------------4. Assertions-----------------------------------//	
    362                                              
    363                                              
    364                                               
    365                                              /*
    366                                              
    367                                              property p1 ;
    368                                              	@(posedge i_clk_tb) DUT.u_enthdr.o_i3cengine_done |->  ##2 DUT.u_i3c_engine.o_hdrengine_en
    369                                              endproperty
    370                                              	assert property(p1) $display("Flags1 are correct"); else $error("Error in flags1");
    371                                              	cover property(p1);
    372                                              
    373                                              property p2 ;
    374                                              	@(posedge i_clk_tb) frame_ended |->  ##3 DUT.u_enthdr.o_i3cengine_done
    375                                              endproperty
    376                                              	assert property(p2) $display("Flags2 are correct"); else $error("Error in flags2");
    377                                              	cover property(p2);	
    378                                              
    379                                              
    380                                               property p3 ;
    381                                               	@ (event_a.triggered) DUT.u_hdr_engine.o_ddrmode_en 
    382                                               endproperty
    383                                               assert property(p3) $display("ddr_en is correct"); else $error("Error in ddr_en");
    384                                               
    385                                              
    386                                                                                                // Test Case 2//
    387                                                assert property (
    388                                               	 @(posedge i_clk_tb) (i_ddr_mode_done_tb && cg.i_regf_config_tb) |-> DUT.u_hdr_engine.o_i3cengine_hdrengine_done  
    389                                               	 );
    390                                              */
    391                                              //------------------------------------------------Initial Block-----------------------------------//
    392                                              
    393                                                
    394                                                  // locally driven value
    395                                                  assign sda_tb   = sda_drive 			;
    396                                              
    397                                              initial begin
    398             1                          1     	xyz = new();
    399                                              
    400             1                          1     	initialize();
    401             1                          1     	reset();
    402             1                          1     	run();
    403             1                          1     	running = 0;
    404             1                          1     	$display("Coverage = %.2f%%", xyz.get_coverage());

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        100        53        47    53.00%

================================Toggle Details================================

Toggle Coverage for instance /SDR_HDR_TB_FINAL --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       frame_ended           1           1      100.00 
                                     i_ccc_done_tb           1           1      100.00 
                                i_ccc_en_dis_hj_tb           0           0        0.00 
                                          i_clk_tb           1           1      100.00 
                                i_controller_en_tb           1           1      100.00 
                          i_data_config_mux_sel_tb           1           1      100.00 
                                i_ddr_mode_done_tb           1           1      100.00 
                                  i_i3c_i2c_sel_tb           1           1      100.00 
                             i_regf_config_tb[0-7]           1           1      100.00 
                            i_regf_rd_en_config_tb           1           1      100.00 
                  i_regf_wr_address_config_tb[0-2]           1           1      100.00 
                 i_regf_wr_address_config_tb[3-11]           0           0        0.00 
                            i_regf_wr_en_config_tb           1           1      100.00 
                                        i_rst_n_tb           1           1      100.00 
                                   o_ccc_enable_tb           1           1      100.00 
                                    o_ctrl_done_tb           1           1      100.00 
                               o_ddrmode_enable_tb           0           0        0.00 
                   o_regf_address_special_tb[0-11]           0           0        0.00 
                                 o_sdr_rx_valid_tb           1           1      100.00 
                                            scl_tb           1           1      100.00 
                                         sda_drive           1           0       50.00 
                                            sda_tb           1           1      100.00 

Total Node Count     =         50 
Toggled Node Count   =         26 
Untoggled Node Count =         24 

Toggle Coverage      =      53.00% (53 of 100 bins)


Total Coverage By Instance (filtered view): 27.67%

