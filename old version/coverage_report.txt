Coverage Report by instance with details

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_i3c_engine
=== Design Unit: work.i3c_engine
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        68        20        48    29.41%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_i3c_engine

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File new_i3c_engine.v
------------------------------------IF Branch------------------------------------
    180                                        2     Count coming in to IF
    180             1                          1     assign hdr_en = (i_regf_mode == 3'd6)? 1:0 ;
    180             2                          1     assign hdr_en = (i_regf_mode == 3'd6)? 1:0 ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    187                                  1859008     Count coming in to IF
    187             1                          1         if (!i_rst_n) 
    217             1                    1859007         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    231                                  1859007     Count coming in to CASE
    232             1                       4864                 IDLE:
    273             1                      14583                 START:
    374             1                    ***0***                 ARBITRATION: 
    440             1                    ***0***                 SDR_MODE:
    481             1                    ***0***                 I2C_MODE:
    524             1                    ***0***                 DAA: 
    548             1                    ***0***                 HOT_JOIN: 
    620             1                    ***0***                 STOP:
    657             1                    ***0***                 IBI: begin
    699             1                    ***0***                  CTRL_REQ: begin
    728             1                     345131                 ENTHDR: 
    783             1                    1494428                  HDR_ENGINE:
                                               1     All False Count
Branch totals: 5 hits of 13 branches = 38.46%

------------------------------------IF Branch------------------------------------
    252                                     4864     Count coming in to IF
    252             1                       4861                         if (i_controller_en)
    261             1                    ***0***                         else if (i_rx_arbitration_lost)
    266             1                          3                         else
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    276                                    14583     Count coming in to IF
    276             1                       4861                         if (i_tx_mode_done)
    368             1                       9722                         else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    281                                     4861     Count coming in to IF
    281             1                    ***0***                                 if (i_ccc_en_dis_hj) //for enable/disable events to prevent Bus-Initialization or DAA interruptions.
    299             1                    ***0***                                 else if (!dynamic_address_assigned && i_i3c_i2c_sel)
    316             1                       4861                                 else
Branch totals: 1 hit of 3 branches = 33.33%

------------------------------------CASE Branch------------------------------------
    318                                     4861     Count coming in to CASE
    319             1                       4861                                         1'b1: 
    360             1                    ***0***                                         1'b0: 
                                         ***0***     All False Count
Branch totals: 1 hit of 3 branches = 33.33%

------------------------------------IF Branch------------------------------------
    322                                     4861     Count coming in to IF
    322             1                       4861                                                if(hdr_en) //input from outside (configration) >> ENABLES THE ENTHDR BLOCK
    340             1                    ***0***                                                else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    376                                  ***0***     Count coming in to IF
    376             1                    ***0***                         if (i_rx_mode_done && i_scl_neg_edge) 
    382             1                    ***0***                         else if (arbitrated_adress_ready && i_scl_neg_edge)
    428             1                    ***0***                         else if (write_adress_to_regf && o_regf_rd_en )
    432             1                    ***0***                         else if (write_adress_to_regf)
                                         ***0***     All False Count
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    384                                  ***0***     Count coming in to IF
    384             1                    ***0***                              if (i_regf_data_rd == {7'h02,1'b0})  /// hotjoin address
    403             1                    ***0***                                 else if (i_regf_data_rd[0]==1'b1)  /// IBI requesr
    407             1                    ***0***                                 else if (i_regf_data_rd[0]==1'b0) /// Controller role request
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    443                                  ***0***     Count coming in to IF
    443             1                    ***0***                         if (i_sdr_done)
    458             1                    ***0***                         else if (i_rx_arbitration_lost)
    469             1                    ***0***                         else if (i_sdr_ibi_payload_done)
    475             1                    ***0***                         else
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    497                                  ***0***     Count coming in to IF
    497             1                    ***0***                         if (i_i2c_done)
    511             1                    ***0***                         else if (i_rx_arbitration_lost)
    518             1                    ***0***                         else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    526                                  ***0***     Count coming in to IF
    526             1                    ***0***                         if (i_rx_arbitration_lost)
    535             1                    ***0***                        else if (i_daa_error)
    540             1                    ***0***                        else if (i_daa_done) 
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    550                                  ***0***     Count coming in to IF
    550             1                    ***0***                         if (i_hj_done)
    613             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    553                                  ***0***     Count coming in to IF
    553             1                    ***0***                                 if (i_hj_daa_req)
    571             1                    ***0***                                 else if (i_hj_cr_pass)
    592             1                    ***0***                                 else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    623                                  ***0***     Count coming in to IF
    623             1                    ***0***                         if((i_tx_mode_done && send_stop)) /// editted
    645             1                    ***0***                         else if (i_tx_mode_done && !send_stop)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    672                                  ***0***     Count coming in to IF
    672             1                    ***0***                         if (i_ibi_payload_en)      
    692             1                    ***0***                         else if (i_ibi_done)    
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    700                                  ***0***     Count coming in to IF
    700             1                    ***0***                   if(i_crh_send_stop)
    713             1                    ***0***                   else if(i_crh_done)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    744                                   345131     Count coming in to IF
    744             1                       4861                         if (i_enthdr_done)
    775             1                     340270                         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    788                                  1494428     Count coming in to IF
    788             1                       4860                      if(i_hdrengine_done)
    815             1                    1489568                      else 
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      14         1        13     7.14%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_i3c_engine --

  File new_i3c_engine.v
----------------Focused Condition View-------------------
Line       180 Item    1  (i_regf_mode == 6)
Condition totals: 1 of 1 input term covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (i_regf_mode == 6)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (i_regf_mode == 6)_0  -                             
  Row   2:          1  (i_regf_mode == 6)_1  -                             

----------------Focused Condition View-------------------
Line       299 Item    1  (~dynamic_address_assigned && i_i3c_i2c_sel)
Condition totals: 0 of 2 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  dynamic_address_assigned         N  '_0' not hit             Hit '_0'
             i_i3c_i2c_sel         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  dynamic_address_assigned_0  i_i3c_i2c_sel                 
  Row   2:          1  dynamic_address_assigned_1  -                             
  Row   3:    ***0***  i_i3c_i2c_sel_0             ~dynamic_address_assigned     
  Row   4:    ***0***  i_i3c_i2c_sel_1             ~dynamic_address_assigned     

----------------Focused Condition View-------------------
Line       376 Item    1  (i_rx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_rx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_rx_mode_done                

----------------Focused Condition View-------------------
Line       382 Item    1  (arbitrated_adress_ready && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  arbitrated_adress_ready         N  No hits                  Hit '_0' and '_1'
           i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  arbitrated_adress_ready_0  -                             
  Row   2:    ***0***  arbitrated_adress_ready_1  i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0           arbitrated_adress_ready       
  Row   4:    ***0***  i_scl_neg_edge_1           arbitrated_adress_ready       

----------------Focused Condition View-------------------
Line       384 Item    1  (i_regf_data_rd == {2,0})
Condition totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_regf_data_rd == {2,0})         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:    ***0***  (i_regf_data_rd == {2,0})_0  -                             
  Row   2:    ***0***  (i_regf_data_rd == {2,0})_1  -                             

----------------Focused Condition View-------------------
Line       428 Item    1  (write_adress_to_regf && o_regf_rd_en)
Condition totals: 0 of 2 input terms covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  write_adress_to_regf         N  No hits                  Hit '_0' and '_1'
          o_regf_rd_en         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  write_adress_to_regf_0  -                             
  Row   2:    ***0***  write_adress_to_regf_1  o_regf_rd_en                  
  Row   3:    ***0***  o_regf_rd_en_0          write_adress_to_regf          
  Row   4:    ***0***  o_regf_rd_en_1          write_adress_to_regf          

----------------Focused Condition View-------------------
Line       623 Item    1  (i_tx_mode_done && send_stop)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
       send_stop         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0      -                             
  Row   2:    ***0***  i_tx_mode_done_1      send_stop                     
  Row   3:    ***0***  send_stop_0           i_tx_mode_done                
  Row   4:    ***0***  send_stop_1           i_tx_mode_done                

----------------Focused Condition View-------------------
Line       645 Item    1  (i_tx_mode_done && ~send_stop)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
       send_stop         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0      -                             
  Row   2:    ***0***  i_tx_mode_done_1      ~send_stop                    
  Row   3:    ***0***  send_stop_0           i_tx_mode_done                
  Row   4:    ***0***  send_stop_1           i_tx_mode_done                


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                      12         4         8    33.33%
    FSM Transitions                 34         4        30    11.76%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/u_i3c_engine --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 232                IDLE                   0
 374         ARBITRATION                  12
 273               START                   1
 481            I2C_MODE                   6
 440            SDR_MODE                   2
 728              ENTHDR                  13
 524                 DAA                   4
 548            HOT_JOIN                  14
 699            CTRL_REQ                  10
 657                 IBI                   3
 620                STOP                  15
 783          HDR_ENGINE                   5
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                4864          
                   START               14583          
                  ENTHDR              345131          
              HDR_ENGINE             1494429          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 259                   1                4861          IDLE -> START                 
 337                   8                4861          START -> ENTHDR               
 767                  18                4861          ENTHDR -> HDR_ENGINE          
 813                  33                4860          HDR_ENGINE -> IDLE            
    Uncovered States :
    ------------------
                   State
                   -----
             ARBITRATION
                I2C_MODE
                SDR_MODE
                     DAA
                HOT_JOIN
                CTRL_REQ
                     IBI
                    STOP
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 264                   0          IDLE -> ARBITRATION 
 411                   2          ARBITRATION -> CTRL_REQ
 405                   3          ARBITRATION -> IBI  
 401                   4          ARBITRATION -> HOT_JOIN
 214                   5          ARBITRATION -> IDLE 
 363                   6          START -> I2C_MODE   
 356                   7          START -> SDR_MODE   
 314                   9          START -> DAA        
 297                  10          START -> HOT_JOIN   
 214                  11          START -> IDLE       
 516                  12          I2C_MODE -> ARBITRATION
 507                  13          I2C_MODE -> STOP    
 214                  14          I2C_MODE -> IDLE    
 471                  15          SDR_MODE -> STOP    
 467                  16          SDR_MODE -> ARBITRATION
 214                  17          SDR_MODE -> IDLE    
 214                  19          ENTHDR -> IDLE      
 544                  20          DAA -> STOP         
 537                  21          DAA -> IDLE         
 533                  22          DAA -> ARBITRATION  
 601                  23          HOT_JOIN -> STOP    
 576                  24          HOT_JOIN -> CTRL_REQ
 569                  25          HOT_JOIN -> DAA     
 214                  26          HOT_JOIN -> IDLE    
 715                  27          CTRL_REQ -> IDLE    
 702                  28          CTRL_REQ -> STOP    
 695                  29          IBI -> IDLE         
 689                  30          IBI -> SDR_MODE     
 652                  31          STOP -> IDLE        
 641                  32          STOP -> CTRL_REQ    


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                  12         4         8    33.33%
        FSM Transitions             34         4        30    11.76%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     398       137       261    34.42%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_i3c_engine --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File new_i3c_engine.v
    34                                               module i3c_engine (
    35                                                   input   wire          i_clk                     ,
    36                                                   input   wire          i_rst_n                   ,
    37                                                   input   wire          i_controller_en           , //from device configuration of Controller/Target role
    38                                                   input   wire          i_i3c_i2c_sel             ,
    39                                                   input   wire          i_sdr_done                ,
    40                                                   input   wire          i_i2c_done                ,
    41                                                   input   wire          i_daa_done                ,
    42                                                   input   wire          i_daa_error               ,
    43                                                   input   wire          i_hj_done                 , //Hot-Join Block Done-Flag 
    44                                                   input   wire          i_hj_acc_rej              , //Hot-Join Request Accepted/Rejected flag [1 >> ACCEPTED , 0 >> REJECTED]
    45                                                   input   wire          i_hj_daa_req              , //DAA Procedure Request (Suggestion: Trigger DAA directly for time optimization)
    46                                                   input   wire          i_hj_cr_pass              , //CRR Procedure Request (Suggestion: Trigger CRH directly for time optimization)
    47                                                   input   wire          i_tx_mode_done            , //Tx Current Mode Done-Flag 
    48                                                   input   wire          i_rx_mode_done            , 
    49                                                   input   wire          i_target_nack             , //Error-Flag (Target doesn't ACK)
    50                                                   input   wire          i_rx_arbitration_lost     ,
    51                                                   input   wire          i_scl_pos_edge            ,
    52                                                   input   wire          i_scl_neg_edge            ,
    53                                                   input   wire  [7:0]   i_regf_data_rd            ,
    54                                                   input   wire          i_timer_cas               , // input from timer block >> t clock after start is done 
    55                                                   input   wire          i_ccc_en_dis_hj           , //from an external input, for enable/disable events to prevent Bus-Initialization or DAA interruptions.
    56                                                   input   wire          i_ibi_payload_en          ,
    57                                                   input   wire          i_sdr_ibi_payload_done    ,
    58                                                   input   wire          i_ibi_done                ,
    59                                                   input   wire          i_crh_done              ,    
    60                                                   //input   wire          i_crh_ncr_win           ,
    61                                                   //input   wire          i_crh_ncr_take_control  ,
    62                                                   input   wire          i_crh_send_stop           ,
    63                                               
    64                                               
    65                                                   ///////////////////////hdr//////////////////////////////////
    66                                                   //input   wire          i_hdr_en                 , 
    67                                                   input   wire [2:0]    i_regf_mode               ,
    68                                               
    69                                               
    70                                                   input   wire          i_enthdr_done               ,
    71                                                   input   wire          i_hdrengine_done          ,
    72                                                   ////////////////////////////////////////////////////////////
    73                                                   output  reg           o_sdr_en                  ,
    74                                                   output  reg           o_i2c_en                  , 
    75                                                   output  reg           o_daa_en                  ,
    76                                                   output  reg           o_ibi_en                  ,
    77                                                   output  reg           o_hj_en                   , //Hot-Join Enable-Signal
    78                                                   output  reg           o_hj_ccc                  , //Sending Hot-Join CCCs Request (if Host wanna ENHJ or DISHJ without prior HJ Request)
    79                                                   output  reg           o_hj_daa_en               , //enables DAA directly after HJ with an internal Repeated_Start
    80                                                   output  reg           o_hj_crh_en               , //enables CRH directly after HJ with an internal Repeated_Start
    81                                                   output  reg           o_crh_en                  ,
    82                                                   output  reg           o_crh_stop_is_sent        ,
    83                                                   output  reg           o_tx_en                   , //Tx Enable-Flag
    84                                                   output  reg   [2:0]   o_tx_mode                 , //Tx Current Mode Selector 
    85                                                   output  reg           o_rx_data_valid           ,
    86                                                   output  reg           o_pp_od                   , //Push-Pull/Open-Drain Selector (Always = 0 in I2C)
    87                                                   output  reg           o_scl_idle                , // helds the scl to idle
    88                                                   output  reg           o_bit_cnt_en              ,
    89                                                   output  reg           o_regf_rd_en              ,
    90                                                   output  reg   [2:0]   o_regf_rd_en_mux_sel      ,
    91                                                   output  reg   [2:0]   o_regf_rd_address_mux_sel ,
    92                                                   output  reg   [2:0]   o_regf_wr_en_mux_sel      ,
    93                                                   output  reg   [2:0]   o_scl_pp_od_mux_sel       ,
    94                                                   output  reg   [2:0]   o_tx_en_mux_sel           ,
    95                                                   output  reg   [2:0]   o_tx_mode_mux_sel         ,
    96                                                   output  reg   [2:0]   o_rx_en_mux_sel           ,
    97                                                   output  reg   [2:0]   o_rx_mode_mux_sel         ,
    98                                                   output  reg   [2:0]   o_bit_cnt_en_mux_sel      ,
    99                                                   output  reg   [2:0]   o_bit_rx_cnt_en_mux_sel   ,
    100                                                  output  reg   [2:0]   o_fcnt_en_mux_sel         ,
    101                                                  output  reg   [2:0]   o_scl_idle_mux_sel        ,
    102                                                  output  reg   [2:0]   o_fcnt_no_frms_sel        ,
    103                                                  output  reg   [2:0]   o_ser_rx_tx_mux_sel       ,
    104                                                  output  reg           o_i3c_idle_flag           ,
    105                                              
    106                                                  output  reg           o_scl_stall_flag_sel      ,
    107                                                  output  reg           o_scl_stall_cycles_sel    ,
    108                                              
    109                                                  output  reg           o_controller_done         ,
    110                                                  output  reg   [2:0]   o_bits_cnt_regf_rx_tx_sel ,
    111                                                  
    112                                                  ///////////////////////hdr//////////////////////////////////
    113                                                  output  reg          o_enthdr_en                   ,
    114                                                  output  reg          o_mode_sda_sel                ,
    115                                                  output  reg          o_tx_en_sel                   ,
    116                                                  output  reg          o_hdrengine_en                ,
    117                                              
    118                                                  ///////////////////hdr_sdr_mux_sel////////////////////////
    119                                                  output reg           o_regf_wr_en_sdr_hdr_sel, 
    120                                                  output reg           o_regf_rd_en_sdr_hdr_sel, 
    121                                              
    122                                                  output reg           o_regf_data_sdr_hdr_sel,
    123                                                  output reg           o_regf_rd_address_sdr_hdr_sel,                             
    124                                                  output reg           o_scl_pp_od_sdr_hdr_sel  ,     
    125                                              
    126                                                  output  reg           o_scl_stall_flag_sdr_hdr_sel      ,
    127                                                  output  reg           o_scl_stall_cycles_sdr_hdr_sel       
    128                                              
    129                                                 /*
    130                                                  output  reg          o_mode_bit_cnt_en_mux_sel     ,
    131                                                  output  reg          o_mode_regf_rd_en_mux_sel     ,
    132                                                  output  reg          o_mode_regf_rd_address_mux_sel,
    133                                                  output  reg          o_mode_regf_wr_en_mux_sel     ,
    134                                                  output  reg          o_mode_regf_wr_data_mux_sel   ,*/          
    135                                                 
    136                                              );
    137                                              
    138                                              
    139                                              //-------------------------------- states encoding in gray --------------------------------------------
    140                                              localparam IDLE              = 4'b0000 ; 
    141                                              localparam START             = 4'b0001 ;
    142                                              localparam SDR_MODE          = 4'b0010 ;
    143                                              localparam IBI               = 4'b0011 ;
    144                                              localparam I2C_MODE          = 4'b0110 ;
    145                                              localparam STOP              = 4'b1111 ;
    146                                              localparam ARBITRATION       = 4'b1100 ;
    147                                              localparam HOT_JOIN          = 4'b1110 ;
    148                                              localparam CTRL_REQ          = 4'b1010 ;
    149                                              localparam DAA               = 4'b0100 ;
    150                                              localparam ENTHDR            = 4'b1101 ;
    151                                              localparam HDR_ENGINE        = 4'b0101 ;
    152                                              
    153                                              //--------------------------------- Mux Selection Parameters -----------------------------------------
    154                                              localparam SDR_SEL        = 3'b000 ;
    155                                              localparam I2C_SEL        = 3'b001 ;
    156                                              localparam I3C_ENGINE_SEL = 3'b010 ;
    157                                              localparam DAA_SEL        = 3'b011 ;
    158                                              localparam HJ_SEL         = 3'b100 ;
    159                                              localparam IBI_SEL        = 3'b101 ;
    160                                              localparam CRH_SEL        = 3'b110 ;
    161                                              localparam ENTHDR_SEL     = 3'b111 ;
    162                                              
    163                                              
    164                                              //--------------------------------- Mode (HDR OR SDR) -----------------------------------------
    165                                              localparam SDR_MODE_SEL     = 1'b0 ;
    166                                              localparam HDR_MODE_SEL     = 1'b1 ;
    167                                              
    168                                              
    169                                              
    170                                              //--------------------------------- internal wires declaration ------------------------------------------
    171                                              reg [3:0] state ;
    172                                              reg write_adress_to_regf    ;
    173                                              reg arbitrated_adress_ready ;
    174                                              reg dynamic_address_assigned ; 
    175                                              reg send_stop ;
    176                                              
    177                                              wire   hdr_en    ;
    178                                              
    179                                              
    180             1                          3     assign hdr_en = (i_regf_mode == 3'd6)? 1:0 ;
    181                                              //reg HDR_send_stop;
    182                                              //--------------------------------- controller main fsm -------------------------------------------------
    183                                              
    184             1                    1859008     always @(posedge i_clk or negedge i_rst_n) 
    185                                                begin: controller_main_fsm
    186                                                  
    187                                                  if (!i_rst_n) 
    188                                                      begin
    189             1                          1                 o_sdr_en          <= 1'b0   ;  
    190             1                          1                 o_i2c_en          <= 1'b0   ;
    191             1                          1                 o_daa_en          <= 1'b0   ; 
    192             1                          1                 o_hj_en           <= 1'b0   ;
    193             1                          1                 o_crh_en          <= 1'b0   ;
    194             1                          1                 o_hj_ccc          <= 1'b0   ;
    195             1                          1                 o_ibi_en          <= 1'b0   ;
    196             1                          1                 o_crh_en          <= 1'b0   ;
    197             1                          1                 o_tx_en           <= 1'b0   ; 
    198             1                          1                 o_tx_mode         <= 3'b000 ; 
    199             1                          1                 o_pp_od           <= 1'b0   ;   
    200             1                          1                 o_controller_done <= 1'b0   ; 
    201             1                          1                 o_rx_data_valid   <= 1'b0   ;
    202             1                          1                 o_bit_cnt_en      <= 1'b0   ;
    203             1                          1                 o_regf_rd_en      <= 1'b0   ;
    204             1                          1                 o_i3c_idle_flag   <= 1'b0   ; 
    205             1                          1                 o_crh_stop_is_sent <= 1'b0  ;
    206                                              
    207                                                          /////////////       internal wires      ///////////////////
    208                                              
    209             1                          1                 arbitrated_adress_ready <=  1'b0 ;
    210             1                          1                 write_adress_to_regf    <=  1'b0 ;
    211             1                          1                 dynamic_address_assigned <= 1'b1 ; //for TESTINGGGGG
    212                                              
    213                                              
    214             1                          1                 state             <= IDLE   ;          
    215                                                      end
    216                                              
    217                                                  else
    218                                                      begin 
    219             1                    1859007                  o_hdrengine_en                  <= 1'b0 ;
    220             1                    1859007                  o_enthdr_en                     <= 1'b0 ;
    221             1                    1859007                  o_mode_sda_sel                  <= SDR_MODE_SEL;
    222             1                    1859007                  o_regf_wr_en_sdr_hdr_sel        <= SDR_MODE_SEL;
    223             1                    1859007                  o_regf_rd_en_sdr_hdr_sel        <= SDR_MODE_SEL;
    224             1                    1859007                  o_regf_data_sdr_hdr_sel         <= SDR_MODE_SEL;
    225             1                    1859007                  o_regf_rd_address_sdr_hdr_sel   <= SDR_MODE_SEL;
    226             1                    1859007                  o_scl_pp_od_sdr_hdr_sel         <= SDR_MODE_SEL;
    227             1                    1859007                  o_scl_stall_flag_sdr_hdr_sel            <= SDR_MODE_SEL;
    228             1                    1859007                  o_scl_stall_cycles_sdr_hdr_sel          <= SDR_MODE_SEL;
    229             1                    1859007                  o_tx_en_sel                             <= SDR_MODE_SEL;
    230                                                           
    231                                                          case(state)
    232                                                          IDLE:
    233                                                              begin
    234             1                       4864                         o_sdr_en             <= 1'b0           ;
    235             1                       4864                         o_i3c_idle_flag      <= 1'b0           ;  
    236             1                       4864                         o_i2c_en             <= 1'b0           ; 
    237             1                       4864                         o_hj_en              <= 1'b0           ;
    238             1                       4864                         o_hj_ccc             <= 1'b0           ;
    239             1                       4864                         o_crh_en             <= 1'b0           ;
    240             1                       4864                         o_tx_en              <= 1'b0           ; 
    241             1                       4864                         o_tx_mode            <= 3'b000         ;
    242             1                       4864                         o_pp_od              <= 1'b0           ; 
    243             1                       4864                         o_controller_done    <= 1'b0           ; 
    244             1                       4864                         o_scl_idle           <= 1'b1           ; 
    245             1                       4864                         o_rx_data_valid      <= 1'b0           ;
    246             1                       4864                         o_scl_idle_mux_sel   <= I3C_ENGINE_SEL ;
    247             1                       4864                         o_bit_cnt_en_mux_sel <= I3C_ENGINE_SEL ; 
    248             1                       4864                         o_fcnt_no_frms_sel   <= I3C_ENGINE_SEL ; 
    249             1                       4864                         o_ser_rx_tx_mux_sel  <= I3C_ENGINE_SEL ;
    250             1                       4864                         o_crh_stop_is_sent <= 1'b0 ;
    251                                              
    252                                                                  if (i_controller_en)
    253                                                                      begin
    254             1                       4861                                 o_tx_en             <= 1'b1           ; 
    255             1                       4861                                 o_tx_mode           <= 3'b000         ; //START MODE
    256             1                       4861                                 o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    257             1                       4861                                 o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    258             1                       4861                                 o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    259             1                       4861                                 state               <= START          ;
    260                                                                      end
    261                                                                  else if (i_rx_arbitration_lost)
    262                                                                      begin
    263             1                    ***0***                                 o_regf_wr_en_mux_sel <= I3C_ENGINE_SEL ;
    264             1                    ***0***                                 state                <= ARBITRATION    ; 
    265                                                                      end 
    266                                                                  else
    267                                                                      begin
    268             1                          3                                 state <= IDLE ;
    269                                                                      end
    270                                                              end
    271                                              
    272                                                          /////////////////---START STATE---//////////////////
    273                                                          START:
    274                                                              begin 
    275             1                      14583                         o_scl_idle <= 1'b0 ;
    276                                                                  if (i_tx_mode_done)
    277                                                                      begin
    278             1                       4861                                 o_tx_en   <= 1'b1   ; 
    279             1                       4861                                 o_tx_mode <= 3'b000 ; 
    280             1                       4861                                 o_pp_od   <= 1'b0   ;
    281                                                                          if (i_ccc_en_dis_hj) //for enable/disable events to prevent Bus-Initialization or DAA interruptions.
    282                                                                              begin
    283             1                    ***0***                                         o_hj_en                   <= 1'b1     ;
    284             1                    ***0***                                         o_hj_ccc                  <= 1'b1     ;
    285             1                    ***0***                                         o_regf_rd_address_mux_sel <= HJ_SEL   ;
    286             1                    ***0***                                         o_regf_wr_en_mux_sel      <= HJ_SEL   ;
    287             1                    ***0***                                         o_scl_pp_od_mux_sel       <= HJ_SEL   ;
    288             1                    ***0***                                         o_tx_en_mux_sel           <= HJ_SEL   ;
    289             1                    ***0***                                         o_tx_mode_mux_sel         <= HJ_SEL   ;
    290             1                    ***0***                                         o_rx_en_mux_sel           <= HJ_SEL   ;
    291             1                    ***0***                                         o_rx_mode_mux_sel         <= HJ_SEL   ;
    292             1                    ***0***                                         o_bit_cnt_en_mux_sel      <= HJ_SEL   ;
    293             1                    ***0***                                         o_bit_rx_cnt_en_mux_sel   <= HJ_SEL   ;
    294             1                    ***0***                                         o_fcnt_en_mux_sel         <= HJ_SEL   ;
    295             1                    ***0***                                         o_fcnt_no_frms_sel        <= HJ_SEL   ;
    296             1                    ***0***                                         o_regf_rd_en_mux_sel      <= HJ_SEL   ; 
    297             1                    ***0***                                         state                     <= HOT_JOIN ;
    298                                                                              end
    299                                                                          else if (!dynamic_address_assigned && i_i3c_i2c_sel)
    300                                                                              begin
    301             1                    ***0***                                         o_daa_en                  <= 1'b1    ;                 
    302             1                    ***0***                                         o_regf_rd_address_mux_sel <= DAA_SEL ;
    303             1                    ***0***                                         o_regf_wr_en_mux_sel      <= DAA_SEL ;
    304             1                    ***0***                                         o_scl_pp_od_mux_sel       <= DAA_SEL ;
    305             1                    ***0***                                         o_tx_en_mux_sel           <= DAA_SEL ;
    306             1                    ***0***                                         o_tx_mode_mux_sel         <= DAA_SEL ;
    307             1                    ***0***                                         o_rx_en_mux_sel           <= DAA_SEL ;
    308             1                    ***0***                                         o_rx_mode_mux_sel         <= DAA_SEL ;
    309             1                    ***0***                                         o_bit_cnt_en_mux_sel      <= DAA_SEL ;
    310             1                    ***0***                                         o_bit_rx_cnt_en_mux_sel   <= DAA_SEL ;
    311             1                    ***0***                                         o_fcnt_en_mux_sel         <= DAA_SEL ;
    312             1                    ***0***                                         o_fcnt_no_frms_sel        <= DAA_SEL ;
    313             1                    ***0***                                         o_regf_rd_en_mux_sel      <= DAA_SEL ; 
    314             1                    ***0***                                         state                     <= DAA     ;
    315                                                                              end
    316                                                                          else
    317                                                                              begin 
    318                                                                                  case (i_i3c_i2c_sel)
    319                                                                                  1'b1: 
    320                                                                                  //////////////////////////////ENTHDR///////////////////////////////
    321                                                                                      begin
    322                                                                                         if(hdr_en) //input from outside (configration) >> ENABLES THE ENTHDR BLOCK
    323                                                                                          begin
    324             1                       4861                                                  o_enthdr_en               <= 1'b1       ; //enables enthdr block
    325             1                       4861                                                  o_regf_rd_en_mux_sel      <= ENTHDR_SEL ;
    326             1                       4861                                                  o_regf_rd_address_mux_sel <= ENTHDR_SEL ;
    327             1                       4861                                                  o_regf_wr_en_mux_sel      <= ENTHDR_SEL ;
    328             1                       4861                                                  o_scl_pp_od_mux_sel       <= ENTHDR_SEL ;
    329             1                       4861                                                  o_tx_en_mux_sel           <= ENTHDR_SEL ;
    330             1                       4861                                                  o_tx_mode_mux_sel         <= ENTHDR_SEL ;
    331             1                       4861                                                  o_rx_en_mux_sel           <= ENTHDR_SEL ;
    332             1                       4861                                                  o_rx_mode_mux_sel         <= ENTHDR_SEL ;
    333             1                       4861                                                  o_bit_cnt_en_mux_sel      <= ENTHDR_SEL ;
    334             1                       4861                                                  o_bit_rx_cnt_en_mux_sel   <= ENTHDR_SEL ;
    335             1                       4861                                                  o_fcnt_en_mux_sel         <= ENTHDR_SEL ;
    336             1                       4861                                                  o_scl_idle_mux_sel        <= ENTHDR_SEL ; 
    337             1                       4861                                                  state                     <= ENTHDR;
    338                                                                                          end
    339                                                                                /////////////////////////////////////////////////////////////////////
    340                                                                                         else 
    341                                                                                          begin
    342             1                    ***0***                                                  o_sdr_en                  <= 1'b1     ;
    343             1                    ***0***                                                  o_mode_sda_sel                 <= SDR_MODE_SEL    ; 
    344             1                    ***0***                                                  o_regf_rd_en_mux_sel      <= SDR_SEL  ;
    345             1                    ***0***                                                  o_regf_rd_address_mux_sel <= SDR_SEL  ;
    346             1                    ***0***                                                  o_regf_wr_en_mux_sel      <= SDR_SEL  ;
    347             1                    ***0***                                                  o_scl_pp_od_mux_sel       <= SDR_SEL  ;
    348             1                    ***0***                                                  o_tx_en_mux_sel           <= SDR_SEL  ;
    349             1                    ***0***                                                  o_tx_mode_mux_sel         <= SDR_SEL  ;
    350             1                    ***0***                                                  o_rx_en_mux_sel           <= SDR_SEL  ;
    351             1                    ***0***                                                  o_rx_mode_mux_sel         <= SDR_SEL  ;
    352             1                    ***0***                                                  o_bit_cnt_en_mux_sel      <= SDR_SEL  ;
    353             1                    ***0***                                                  o_bit_rx_cnt_en_mux_sel   <= SDR_SEL  ;
    354             1                    ***0***                                                  o_fcnt_en_mux_sel         <= SDR_SEL  ;
    355             1                    ***0***                                                  o_scl_idle_mux_sel        <= SDR_SEL  ; 
    356             1                    ***0***                                                  state                     <= SDR_MODE ;
    357                                                                                          end
    358                                              
    359                                                                                    end 
    360                                                                                  1'b0: 
    361                                                                                      begin
    362             1                    ***0***                                                 o_i2c_en <= 1'b1     ;
    363             1                    ***0***                                                 state    <= I2C_MODE ;
    364                                                                                      end 
    365                                                                                  endcase
    366                                                                              end
    367                                                                      end
    368                                                                  else 
    369                                                                      begin
    370             1                       9722                                 state <= START ;
    371                                                                      end
    372                                                              end
    373                                                          
    374                                                          ARBITRATION: 
    375                                                              begin 
    376                                                                  if (i_rx_mode_done && i_scl_neg_edge) 
    377                                                                      begin
    378             1                    ***0***                                 o_rx_data_valid      <= 1'b1 ;
    379             1                    ***0***                                 o_bit_cnt_en         <= 1'b0 ;
    380             1                    ***0***                                 write_adress_to_regf <= 1'b1 ;
    381                                                                      end
    382                                                                  else if (arbitrated_adress_ready && i_scl_neg_edge)
    383                                                                      begin 
    384                                                                       if (i_regf_data_rd == {7'h02,1'b0})  /// hotjoin address
    385                                                                           begin 
    386             1                    ***0***                                     o_hj_en                   <= 1'b1     ;
    387             1                    ***0***                                     o_hj_ccc                  <= 1'b0     ;
    388             1                    ***0***                                     o_regf_rd_en_mux_sel      <= HJ_SEL   ;
    389             1                    ***0***                                     o_regf_rd_address_mux_sel <= HJ_SEL   ;
    390             1                    ***0***                                     o_regf_wr_en_mux_sel      <= HJ_SEL   ;
    391             1                    ***0***                                     o_scl_pp_od_mux_sel       <= HJ_SEL   ;
    392             1                    ***0***                                     o_tx_en_mux_sel           <= HJ_SEL   ;
    393             1                    ***0***                                     o_tx_mode_mux_sel         <= HJ_SEL   ;
    394             1                    ***0***                                     o_rx_en_mux_sel           <= HJ_SEL   ;
    395             1                    ***0***                                     o_rx_mode_mux_sel         <= HJ_SEL   ;
    396             1                    ***0***                                     o_bit_cnt_en_mux_sel      <= HJ_SEL   ;
    397             1                    ***0***                                     o_bit_rx_cnt_en_mux_sel   <= HJ_SEL   ;
    398             1                    ***0***                                     o_fcnt_en_mux_sel         <= HJ_SEL   ;
    399             1                    ***0***                                     o_scl_idle_mux_sel        <= HJ_SEL   ;
    400             1                    ***0***                                     o_fcnt_no_frms_sel        <= HJ_SEL   ;
    401             1                    ***0***                                     state                     <= HOT_JOIN ;
    402                                                                           end
    403                                                                          else if (i_regf_data_rd[0]==1'b1)  /// IBI requesr
    404                                                                            begin 
    405             1                    ***0***                                     state <= IBI ;
    406                                                                            end 
    407                                                                          else if (i_regf_data_rd[0]==1'b0) /// Controller role request
    408                                                                            begin
    409             1                    ***0***                                     o_crh_en <= 1'b1 ; //controle role handoff enable signal
    410             1                    ***0***                                     o_hj_crh_en <= 1'b0     ; //controle role request
    411             1                    ***0***                                     state <= CTRL_REQ ;
    412             1                    ***0***                                     o_regf_rd_en_mux_sel      <= CRH_SEL   ;
    413             1                    ***0***                                     o_regf_rd_address_mux_sel <= CRH_SEL   ;
    414             1                    ***0***                                     o_regf_wr_en_mux_sel      <= CRH_SEL   ;
    415             1                    ***0***                                     o_scl_pp_od_mux_sel       <= CRH_SEL   ;
    416             1                    ***0***                                     o_tx_en_mux_sel           <= CRH_SEL   ;
    417             1                    ***0***                                     o_tx_mode_mux_sel         <= CRH_SEL   ;
    418             1                    ***0***                                     o_rx_en_mux_sel           <= CRH_SEL   ;
    419             1                    ***0***                                     o_rx_mode_mux_sel         <= CRH_SEL   ;
    420             1                    ***0***                                     o_bit_cnt_en_mux_sel      <= CRH_SEL   ;
    421             1                    ***0***                                     o_bit_rx_cnt_en_mux_sel   <= CRH_SEL   ;
    422             1                    ***0***                                     o_fcnt_en_mux_sel         <= CRH_SEL   ;
    423             1                    ***0***                                     o_scl_idle_mux_sel        <= CRH_SEL   ;
    424             1                    ***0***                                     o_fcnt_no_frms_sel        <= CRH_SEL   ;
    425                                              
    426                                                                            end 
    427                                                                      end
    428                                                                  else if (write_adress_to_regf && o_regf_rd_en )
    429                                                                      begin
    430             1                    ***0***                                 arbitrated_adress_ready <= 1'b1 ;
    431                                                                      end
    432                                                                  else if (write_adress_to_regf)
    433                                                                      begin 
    434             1                    ***0***                                 o_rx_data_valid <= 1'b0 ;
    435             1                    ***0***                                 o_regf_rd_en    <= 1'b1 ;
    436                                                                      end
    437                                                              end
    438                                                          
    439                                                          //////////////---MODES AND FEATURES---//////////////
    440                                                          SDR_MODE:
    441                                                              begin 
    442             1                    ***0***                         o_bit_cnt_en <= 1'b1 ;
    443                                                                  if (i_sdr_done)
    444                                                                      begin
    445             1                    ***0***                                 o_sdr_en            <= 1'b0           ;
    446             1                    ***0***                                 o_tx_en             <= 1'b1           ; 
    447             1                    ***0***                                 o_tx_mode           <= 3'b010         ;
    448             1                    ***0***                                 o_pp_od             <= 1'b1           ; //I3C STOP is driven by Push-Pull
    449             1                    ***0***                                 o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    450             1                    ***0***                                 o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    451             1                    ***0***                                 o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    452             1                    ***0***                                 o_scl_idle_mux_sel  <= I3C_ENGINE_SEL ;
    453             1                    ***0***                                 o_bits_cnt_regf_rx_tx_sel <= I3C_ENGINE_SEL  ;  
    454             1                    ***0***                                 o_ser_rx_tx_mux_sel <= I3C_ENGINE_SEL ; 
    455             1                    ***0***                                 state               <= STOP           ;
    456                                                                          //may check i_target_nack and refer an indicator to host
    457                                                                      end
    458                                                                  else if (i_rx_arbitration_lost)
    459                                                                      begin
    460             1                    ***0***                                 o_sdr_en              <= 1'b0           ;
    461             1                    ***0***                                 o_tx_en               <= 1'b0           ; 
    462             1                    ***0***                                 o_tx_en_mux_sel       <= I3C_ENGINE_SEL ;
    463             1                    ***0***                                 o_regf_wr_en_mux_sel  <= I3C_ENGINE_SEL ;
    464             1                    ***0***                                 o_bit_cnt_en_mux_sel  <= I3C_ENGINE_SEL ;
    465             1                    ***0***                                 o_regf_rd_en_mux_sel  <= I3C_ENGINE_SEL  ;
    466             1                    ***0***                                 o_ser_rx_tx_mux_sel   <= I3C_ENGINE_SEL  ;
    467             1                    ***0***                                 state <= ARBITRATION ; 
    468                                                                      end 
    469                                                                  else if (i_sdr_ibi_payload_done)
    470                                                                      begin
    471             1                    ***0***                                 state <= STOP; 
    472             1                    ***0***                                 o_ibi_en <= 1'b0 ;
    473                                                                      end 
    474                                                                          
    475                                                                  else
    476                                                                      begin
    477             1                    ***0***                                 state <= SDR_MODE ;
    478                                                                      end
    479                                                              end
    480                                                          
    481                                                          I2C_MODE:
    482                                                              begin
    483             1                    ***0***                         o_regf_rd_en_mux_sel      <= I2C_SEL ;
    484             1                    ***0***                         o_regf_rd_address_mux_sel <= I2C_SEL ;
    485             1                    ***0***                         o_regf_wr_en_mux_sel      <= I2C_SEL ;
    486             1                    ***0***                         o_scl_pp_od_mux_sel       <= I2C_SEL ;
    487             1                    ***0***                         o_tx_en_mux_sel           <= I2C_SEL ;
    488             1                    ***0***                         o_tx_mode_mux_sel         <= I2C_SEL ;
    489             1                    ***0***                         o_rx_en_mux_sel           <= I2C_SEL ;
    490             1                    ***0***                         o_rx_mode_mux_sel         <= I2C_SEL ;
    491             1                    ***0***                         o_bit_cnt_en_mux_sel      <= I2C_SEL ;
    492             1                    ***0***                         o_bit_rx_cnt_en_mux_sel   <= I2C_SEL ;
    493             1                    ***0***                         o_fcnt_en_mux_sel         <= I2C_SEL ;
    494             1                    ***0***                         o_bits_cnt_regf_rx_tx_sel <= I2C_SEL  ;
    495                                              
    496             1                    ***0***                         o_bit_cnt_en              <= 1'b1    ;
    497                                                                  if (i_i2c_done)
    498                                                                      begin
    499             1                    ***0***                                 o_i2c_en            <= 1'b0           ;
    500             1                    ***0***                                 o_tx_en             <= 1'b1           ; 
    501             1                    ***0***                                 o_tx_mode           <= 3'b010         ;
    502             1                    ***0***                                 o_pp_od             <= 1'b0           ; //I2C is always driven by Open-Drain
    503             1                    ***0***                                 o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    504             1                    ***0***                                 o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    505             1                    ***0***                                 o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    506             1                    ***0***                                 o_scl_idle_mux_sel  <= I3C_ENGINE_SEL ;  
    507             1                    ***0***                                 state               <= STOP           ;
    508                                              
    509                                                                          //may check i_target_nack and refer an indicator to host
    510                                                                      end
    511                                                                  else if (i_rx_arbitration_lost)
    512                                                                      begin
    513             1                    ***0***                                 o_regf_wr_en_mux_sel  <= I3C_ENGINE_SEL ;
    514             1                    ***0***                                 o_bit_cnt_en_mux_sel  <= I3C_ENGINE_SEL ;
    515             1                    ***0***                                 o_regf_rd_en_mux_sel  <= I3C_ENGINE_SEL ;
    516             1                    ***0***                                 state                 <= ARBITRATION    ; 
    517                                                                      end 
    518                                                                  else
    519                                                                      begin
    520             1                    ***0***                                 state <= I2C_MODE ;
    521                                                                      end
    522                                                              end
    523                                              
    524                                                          DAA: 
    525                                                              begin
    526                                                                  if (i_rx_arbitration_lost)
    527                                                                      begin
    528             1                    ***0***                                 o_daa_en <= 1'b0 ; 
    529             1                    ***0***                                 o_regf_wr_en_mux_sel  <= I3C_ENGINE_SEL ;
    530             1                    ***0***                                 o_bit_cnt_en_mux_sel  <= I3C_ENGINE_SEL ;
    531             1                    ***0***                                 o_regf_rd_en_mux_sel  <= I3C_ENGINE_SEL ;
    532             1                    ***0***                                 o_fcnt_no_frms_sel    <= I3C_ENGINE_SEL ;
    533             1                    ***0***                                 state                 <= ARBITRATION    ; 
    534                                                                      end 
    535                                                                 else if (i_daa_error)
    536                                                                  begin
    537             1                    ***0***                             state <= IDLE ; /// will be editted after adding errors 
    538             1                    ***0***                             o_daa_en <= 1'b0 ;
    539                                                                  end 
    540                                                                 else if (i_daa_done) 
    541                                                                      begin
    542             1                    ***0***                                 o_daa_en                 <= 1'b0 ;
    543             1                    ***0***                                 dynamic_address_assigned <= 1'b1 ;
    544             1                    ***0***                                 state                    <= STOP ;
    545                                                                      end
    546                                                              end
    547                                                          
    548                                                          HOT_JOIN: 
    549                                                              begin
    550                                                                  if (i_hj_done)
    551                                                                      begin
    552             1                    ***0***                                 o_hj_en <= 1'b0 ;
    553                                                                          if (i_hj_daa_req)
    554                                                                              begin
    555             1                    ***0***                                         o_daa_en                  <= 1'b1    ;
    556             1                    ***0***                                         o_hj_daa_en               <= 1'b1    ;
    557             1                    ***0***                                         o_regf_rd_address_mux_sel <= DAA_SEL ;
    558             1                    ***0***                                         o_regf_wr_en_mux_sel      <= DAA_SEL ;
    559             1                    ***0***                                         o_scl_pp_od_mux_sel       <= DAA_SEL ;
    560             1                    ***0***                                         o_tx_en_mux_sel           <= DAA_SEL ;
    561             1                    ***0***                                         o_tx_mode_mux_sel         <= DAA_SEL ;
    562             1                    ***0***                                         o_rx_en_mux_sel           <= DAA_SEL ;
    563             1                    ***0***                                         o_rx_mode_mux_sel         <= DAA_SEL ;
    564             1                    ***0***                                         o_bit_cnt_en_mux_sel      <= DAA_SEL ;
    565             1                    ***0***                                         o_bit_rx_cnt_en_mux_sel   <= DAA_SEL ;
    566             1                    ***0***                                         o_fcnt_en_mux_sel         <= DAA_SEL ;
    567             1                    ***0***                                         o_fcnt_no_frms_sel        <= DAA_SEL ;
    568             1                    ***0***                                         o_regf_rd_en_mux_sel      <= DAA_SEL ; 
    569             1                    ***0***                                         state                     <= DAA     ;
    570                                                                              end
    571                                                                          else if (i_hj_cr_pass)
    572                                                                              begin
    573             1                    ***0***                                         o_crh_en    <= 1'b1     ; //CRH main enable signal = 1
    574             1                    ***0***                                         o_hj_crh_en <= 1'b1     ; //initiated by active controller 
    575                                                                                  ////CRH SELECTORS////
    576             1                    ***0***                                         state       <= CTRL_REQ ;
    577             1                    ***0***                                          o_regf_rd_en_mux_sel      <= CRH_SEL   ;
    578             1                    ***0***                                          o_regf_rd_address_mux_sel <= CRH_SEL   ;
    579             1                    ***0***                                          o_regf_wr_en_mux_sel      <= CRH_SEL   ;
    580             1                    ***0***                                          o_scl_pp_od_mux_sel       <= CRH_SEL   ;
    581             1                    ***0***                                          o_tx_en_mux_sel           <= CRH_SEL   ;
    582             1                    ***0***                                          o_tx_mode_mux_sel         <= CRH_SEL   ;
    583             1                    ***0***                                          o_rx_en_mux_sel           <= CRH_SEL   ;
    584             1                    ***0***                                          o_rx_mode_mux_sel         <= CRH_SEL   ;
    585             1                    ***0***                                          o_bit_cnt_en_mux_sel      <= CRH_SEL   ;
    586             1                    ***0***                                          o_bit_rx_cnt_en_mux_sel   <= CRH_SEL   ;
    587             1                    ***0***                                          o_fcnt_en_mux_sel         <= CRH_SEL   ;
    588             1                    ***0***                                          o_scl_idle_mux_sel        <= CRH_SEL   ;
    589             1                    ***0***                                          o_fcnt_no_frms_sel        <= CRH_SEL   ;
    590                                                                              end
    591                                                                          //no need for hj_acc_rej till now
    592                                                                          else
    593                                                                              begin
    594             1                    ***0***                                         o_tx_en             <= 1'b1           ; 
    595             1                    ***0***                                         o_tx_mode           <= 3'b010         ;
    596             1                    ***0***                                         o_pp_od             <= 1'b1           ; //I3C STOP is driven by Push-Pull
    597             1                    ***0***                                         o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    598             1                    ***0***                                         o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    599             1                    ***0***                                         o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    600             1                    ***0***                                         o_scl_idle_mux_sel  <= I3C_ENGINE_SEL ;  
    601             1                    ***0***                                         state               <= STOP           ;
    602                                                                              end
    603                                                                      end
    604                                                                  /*else if (i_rx_arbitration_lost)
    605                                                                      begin
    606                                                                          o_hj_en               <= 1'b0           ;
    607                                                                          o_regf_wr_en_mux_sel  <= I3C_ENGINE_SEL ;
    608                                                                          o_bit_cnt_en_mux_sel  <= I3C_ENGINE_SEL ;
    609                                                                          o_regf_rd_en_mux_sel  <= I3C_ENGINE_SEL ;
    610                                                                          o_fcnt_no_frms_sel    <= I3C_ENGINE_SEL ;
    611                                                                          state                 <= ARBITRATION    ; 
    612                                                                      end */
    613                                                                  else
    614                                                                      begin
    615             1                    ***0***                                 state <= HOT_JOIN ;
    616                                                                      end
    617                                                              end
    618                                                         
    619                                                          /////////////////---STOP STATE---////////////////
    620                                                          STOP:
    621                                                              begin 
    622             1                    ***0***                         o_scl_idle <= 1'b1 ; //Yaseen's Edit 
    623                                                                  if((i_tx_mode_done && send_stop)) /// editted
    624                                                                      begin
    625             1                    ***0***                                 o_tx_en           <= 1'b0   ; 
    626             1                    ***0***                                 o_tx_mode         <= 3'b010 ;
    627             1                    ***0***                                 o_scl_idle <= 1'b0 ;
    628             1                    ***0***                                 o_regf_rd_en_mux_sel      <= CRH_SEL   ;
    629             1                    ***0***                                 o_regf_rd_address_mux_sel <= CRH_SEL   ;
    630             1                    ***0***                                 o_regf_wr_en_mux_sel      <= CRH_SEL   ;
    631             1                    ***0***                                 o_scl_pp_od_mux_sel       <= CRH_SEL   ;
    632             1                    ***0***                                 o_tx_en_mux_sel           <= CRH_SEL   ;
    633             1                    ***0***                                 o_tx_mode_mux_sel         <= CRH_SEL   ;
    634             1                    ***0***                                 o_rx_en_mux_sel           <= CRH_SEL   ;
    635             1                    ***0***                                 o_rx_mode_mux_sel         <= CRH_SEL   ;
    636             1                    ***0***                                 o_bit_cnt_en_mux_sel      <= CRH_SEL   ;
    637             1                    ***0***                                 o_bit_rx_cnt_en_mux_sel   <= CRH_SEL   ;
    638             1                    ***0***                                 o_fcnt_en_mux_sel         <= CRH_SEL   ;
    639             1                    ***0***                                 o_scl_idle_mux_sel        <= CRH_SEL   ;
    640             1                    ***0***                                 o_fcnt_no_frms_sel        <= CRH_SEL   ;
    641             1                    ***0***                                 state <= CTRL_REQ ;
    642             1                    ***0***                                 o_crh_stop_is_sent <= 1'b1 ;
    643             1                    ***0***                                 send_stop <= 1'b0 ; 
    644                                                                      end
    645                                                                  else if (i_tx_mode_done && !send_stop)
    646                                                                      begin
    647             1                    ***0***                                 o_tx_en           <= 1'b0   ; 
    648             1                    ***0***                                 o_tx_mode         <= 3'b010 ;
    649             1                    ***0***                                 o_pp_od           <= 1'b0   ; 
    650             1                    ***0***                                 o_controller_done <= 1'b1   ;
    651             1                    ***0***                                 o_i3c_idle_flag   <= 1'b1   ; 
    652             1                    ***0***                                 state             <= IDLE   ;
    653                                                                      end
    654                                                                  
    655                                                              end
    656                                              
    657                                                          IBI: begin
    658             1                    ***0***                         o_regf_rd_en_mux_sel      <= IBI_SEL;
    659             1                    ***0***                         o_regf_rd_address_mux_sel <= IBI_SEL;
    660             1                    ***0***                         o_regf_wr_en_mux_sel      <= IBI_SEL;
    661             1                    ***0***                         o_scl_pp_od_mux_sel       <= IBI_SEL;
    662             1                    ***0***                         o_tx_en_mux_sel           <= IBI_SEL;
    663             1                    ***0***                         o_tx_mode_mux_sel         <= IBI_SEL;
    664             1                    ***0***                         o_rx_en_mux_sel           <= IBI_SEL;
    665             1                    ***0***                         o_rx_mode_mux_sel         <= IBI_SEL;
    666             1                    ***0***                         o_bit_cnt_en_mux_sel      <= IBI_SEL;
    667             1                    ***0***                         o_bit_rx_cnt_en_mux_sel   <= IBI_SEL;
    668             1                    ***0***                         o_fcnt_en_mux_sel         <= IBI_SEL;
    669             1                    ***0***                          o_fcnt_no_frms_sel       <= IBI_SEL;
    670             1                    ***0***                          o_ser_rx_tx_mux_sel      <= IBI_SEL;
    671                                              
    672                                                                  if (i_ibi_payload_en)      
    673                                                                      begin
    674             1                    ***0***                               o_sdr_en                  <= 1'b1     ;
    675             1                    ***0***                               o_fcnt_no_frms_sel        <=IBI_SEL  ; // to select payload max size 
    676                                              
    677             1                    ***0***                                o_regf_rd_en_mux_sel      <= SDR_SEL  ;
    678             1                    ***0***                                o_regf_rd_address_mux_sel <= SDR_SEL  ;
    679             1                    ***0***                                o_regf_wr_en_mux_sel      <= SDR_SEL  ;
    680             1                    ***0***                                o_scl_pp_od_mux_sel       <= SDR_SEL  ;
    681             1                    ***0***                                o_tx_en_mux_sel           <= SDR_SEL  ;
    682             1                    ***0***                                o_tx_mode_mux_sel         <= SDR_SEL  ;
    683             1                    ***0***                                o_rx_en_mux_sel           <= SDR_SEL  ;
    684             1                    ***0***                                o_rx_mode_mux_sel         <= SDR_SEL  ;
    685             1                    ***0***                                o_bit_cnt_en_mux_sel      <= SDR_SEL  ;
    686             1                    ***0***                                o_bit_rx_cnt_en_mux_sel   <= SDR_SEL  ;
    687             1                    ***0***                                o_fcnt_en_mux_sel         <= SDR_SEL  ;
    688             1                    ***0***                                o_scl_idle_mux_sel        <= SDR_SEL  ; 
    689             1                    ***0***                                state <= SDR_MODE;
    690                                                                      end
    691                                              
    692                                                                  else if (i_ibi_done)    
    693                                                                      begin
    694             1                    ***0***                                 o_ibi_en <= 1'b0 ;
    695             1                    ***0***                                 state <= IDLE;
    696                                                                      end     
    697                                                                end
    698                                              
    699                                                           CTRL_REQ: begin
    700                                                            if(i_crh_send_stop)
    701                                                              begin
    702             1                    ***0***                       state               <= STOP ; 
    703             1                    ***0***                       o_tx_en             <= 1'b1      ;
    704             1                    ***0***                       o_tx_mode           <= 3'b010    ; //stop bit
    705             1                    ***0***                       o_pp_od             <= 1'b1      ; 
    706             1                    ***0***                       send_stop           <= 1'b1      ;
    707                                                                //o_scl_idle         <= 1'b0 ; 
    708             1                    ***0***                       o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    709             1                    ***0***                       o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    710             1                    ***0***                       o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    711             1                    ***0***                       o_scl_idle_mux_sel  <= I3C_ENGINE_SEL ;  
    712                                                              end
    713                                                            else if(i_crh_done)
    714                                                              begin
    715             1                    ***0***                       state               <= IDLE ;
    716             1                    ***0***                       o_scl_pp_od_mux_sel <= I3C_ENGINE_SEL ;
    717             1                    ***0***                       o_tx_en_mux_sel     <= I3C_ENGINE_SEL ;
    718             1                    ***0***                       o_tx_mode_mux_sel   <= I3C_ENGINE_SEL ;
    719             1                    ***0***                       o_scl_idle_mux_sel  <= I3C_ENGINE_SEL ;  
    720             1                    ***0***                       o_crh_en            <= 1'b0 ;
    721             1                    ***0***                       o_pp_od             <= 1'b0           ; 
    722                                                              end
    723                                                                          
    724                                                                      end
    725                                                          
    726                                              
    727                                              
    728                                                          ENTHDR: 
    729                                                              begin
    730             1                     345131                                 o_enthdr_en               <= 1'b1       ; //enables enthdr block
    731             1                     345131                                 o_regf_rd_en_mux_sel      <= ENTHDR_SEL ;
    732             1                     345131                                 o_regf_rd_address_mux_sel <= ENTHDR_SEL ;
    733             1                     345131                                 o_regf_wr_en_mux_sel      <= ENTHDR_SEL ;
    734             1                     345131                                 o_scl_pp_od_mux_sel       <= ENTHDR_SEL ;
    735             1                     345131                                 o_tx_en_mux_sel           <= ENTHDR_SEL ;
    736             1                     345131                                 o_tx_mode_mux_sel         <= ENTHDR_SEL ;
    737             1                     345131                                 o_rx_en_mux_sel           <= ENTHDR_SEL ;
    738             1                     345131                                 o_rx_mode_mux_sel         <= ENTHDR_SEL ;
    739             1                     345131                                 o_bit_cnt_en_mux_sel      <= ENTHDR_SEL ;
    740             1                     345131                                 o_bit_rx_cnt_en_mux_sel   <= ENTHDR_SEL ;
    741             1                     345131                                 o_fcnt_en_mux_sel         <= ENTHDR_SEL ;
    742             1                     345131                                 o_scl_idle_mux_sel        <= ENTHDR_SEL ; 
    743             1                     345131                                 state                     <= ENTHDR; 
    744                                                                  if (i_enthdr_done)
    745                                                                      begin
    746             1                       4861                                 o_hdrengine_en            <= 1'b1 ;          
    747             1                       4861                                 o_enthdr_en               <= 1'b0 ;
    748                                              
    749                                                  /// Selectors of muxes that are shared between SDR and HDR to choose the required mode///////
    750                                                                          
    751             1                       4861                                o_mode_sda_sel                  <= SDR_MODE_SEL    ; //EDITTTT: WAS: HDR
    752             1                       4861                                o_regf_wr_en_sdr_hdr_sel        <= HDR_MODE_SEL    ;  
    753             1                       4861                                o_regf_rd_en_sdr_hdr_sel        <= HDR_MODE_SEL    ; 
    754             1                       4861                                o_regf_rd_address_sdr_hdr_sel   <= HDR_MODE_SEL    ; 
    755             1                       4861                                o_scl_pp_od_sdr_hdr_sel         <= HDR_MODE_SEL    ; 
    756             1                       4861                                o_regf_data_sdr_hdr_sel         <= HDR_MODE_SEL    ;
    757                                              
    758             1                       4861                                o_scl_stall_flag_sdr_hdr_sel            <= HDR_MODE_SEL;
    759             1                       4861                                o_scl_stall_cycles_sdr_hdr_sel          <= HDR_MODE_SEL;
    760             1                       4861                                o_tx_en_sel                             <= HDR_MODE_SEL;
    761                                              
    762             1                       4861                                 o_pp_od             <= 1'b1      ; //editt
    763                                                                         //o_scl_pp_od_mux_sel       <= I3C_ENGINE_SEL ;
    764                                              
    765                                                                         //o_scl_idle_mux_sel              <= I3C_ENGINE_SEL ;
    766                                              
    767             1                       4861                                 state                           <= HDR_ENGINE    ; 
    768                                                                      end 
    769                                                                      
    770                                                                  /*  else if (i_enthdr_error_detected) //signal not added yet in design or instantiation
    771                                                                      begin
    772                                                                        state                       <= STOP;
    773                                                                      end*/
    774                                              
    775                                                                  else
    776                                                                      begin
    777             1                     340270                                 state                     <= ENTHDR         ;
    778                                              
    779                                                                      end 
    780                                                              end
    781                                              
    782                                              
    783                                                           HDR_ENGINE:
    784                                                             begin
    785             1                    1494428                         o_tx_en             <= 1'b0      ;
    786             1                    1494428                         send_stop           <= 1'b0      ;
    787                                              
    788                                                               if(i_hdrengine_done)
    789                                                                begin
    790             1                       4860                         o_scl_pp_od_mux_sel           <= I3C_ENGINE_SEL ;
    791             1                       4860                         o_tx_en_mux_sel               <= I3C_ENGINE_SEL ;
    792             1                       4860                         o_tx_mode_mux_sel             <= I3C_ENGINE_SEL ;
    793             1                       4860                         o_scl_idle_mux_sel            <= I3C_ENGINE_SEL ;
    794             1                       4860                         o_bits_cnt_regf_rx_tx_sel     <= I3C_ENGINE_SEL ;  
    795             1                       4860                         o_ser_rx_tx_mux_sel           <= I3C_ENGINE_SEL ;
    796                                              
    797                                                                            
    798             1                       4860                         o_mode_sda_sel                  <=SDR_MODE_SEL ; 
    799             1                       4860                         o_regf_wr_en_sdr_hdr_sel        <=SDR_MODE_SEL;  
    800             1                       4860                         o_regf_rd_en_sdr_hdr_sel        <=SDR_MODE_SEL; 
    801                                                                  
    802             1                       4860                         o_regf_rd_address_sdr_hdr_sel   <=SDR_MODE_SEL; 
    803             1                       4860                         o_scl_pp_od_sdr_hdr_sel         <=SDR_MODE_SEL;
    804             1                       4860                         o_tx_en_sel                     <= SDR_MODE_SEL;
    805                                              
    806             1                       4860                         o_hdrengine_en                  <= 1'b0 ;
    807                                              
    808             1                       4860                         o_tx_en             <= 1'b1      ;
    809             1                       4860                         o_tx_mode           <= 3'b010    ; //stop bit
    810             1                       4860                         o_pp_od             <= 1'b1      ; 
    811             1                       4860                         send_stop           <= 1'b0      ;
    812                                                                  //state                           <= STOP           ;
    813             1                       4860                          state                           <= IDLE           ;
    814                                                                end
    815                                                               else 
    816                                                                begin
    817             1                    1489568                         o_hdrengine_en                  <= 1'b1 ;          
    818             1                    1489568                         o_mode_sda_sel                  <= HDR_MODE_SEL ; 
    819             1                    1489568                         o_regf_wr_en_sdr_hdr_sel        <=HDR_MODE_SEL;  
    820             1                    1489568                         o_regf_rd_en_sdr_hdr_sel        <=HDR_MODE_SEL; 
    821             1                    1489568                         o_regf_rd_address_sdr_hdr_sel   <=HDR_MODE_SEL; 
    822             1                    1489568                         o_scl_pp_od_sdr_hdr_sel         <=HDR_MODE_SEL;
    823             1                    1489568                         o_regf_data_sdr_hdr_sel         <= HDR_MODE_SEL    ;
    824                                              
    825             1                    1489568                         o_scl_stall_flag_sdr_hdr_sel            <= HDR_MODE_SEL;
    826             1                    1489568                         o_scl_stall_cycles_sdr_hdr_sel          <= HDR_MODE_SEL;
    827             1                    1489568                         o_tx_en_sel                             <= HDR_MODE_SEL; 
    828                                              
    829                                              
    830                                              
    831             1                    1489568     o_scl_pp_od_mux_sel       <= I3C_ENGINE_SEL ;
    832                                              
    833                                                                  //o_scl_pp_od_mux_sel             <= HDR_MODE_SEL ;             //(SCL GEN) shared btw HDR & SDR                 
    834                                                               
    835                                              
    836             1                    1489568                         state                     <= HDR_ENGINE     ; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        252        94       158    37.30%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_i3c_engine --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                           arbitrated_adress_ready           0           0        0.00 
                          dynamic_address_assigned           0           0        0.00 
                                            hdr_en           0           1       50.00 
                                   i_ccc_en_dis_hj           0           0        0.00 
                                             i_clk           1           1      100.00 
                                   i_controller_en           0           1       50.00 
                                        i_crh_done           0           0        0.00 
                                   i_crh_send_stop           0           0        0.00 
                                        i_daa_done           0           0        0.00 
                                       i_daa_error           0           0        0.00 
                                     i_enthdr_done           1           1      100.00 
                                  i_hdrengine_done           1           1      100.00 
                                      i_hj_acc_rej           0           0        0.00 
                                      i_hj_cr_pass           0           0        0.00 
                                      i_hj_daa_req           0           0        0.00 
                                         i_hj_done           0           0        0.00 
                                        i_i2c_done           0           0        0.00 
                                     i_i3c_i2c_sel           0           0        0.00 
                                        i_ibi_done           0           0        0.00 
                                  i_ibi_payload_en           0           0        0.00 
                               i_regf_data_rd[0-7]           1           1      100.00 
                                    i_regf_mode[0]           0           0        0.00 
                                  i_regf_mode[1-2]           0           1       50.00 
                                           i_rst_n           1           1      100.00 
                             i_rx_arbitration_lost           0           0        0.00 
                                    i_rx_mode_done           1           1      100.00 
                                    i_scl_neg_edge           1           1      100.00 
                                    i_scl_pos_edge           1           1      100.00 
                                        i_sdr_done           0           0        0.00 
                            i_sdr_ibi_payload_done           0           0        0.00 
                                     i_target_nack           0           0        0.00 
                                       i_timer_cas           1           1      100.00 
                                    i_tx_mode_done           1           1      100.00 
                                      o_bit_cnt_en           0           0        0.00 
                           o_bit_cnt_en_mux_sel[2]           1           1      100.00 
                           o_bit_cnt_en_mux_sel[1]           0           0        0.00 
                           o_bit_cnt_en_mux_sel[0]           1           1      100.00 
                      o_bit_rx_cnt_en_mux_sel[2-0]           0           0        0.00 
                    o_bits_cnt_regf_rx_tx_sel[2-0]           0           0        0.00 
                                 o_controller_done           0           0        0.00 
                                          o_crh_en           0           0        0.00 
                                o_crh_stop_is_sent           0           0        0.00 
                                          o_daa_en           0           0        0.00 
                                       o_enthdr_en           1           1      100.00 
                            o_fcnt_en_mux_sel[2-0]           0           0        0.00 
                           o_fcnt_no_frms_sel[2-0]           0           0        0.00 
                                    o_hdrengine_en           1           1      100.00 
                                          o_hj_ccc           0           0        0.00 
                                       o_hj_crh_en           0           0        0.00 
                                       o_hj_daa_en           0           0        0.00 
                                           o_hj_en           0           0        0.00 
                                          o_i2c_en           0           0        0.00 
                                   o_i3c_idle_flag           0           0        0.00 
                                          o_ibi_en           0           0        0.00 
                                    o_mode_sda_sel           1           1      100.00 
                                           o_pp_od           1           1      100.00 
                           o_regf_data_sdr_hdr_sel           1           1      100.00 
                    o_regf_rd_address_mux_sel[2-0]           0           0        0.00 
                     o_regf_rd_address_sdr_hdr_sel           1           1      100.00 
                                      o_regf_rd_en           0           0        0.00 
                         o_regf_rd_en_mux_sel[2-0]           0           0        0.00 
                          o_regf_rd_en_sdr_hdr_sel           1           1      100.00 
                         o_regf_wr_en_mux_sel[2-0]           0           0        0.00 
                          o_regf_wr_en_sdr_hdr_sel           1           1      100.00 
                                   o_rx_data_valid           0           0        0.00 
                              o_rx_en_mux_sel[2-0]           0           0        0.00 
                            o_rx_mode_mux_sel[2-0]           0           0        0.00 
                                        o_scl_idle           1           1      100.00 
                             o_scl_idle_mux_sel[2]           1           1      100.00 
                             o_scl_idle_mux_sel[1]           0           0        0.00 
                             o_scl_idle_mux_sel[0]           1           1      100.00 
                            o_scl_pp_od_mux_sel[2]           1           1      100.00 
                            o_scl_pp_od_mux_sel[1]           0           0        0.00 
                            o_scl_pp_od_mux_sel[0]           1           1      100.00 
                           o_scl_pp_od_sdr_hdr_sel           1           1      100.00 
                    o_scl_stall_cycles_sdr_hdr_sel           1           1      100.00 
                            o_scl_stall_cycles_sel           0           0        0.00 
                      o_scl_stall_flag_sdr_hdr_sel           1           1      100.00 
                              o_scl_stall_flag_sel           0           0        0.00 
                                          o_sdr_en           0           0        0.00 
                          o_ser_rx_tx_mux_sel[2-0]           0           0        0.00 
                                           o_tx_en           1           1      100.00 
                                o_tx_en_mux_sel[2]           1           1      100.00 
                                o_tx_en_mux_sel[1]           0           0        0.00 
                                o_tx_en_mux_sel[0]           1           1      100.00 
                                       o_tx_en_sel           1           1      100.00 
                                      o_tx_mode[2]           0           0        0.00 
                                      o_tx_mode[1]           1           1      100.00 
                                      o_tx_mode[0]           0           0        0.00 
                              o_tx_mode_mux_sel[2]           1           1      100.00 
                              o_tx_mode_mux_sel[1]           0           0        0.00 
                              o_tx_mode_mux_sel[0]           1           1      100.00 
                                         send_stop           0           0        0.00 
                                        state[3-2]           1           1      100.00 
                                          state[1]           0           0        0.00 
                                          state[0]           1           1      100.00 
                              write_adress_to_regf           0           0        0.00 

Total Node Count     =        126 
Toggled Node Count   =         45 
Untoggled Node Count =         81 

Toggle Coverage      =      37.30% (94 of 252 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_sdr_mode
=== Design Unit: work.sdr_mode
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        47        13        34    27.65%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_sdr_mode

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sdr_mode.v
------------------------------------IF Branch------------------------------------
    103                                    53472     Count coming in to IF
    103             1                      29166     assign ser_mode_done_mux_out = (i_ser_to_par_trans)? i_sdr_ctrl_bit_cnt_done : i_ser_mode_done ;
    103             2                      24306     assign ser_mode_done_mux_out = (i_ser_to_par_trans)? i_sdr_ctrl_bit_cnt_done : i_ser_mode_done ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    107                                  1442456     Count coming in to IF
    107             1                          1             if (!i_sdr_ctrl_rst_n) 
    112             1                    1442455             else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    134                                  1476759     Count coming in to IF
    134             1                          1             if (!i_sdr_ctrl_rst_n) 
    141             1                    1476758             else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    160                                        4     Count coming in to IF
    160             1                          1         if (!i_sdr_ctrl_rst_n) 
    162             1                          3         else    
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    173                                  1724396     Count coming in to IF
    173             1                          1         if (!i_sdr_ctrl_rst_n) 
    199             1                    1724395         else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    201                                  1724395     Count coming in to CASE
    202             1                    1724394               SDR_IDLE:      
    235             1                    ***0***               ADDRESS:      
    268             1                    ***0***               HANDOFF:   
    306             1                    ***0***               SCL_STALLING:   
    324             1                    ***0***               ACK_BIT:      
    344             1                    ***0***               DATA_OUT:      
    365             1                    ***0***               DATA_IN:      
    388             1                    ***0***               T_BIT:      
    427             1                    ***0***               PARITY_BIT:      
                                               1     All False Count
Branch totals: 2 hits of 10 branches = 20.00%

------------------------------------IF Branch------------------------------------
    217                                  1724394     Count coming in to IF
    217             1                    ***0***                   if (i_i3c_ctrl_sdr_en)
    224             1                    ***0***                   else if (i_sdr_ctrl_ibi_payload_en)
    229             1                    1724394                   else 
Branch totals: 1 hit of 3 branches = 33.33%

------------------------------------IF Branch------------------------------------
    251                                  ***0***     Count coming in to IF
    251             1                    ***0***                   if (i_sdr_rx_arbitration_lost)
    256             1                    ***0***                   else if (i_ser_mode_done_pulse)
    261             1                    ***0***                   else 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    270                                  ***0***     Count coming in to IF
    270             1                    ***0***                 if (i_sdr_ctrl_scl_neg_edge && address_ack_state_flag)
    275             1                    ***0***                 else if  (i_sdr_ctrl_scl_neg_edge && !address_ack_state_flag)  
    300             1                    ***0***                 else 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    277                                  ***0***     Count coming in to IF
    277             1                    ***0***                         if (i_ser_nack_ack) 
    285             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    287                                  ***0***     Count coming in to IF
    287             1                    ***0***                                 if (i_sdr_regf_rx_tx)
    294             1                    ***0***                                 else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    308                                  ***0***     Count coming in to IF
    308             1                    ***0***                         if (i_sdr_ctrl_scl_stall_done)  
    313             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    353                                  ***0***     Count coming in to IF
    353             1                    ***0***                   if (i_ser_mode_done_pulse) 
    358             1                    ***0***                  else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    377                                  ***0***     Count coming in to IF
    377             1                    ***0***                   if (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)//(i_deser_mode_done_pulse && i_sdr_ctrl_scl_neg_edge)  //(i_deser_mode_done_prev3)  
    382             1                    ***0***                   else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    401                                  ***0***     Count coming in to IF
    401             1                    ***0***                   if (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)
    420             1                    ***0***                   else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    403                                  ***0***     Count coming in to IF
    403             1                    ***0***                       if (sdr_rx_rd_abort_extend) 
    413             1                    ***0***                       else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    435                                  ***0***     Count coming in to IF
    435             1                    ***0***                   if (i_ser_mode_done_pulse_parity) //(i_ser_mode_done && i_sdr_ctrl_scl_pos_edge ) Edit by Zyad
    455             1                    ***0***                   else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    437                                  ***0***     Count coming in to IF
    437             1                    ***0***                      if(i_sdr_ctrl_last_frame) 
    447             1                    ***0***                      else
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         0         8     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_sdr_mode --

  File sdr_mode.v
----------------Focused Condition View-------------------
Line       270 Item    1  (i_sdr_ctrl_scl_neg_edge && address_ack_state_flag)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  i_sdr_ctrl_scl_neg_edge         N  No hits                  Hit '_0' and '_1'
   address_ack_state_flag         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  i_sdr_ctrl_scl_neg_edge_0  -                             
  Row   2:    ***0***  i_sdr_ctrl_scl_neg_edge_1  address_ack_state_flag        
  Row   3:    ***0***  address_ack_state_flag_0   i_sdr_ctrl_scl_neg_edge       
  Row   4:    ***0***  address_ack_state_flag_1   i_sdr_ctrl_scl_neg_edge       

----------------Focused Condition View-------------------
Line       275 Item    1  (i_sdr_ctrl_scl_neg_edge && ~address_ack_state_flag)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  i_sdr_ctrl_scl_neg_edge         N  No hits                  Hit '_0' and '_1'
   address_ack_state_flag         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  i_sdr_ctrl_scl_neg_edge_0  -                             
  Row   2:    ***0***  i_sdr_ctrl_scl_neg_edge_1  ~address_ack_state_flag       
  Row   3:    ***0***  address_ack_state_flag_0   i_sdr_ctrl_scl_neg_edge       
  Row   4:    ***0***  address_ack_state_flag_1   i_sdr_ctrl_scl_neg_edge       

----------------Focused Condition View-------------------
Line       377 Item    1  (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
        i_deser_mode_done         N  No hits                  Hit '_0' and '_1'
  i_sdr_ctrl_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  i_deser_mode_done_0        -                             
  Row   2:    ***0***  i_deser_mode_done_1        i_sdr_ctrl_scl_neg_edge       
  Row   3:    ***0***  i_sdr_ctrl_scl_neg_edge_0  i_deser_mode_done             
  Row   4:    ***0***  i_sdr_ctrl_scl_neg_edge_1  i_deser_mode_done             

----------------Focused Condition View-------------------
Line       401 Item    1  (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
        i_deser_mode_done         N  No hits                  Hit '_0' and '_1'
  i_sdr_ctrl_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  i_deser_mode_done_0        -                             
  Row   2:    ***0***  i_deser_mode_done_1        i_sdr_ctrl_scl_neg_edge       
  Row   3:    ***0***  i_sdr_ctrl_scl_neg_edge_0  i_deser_mode_done             
  Row   4:    ***0***  i_sdr_ctrl_scl_neg_edge_1  i_deser_mode_done             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                     13         9         4    69.23%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/u_sdr_mode --

  File sdr_mode.v
-----------Focused Expression View (Bimodal)------------
Line       103 Item    1  (i_ser_to_par_trans? i_sdr_ctrl_bit_cnt_done: i_ser_mode_done)
Expression totals: 3 of 3 input terms covered = 100.00%

                 Input Term   Covered  Reason for no coverage                  Hint
                -----------  --------  --------------------------------------  --------------
         i_ser_to_par_trans         Y
    i_sdr_ctrl_bit_cnt_done         Y
            i_ser_mode_done         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target                   Non-masking condition(s)           

---------  ----------  ----------  --------------------         -------------------------          
 Row   1:           1           1  i_ser_to_par_trans_0         -                                  
 Row   2:           1           0  i_ser_to_par_trans_1         -                                  
 Row   3:           1           0  i_sdr_ctrl_bit_cnt_done_0    i_ser_to_par_trans                 
 Row   4:           0           1  i_sdr_ctrl_bit_cnt_done_1    i_ser_to_par_trans                 
 Row   5:           1           0  i_ser_mode_done_0            ~i_ser_to_par_trans                
 Row   6:           0           1  i_ser_mode_done_1            ~i_ser_to_par_trans                

----------------Focused Expression View-----------------
Line       118 Item    1  (~i_ser_mode_done_prev & ser_mode_done_mux_out)
Expression totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
   i_ser_mode_done_prev         Y
  ser_mode_done_mux_out         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_ser_mode_done_prev_0   ser_mode_done_mux_out         
  Row   2:          1  i_ser_mode_done_prev_1   ser_mode_done_mux_out         
  Row   3:          1  ser_mode_done_mux_out_0  ~i_ser_mode_done_prev         
  Row   4:          1  ser_mode_done_mux_out_1  ~i_ser_mode_done_prev         

----------------Focused Expression View-----------------
Line       119 Item    1  (~i_deser_mode_done_prev & i_deser_mode_done)
Expression totals: 2 of 2 input terms covered = 100.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  i_deser_mode_done_prev         Y
       i_deser_mode_done         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  i_deser_mode_done_prev_0  i_deser_mode_done             
  Row   2:          1  i_deser_mode_done_prev_1  i_deser_mode_done             
  Row   3:          1  i_deser_mode_done_0       ~i_deser_mode_done_prev       
  Row   4:          1  i_deser_mode_done_1       ~i_deser_mode_done_prev       

----------------Focused Expression View-----------------
Line       151 Item    1  (i_ser_mode_done_prev3 & ~i_ser_mode_done_pulse)
Expression totals: 1 of 2 input terms covered = 50.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_ser_mode_done_prev3         Y
  i_ser_mode_done_pulse         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_ser_mode_done_prev3_0  ~i_ser_mode_done_pulse        
  Row   2:          1  i_ser_mode_done_prev3_1  ~i_ser_mode_done_pulse        
  Row   3:          1  i_ser_mode_done_pulse_0  i_ser_mode_done_prev3         
  Row   4:    ***0***  i_ser_mode_done_pulse_1  i_ser_mode_done_prev3         

----------------Focused Expression View-----------------
Line       152 Item    1  (i_deser_mode_done_prev3 & ~i_deser_mode_done_pulse)
Expression totals: 1 of 2 input terms covered = 50.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  i_deser_mode_done_prev3         Y
  i_deser_mode_done_pulse         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  i_deser_mode_done_prev3_0  ~i_deser_mode_done_pulse      
  Row   2:          1  i_deser_mode_done_prev3_1  ~i_deser_mode_done_pulse      
  Row   3:          1  i_deser_mode_done_pulse_0  i_deser_mode_done_prev3       
  Row   4:    ***0***  i_deser_mode_done_pulse_1  i_deser_mode_done_prev3       

----------------Focused Expression View-----------------
Line       164 Item    1  (~o_sdr_ctrl_regf_rd_en_prev & o_sdr_ctrl_regf_rd_en)
Expression totals: 0 of 2 input terms covered = 0.00%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
  o_sdr_ctrl_regf_rd_en_prev         N  No hits                  Hit '_0' and '_1'
       o_sdr_ctrl_regf_rd_en         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:    ***0***  o_sdr_ctrl_regf_rd_en_prev_0  o_sdr_ctrl_regf_rd_en         
  Row   2:    ***0***  o_sdr_ctrl_regf_rd_en_prev_1  o_sdr_ctrl_regf_rd_en         
  Row   3:          1  o_sdr_ctrl_regf_rd_en_0       ~o_sdr_ctrl_regf_rd_en_prev   
  Row   4:    ***0***  o_sdr_ctrl_regf_rd_en_1       ~o_sdr_ctrl_regf_rd_en_prev   


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       9         1         8    11.11%
    FSM Transitions                 20         0        20     0.00%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/u_sdr_mode --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 202            SDR_IDLE                   0
 365             DATA_IN                   4
 235             ADDRESS                   3
 268             HANDOFF                   6
 306        SCL_STALLING                   7
 324             ACK_BIT                   2
 344            DATA_OUT                   5
 427          PARITY_BIT                  12
 388               T_BIT                  13
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                SDR_IDLE             1724395          
    Uncovered States :
    ------------------
                   State
                   -----
                 DATA_IN
                 ADDRESS
                 HANDOFF
            SCL_STALLING
                 ACK_BIT
                DATA_OUT
              PARITY_BIT
                   T_BIT
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 226                   0          SDR_IDLE -> DATA_IN 
 219                   1          SDR_IDLE -> ADDRESS 
 380                   2          DATA_IN -> T_BIT    
 176                   3          DATA_IN -> SDR_IDLE 
 259                   4          ADDRESS -> HANDOFF  
 253                   5          ADDRESS -> SDR_IDLE 
 296                   6          HANDOFF -> SCL_STALLING
 289                   7          HANDOFF -> DATA_IN  
 279                   8          HANDOFF -> SDR_IDLE 
 273                   9          HANDOFF -> ACK_BIT  
 310                  10          SCL_STALLING -> DATA_OUT
 176                  11          SCL_STALLING -> SDR_IDLE
 340                  12          ACK_BIT -> HANDOFF  
 176                  13          ACK_BIT -> SDR_IDLE 
 355                  14          DATA_OUT -> PARITY_BIT
 176                  15          DATA_OUT -> SDR_IDLE
 449                  16          PARITY_BIT -> DATA_OUT
 439                  17          PARITY_BIT -> SDR_IDLE
 415                  18          T_BIT -> DATA_IN    
 405                  19          T_BIT -> SDR_IDLE   


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   9         1         8    11.11%
        FSM Transitions             20         0        20     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     154        47       107    30.51%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_sdr_mode --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sdr_mode.v
    33                                               module sdr_mode(
    34                                                   input  wire          i_sdr_ctrl_clk                ,
    35                                                   input  wire          i_sdr_ctrl_rst_n              ,
    36                                                   input  wire          i_sdr_ctrl_cnt_done           , //need naming revisited 
    37                                                   input  wire          i_i3c_ctrl_sdr_en             , //mod in top module
    38                                                   input  wire          i_sdr_ctrl_last_frame         ,
    39                                                   input  wire          i_ser_mode_done               , 
    40                                                   input  wire          i_deser_mode_done             ,
    41                                                   input  wire          i_sdr_regf_rx_tx              , //RnW bit from serializer, 1 = rx , 0 = tx 
    42                                                   input  wire          i_ser_nack_ack                , // 1 = no acknoledge 0 = ACK 
    43                                                   input  wire          i_sdr_rx_rd_abort             ,
    44                                                   input  wire          i_ser_to_par_trans            , // 1 only at the serializing state of the tx, otherwise 0
    45                                                   input  wire          i_sdr_ctrl_bit_cnt_done       , // bits count done , output from bits counter
    46                                                   input  wire          i_sdr_ctrl_scl_neg_edge       ,
    47                                                   input  wire          i_sdr_ctrl_scl_pos_edge       ,
    48                                                   input  wire          i_sdr_ctrl_scl_stall_done     ,
    49                                                   input  wire          i_sdr_ctrl_ibi_payload_en     ,
    50                                                   
    51                                                   
    52                                                   input  wire          i_sdr_rx_arbitration_lost     ,
    53                                                   output reg           o_sdr_ctrl_scl_stall_flag     ,
    54                                                   output reg   [3:0]   o_sdr_ctrl_scl_stall_cycles   ,
    55                                                   output reg           o_sdr_ctrl_scl_idle           ,
    56                                                   output reg           o_sdr_ctrl_fcnt_en            ,
    57                                                   output reg           o_sdr_ctrl_ser_en             ,
    58                                                   output reg           o_sdr_ctrl_ser_valid          ,
    59                                                   output reg   [2:0]   o_sdr_ctrl_ser_mode           ,
    60                                                   output reg           o_sdr_ctrl_deser_en           ,
    61                                                   output reg   [2:0]   o_sdr_rx_mode                 , // deser mode before
    62                                                   output reg           o_sdr_ctrl_cnt_en             ,
    63                                                   output reg           o_sdr_ctrl_rx_cnt_en          ,
    64                                                   output reg           o_sdr_ctrl_pp_od              ,
    65                                                   output reg           o_sdr_ctrl_addr_done          , 
    66                                                   output reg           o_sdr_ctrl_done               ,
    67                                                   output reg           o_sdr_ctrl_regf_wr_en         ,
    68                                                   output reg           o_sdr_ctrl_regf_rd_en_pulse   ,
    69                                                   output reg   [11:0]   o_sdr_ctrl_regf_addr          ,
    70                                                   output reg           o_sdr_ctrl_payload_done       ,
    71                                                   output reg           o_sdr_ctrl_rx_valid            // need to be parametrized using define   
    72                                                   );
    73                                               /////////////////////ADDRESS PARAMTERES///////////////////////
    74                                               localparam IBI_PAYLOAD_BASE_ADDRESS = 108;
    75                                               
    76                                               //- states encoding in gray ----------------------------------------------
    77                                               
    78                                               localparam SDR_IDLE     = 4'b0000 ; 
    79                                               localparam ADDRESS      = 4'b0011 ;
    80                                               localparam ACK_BIT      = 4'b0010 ;
    81                                               localparam HANDOFF      = 4'b0110 ;
    82                                               localparam SCL_STALLING = 4'b0111 ;
    83                                               localparam DATA_OUT     = 4'b0101 ;
    84                                               localparam DATA_IN      = 4'b0100 ;
    85                                               localparam PARITY_BIT   = 4'b1100 ;
    86                                               localparam T_BIT        = 4'b1101 ;
    87                                               
    88                                               
    89                                               //-- internal wires declaration ------------------------------------------
    90                                               
    91                                               reg [3:0] state                  ;
    92                                               reg       address_ack_state_flag ; //Used to go to handoff state where we handle special cases transitions like last bit in Address and from Address to Ack
    93                                               reg       sdr_rx_rd_abort_extend ;
    94                                               
    95                                               //Pulse Generator
    96                                               reg  i_ser_mode_done_prev         ;
    97                                               reg  i_deser_mode_done_prev       ;
    98                                               wire i_ser_mode_done_pulse        ;
    99                                               wire i_deser_mode_done_pulse      ;
    100                                              wire i_deser_mode_done_pulse_tbit ;
    101                                              wire ser_mode_done_mux_out        ;
    102                                              
    103             1                      53474     assign ser_mode_done_mux_out = (i_ser_to_par_trans)? i_sdr_ctrl_bit_cnt_done : i_ser_mode_done ;
    104                                              
    105             1                    1442456     always@(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n)
    106                                                  begin
    107                                                      if (!i_sdr_ctrl_rst_n) 
    108                                                          begin
    109             1                          1                     i_ser_mode_done_prev   <= 1'b0 ;
    110             1                          1                     i_deser_mode_done_prev <= 1'b0 ;
    111                                                          end
    112                                                      else
    113                                                          begin    
    114             1                    1442455                     i_ser_mode_done_prev   <= ser_mode_done_mux_out ;
    115             1                    1442455                     i_deser_mode_done_prev <= i_deser_mode_done     ;
    116                                                          end
    117                                                  end
    118             1                      77779     assign i_ser_mode_done_pulse   = ~(i_ser_mode_done_prev)   & ser_mode_done_mux_out ; 
    119             1                    1398984     assign i_deser_mode_done_pulse = ~(i_deser_mode_done_prev) & i_deser_mode_done     ;  
    120                                                
    121                                                
    122                                              //Pulse from the pulse Generator // need to remove i_
    123                                              reg  i_ser_mode_done_prev3          ;
    124                                              reg  i_deser_mode_done_prev3        ;
    125                                              
    126                                              reg  i_ser_mode_done_prev2          ;
    127                                              reg  i_deser_mode_done_prev2        ;
    128                                              
    129                                              wire i_ser_mode_done_pulse_parity   ;
    130                                              
    131                                              //needs reset.. // to be revised
    132             1                    1476759     always@(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n)
    133                                                  begin
    134                                                      if (!i_sdr_ctrl_rst_n) 
    135                                                          begin
    136             1                          1                     i_ser_mode_done_prev2   <= 1'b0;
    137             1                          1                     i_ser_mode_done_prev3   <= 1'b0;
    138             1                          1                     i_deser_mode_done_prev2 <= 1'b0;
    139             1                          1                     i_deser_mode_done_prev3 <= 1'b0;
    140                                                          end
    141                                                      else
    142                                                          begin    
    143             1                    1476758                     i_ser_mode_done_prev2   <= i_ser_mode_done_pulse   ;
    144             1                    1476758                     i_deser_mode_done_prev2 <= i_deser_mode_done_pulse ;  
    145                                              
    146             1                    1476758                     i_ser_mode_done_prev3   <= i_ser_mode_done_prev2   ;
    147             1                    1476758                     i_deser_mode_done_prev3 <= i_deser_mode_done_prev2 ;
    148                                                          end
    149                                                  end
    150                                                  
    151             1                      77779     assign i_ser_mode_done_pulse_parity = i_ser_mode_done_prev3   & ~(i_ser_mode_done_pulse)   ;
    152             1                    1398984     assign i_deser_mode_done_pulse_tbit = i_deser_mode_done_prev3 & ~(i_deser_mode_done_pulse) ;
    153                                                
    154                                              // Pulse for RegFile Read Enable in order to read only 1 frame at a time  // need to remove o_
    155                                              reg o_sdr_ctrl_regf_rd_en;
    156                                              reg o_sdr_ctrl_regf_rd_en_prev;
    157                                                
    158             1                          4     always@(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n )
    159                                                  begin
    160                                                  if (!i_sdr_ctrl_rst_n) 
    161             1                          1           o_sdr_ctrl_regf_rd_en_prev  <= 1'b0;
    162                                                  else    
    163             1                          3           o_sdr_ctrl_regf_rd_en_prev  <=   o_sdr_ctrl_regf_rd_en                               ;  
    164             1                          4           o_sdr_ctrl_regf_rd_en_pulse <= ~(o_sdr_ctrl_regf_rd_en_prev) & o_sdr_ctrl_regf_rd_en ;
    165                                                  end
    166                                                
    167                                              
    168                                              //-- sdr mode main fsm ---------------------------------------------------
    169                                              
    170             1                    1724396     always @(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n) 
    171                                                begin: sdr_mode_main_fsm
    172                                                  
    173                                                  if (!i_sdr_ctrl_rst_n) 
    174                                                    begin
    175                                                    //-- state  
    176             1                          1             state                        <= SDR_IDLE  ; 
    177                                                    //-- outputs   
    178             1                          1             o_sdr_ctrl_fcnt_en           <= 1'b0      ;
    179             1                          1             o_sdr_ctrl_ser_en            <= 1'b0      ;
    180             1                          1             o_sdr_ctrl_ser_valid         <= 1'b0      ;
    181             1                          1             o_sdr_ctrl_ser_mode          <= 2'b0      ;
    182             1                          1             o_sdr_ctrl_deser_en          <= 1'b0      ;
    183             1                          1             o_sdr_ctrl_cnt_en            <= 1'b0      ;
    184             1                          1             o_sdr_ctrl_pp_od             <= 1'b0      ;
    185             1                          1             o_sdr_ctrl_done              <= 1'b0      ;
    186             1                          1             o_sdr_rx_mode                <= 2'b0      ;
    187             1                          1             o_sdr_ctrl_addr_done         <= 1'b0      ;
    188             1                          1             o_sdr_ctrl_regf_rd_en        <= 1'b0      ;
    189             1                          1             o_sdr_ctrl_regf_wr_en        <= 1'b0      ;  // write enable output to reg file 
    190             1                          1             address_ack_state_flag       <= 1'b0      ;
    191             1                          1             o_sdr_ctrl_rx_cnt_en         <= 1'b0      ;
    192                                                      //o_sdr_ctrl_regf_addr         <= 6'b000000 ; we dont want it to drive the reg file when it is in the idle state and we arent using it 
    193             1                          1             o_sdr_ctrl_rx_valid          <= 1'b0      ;
    194             1                          1             sdr_rx_rd_abort_extend       <= 1'b0      ;
    195             1                          1             o_sdr_ctrl_payload_done      <= 1'b0      ;
    196                                                      //o_sdr_ctrl_scl_idle          <= 1'b0      ;  we dont need to close scl from here but from the main ctrl unit
    197                                                    end
    198                                              
    199                                                  else 
    200                                                    begin
    201                                                      case (state) 
    202                                                        SDR_IDLE:      
    203                                                          begin 
    204             1                    1724394                   o_sdr_ctrl_fcnt_en           <= 1'b0 ;
    205             1                    1724394                   o_sdr_ctrl_ser_en            <= 1'b0 ;
    206             1                    1724394                   o_sdr_ctrl_ser_valid         <= 1'b0 ;
    207             1                    1724394                   o_sdr_ctrl_ser_mode          <= 2'b0 ;
    208                                                            //o_sdr_ctrl_deser_en          <= 1'b0 ;  we need ser to be on arbitration
    209                                                            //o_sdr_ctrl_cnt_en            <= 1'b0 ;
    210                                                            //o_sdr_ctrl_pp_od             <= 1'b0 ;
    211                                                            //o_sdr_ctrl_done              <= 1'b0 ;
    212                                                            //o_sdr_rx_mode                <= 1'b0 ;
    213                                                            //o_sdr_ctrl_rx_valid          <= 1'b0 ;
    214                                                            //sdr_rx_rd_abort_extend       <= 1'b0 ;
    215                                                            //o_sdr_ctrl_scl_idle          <= 1'b1 ;
    216                                              
    217                                                            if (i_i3c_ctrl_sdr_en)
    218                                                              begin 
    219             1                    ***0***                       state <= ADDRESS ;
    220             1                    ***0***                        o_sdr_ctrl_regf_addr         <=  12'b000000   ; 
    221             1                    ***0***                        o_sdr_ctrl_pp_od       <= 1'b0   ; 
    222                                              
    223                                                              end 
    224                                                            else if (i_sdr_ctrl_ibi_payload_en)
    225                                                              begin 
    226             1                    ***0***                       state <= DATA_IN  ;
    227             1                    ***0***                       o_sdr_ctrl_regf_addr  <= IBI_PAYLOAD_BASE_ADDRESS ; // index 108
    228                                                              end       
    229                                                            else 
    230                                                              begin 
    231             1                    1724394                       state <= SDR_IDLE  ;
    232                                                              end                   
    233                                                          end 
    234                                              
    235                                                        ADDRESS:      
    236                                                          begin 
    237             1                    ***0***                   o_sdr_ctrl_pp_od       <= 1'b0   ; //Address is driven by OD (not optimized)
    238             1                    ***0***                   o_sdr_ctrl_ser_mode    <= 2'b01  ; //SERIALIZING mode at Tx             
    239             1                    ***0***                   o_sdr_ctrl_ser_en      <= 1'b1   ; //Tx Enable 
    240             1                    ***0***                   o_sdr_ctrl_ser_valid   <= 1'b0   ; //No Data Valid to prevent overwriting the data being serialized
    241             1                    ***0***                   o_sdr_ctrl_cnt_en      <= 1'b1   ; //Bit Counter Enable
    242             1                    ***0***                   o_sdr_ctrl_regf_rd_en  <= 1'b1   ;
    243             1                    ***0***                   address_ack_state_flag <= 1'b1   ;
    244             1                    ***0***                   o_sdr_ctrl_scl_idle    <= 1'b0   ;
    245                                              
    246                                                            /// for arbitration //
    247             1                    ***0***                   o_sdr_ctrl_deser_en <= 1'b1  ; 
    248             1                    ***0***                   o_sdr_rx_mode       <= 2'b10 ;      ///// arbitration 
    249                                              
    250                                              
    251                                                            if (i_sdr_rx_arbitration_lost)
    252                                                              begin 
    253             1                    ***0***                       state                <= SDR_IDLE;
    254             1                    ***0***                       o_sdr_ctrl_regf_addr <= 12'd48;
    255                                                              end
    256                                                            else if (i_ser_mode_done_pulse)
    257                                                              begin 
    258             1                    ***0***                        o_sdr_ctrl_addr_done <= 1'b1    ;
    259             1                    ***0***                        state                <= HANDOFF ;                 
    260                                                              end 
    261                                                            else 
    262                                                              begin
    263             1                    ***0***                        o_sdr_ctrl_addr_done <= 1'b0    ; 
    264             1                    ***0***                        state                <= ADDRESS ;
    265                                                              end 
    266                                                          end 
    267                                                          
    268                                                        HANDOFF:   
    269                                                          begin
    270                                                          if (i_sdr_ctrl_scl_neg_edge && address_ack_state_flag)
    271                                                              begin
    272             1                    ***0***                         o_sdr_ctrl_cnt_en <= 1'b0  ; //Bit Counter Disable
    273             1                    ***0***                         state <= ACK_BIT  ;
    274                                                              end                
    275                                                          else if  (i_sdr_ctrl_scl_neg_edge && !address_ack_state_flag)  
    276                                                              begin    
    277                                                                  if (i_ser_nack_ack) 
    278                                                                      begin
    279             1                    ***0***                                 state <= SDR_IDLE;              //STOP after NACK
    280             1                    ***0***                                 o_sdr_ctrl_scl_idle  <= 1'b1 ;
    281             1                    ***0***                                 o_sdr_ctrl_ser_mode <=  2'b10 ; //STOP mode 
    282             1                    ***0***                                  o_sdr_ctrl_done <= 1'b1;
    283             1                    ***0***                                  o_sdr_ctrl_payload_done <= 1'b1;
    284                                                                      end    
    285                                                                  else
    286                                                                      begin
    287                                                                          if (i_sdr_regf_rx_tx)
    288                                                                              begin
    289             1                    ***0***                                         state                 <= DATA_IN ;          //Receiving Data at Rx
    290             1                    ***0***                                         o_sdr_ctrl_regf_wr_en <= 1'b1      ; // enable reg file to write 
    291             1                    ***0***                                         o_sdr_ctrl_regf_addr  <= 12'b010011 ; // 1st frame to be written in RegFile at index 19 
    292             1                    ***0***                                         o_sdr_ctrl_ser_en            <= 1'b0  ;
    293                                                                              end
    294                                                                          else 
    295                                                                              begin
    296             1                    ***0***                                         state <= SCL_STALLING ;     //Transmitting Data at Tx 
    297                                                                              end
    298                                                                      end
    299                                                              end     
    300                                                          else 
    301                                                              begin 
    302             1                    ***0***                        state <= HANDOFF  ;
    303                                                              end              
    304                                                          end
    305                                                      
    306                                                        SCL_STALLING:   
    307                                                                begin
    308                                                                  if (i_sdr_ctrl_scl_stall_done)  
    309                                                                      begin
    310             1                    ***0***                               state <= DATA_OUT;
    311             1                    ***0***                               o_sdr_ctrl_ser_mode   <= 2'b01 ;   //SERIALIZING mode at Tx
    312                                                                      end                                         
    313                                                                  else
    314                                                                    begin  
    315             1                    ***0***                             o_sdr_ctrl_scl_stall_flag   <= 1'b1      ;  
    316             1                    ***0***                             o_sdr_ctrl_scl_stall_cycles <= 4'd6      ;
    317             1                    ***0***                             o_sdr_ctrl_ser_en           <= 1'b1      ; //Tx Enable
    318             1                    ***0***                             o_sdr_ctrl_regf_rd_en       <= 1'b1      ;
    319             1                    ***0***                             o_sdr_ctrl_regf_addr        <= 12'b000010 ; // 1st frame of data in RegFile at index 2.
    320             1                    ***0***                             state <= SCL_STALLING; //----------added recently
    321                                                                    end                      
    322                                                                end
    323                                                      
    324                                                        ACK_BIT:      
    325                                                          begin             
    326             1                    ***0***                   o_sdr_ctrl_pp_od       <= 1'b0  ; //ACK bit is driven by OD
    327             1                    ***0***                   o_sdr_rx_mode          <= 2'b00 ; //ACK mode at Rx
    328             1                    ***0***                   o_sdr_ctrl_ser_en      <= 1'b0  ; //Tx Disable 
    329                                                            //o_sdr_ctrl_cnt_en      <= 1'b0  ; //Bit Counter Disable
    330             1                    ***0***                   o_sdr_ctrl_rx_cnt_en   <= 1'b0  ; 
    331             1                    ***0***                   o_sdr_ctrl_deser_en    <= 1'b1  ; //Rx Enable 
    332             1                    ***0***                   address_ack_state_flag <= 1'b0  ; 
    333                                                           /* if (i_sdr_regf_rx_tx)               
    334                                                                begin // 1 >> rx
    335                                                                    state <= DATA_IN;                    //Recieving Data at Rx
    336                                                                    
    337                                                                end     
    338                                                            else
    339                                                                begin*/
    340             1                    ***0***                           state <= HANDOFF ; //Transmitting Data at Tx                       
    341                                                                //end     
    342                                                          end
    343                                              
    344                                                        DATA_OUT:      
    345                                                          begin    
    346             1                    ***0***                   o_sdr_ctrl_pp_od      <= 1'b1 ; //DATA is driven by PP     //we need to check the handoff
    347             1                    ***0***                   o_sdr_ctrl_fcnt_en    <= 1'b0 ; //Frame Counter Enable
    348             1                    ***0***                   o_sdr_ctrl_deser_en   <= 1'b0 ; //Rx Disable             
    349             1                    ***0***                   o_sdr_ctrl_ser_valid  <= 1'b0 ; //No Data Valid to prevent overwriting the data being serialized  
    350             1                    ***0***                   o_sdr_ctrl_cnt_en     <= 1'b1 ; //Bit Counter Enable
    351             1                    ***0***                   o_sdr_ctrl_regf_rd_en <= 1'b0 ;
    352                                                            
    353                                                            if (i_ser_mode_done_pulse) 
    354                                                             begin
    355             1                    ***0***                      state <= PARITY_BIT;
    356             1                    ***0***                      o_sdr_ctrl_ser_mode <= 2'b11 ; //PARITY mode at Tx                  
    357                                                             end  
    358                                                           else
    359                                                             begin
    360             1                    ***0***                      state <= DATA_OUT; 
    361                                                             end                
    362                                                         
    363                                                          end 
    364                                              
    365                                                        DATA_IN:      
    366                                                          begin
    367             1                    ***0***                   o_sdr_rx_mode                <= 2'b01 ;
    368             1                    ***0***                   o_sdr_ctrl_fcnt_en           <= 1'b0  ;
    369             1                    ***0***                   o_sdr_ctrl_ser_en            <= 1'b0  ;
    370             1                    ***0***                   o_sdr_ctrl_deser_en          <= 1'b1  ;
    371             1                    ***0***                   o_sdr_ctrl_pp_od             <= 1'b1  ;
    372             1                    ***0***                   o_sdr_ctrl_cnt_en            <= 1'b1  ; //Bit Counter Enable
    373             1                    ***0***                   o_sdr_ctrl_rx_cnt_en         <= 1'b1  ; // rx counter enable 
    374             1                    ***0***                   o_sdr_ctrl_regf_wr_en        <= 1'b0  ;
    375             1                    ***0***                   o_sdr_ctrl_rx_valid          <= 1'b0  ;    
    376                                              
    377                                                            if (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)//(i_deser_mode_done_pulse && i_sdr_ctrl_scl_neg_edge)  //(i_deser_mode_done_prev3)  
    378                                                              begin 
    379             1                    ***0***                         o_sdr_ctrl_rx_valid <= 1'b1 ;
    380             1                    ***0***                         state <= T_BIT;
    381                                                              end 
    382                                                            else 
    383                                                              begin
    384             1                    ***0***                       state <= DATA_IN; 
    385                                                              end 
    386                                                          end
    387                                              
    388                                                        T_BIT:      
    389                                                          begin
    390             1                    ***0***                   o_sdr_rx_mode                <= 2'b11 ;
    391             1                    ***0***                   o_sdr_ctrl_fcnt_en           <= 1'b1  ;
    392             1                    ***0***                   o_sdr_ctrl_ser_en            <= 1'b0  ;
    393             1                    ***0***                   o_sdr_ctrl_ser_valid         <= 1'b0  ;
    394             1                    ***0***                   o_sdr_ctrl_deser_en          <= 1'b1  ;
    395             1                    ***0***                   o_sdr_ctrl_cnt_en            <= 1'b0  ;
    396             1                    ***0***                   o_sdr_ctrl_rx_cnt_en         <= 1'b0  ;
    397             1                    ***0***                   o_sdr_ctrl_pp_od             <= 1'b1  ;
    398             1                    ***0***                   o_sdr_ctrl_rx_valid          <= 1'b0  ;
    399             1                    ***0***                   sdr_rx_rd_abort_extend       <= i_sdr_rx_rd_abort ;
    400                                                                          
    401                                                            if (i_deser_mode_done && i_sdr_ctrl_scl_neg_edge)
    402                                                              begin
    403                                                                if (sdr_rx_rd_abort_extend) 
    404                                                                  begin 
    405             1                    ***0***                         state <= SDR_IDLE ;
    406             1                    ***0***                         o_sdr_ctrl_done      <= 1'b1;
    407             1                    ***0***                         o_sdr_ctrl_regf_wr_en <= 1'b1;
    408             1                    ***0***                         o_sdr_ctrl_ser_en      <=  1'b0 ; 
    409             1                    ***0***                         o_sdr_ctrl_pp_od       <= 1'b1 ;
    410             1                    ***0***                         sdr_rx_rd_abort_extend <= 1'b0 ;
    411             1                    ***0***                         o_sdr_ctrl_payload_done <= 1'b1;
    412                                                                  end 
    413                                                                else 
    414                                                                  begin 
    415             1                    ***0***                           state <= DATA_IN;
    416             1                    ***0***                           o_sdr_ctrl_regf_wr_en <= 1'b1;
    417             1                    ***0***                           o_sdr_ctrl_regf_addr  <= o_sdr_ctrl_regf_addr + 1'b1 ;
    418                                                                  end 
    419                                                              end
    420                                                            else 
    421                                                              begin 
    422             1                    ***0***                       state <= T_BIT;
    423                                                              end 
    424                                              
    425                                                          end       
    426                                              
    427                                                        PARITY_BIT:      
    428                                                          begin
    429             1                    ***0***                   o_sdr_ctrl_pp_od        <= 1'b1  ; //DATA is driven by PP     //we need to check the handoff       
    430             1                    ***0***                   o_sdr_ctrl_fcnt_en      <= 1'b0  ; //Frame Counter Disable
    431             1                    ***0***                   o_sdr_ctrl_ser_en       <= 1'b1  ; //Tx Enable
    432             1                    ***0***                   o_sdr_ctrl_cnt_en       <= 1'b0  ; //Bit Counter Disable
    433                                                            
    434                                                            
    435                                                            if (i_ser_mode_done_pulse_parity) //(i_ser_mode_done && i_sdr_ctrl_scl_pos_edge ) Edit by Zyad
    436                                                             begin
    437                                                               if(i_sdr_ctrl_last_frame) 
    438                                                                 begin
    439             1                    ***0***                          state <= SDR_IDLE;   //End Write Data Operation
    440             1                    ***0***                          o_sdr_ctrl_deser_en          <= 1'b0     ;
    441             1                    ***0***                          o_sdr_ctrl_ser_en            <=  1'b1  ; //Tx Enable
    442             1                    ***0***                          o_sdr_ctrl_pp_od       <= 1'b1 ;
    443             1                    ***0***                          sdr_rx_rd_abort_extend <= 1'b0 ;
    444             1                    ***0***                          o_sdr_ctrl_payload_done <= 1'b1;
    445             1                    ***0***                          o_sdr_ctrl_done <= 1'b1;
    446                                                                 end
    447                                                               else
    448                                                                 begin
    449             1                    ***0***                          state <= DATA_OUT;   //Write another Frame                
    450             1                    ***0***                          o_sdr_ctrl_ser_mode   <= 2'b01; //SERIALIZING mode at Tx
    451             1                    ***0***                          o_sdr_ctrl_regf_rd_en   <= 1'b1  ; 
    452             1                    ***0***                          o_sdr_ctrl_regf_addr <= o_sdr_ctrl_regf_addr + 1'b1; //increment the address to Read the next data frame from RegFile
    453                                                                 end
    454                                                             end  
    455                                                            else
    456                                                             begin
    457             1                    ***0***                      state <= PARITY_BIT; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        146        45       101    30.82%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_sdr_mode --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                            address_ack_state_flag           0           0        0.00 
                                 i_deser_mode_done           1           1      100.00 
                            i_deser_mode_done_prev           1           1      100.00 
                           i_deser_mode_done_prev2           1           1      100.00 
                           i_deser_mode_done_prev3           1           1      100.00 
                           i_deser_mode_done_pulse           1           1      100.00 
                      i_deser_mode_done_pulse_tbit           1           1      100.00 
                                 i_i3c_ctrl_sdr_en           0           0        0.00 
                           i_sdr_ctrl_bit_cnt_done           1           1      100.00 
                                    i_sdr_ctrl_clk           1           1      100.00 
                               i_sdr_ctrl_cnt_done           1           1      100.00 
                         i_sdr_ctrl_ibi_payload_en           0           0        0.00 
                             i_sdr_ctrl_last_frame           1           0       50.00 
                                  i_sdr_ctrl_rst_n           1           1      100.00 
                           i_sdr_ctrl_scl_neg_edge           1           1      100.00 
                           i_sdr_ctrl_scl_pos_edge           1           1      100.00 
                         i_sdr_ctrl_scl_stall_done           1           1      100.00 
                                  i_sdr_regf_rx_tx           0           0        0.00 
                         i_sdr_rx_arbitration_lost           0           0        0.00 
                                 i_sdr_rx_rd_abort           0           0        0.00 
                                   i_ser_mode_done           1           1      100.00 
                              i_ser_mode_done_prev           1           1      100.00 
                             i_ser_mode_done_prev2           1           1      100.00 
                             i_ser_mode_done_prev3           1           1      100.00 
                             i_ser_mode_done_pulse           1           1      100.00 
                      i_ser_mode_done_pulse_parity           1           1      100.00 
                                    i_ser_nack_ack           1           1      100.00 
                                i_ser_to_par_trans           1           1      100.00 
                              o_sdr_ctrl_addr_done           0           0        0.00 
                                 o_sdr_ctrl_cnt_en           0           0        0.00 
                               o_sdr_ctrl_deser_en           0           0        0.00 
                                   o_sdr_ctrl_done           0           0        0.00 
                                o_sdr_ctrl_fcnt_en           0           0        0.00 
                           o_sdr_ctrl_payload_done           0           0        0.00 
                                  o_sdr_ctrl_pp_od           0           0        0.00 
                        o_sdr_ctrl_regf_addr[11-0]           0           0        0.00 
                             o_sdr_ctrl_regf_rd_en           0           0        0.00 
                        o_sdr_ctrl_regf_rd_en_prev           0           0        0.00 
                       o_sdr_ctrl_regf_rd_en_pulse           0           0        0.00 
                             o_sdr_ctrl_regf_wr_en           0           0        0.00 
                              o_sdr_ctrl_rx_cnt_en           0           0        0.00 
                               o_sdr_ctrl_rx_valid           0           0        0.00 
                               o_sdr_ctrl_scl_idle           0           0        0.00 
                  o_sdr_ctrl_scl_stall_cycles[3-0]           0           0        0.00 
                         o_sdr_ctrl_scl_stall_flag           0           0        0.00 
                                 o_sdr_ctrl_ser_en           0           0        0.00 
                          o_sdr_ctrl_ser_mode[2-0]           0           0        0.00 
                              o_sdr_ctrl_ser_valid           0           0        0.00 
                                o_sdr_rx_mode[2-0]           0           0        0.00 
                            sdr_rx_rd_abort_extend           0           0        0.00 
                             ser_mode_done_mux_out           1           1      100.00 
                                        state[3-0]           0           0        0.00 

Total Node Count     =         73 
Toggled Node Count   =         22 
Untoggled Node Count =         51 

Toggle Coverage      =      30.82% (45 of 146 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_i2c_legacy_mode
=== Design Unit: work.i2c_legacy_mode
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        37         7        30    18.91%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_i2c_legacy_mode

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File i2c_legacy_mode.v
------------------------------------IF Branch------------------------------------
    82                                   1219098     Count coming in to IF
    82              1                          1         if (!i_rst_n) 
    101             1                    1219097         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    103                                  1219097     Count coming in to IF
    103             1                    1219096                 if (!i_i2c_mode_en)
                                               1     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    107                                  1219097     Count coming in to CASE
    108             1                    1219096                 I2C_IDLE:
    143             1                    ***0***                 ADDRESS:
    168             1                    ***0***                 TRGT_ACK:
    242             1                    ***0***                 DATA_OUT:
    261             1                    ***0***                 DATA_IN:
    283             1                    ***0***                 CTRL_ACK:
                                               1     All False Count
Branch totals: 2 hits of 7 branches = 28.57%

------------------------------------IF Branch------------------------------------
    125                                  1219096     Count coming in to IF
    125             1                    ***0***                         if (i_i2c_mode_en && !i2c_mode_en_prev ) 
    138             1                    1219096                         else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    147                                  ***0***     Count coming in to IF
    147             1                    ***0***                         if (i_tx_mode_done && i_scl_neg_edge)
    157             1                    ***0***                         else if (i_rx_arbitration_lost)
    163             1                    ***0***                          else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    170                                  ***0***     Count coming in to IF
    170             1                    ***0***                         if (i_rx_mode_done && i_scl_neg_edge)
    237             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    174                                  ***0***     Count coming in to IF
    174             1                    ***0***                                 if (i_rx_nack_ack)
    186             1                    ***0***                                 else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    188                                  ***0***     Count coming in to IF
    188             1                    ***0***                                         if (addr_data_ack)  //TRGT_ACK AFTER ADDRESS
    211             1                    ***0***                                         else                //TRGT_ACK AFTER DATA_OUT
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    190                                  ***0***     Count coming in to IF
    190             1                    ***0***                                                 if (i_regf_rx_tx)
    200             1                    ***0***                                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    213                                  ***0***     Count coming in to IF
    213             1                    ***0***                                                 if (i_last_frame)
    224             1                    ***0***                                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    245                                  ***0***     Count coming in to IF
    245             1                    ***0***                         if (i_tx_mode_done && i_scl_neg_edge)
    256             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    263                                  ***0***     Count coming in to IF
    263             1                    ***0***                         if (i_rx_mode_done && i_scl_neg_edge)
    278             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    268                                  ***0***     Count coming in to CASE
    269             1                    ***0***                                 1'b0: o_tx_mode <= 3'b111   ; //CTRL_ACK MODE
    270             1                    ***0***                                 1'b1: o_tx_mode <= 3'b101   ; //CTRL_NACK MODE
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    287                                  ***0***     Count coming in to IF
    287             1                    ***0***                         if (i_tx_mode_done && i_scl_neg_edge )
    314             1                    ***0***                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    290                                  ***0***     Count coming in to IF
    290             1                    ***0***                                 if (i_last_frame)
    301             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      12         0        12     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_i2c_legacy_mode --

  File i2c_legacy_mode.v
----------------Focused Condition View-------------------
Line       125 Item    1  (i_i2c_mode_en && ~i2c_mode_en_prev)
Condition totals: 0 of 2 input terms covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
     i_i2c_mode_en         N  '_1' not hit             Hit '_1'
  i2c_mode_en_prev         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_i2c_mode_en_0       -                             
  Row   2:    ***0***  i_i2c_mode_en_1       ~i2c_mode_en_prev             
  Row   3:    ***0***  i2c_mode_en_prev_0    i_i2c_mode_en                 
  Row   4:    ***0***  i2c_mode_en_prev_1    i_i2c_mode_en                 

----------------Focused Condition View-------------------
Line       147 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0      -                             
  Row   2:    ***0***  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_tx_mode_done                

----------------Focused Condition View-------------------
Line       170 Item    1  (i_rx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_rx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_rx_mode_done                

----------------Focused Condition View-------------------
Line       245 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0      -                             
  Row   2:    ***0***  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_tx_mode_done                

----------------Focused Condition View-------------------
Line       263 Item    1  (i_rx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_rx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_rx_mode_done                

----------------Focused Condition View-------------------
Line       287 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0      -                             
  Row   2:    ***0***  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:    ***0***  i_scl_neg_edge_1      i_tx_mode_done                


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       6         1         5    16.66%
    FSM Transitions                 12         0        12     0.00%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/u_i2c_legacy_mode --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 108            I2C_IDLE                   0
 143             ADDRESS                   1
 168            TRGT_ACK                   3
 242            DATA_OUT                   2
 261             DATA_IN                   7
 283            CTRL_ACK                   6
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                I2C_IDLE             1219097          
    Uncovered States :
    ------------------
                   State
                   -----
                 ADDRESS
                TRGT_ACK
                DATA_OUT
                 DATA_IN
                CTRL_ACK
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 136                   0          I2C_IDLE -> ADDRESS 
 161                   1          ADDRESS -> I2C_IDLE 
 155                   2          ADDRESS -> TRGT_ACK 
 232                   3          TRGT_ACK -> DATA_OUT
 222                   4          TRGT_ACK -> I2C_IDLE
 198                   5          TRGT_ACK -> DATA_IN 
 254                   6          DATA_OUT -> TRGT_ACK
 105                   7          DATA_OUT -> I2C_IDLE
 275                   8          DATA_IN -> CTRL_ACK 
 105                   9          DATA_IN -> I2C_IDLE 
 311                  10          CTRL_ACK -> DATA_IN 
 299                  11          CTRL_ACK -> I2C_IDLE


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   6         1         5    16.66%
        FSM Transitions             12         0        12     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     131        30       101    22.90%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_i2c_legacy_mode --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File i2c_legacy_mode.v
    33                                               module i2c_legacy_mode(
    34                                                   input  wire          i_clk                  , //System Clock 50 MHz
    35                                                   input  wire          i_rst_n                , //System Active Low Reset
    36                                                   input  wire          i_i2c_mode_en          , //I2C Legacy Mode Enable-Flag from I3C Engine
    37                                                   input  wire          i_last_frame           , //Last Frame Flag from Frame Counter
    38                                                   input  wire          i_tx_mode_done         , //Tx Current Mode Done-Flag 
    39                                                   input  wire          i_rx_mode_done         , //Rx Current Mode Done-Flag
    40                                                   input  wire          i_regf_rx_tx           , //RnW from RegFile 1 >> Rx , 0 >> Tx 
    41                                                   input  wire          i_rx_nack_ack          , // 1 >> NACK , 0 >> ACK 
    42                                                   input  wire          i_rx_arbitration_lost  ,
    43                                                   input  wire          i_scl_neg_edge         ,
    44                                                   input  wire          i_scl_pos_edge         , 
    45                                                   output reg           o_frame_cnt_en         , //Frames Counter Enable-Flag
    46                                                   output reg           o_bit_cnt_en           , //Bits Counter Enable-Flag
    47                                                   output reg           o_bit_rx_cnt_en        , //Bits Counter Enable-Flag for Rx Deserializing (DATA_IN)
    48                                                   output reg           o_tx_en                , //Tx Enable-Flag
    49                                                   output reg   [2:0]   o_tx_mode              , //Tx Current Mode Selector
    50                                                   output reg           o_rx_en                , //Rx Enable-Flag
    51                                                   output reg   [2:0]   o_rx_mode              , //Rx Current Mode Selector
    52                                                   output reg           o_pp_od                , //Push-Pull/Open-Drain Selector (Always = 0 in I2C)
    53                                                   output reg           o_regf_rd_en           , //RegFile Read Enable-Flag
    54                                                   output reg   [11:0]   o_regf_addr            , //RegFile Read/Write Address
    55                                                   output reg           o_rx_data_valid        , //Received Data Valid-Flag for Host Interface
    56                                                   output reg           o_target_nack          , //Error-Flag for I3C Engine (Target doesn't ACK)
    57                                                   output reg           o_i2c_mode_done          //I2C Legacy Mode Done-Flag for I3C Engine
    58                                                   );
    59                                               
    60                                               
    61                                               //-- states encoding in gray --------------------------------------------
    62                                               
    63                                               localparam I2C_IDLE         = 3'b000 ; 
    64                                               localparam ADDRESS          = 3'b001 ;
    65                                               localparam TRGT_ACK         = 3'b011 ;
    66                                               localparam DATA_OUT         = 3'b010 ;
    67                                               localparam CTRL_ACK         = 3'b110 ;
    68                                               localparam DATA_IN          = 3'b111 ;
    69                                               
    70                                               
    71                                               //-- internal wires declaration -----------------------------------------
    72                                               
    73                                               reg [2:0] state         ;
    74                                               reg       addr_data_ack ;  //Flag to state whether the TRGT_ACK is coming after ADDRESS or DATA_OUT
    75                                               reg       i2c_mode_en_prev ;  
    76                                               
    77                                               
    78                                               //-- i2c legacy mode fsm ------------------------------------------------
    79                                               
    80              1                    1219098     always @(posedge i_clk or negedge i_rst_n) 
    81                                                   begin
    82                                                   if (!i_rst_n) 
    83                                                       begin
    84              1                          1                 o_frame_cnt_en  <= 1'b0      ;
    85              1                          1                 o_bit_cnt_en    <= 1'b0      ;
    86              1                          1                 o_bit_rx_cnt_en <= 1'b0      ;
    87              1                          1                 o_tx_en         <= 1'b0      ;
    88              1                          1                 o_tx_mode       <= 3'b000    ;
    89              1                          1                 o_rx_en         <= 1'b0      ;
    90              1                          1                 o_rx_mode       <= 2'b00     ;
    91              1                          1                 o_pp_od         <= 1'b0      ;
    92              1                          1                 o_regf_rd_en    <= 1'b0      ;
    93              1                          1                 o_regf_addr     <= 12'b000000 ;   
    94              1                          1                 o_rx_data_valid <= 1'b0      ;
    95              1                          1                 o_target_nack   <= 1'b1      ;  
    96              1                          1                 o_i2c_mode_done <= 1'b0      ;
    97              1                          1                 addr_data_ack   <= 1'b0      ;  
    98              1                          1                 i2c_mode_en_prev <= 1'b1     ; 
    99              1                          1                 state           <= I2C_IDLE  ;   
    100                                                      end
    101                                                  else
    102                                                      begin
    103                                                          if (!i_i2c_mode_en)
    104                                                              begin
    105             1                    1219096                         state <= I2C_IDLE ; //supporting immediate i2c_disable for all states
    106                                                              end
    107                                                          case (state)
    108                                                          I2C_IDLE:
    109                                                              begin
    110             1                    1219096                         o_frame_cnt_en  <= 1'b0      ;
    111                                                                  //o_bit_cnt_en    <= 1'b0      ;
    112                                                                  //o_bit_rx_cnt_en <= 1'b0      ;
    113             1                    1219096                         o_tx_en         <= 1'b0      ;
    114             1                    1219096                         o_tx_mode       <= 3'b000    ;
    115             1                    1219096                         o_rx_en         <= 1'b1      ; // as we need it enabled at arbitration
    116             1                    1219096                         o_pp_od         <= 1'b0      ;
    117             1                    1219096                         o_regf_rd_en    <= 1'b0      ;
    118                                                                  //o_regf_addr     <= 6'b000000 ;   
    119             1                    1219096                         o_rx_data_valid <= 1'b0      ;  
    120             1                    1219096                         o_target_nack   <= 1'b1      ; 
    121             1                    1219096                         o_i2c_mode_done <= 1'b0      ;
    122             1                    1219096                         addr_data_ack   <= 1'b0      ; 
    123             1                    1219096                         i2c_mode_en_prev <= i_i2c_mode_en ;  
    124                                              
    125                                                                  if (i_i2c_mode_en && !i2c_mode_en_prev ) 
    126                                                                      begin
    127             1                    ***0***                                 o_bit_cnt_en    <= 1'b1      ;
    128             1                    ***0***                                 o_tx_en         <= 1'b1      ;
    129             1                    ***0***                                 o_tx_mode       <= 3'b001    ; //SERIALIZING MODE
    130             1                    ***0***                                 o_regf_rd_en    <= 1'b1      ;
    131             1                    ***0***                                 o_regf_addr     <= 12'b000000 ;  //TBD After Register File Locations Management
    132                                              
    133                                                                          //// Arbitration signals //////
    134             1                    ***0***                                 o_rx_en         <= 1'b1      ; 
    135             1                    ***0***                                 o_rx_mode       <= 2'b10     ; // ARBITRATION mode
    136             1                    ***0***                                 state           <= ADDRESS   ;
    137                                                                      end
    138                                                                  else 
    139                                                                      begin
    140             1                    1219096                                 state <= I2C_IDLE ;
    141                                                                      end
    142                                                              end
    143                                                          ADDRESS:
    144                                                              begin
    145             1                    ***0***                         o_regf_rd_en <= 1'b0 ;
    146                                              
    147                                                                  if (i_tx_mode_done && i_scl_neg_edge)
    148                                                                      begin
    149             1                    ***0***                                 o_bit_cnt_en    <= 1'b0      ;
    150             1                    ***0***                                 o_tx_en         <= 1'b0      ;
    151             1                    ***0***                                 o_tx_mode       <= 3'b000    ;
    152             1                    ***0***                                 o_rx_en         <= 1'b1      ;
    153             1                    ***0***                                 o_rx_mode       <= 2'b00     ; //ACK MODE
    154             1                    ***0***                                 addr_data_ack   <= 1'b1      ; //Acknowledge to Address
    155             1                    ***0***                                 state           <= TRGT_ACK  ;
    156                                                                      end
    157                                                                  else if (i_rx_arbitration_lost)
    158                                                                    begin 
    159             1                    ***0***                             o_i2c_mode_done <= 1'b1        ;
    160             1                    ***0***                             o_regf_addr     <= 'd48        ;
    161             1                    ***0***                             state           <=  I2C_IDLE   ;
    162                                                                   end
    163                                                                   else
    164                                                                      begin
    165             1                    ***0***                                 state <= ADDRESS ;
    166                                                                      end
    167                                                              end
    168                                                          TRGT_ACK:
    169                                                              begin
    170                                                                  if (i_rx_mode_done && i_scl_neg_edge)
    171                                                                      begin
    172             1                    ***0***                                 o_frame_cnt_en  <= 1'b1 ;
    173             1                    ***0***                                 o_bit_cnt_en    <= 1'b1 ;
    174                                                                          if (i_rx_nack_ack)
    175                                                                              begin
    176             1                    ***0***                                         o_frame_cnt_en  <= 1'b0     ;
    177             1                    ***0***                                         o_bit_cnt_en    <= 1'b0     ;
    178             1                    ***0***                                         o_tx_en         <= 1'b0     ;
    179             1                    ***0***                                         o_tx_mode       <= 3'b000   ;
    180             1                    ***0***                                         o_rx_en         <= 1'b0     ;
    181             1                    ***0***                                         o_rx_mode       <= 2'b00    ;
    182             1                    ***0***                                         o_target_nack   <= 1'b1     ;
    183             1                    ***0***                                         o_i2c_mode_done <= 1'b1     ;
    184             1                    ***0***                                         state           <= I2C_IDLE ; 
    185                                                                              end
    186                                                                          else 
    187                                                                              begin
    188                                                                                  if (addr_data_ack)  //TRGT_ACK AFTER ADDRESS
    189                                                                                      begin
    190                                                                                          if (i_regf_rx_tx)
    191                                                                                              begin
    192             1                    ***0***                                                         o_tx_en         <= 1'b0      ;
    193             1                    ***0***                                                         o_tx_mode       <= 3'b000    ;
    194             1                    ***0***                                                         o_rx_en         <= 1'b1      ;
    195             1                    ***0***                                                         o_rx_mode       <= 2'b01     ; //DESERIALIZING MODE
    196             1                    ***0***                                                         o_bit_rx_cnt_en <= 1'b1      ; //Counting under Rx Conditions
    197             1                    ***0***                                                         o_regf_addr     <= 12'b010011 ; // 1st frame to be written in RegFile at index 19 
    198             1                    ***0***                                                         state           <= DATA_IN   ; 
    199                                                                                              end
    200                                                                                          else
    201                                                                                              begin
    202             1                    ***0***                                                         o_tx_en      <= 1'b1      ;
    203             1                    ***0***                                                         o_tx_mode    <= 3'b001    ; //SERIALIZING MODE
    204             1                    ***0***                                                         o_rx_en      <= 1'b0      ;
    205             1                    ***0***                                                         o_rx_mode    <= 2'b00     ;
    206             1                    ***0***                                                         o_regf_rd_en <= 1'b1      ;
    207             1                    ***0***                                                         o_regf_addr  <= 12'b000010 ; // 1st frame of data in RegFile at index 2.
    208             1                    ***0***                                                         state        <= DATA_OUT  ;
    209                                                                                              end                            
    210                                                                                      end
    211                                                                                  else                //TRGT_ACK AFTER DATA_OUT
    212                                                                                      begin
    213                                                                                          if (i_last_frame)
    214                                                                                              begin
    215             1                    ***0***                                                         o_frame_cnt_en  <= 1'b0               ;
    216             1                    ***0***                                                         o_bit_cnt_en    <= 1'b0               ;
    217             1                    ***0***                                                         o_tx_en         <= 1'b0               ;
    218             1                    ***0***                                                         o_tx_mode       <= 3'b000             ;
    219             1                    ***0***                                                         o_rx_en         <= 1'b0               ;
    220             1                    ***0***                                                         o_rx_mode       <= 2'b00              ;
    221             1                    ***0***                                                         o_i2c_mode_done <= 1'b1               ;
    222             1                    ***0***                                                         state           <= I2C_IDLE           ; 
    223                                                                                              end
    224                                                                                          else
    225                                                                                              begin
    226             1                    ***0***                                                         o_tx_en         <= 1'b1               ;
    227             1                    ***0***                                                         o_tx_mode       <= 3'b001             ; //SERIALIZING MODE
    228             1                    ***0***                                                         o_rx_en         <= 1'b0               ;
    229             1                    ***0***                                                         o_rx_mode       <= 2'b00              ;
    230             1                    ***0***                                                         o_regf_rd_en    <= 1'b1               ;
    231             1                    ***0***                                                         o_regf_addr     <= o_regf_addr + 1'b1 ;
    232             1                    ***0***                                                         state           <= DATA_OUT           ;
    233                                                                                              end                            
    234                                                                                      end
    235                                                                              end
    236                                                                      end
    237                                                                  else
    238                                                                      begin
    239             1                    ***0***                                 state <= TRGT_ACK ;
    240                                                                      end
    241                                                              end
    242                                                          DATA_OUT:
    243                                                              begin
    244             1                    ***0***                         o_regf_rd_en <= 1'b0 ;
    245                                                                  if (i_tx_mode_done && i_scl_neg_edge)
    246                                                                      begin
    247             1                    ***0***                                 o_frame_cnt_en  <= 1'b0     ;
    248             1                    ***0***                                 o_bit_cnt_en    <= 1'b0     ;
    249             1                    ***0***                                 o_tx_en         <= 1'b0     ;
    250             1                    ***0***                                 o_tx_mode       <= 3'b000   ;
    251             1                    ***0***                                 o_rx_en         <= 1'b1     ;
    252             1                    ***0***                                 o_rx_mode       <= 2'b00    ; //ACK MODE
    253             1                    ***0***                                 addr_data_ack   <= 1'b0     ; //Acknowledge to Wr_Data
    254             1                    ***0***                                 state           <= TRGT_ACK ;
    255                                                                      end
    256                                                                  else
    257                                                                      begin
    258             1                    ***0***                                 state <= DATA_OUT ;
    259                                                                      end
    260                                                              end
    261                                                          DATA_IN:
    262                                                              begin
    263                                                                  if (i_rx_mode_done && i_scl_neg_edge)
    264                                                                      begin
    265             1                    ***0***                                 o_frame_cnt_en  <= 1'b0     ;
    266             1                    ***0***                                 o_bit_cnt_en    <= 1'b0     ;
    267             1                    ***0***                                 o_tx_en         <= 1'b1     ;
    268                                                                          case (i_last_frame)
    269             1                    ***0***                                 1'b0: o_tx_mode <= 3'b111   ; //CTRL_ACK MODE
    270             1                    ***0***                                 1'b1: o_tx_mode <= 3'b101   ; //CTRL_NACK MODE
    271                                                                          endcase
    272             1                    ***0***                                 o_rx_en         <= 1'b0     ;
    273             1                    ***0***                                 o_rx_mode       <= 2'b00    ;
    274             1                    ***0***                                 addr_data_ack   <= 1'b0     ;
    275             1                    ***0***                                 state           <= CTRL_ACK ;
    276             1                    ***0***                                 o_rx_data_valid <= 1'b1 ;
    277                                                                      end
    278                                                                  else
    279                                                                      begin
    280             1                    ***0***                                 state <= DATA_IN ;
    281                                                                      end  
    282                                                              end
    283                                                          CTRL_ACK:
    284                                                              begin
    285                                              
    286             1                    ***0***                         o_rx_data_valid <= 1'b0 ;
    287                                                                  if (i_tx_mode_done && i_scl_neg_edge )
    288                                              
    289                                                                      begin
    290                                                                          if (i_last_frame)
    291                                                                              begin
    292             1                    ***0***                                         o_frame_cnt_en  <= 1'b0               ;
    293             1                    ***0***                                         o_bit_cnt_en    <= 1'b0               ;
    294             1                    ***0***                                         o_tx_en         <= 1'b0               ;
    295             1                    ***0***                                         o_tx_mode       <= 3'b000             ;
    296             1                    ***0***                                         o_rx_en         <= 1'b0               ;
    297             1                    ***0***                                         o_rx_mode       <= 2'b00              ;
    298             1                    ***0***                                         o_i2c_mode_done <= 1'b1               ;
    299             1                    ***0***                                         state           <= I2C_IDLE           ; 
    300                                                                              end
    301                                                                          else
    302                                                                              begin
    303             1                    ***0***                                         o_frame_cnt_en  <= 1'b1               ;
    304             1                    ***0***                                         o_bit_cnt_en    <= 1'b1               ;
    305             1                    ***0***                                         o_bit_rx_cnt_en <= 1'b1               ; //Counting under Rx Conditions
    306             1                    ***0***                                         o_tx_en         <= 1'b0               ;
    307             1                    ***0***                                         o_tx_mode       <= 3'b000             ;
    308             1                    ***0***                                         o_rx_en         <= 1'b1               ;
    309             1                    ***0***                                         o_rx_mode       <= 2'b01              ; //DESERIALIZING MODE
    310             1                    ***0***                                         o_regf_addr     <= o_regf_addr + 1'b1 ;
    311             1                    ***0***                                         state           <= DATA_IN            ;
    312                                                                              end  
    313                                                                      end
    314                                                                  else
    315                                                                      begin
    316             1                    ***0***                                 state <= CTRL_ACK ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         88        17        71    19.31%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_i2c_legacy_mode --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     addr_data_ack           0           0        0.00 
                                  i2c_mode_en_prev           1           0       50.00 
                                             i_clk           1           1      100.00 
                                     i_i2c_mode_en           0           0        0.00 
                                      i_last_frame           1           0       50.00 
                                      i_regf_rx_tx           0           0        0.00 
                                           i_rst_n           1           1      100.00 
                             i_rx_arbitration_lost           0           0        0.00 
                                    i_rx_mode_done           1           1      100.00 
                                     i_rx_nack_ack           1           1      100.00 
                                    i_scl_neg_edge           1           1      100.00 
                                    i_scl_pos_edge           1           1      100.00 
                                    i_tx_mode_done           1           1      100.00 
                                      o_bit_cnt_en           0           0        0.00 
                                   o_bit_rx_cnt_en           0           0        0.00 
                                    o_frame_cnt_en           0           0        0.00 
                                   o_i2c_mode_done           0           0        0.00 
                                           o_pp_od           0           0        0.00 
                                 o_regf_addr[11-0]           0           0        0.00 
                                      o_regf_rd_en           0           0        0.00 
                                   o_rx_data_valid           0           0        0.00 
                                           o_rx_en           0           1       50.00 
                                    o_rx_mode[2-0]           0           0        0.00 
                                     o_target_nack           0           0        0.00 
                                           o_tx_en           0           0        0.00 
                                    o_tx_mode[2-0]           0           0        0.00 
                                        state[2-0]           0           0        0.00 

Total Node Count     =         44 
Toggled Node Count   =          7 
Untoggled Node Count =         37 

Toggle Coverage      =      19.31% (17 of 88 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_daa
=== Design Unit: work.dynamic_address_assignment
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        53         5        48     9.43%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_daa

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File dynamic_address_assignment.v
------------------------------------IF Branch------------------------------------
    97                                   1219097     Count coming in to IF
    97              1                          1             if (!i_daa_rst_n)
    121             1                    1219096             else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    123                                  1219096     Count coming in to CASE
    124             1                    1219095                         DAA_IDLE:
    150             1                    ***0***                         START:
    171             1                    ***0***                         BROADCAST:
    207             1                    ***0***                         ACK: //REVISE CODE APPROACH
    299             1                    ***0***                         ENTDAA:
    326             1                    ***0***                         PARITY:
    349             1                    ***0***                          READ_DATA:
    384             1                    ***0***                          DAA:
    407             1                    ***0***                          FINISH:
                                               1     All False Count
Branch totals: 2 hits of 10 branches = 20.00%

------------------------------------IF Branch------------------------------------
    126                                  1219095     Count coming in to IF
    126             1                    ***0***                               if (i_mcu_daa_en)
    145             1                    1219095                               else
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    162                                  ***0***     Count coming in to IF
    162             1                    ***0***                                 if (i_scl_daa_neg_edge && i_tx_daa_mode_done)
    166             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    174                                  ***0***     Count coming in to IF
    174             1                    ***0***                                 if (i_scl_daa_neg_edge && i_tx_daa_mode_done) 
    181             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    186                                  ***0***     Count coming in to IF
    186             1                    ***0***                                 if(daa_mode) 
    196             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    211                                  ***0***     Count coming in to IF
    211             1                    ***0***                                 if(i_rx_daa_mode_done && i_scl_daa_neg_edge)
    294             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    214                                  ***0***     Count coming in to IF
    214             1                    ***0***                                         if(daa_mode)
    274             1                    ***0***                                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    217                                  ***0***     Count coming in to IF
    217             1                    ***0***                                                 if(par_to_ack)
    252             1                    ***0***                                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    219                                  ***0***     Count coming in to IF
    219             1                    ***0***                                                         if(i_rx_daa_nack_ack) //NACK AFTER PARITY OF ASSIGNED ADDRESS ----------- 2024 note : 1 for NACK 0 for ACK
    234             1                    ***0***                                                         else //ACK AFTER PARITY OF ASSIGNED ADDRESS
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    222                                  ***0***     Count coming in to IF
    222             1                    ***0***                                                                 if(nacks_counter == 2'b10)
    228             1                    ***0***                                                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    239                                  ***0***     Count coming in to IF
    239             1                    ***0***                                                                 if(addresses_count == 6'b0)
    244             1                    ***0***                                                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    254                                  ***0***     Count coming in to IF
    254             1                    ***0***                                                         if(!i_rx_daa_nack_ack) //ACK AFTER BROADCAST READ
    267             1                    ***0***                                                         else //NACK AFTER BROADCAST READ
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    276                                  ***0***     Count coming in to IF
    276             1                    ***0***                                                 if (!i_rx_daa_nack_ack) //IF ACK, NEXT STATE IS ENTDAA
    287             1                    ***0***                                               else                    //IF NACK, SEND REPEATED START THEN 7E AGAIN
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    307                                  ***0***     Count coming in to IF
    307             1                    ***0***                               if (i_scl_daa_neg_edge && i_tx_daa_mode_done)
    321             1                    ***0***                               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    329                                  ***0***     Count coming in to IF
    329             1                    ***0***                               if (i_scl_daa_neg_edge )
    344             1                    ***0***                               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    331                                  ***0***     Count coming in to IF
    331             1                    ***0***                                     if(ccc_to_par)
    337             1                    ***0***                                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    351                                  ***0***     Count coming in to IF
    351             1                    ***0***                                 if(i_scl_daa_neg_edge)
    379             1                    ***0***                                 else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    353                                  ***0***     Count coming in to IF
    353             1                    ***0***                                         if (frames_count == 3'b111)
    366             1                    ***0***                                         else if(i_rx_daa_mode_done)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    368                                  ***0***     Count coming in to IF
    368             1                    ***0***                                                 if (frames_count == 'd6) begin 
    372             1                    ***0***                                                 else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    391                                  ***0***     Count coming in to IF
    391             1                    ***0***                                 if(i_scl_daa_neg_edge && i_tx_daa_done)
    402             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    411                                  ***0***     Count coming in to IF
    411             1                    ***0***                                 if(i_scl_daa_neg_edge && i_tx_daa_mode_done)
    415             1                    ***0***                                 else
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      16         0        16     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_daa --

  File dynamic_address_assignment.v
----------------Focused Condition View-------------------
Line       162 Item    1  (i_scl_daa_neg_edge && i_tx_daa_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'
  i_tx_daa_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_daa_neg_edge_0  -                             
  Row   2:    ***0***  i_scl_daa_neg_edge_1  i_tx_daa_mode_done            
  Row   3:    ***0***  i_tx_daa_mode_done_0  i_scl_daa_neg_edge            
  Row   4:    ***0***  i_tx_daa_mode_done_1  i_scl_daa_neg_edge            

----------------Focused Condition View-------------------
Line       174 Item    1  (i_scl_daa_neg_edge && i_tx_daa_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'
  i_tx_daa_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_daa_neg_edge_0  -                             
  Row   2:    ***0***  i_scl_daa_neg_edge_1  i_tx_daa_mode_done            
  Row   3:    ***0***  i_tx_daa_mode_done_0  i_scl_daa_neg_edge            
  Row   4:    ***0***  i_tx_daa_mode_done_1  i_scl_daa_neg_edge            

----------------Focused Condition View-------------------
Line       211 Item    1  (i_rx_daa_mode_done && i_scl_daa_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_rx_daa_mode_done         N  No hits                  Hit '_0' and '_1'
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_daa_mode_done_0  -                             
  Row   2:    ***0***  i_rx_daa_mode_done_1  i_scl_daa_neg_edge            
  Row   3:    ***0***  i_scl_daa_neg_edge_0  i_rx_daa_mode_done            
  Row   4:    ***0***  i_scl_daa_neg_edge_1  i_rx_daa_mode_done            

----------------Focused Condition View-------------------
Line       222 Item    1  (nacks_counter == 2)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (nacks_counter == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (nacks_counter == 2)_0  -                             
  Row   2:    ***0***  (nacks_counter == 2)_1  -                             

----------------Focused Condition View-------------------
Line       239 Item    1  (addresses_count == 0)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (addresses_count == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (addresses_count == 0)_0  -                             
  Row   2:    ***0***  (addresses_count == 0)_1  -                             

----------------Focused Condition View-------------------
Line       307 Item    1  (i_scl_daa_neg_edge && i_tx_daa_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'
  i_tx_daa_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_daa_neg_edge_0  -                             
  Row   2:    ***0***  i_scl_daa_neg_edge_1  i_tx_daa_mode_done            
  Row   3:    ***0***  i_tx_daa_mode_done_0  i_scl_daa_neg_edge            
  Row   4:    ***0***  i_tx_daa_mode_done_1  i_scl_daa_neg_edge            

----------------Focused Condition View-------------------
Line       353 Item    1  (frames_count == 7)
Condition totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (frames_count == 7)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (frames_count == 7)_0  -                             
  Row   2:    ***0***  (frames_count == 7)_1  -                             

----------------Focused Condition View-------------------
Line       368 Item    1  (frames_count == 6)
Condition totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (frames_count == 6)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (frames_count == 6)_0  -                             
  Row   2:    ***0***  (frames_count == 6)_1  -                             

----------------Focused Condition View-------------------
Line       391 Item    1  (i_scl_daa_neg_edge && i_tx_daa_done)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'
       i_tx_daa_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_daa_neg_edge_0  -                             
  Row   2:    ***0***  i_scl_daa_neg_edge_1  i_tx_daa_done                 
  Row   3:    ***0***  i_tx_daa_done_0       i_scl_daa_neg_edge            
  Row   4:    ***0***  i_tx_daa_done_1       i_scl_daa_neg_edge            

----------------Focused Condition View-------------------
Line       411 Item    1  (i_scl_daa_neg_edge && i_tx_daa_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_scl_daa_neg_edge         N  No hits                  Hit '_0' and '_1'
  i_tx_daa_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_daa_neg_edge_0  -                             
  Row   2:    ***0***  i_scl_daa_neg_edge_1  i_tx_daa_mode_done            
  Row   3:    ***0***  i_tx_daa_mode_done_0  i_scl_daa_neg_edge            
  Row   4:    ***0***  i_tx_daa_mode_done_1  i_scl_daa_neg_edge            


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       9         1         8    11.11%
    FSM Transitions                 20         0        20     0.00%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/u_daa --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 124            DAA_IDLE                   0
 171           BROADCAST                   4
 150               START                   1
 207                 ACK                  13
 299              ENTDAA                   3
 407              FINISH                   7
 349           READ_DATA                   2
 326              PARITY                  12
 384                 DAA                   6
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                DAA_IDLE             1219096          
    Uncovered States :
    ------------------
                   State
                   -----
               BROADCAST
                   START
                     ACK
                  ENTDAA
                  FINISH
               READ_DATA
                  PARITY
                     DAA
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 128                   0          DAA_IDLE -> BROADCAST
 176                   1          BROADCAST -> ACK    
  99                   2          BROADCAST -> DAA_IDLE
 164                   3          START -> BROADCAST  
  99                   4          START -> DAA_IDLE   
 289                   5          ACK -> START        
 278                   6          ACK -> ENTDAA       
 269                   7          ACK -> FINISH       
 256                   8          ACK -> READ_DATA    
 226                   9          ACK -> DAA_IDLE     
 312                  10          ENTDAA -> PARITY    
  99                  11          ENTDAA -> DAA_IDLE  
 413                  12          FINISH -> DAA_IDLE  
 356                  13          READ_DATA -> DAA    
  99                  14          READ_DATA -> DAA_IDLE
 341                  15          PARITY -> ACK       
 334                  16          PARITY -> START     
  99                  17          PARITY -> DAA_IDLE  
 394                  18          DAA -> PARITY       
  99                  19          DAA -> DAA_IDLE     


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   9         1         8    11.11%
        FSM Transitions             20         0        20     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     151        23       128    15.23%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_daa --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File dynamic_address_assignment.v
    34                                               module dynamic_address_assignment (
    35                                                   input  wire          i_daa_clk                    ,
    36                                                   input  wire          i_daa_rst_n                  ,
    37                                                   input  wire          i_mcu_daa_en                 , // enable from main ctrl unit 
    38                                                   input  wire          i_scl_daa_pos_edge           , // SCL POS EDGE
    39                                                   input  wire          i_scl_daa_neg_edge           , // SCL NEG EDGE
    40                                                   input  wire          i_tx_daa_mode_done           , // TX MODE DONE
    41                                                   input  wire          i_tx_daa_done                , // TX MODE DONE IN CASE OF 7-bit SERIALIZING  
    42                                                   input  wire          i_rx_daa_mode_done           , // RX MODE DONE
    43                                                   input  wire          i_rx_daa_nack_ack            , // 1:NACK      , 0: ACK
    44                                                   output wire          o_daa_pp_od                  , // 1: pushpull , 0: opendrain
    45                                                   output reg           o_daa_regf_rd_en             , // Reg_file read enable
    46                                                   output reg           o_daa_regf_wr_en             , // Reg_file write enable
    47                                                   output reg  [7:0]    o_daa_regf_data_wr           , // Reg_file data write
    48                                                   output reg  [11:0]    o_daa_regf_addr              , // Reg_file Address
    49                                                   output reg  [2:0]    o_daa_tx_mode                , // TX configuration
    50                                                   output reg           o_daa_tx_en                  , // TX enable
    51                                                   output reg  [2:0]    o_daa_rx_mode                , // RX configuration 
    52                                                   output reg           o_daa_rx_en                  , // RX enable
    53                                                   output reg           o_daa_fcnt_en                , // Frame Counter Enable
    54                                                   output reg  [7:0]    o_daa_fcnt_no_frms           , // No of frames to Frame counter
    55                                                   output reg           o_daa_bits_cnt_en            , // Bits Counter Enable
    56                                                   output reg           o_daa_rx_cnt_en              , // bits counter rx enable in case of read data
    57                                                   output reg           o_daa_error                  , // error management procedure
    58                                                   output reg           o_regf_wr_data_mux_sel       , // MUX SELECTOR FOR REGFILE DATA WRITE
    59                                                   output reg           o_daa_mcu_done              ); // procedure done
    60                                               
    61                                               //---------------------------------- states encoding in gray ----------------------------------------------
    62                                               localparam DAA_IDLE                     = 4'b0000 ; // 0
    63                                               localparam START                        = 4'b0001 ; // 1
    64                                               localparam ENTDAA                       = 4'b0011 ; // 3
    65                                               localparam READ_DATA                    = 4'b0010 ; // 2
    66                                               localparam DAA                          = 4'b0110 ; // 6
    67                                               localparam FINISH                       = 4'b0111 ; // 7
    68                                               localparam BROADCAST                    = 4'b0100 ; // 4
    69                                               localparam PARITY                       = 4'b1100 ; // C
    70                                               localparam ACK                          = 4'b1101 ; // D
    71                                               
    72                                               //---------------------------------- Paramaters needed ----------------------------------------------------
    73                                               
    74                                               localparam first_address                = 7'h08   ;
    75                                               localparam base_address_of_regf         =  'd200  ;
    76                                               
    77                                               //---------------------------------- Assign Statements ----------------------------------------------------
    78                                               
    79                                               assign o_daa_pp_od = 1'b0        ; // dynamic address assignment procedure is always opendrain // must be registered
    80                                               
    81                                               //---------------------------------- INTERNAL WIRES -------------------------------------------------------
    82                                               
    83                                               reg [3:0] state                  ;
    84                                               reg [2:0] frames_count           ; // incrementing by 1 with each mode done in case of READ_DATA (DESERIALIZING) 
    85                                               reg [5:0] addresses_count        ; // used in address assignment to increment the assigned address  
    86                                               reg [7:0] target_offset          ; // to calculate regf address pointer
    87                                               reg [1:0] nacks_counter          ; // to determine how many nacks by the target
    88                                               reg       par_to_ack             ; //PARITY TO ACKNOWLEDGE INDICATOR, NOT BROADCAST READ TO ACK
    89                                               reg       ccc_to_par             ; // CCC TO PAR INDICATOR, NOT DATA TO PARITY
    90                                               reg       daa_mode               ; //ENTDAA IS SENT // any start after is a REPEATED START, and any broadcast is READ.
    91                                               
    92                                               //---------------------------------- DAA MAIN FSM  --------------------------------------------------------
    93                                               
    94              1                    1219097     always @(posedge i_daa_clk or negedge i_daa_rst_n)
    95                                                   begin: daa_mode_fsm
    96                                                       
    97                                                       if (!i_daa_rst_n)
    98                                                           begin
    99              1                          1                     state                   <= DAA_IDLE; //idle state after reset  
    100             1                          1                     target_offset           <= 8'b0;
    101             1                          1                     nacks_counter           <= 2'b0; 
    102             1                          1                     frames_count            <= 3'b0;
    103             1                          1                     par_to_ack              <= 1'b0;
    104             1                          1                     ccc_to_par              <= 1'b0;
    105             1                          1                     daa_mode                <= 1'b0;
    106             1                          1                     o_daa_regf_rd_en        <= 1'b0;  
    107             1                          1                     o_daa_regf_wr_en        <= 1'b0;
    108             1                          1                     o_daa_regf_data_wr      <= 8'b0;
    109             1                          1                     o_daa_regf_addr         <= 10'b0;
    110             1                          1                     o_daa_tx_mode           <= 3'b0;
    111             1                          1                     o_daa_tx_en             <= 1'b0;
    112             1                          1                     o_daa_mcu_done          <= 1'b0;
    113             1                          1                     o_daa_rx_en             <= 1'b0;
    114             1                          1                     o_daa_rx_mode           <= 2'b00;
    115             1                          1                     o_daa_fcnt_en           <= 1'b0;
    116             1                          1                     o_daa_fcnt_no_frms      <= 8'b0;
    117             1                          1                     o_daa_bits_cnt_en       <= 1'b0;
    118             1                          1                     o_daa_error             <= 1'b0;
    119             1                          1                     o_regf_wr_data_mux_sel  <= 1'b0; 
    120                                                          end          
    121                                                      else
    122                                                          begin
    123                                                              case(state)
    124                                                                  DAA_IDLE:
    125                                                                      begin                        
    126                                                                        if (i_mcu_daa_en)
    127                                                                          begin
    128             1                    ***0***                                   state <= BROADCAST;
    129             1                    ***0***                                   target_offset           <= 8'b0;
    130             1                    ***0***                                   nacks_counter           <= 2'b0; 
    131             1                    ***0***                                   frames_count            <= 3'b0;
    132             1                    ***0***                                   par_to_ack              <= 1'b0;
    133             1                    ***0***                                   ccc_to_par              <= 1'b0;
    134             1                    ***0***                                   daa_mode                <= 1'b0;
    135             1                    ***0***                                   o_daa_mcu_done          <= 1'b0;
    136             1                    ***0***                                   o_daa_rx_en             <= 1'b1;
    137             1                    ***0***                                   o_daa_rx_mode           <= 2'b10;
    138             1                    ***0***                                   o_daa_fcnt_en           <= 1'b0;
    139             1                    ***0***                                   o_daa_fcnt_no_frms      <= 8'b0;
    140             1                    ***0***                                   o_daa_bits_cnt_en       <= 1'b0;
    141             1                    ***0***                                   o_daa_error             <= 1'b0;
    142             1                    ***0***                                   o_regf_wr_data_mux_sel  <= 1'b0; 
    143             1                    ***0***                                   o_daa_bits_cnt_en       <= 1'b1;
    144                                                                          end
    145                                                                        else
    146                                                                          begin
    147             1                    1219095                                   state <= DAA_IDLE;
    148                                                                          end                               
    149                                                                      end
    150                                                                  START:
    151                                                                      begin
    152                                              
    153             1                    ***0***                                 o_daa_rx_mode           <= 2'b10;   // 2024
    154                                              
    155                                              
    156                                              
    157             1                    ***0***                                 o_daa_regf_rd_en        <= 1'b0;
    158             1                    ***0***                                 o_daa_regf_wr_en        <= 1'b0;
    159             1                    ***0***                                 o_daa_regf_data_wr      <= 8'b0;
    160             1                    ***0***                                 o_daa_tx_mode           <= 3'b000;
    161             1                    ***0***                                 o_daa_tx_en             <= 1'b1;    
    162                                                                          if (i_scl_daa_neg_edge && i_tx_daa_mode_done)
    163                                                                            begin
    164             1                    ***0***                                     state <= BROADCAST;
    165                                                                            end
    166                                                                          else
    167                                                                            begin
    168             1                    ***0***                                     state <= START;
    169                                                                            end                               
    170                                                                      end
    171                                                                  BROADCAST:
    172                                                                      begin
    173                                                                          //SERIALIZING DONE. NEXT STATE LOGIC
    174                                                                          if (i_scl_daa_neg_edge && i_tx_daa_mode_done) 
    175                                                                              begin
    176             1                    ***0***                                       state <= ACK; 
    177             1                    ***0***                                       o_daa_tx_en             <= 1'b0;
    178             1                    ***0***                                       o_daa_rx_en             <= 1'b1;
    179             1                    ***0***                                       o_daa_rx_mode           <= 2'b00;  // 2024 : wdy el RX le ACK state
    180                                                                              end
    181                                                                          else
    182                                                                              begin
    183             1                    ***0***                                       state <= BROADCAST;
    184                                                                              end 
    185                                                                          // CHOOSING WHICH BROADCAST TO SERIALIZE. OUTPUT LOGIC     
    186                                                                          if(daa_mode) 
    187                                                                              begin
    188             1                    ***0***                                         o_daa_regf_rd_en        <= 1'b1; 
    189             1                    ***0***                                         o_daa_regf_wr_en        <= 1'b0; 
    190             1                    ***0***                                         o_daa_regf_data_wr      <= 8'b0; 
    191             1                    ***0***                                         o_daa_regf_addr         <= 10'b0000101111; // 47 decimal 
    192             1                    ***0***                                         o_daa_tx_mode           <= 3'b001;
    193             1                    ***0***                                         o_daa_tx_en             <= 1'b1;   
    194             1                    ***0***                                         o_daa_bits_cnt_en       <= 1'b1;                              
    195                                                                              end
    196                                                                          else
    197                                                                              begin
    198             1                    ***0***                                         o_daa_regf_rd_en        <= 1'b1; 
    199             1                    ***0***                                         o_daa_regf_wr_en        <= 1'b0; 
    200             1                    ***0***                                         o_daa_regf_data_wr      <= 8'b0; 
    201             1                    ***0***                                         o_daa_regf_addr         <= 10'b0000101110; //46 decimal 
    202             1                    ***0***                                         o_daa_tx_mode           <= 3'b001;
    203             1                    ***0***                                         o_daa_tx_en             <= 1'b1;
    204             1                    ***0***                                         o_daa_bits_cnt_en       <= 1'b1; 
    205                                                                              end                                                      
    206                                                                      end 
    207                                                                  ACK: //REVISE CODE APPROACH
    208                                                                      begin
    209             1                    ***0***                             o_daa_bits_cnt_en       <= 1'b0;
    210                                                                          //STATE TRANSITION CONDITION
    211                                                                          if(i_rx_daa_mode_done && i_scl_daa_neg_edge)
    212                                                                              begin
    213                                                                                  // ACKNOWLEDGE INSIDE DAA MODE (WITHOUT HANDOFF)
    214                                                                                  if(daa_mode)
    215                                                                                      begin
    216                                                                                          // ACKNOWLEDGE AFTER PARITY
    217                                                                                          if(par_to_ack)
    218                                                                                              begin                
    219                                                                                                  if(i_rx_daa_nack_ack) //NACK AFTER PARITY OF ASSIGNED ADDRESS ----------- 2024 note : 1 for NACK 0 for ACK
    220                                                                                                      begin
    221             1                    ***0***                                                                 nacks_counter      <= nacks_counter + 1'b1;
    222                                                                                                          if(nacks_counter == 2'b10)
    223                                                                                                              begin
    224             1                    ***0***                                                                         o_daa_error <= 1'b1;
    225             1                    ***0***                                                                         o_daa_mcu_done <= 1'b1;
    226             1                    ***0***                                                                         state <= DAA_IDLE;    
    227                                                                                                              end
    228                                                                                                          else
    229                                                                                                              begin
    230             1                    ***0***                                                                         o_daa_error <= 1'b0;
    231             1                    ***0***                                                                         state <= START;                                                                 
    232                                                                                                              end                                                            
    233                                                                                                      end  
    234                                                                                                  else //ACK AFTER PARITY OF ASSIGNED ADDRESS
    235                                                                                                      begin
    236             1                    ***0***                                                                 nacks_counter <= 2'b0; 
    237             1                    ***0***                                                                 state <= START;
    238                                                                                                          // Logic to calculate target offset that determines the regf pointer
    239                                                                                                          if(addresses_count == 6'b0)
    240                                                                                                              begin    
    241             1                    ***0***                                                                         target_offset           <= 'd9;
    242             1                    ***0***                                                                         addresses_count         <= addresses_count + 1;
    243                                                                                                              end
    244                                                                                                          else
    245                                                                                                              begin
    246             1                    ***0***                                                                         target_offset           <= target_offset + 'd9;
    247             1                    ***0***                                                                         addresses_count         <= addresses_count + 1;
    248                                                                                                              end    
    249                                                                                                      end                                                 
    250                                                                                              end
    251                                                                                          // ACKNOWLEDGE AFTER BROADCAST READ    
    252                                                                                          else
    253                                                                                              begin
    254                                                                                                  if(!i_rx_daa_nack_ack) //ACK AFTER BROADCAST READ
    255                                                                                                      begin
    256             1                    ***0***                                                                 state <= READ_DATA;
    257             1                    ***0***                                                                 o_daa_regf_rd_en        <= 1'b0; 
    258             1                    ***0***                                                                 o_daa_regf_wr_en        <= 1'b1; 
    259             1                    ***0***                                                                 o_daa_regf_addr         <= base_address_of_regf + target_offset; 
    260             1                    ***0***                                                                 o_daa_tx_en             <= 1'b0;    
    261             1                    ***0***                                                                 o_daa_rx_mode           <= 2'b01;                                                                               
    262             1                    ***0***                                                                 o_daa_rx_en             <= 1'b1;
    263             1                    ***0***                                                                 o_daa_fcnt_en           <= 1'b1;
    264             1                    ***0***                                                                 o_daa_fcnt_no_frms      <= 8'b1000;
    265             1                    ***0***                                                                 o_daa_bits_cnt_en       <= 1'b1;
    266                                                                                                      end   
    267                                                                                                  else //NACK AFTER BROADCAST READ
    268                                                                                                      begin
    269             1                    ***0***                                                                 state <= FINISH;
    270                                                                                                      end
    271                                                                                              end
    272                                                                                      end
    273                                                                                  // ACKNOWLEDGE OUTSIDE DAA MDOE, AFTER BROADCAST WRITE (WITH HANDOFF)   
    274                                                                                  else
    275                                                                                      begin
    276                                                                                          if (!i_rx_daa_nack_ack) //IF ACK, NEXT STATE IS ENTDAA
    277                                                                                              begin
    278             1                    ***0***                                                         state <= ENTDAA;
    279             1                    ***0***                                                         o_daa_regf_rd_en        <= 1'b1; 
    280             1                    ***0***                                                         o_daa_regf_wr_en        <= 1'b0; 
    281             1                    ***0***                                                         o_daa_regf_data_wr      <= 8'b0; 
    282             1                    ***0***                                                         o_daa_regf_addr         <=  'd49; 
    283             1                    ***0***                                                         o_daa_tx_mode           <= 3'b001;
    284             1                    ***0***                                                         o_daa_tx_en             <= 1'b1;
    285             1                    ***0***                                                         o_daa_bits_cnt_en       <= 1'b1;                                  
    286                                                                                              end
    287                                                                                        else                    //IF NACK, SEND REPEATED START THEN 7E AGAIN
    288                                                                                          begin
    289             1                    ***0***                                                   state <= START;
    290                                                                                          end
    291                                                                                      end
    292                                                                              end
    293                                                                          //NO STATE TRANSITION     
    294                                                                          else
    295                                                                              begin
    296             1                    ***0***                                         state <= ACK;
    297                                                                              end
    298                                                                      end    
    299                                                                  ENTDAA:
    300                                                                      begin
    301                                              
    302             1                    ***0***                                                              o_daa_rx_mode           <= 2'b10;  // 2024 : rx must stay in arbitration mode in every single transmitting case
    303                                              
    304                                              
    305             1                    ***0***                             daa_mode <= 1'b1;
    306             1                    ***0***                             ccc_to_par <= 1'b1;                            
    307                                                                        if (i_scl_daa_neg_edge && i_tx_daa_mode_done)
    308                                                                          begin
    309                                              
    310                                              
    311                                              
    312             1                    ***0***                                   state <= PARITY;
    313             1                    ***0***                                   o_daa_regf_rd_en        <= 1'b1; 
    314             1                    ***0***                                   o_daa_regf_wr_en        <= 1'b0; 
    315             1                    ***0***                                   o_daa_regf_data_wr      <= 8'b0; 
    316             1                    ***0***                                   o_daa_regf_addr         <=  'd49; 
    317             1                    ***0***                                   o_daa_tx_mode           <= 3'b011; //PARITY
    318             1                    ***0***                                   o_daa_tx_en             <= 1'b1;  
    319             1                    ***0***                                   o_daa_bits_cnt_en       <= 1'b0;                                                            
    320                                                                          end
    321                                                                        else
    322                                                                          begin
    323             1                    ***0***                                   state <= ENTDAA;
    324                                                                          end                             
    325                                                                      end
    326                                                                  PARITY:
    327                                                                      begin  
    328             1                    ***0***                              o_daa_rx_mode           <= 2'b10;  // 2024 : rx must stay in arbitration mode in every single transmitting case                                                 
    329                                                                        if (i_scl_daa_neg_edge )
    330                                                                          begin
    331                                                                              if(ccc_to_par)
    332                                                                              //PARITY AFTER ENTDAA SO NEXT STATE IS A REPEATED START
    333                                                                                  begin
    334             1                    ***0***                                             state <= START;
    335             1                    ***0***                                             ccc_to_par <= 0;
    336                                                                                  end
    337                                                                              else
    338                                                                              //PARITY AFTER ASSIGNED ADDRESS SO NEXT STATE IS ACK 
    339                                                                                  begin
    340             1                    ***0***                                              o_daa_rx_mode           <= 2'b00;  // 2024 : wdy el RX le ACK state
    341             1                    ***0***                                             state <= ACK;
    342                                                                                  end
    343                                                                          end
    344                                                                        else
    345                                                                          begin
    346             1                    ***0***                                     state <= PARITY;
    347                                                                          end  
    348                                                                      end
    349                                                                   READ_DATA:
    350                                                                      begin
    351                                                                          if(i_scl_daa_neg_edge)
    352                                                                              begin
    353                                                                                  if (frames_count == 3'b111)
    354                                                                                      begin
    355             1                    ***0***                                                                              o_daa_rx_mode           <= 2'b10;  // 2024 : rx must stay in arbitration mode in every single transmitting case 
    356             1                    ***0***                                                 state <= DAA;
    357             1                    ***0***                                                 frames_count <= 0;                         
    358             1                    ***0***                                                 o_daa_regf_rd_en        <= 1'b1;          
    359             1                    ***0***                                                 o_daa_regf_wr_en        <= 1'b0;  
    360             1                    ***0***                                                 o_daa_regf_addr         <= 10'd80  ; // 2024 
    361             1                    ***0***                                                 o_regf_wr_data_mux_sel  <= 1'b1;       
    362             1                    ***0***                                                 o_daa_regf_data_wr      <= {first_address + addresses_count , 1'b0};                
    363             1                    ***0***                                                 o_daa_tx_en             <= 1'b1;
    364             1                    ***0***                                                 o_daa_bits_cnt_en       <= 1'b1;                                                                                                                       
    365                                                                                      end                                    
    366                                                                                  else if(i_rx_daa_mode_done)
    367                                                                                      begin
    368                                                                                          if (frames_count == 'd6) begin 
    369             1                    ***0***                                                 frames_count    <= frames_count    + 1'b1;
    370             1                    ***0***                                                 state           <= READ_DATA;                                                
    371                                                                                          end 
    372                                                                                          else begin 
    373             1                    ***0***                                                 frames_count    <= frames_count    + 1'b1;
    374             1                    ***0***                                                 state           <= READ_DATA;
    375             1                    ***0***                                                 o_daa_regf_addr <= o_daa_regf_addr + 1'b1;
    376                                                                                          end
    377                                                                                      end                       
    378                                                                              end
    379                                                                          else 
    380                                                                              begin
    381             1                    ***0***                                         state <= READ_DATA;
    382                                                                              end                                                  
    383                                                                      end 
    384                                                                   DAA:
    385                                                                      begin                        
    386             1                    ***0***                                 o_daa_regf_rd_en        <= 1'b1;          
    387             1                    ***0***                                 o_daa_regf_wr_en        <= 1'b0;                        
    388             1                    ***0***                                 o_daa_tx_mode           <= 3'b001; //SERIALIZING ADDRESS 7 BITS
    389             1                    ***0***                                 o_daa_tx_en             <= 1'b1;
    390             1                    ***0***                                 o_regf_wr_data_mux_sel  <= 1'b0;  
    391                                                                          if(i_scl_daa_neg_edge && i_tx_daa_done)
    392                                                                              begin
    393                                              
    394             1                    ***0***                                         state <= PARITY;
    395             1                    ***0***                                         o_daa_regf_rd_en        <= 1'b1; 
    396             1                    ***0***                                         o_daa_regf_wr_en        <= 1'b0; 
    397             1                    ***0***                                         o_daa_regf_data_wr      <= 8'b0; 
    398             1                    ***0***                                         o_daa_tx_mode           <= 3'b011; //PARITY
    399             1                    ***0***                                         o_daa_tx_en             <= 1'b1;
    400             1                    ***0***                                         o_daa_bits_cnt_en       <= 1'b0;
    401                                                                              end
    402                                                                          else
    403                                                                              begin
    404             1                    ***0***                                         state <= DAA;
    405                                                                              end                                                   
    406                                                                      end                                                                 
    407                                                                   FINISH:
    408                                                                      begin
    409             1                    ***0***                                 o_daa_rx_mode           <= 2'b10;  // 2024 : rx must stay in arbitration mode in every single transmitting case
    410             1                    ***0***                                 o_daa_mcu_done <= 1'b1;
    411                                                                          if(i_scl_daa_neg_edge && i_tx_daa_mode_done)
    412                                                                              begin
    413             1                    ***0***                                         state <= DAA_IDLE;
    414                                                                              end
    415                                                                          else
    416                                                                              begin
    417             1                    ***0***                                         state <= FINISH;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        160        16       144    10.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_daa --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                              addresses_count[5-0]           0           0        0.00 
                                        ccc_to_par           0           0        0.00 
                                          daa_mode           0           0        0.00 
                                 frames_count[2-0]           0           0        0.00 
                                         i_daa_clk           1           1      100.00 
                                       i_daa_rst_n           1           1      100.00 
                                      i_mcu_daa_en           0           0        0.00 
                                i_rx_daa_mode_done           1           1      100.00 
                                 i_rx_daa_nack_ack           1           1      100.00 
                                i_scl_daa_neg_edge           1           1      100.00 
                                i_scl_daa_pos_edge           1           1      100.00 
                                     i_tx_daa_done           1           1      100.00 
                                i_tx_daa_mode_done           1           1      100.00 
                                nacks_counter[1-0]           0           0        0.00 
                                 o_daa_bits_cnt_en           0           0        0.00 
                                       o_daa_error           0           0        0.00 
                                     o_daa_fcnt_en           0           0        0.00 
                           o_daa_fcnt_no_frms[7-0]           0           0        0.00 
                                    o_daa_mcu_done           0           0        0.00 
                                       o_daa_pp_od           0           0        0.00 
                             o_daa_regf_addr[11-0]           0           0        0.00 
                           o_daa_regf_data_wr[7-0]           0           0        0.00 
                                  o_daa_regf_rd_en           0           0        0.00 
                                  o_daa_regf_wr_en           0           0        0.00 
                                   o_daa_rx_cnt_en           0           0        0.00 
                                       o_daa_rx_en           0           0        0.00 
                                o_daa_rx_mode[2-0]           0           0        0.00 
                                       o_daa_tx_en           0           0        0.00 
                                o_daa_tx_mode[2-0]           0           0        0.00 
                            o_regf_wr_data_mux_sel           0           0        0.00 
                                        par_to_ack           0           0        0.00 
                                        state[3-0]           0           0        0.00 
                                target_offset[7-0]           0           0        0.00 

Total Node Count     =         80 
Toggled Node Count   =          8 
Untoggled Node Count =         72 

Toggle Coverage      =      10.00% (16 of 160 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_hot_join
=== Design Unit: work.hot_join
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        50         7        43    14.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_hot_join

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File hot_join.v
------------------------------------IF Branch------------------------------------
    111                                  1228820     Count coming in to IF
    111             1                          1             if (!i_hot_join_rst_n) 
    132             1                    1228819             else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    134                                  1228819     Count coming in to CASE
    135             1                    1228818                     HJ_IDLE:
    193             1                    ***0***                     CTRL_ACK_BIT:
    225             1                    ***0***                     CTRL_NACK_BIT:
    252             1                    ***0***                     REPEATED_START_BIT:  //only for ENEC/DISEC paths
    275             1                    ***0***                     CCC_ADDRESS:  //sending BROADCAST ADDRESS
    295             1                    ***0***                     TRGT_ACK_BIT:
    326             1                    ***0***                     CCC_DATA:
    343             1                    ***0***                     PARITY_BIT:
                                               1     All False Count
Branch totals: 2 hits of 9 branches = 22.22%

------------------------------------IF Branch------------------------------------
    155                                  1228818     Count coming in to IF
    155             1                    ***0***                             if (i_hot_join_enable)
    187             1                    1228818                             else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    157                                  ***0***     Count coming in to IF
    157             1                    ***0***                                     if (i_hot_join_ccc)
    166             1                    ***0***                                     else if (!i_hot_join_support || !hot_join_cfg_ack_nack)
    176             1                    ***0***                                     else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    195                                  ***0***     Count coming in to IF
    195             1                    ***0***                             if (i_hot_join_tx_mode_done)
    219             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    197                                  ***0***     Count coming in to IF
    197             1                    ***0***                                     if (!hot_join_cfg_en_dis)  //controller may DISHJ after ACK
    206             1                    ***0***                                     else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    213                                  ***0***     Count coming in to IF
    213             1                    ***0***                                             if (hot_join_cfg_aval_busy)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    227                                  ***0***     Count coming in to IF
    227             1                    ***0***                             if (i_hot_join_tx_mode_done)
    246             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    230                                  ***0***     Count coming in to IF
    230             1                    ***0***                                     if (!hot_join_cfg_en_dis || !i_hot_join_support) 
    240             1                    ***0***                                     else                        
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    254                                  ***0***     Count coming in to IF
    254             1                    ***0***                             if (i_hot_join_tx_mode_done)
    264             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    279                                  ***0***     Count coming in to IF
    279             1                    ***0***                             if (i_hot_join_tx_pp_mode_done)
    289             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    298                                  ***0***     Count coming in to CASE
    299             1                    ***0***                             ENHJ_MODE : o_hot_join_regf_addr <= 10'd401 ; //ENEC CCC (0x00)
    300             1                    ***0***                             DISHJ_MODE: o_hot_join_regf_addr <= 10'd403 ; //DISEC CCC (0x01)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    302                                  ***0***     Count coming in to IF
    302             1                    ***0***                             if (i_hot_join_rx_mode_done && i_hot_join_scl_neg_edge)
    320             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    304                                  ***0***     Count coming in to IF
    304             1                    ***0***                                     if (!i_hot_join_nack_ack)
    313             1                    ***0***                                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    329                                  ***0***     Count coming in to IF
    329             1                    ***0***                             if (i_hot_join_tx_pp_mode_done)
    337             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    346                                  ***0***     Count coming in to CASE
    347             1                    ***0***                             ENHJ_MODE : o_hot_join_regf_addr <= 10'd402 ; //ENEC BYTE
    348             1                    ***0***                             DISHJ_MODE: o_hot_join_regf_addr <= 10'd404 ; //DISEC BYTE
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    350                                  ***0***     Count coming in to IF
    350             1                    ***0***                             if (i_hot_join_tx_pp_mode_done)
    373             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    352                                  ***0***     Count coming in to IF
    352             1                    ***0***                                     if (!second_frame_done)
    361             1                    ***0***                                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    367                                  ***0***     Count coming in to IF
    367             1                    ***0***                                             if (!i_hot_join_support && hot_join_cfg_aval_busy)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    380                                  1228819     Count coming in to IF
    380             1                    1228818                     if (!i_hot_join_enable)
                                               1     All False Count
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         0         8     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_hot_join --

  File hot_join.v
----------------Focused Condition View-------------------
Line       166 Item    1  (i_hot_join_support ~& hot_join_cfg_ack_nack)
Condition totals: 0 of 2 input terms covered = 0.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
     i_hot_join_support         N  No hits                  Hit '_0' and '_1'
  hot_join_cfg_ack_nack         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:    ***0***  i_hot_join_support_0     hot_join_cfg_ack_nack         
  Row   2:    ***0***  i_hot_join_support_1     hot_join_cfg_ack_nack         
  Row   3:    ***0***  hot_join_cfg_ack_nack_0  i_hot_join_support            
  Row   4:    ***0***  hot_join_cfg_ack_nack_1  i_hot_join_support            

----------------Focused Condition View-------------------
Line       230 Item    1  (hot_join_cfg_en_dis ~& i_hot_join_support)
Condition totals: 0 of 2 input terms covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  hot_join_cfg_en_dis         N  No hits                  Hit '_0' and '_1'
   i_hot_join_support         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  hot_join_cfg_en_dis_0  i_hot_join_support            
  Row   2:    ***0***  hot_join_cfg_en_dis_1  i_hot_join_support            
  Row   3:    ***0***  i_hot_join_support_0   hot_join_cfg_en_dis           
  Row   4:    ***0***  i_hot_join_support_1   hot_join_cfg_en_dis           

----------------Focused Condition View-------------------
Line       302 Item    1  (i_hot_join_rx_mode_done && i_hot_join_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  i_hot_join_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_hot_join_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  i_hot_join_rx_mode_done_0  -                             
  Row   2:    ***0***  i_hot_join_rx_mode_done_1  i_hot_join_scl_neg_edge       
  Row   3:    ***0***  i_hot_join_scl_neg_edge_0  i_hot_join_rx_mode_done       
  Row   4:    ***0***  i_hot_join_scl_neg_edge_1  i_hot_join_rx_mode_done       

----------------Focused Condition View-------------------
Line       367 Item    1  (~i_hot_join_support && hot_join_cfg_aval_busy)
Condition totals: 0 of 2 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
      i_hot_join_support         N  No hits                  Hit '_0' and '_1'
  hot_join_cfg_aval_busy         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  i_hot_join_support_0      hot_join_cfg_aval_busy        
  Row   2:    ***0***  i_hot_join_support_1      -                             
  Row   3:    ***0***  hot_join_cfg_aval_busy_0  ~i_hot_join_support           
  Row   4:    ***0***  hot_join_cfg_aval_busy_1  ~i_hot_join_support           


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       8         1         7    12.50%
    FSM Transitions                 17         0        17     0.00%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/u_hot_join --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 135             HJ_IDLE                   0
 193        CTRL_ACK_BIT                   1
 225       CTRL_NACK_BIT                   3
 275         CCC_ADDRESS                   6
 252  REPEATED_START_BIT                   2
 295        TRGT_ACK_BIT                   7
 326            CCC_DATA                   5
 343          PARITY_BIT                   4
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                 HJ_IDLE             1228819          
    Uncovered States :
    ------------------
                   State
                   -----
            CTRL_ACK_BIT
           CTRL_NACK_BIT
             CCC_ADDRESS
      REPEATED_START_BIT
            TRGT_ACK_BIT
                CCC_DATA
              PARITY_BIT
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 184                   0          HJ_IDLE -> CTRL_ACK_BIT
 174                   1          HJ_IDLE -> CTRL_NACK_BIT
 164                   2          HJ_IDLE -> CCC_ADDRESS
 211                   3          CTRL_ACK_BIT -> HJ_IDLE
 204                   4          CTRL_ACK_BIT -> REPEATED_START_BIT
 242                   5          CTRL_NACK_BIT -> HJ_IDLE
 237                   6          CTRL_NACK_BIT -> REPEATED_START_BIT
 287                   7          CCC_ADDRESS -> TRGT_ACK_BIT
 382                   8          CCC_ADDRESS -> HJ_IDLE
 262                   9          REPEATED_START_BIT -> CCC_ADDRESS
 382                  10          REPEATED_START_BIT -> HJ_IDLE
 315                  11          TRGT_ACK_BIT -> HJ_IDLE
 306                  12          TRGT_ACK_BIT -> CCC_DATA
 331                  13          CCC_DATA -> PARITY_BIT
 382                  14          CCC_DATA -> HJ_IDLE 
 363                  15          PARITY_BIT -> HJ_IDLE
 354                  16          PARITY_BIT -> CCC_DATA


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   8         1         7    12.50%
        FSM Transitions             17         0        17     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     135        36        99    26.66%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_hot_join --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File hot_join.v
    33                                               module hot_join(
    34                                                   //--inputs from system top
    35                                                   input  wire          i_hot_join_clk                , //System Clock 50 MHz
    36                                                   input  wire          i_hot_join_rst_n              , //System Active Low Reset
    37                                               
    38                                                   //--inputs from i3c_engine
    39                                                   input  wire          i_hot_join_enable             , //Hot-Join Enable-Signal
    40                                                   input  wire          i_hot_join_ccc                , //Sending Hot-Join CCCs Request (if Host wanna ENHJ or DISHJ without prior HJ Request)
    41                                               
    42                                                   //--inputs from reg_file
    43                                                   input  wire          i_hot_join_support            , //CRCAP1[0] Hardcoded (read-only) [1 >> Supported , 0 >> Not Supported]
    44                                                   input  wire  [2:0]   i_hot_join_configuration      , //HJ Configuration register {AVAL/BUSY , EN/DIS , ACK/NACK} (Host can overwrite at any time)
    45                                               
    46                                                   //--inputs from controller_tx
    47                                                   input  wire          i_hot_join_tx_mode_done       , //Tx Current Mode Done-Flag
    48                                                   input  wire          i_hot_join_tx_pp_mode_done    , //Tx Current Mode Done-Flag for Push-Pull small periods
    49                                               
    50                                                   //--inputs from controller_rx
    51                                                   input  wire          i_hot_join_rx_mode_done       , //Rx Current Mode Done-Flag
    52                                                   input  wire          i_hot_join_nack_ack           , //Rx Sampled Target' Acknowledgment [1 >> NACK , 0 >> ACK]
    53                                               
    54                                                   //--inputs from scl_generation
    55                                                   input  wire          i_hot_join_scl_neg_edge       , //SCL Falling-Edge Flag
    56                                                   input  wire          i_hot_join_scl_pos_edge       , //SCL Rising-Edge Flag
    57                                               
    58                                                   //--outputs to controller_tx
    59                                                   output reg           o_hot_join_tx_en              , //Tx Enable-Flag
    60                                                   output reg   [2:0]   o_hot_join_tx_mode            , //Tx Current Mode Selector
    61                                               
    62                                                   //--outputs to controller_rx
    63                                                   output reg           o_hot_join_rx_en              , //Rx Enable-Flag
    64                                                   output reg   [2:0]   o_hot_join_rx_mode            , //Rx Current Mode Selector 
    65                                               
    66                                                   //--outputs to reg_file
    67                                                   output reg           o_hot_join_regf_rd_en         , //RegFile Read Enable-Flag
    68                                                   output reg   [9:0]   o_hot_join_regf_addr          , //RegFile Read/Write Address
    69                                               
    70                                                   //--outputs to bits_counter
    71                                                   output reg           o_hot_join_cnt_en             , //Bits Counter Enable-Flag
    72                                                   output reg           o_hot_join_pp_od              , //SDA Driving Selector [1 >> Push-Pull , 0 >> Open-Drain] (also output to "sda_handling" and "scl_generation")
    73                                               
    74                                                   //--outputs to i3c_engine
    75                                                   output reg           o_hot_join_daa_req            , //DAA Procedure Request (Suggestion: Trigger DAA directly for time optimization)
    76                                                   output reg           o_hot_join_ctrl_role_pass     , //CRR Procedure Request (Suggestion: Trigger CRH directly for time optimization)
    77                                                   output reg           o_hot_join_acc_rej            , //Hot-Join Request Accepted/Rejected flag [1 >> ACCEPTED , 0 >> REJECTED]
    78                                                   output reg           o_hot_join_done                 //Hot-Join Block Done-Flag 
    79                                               
    80                                                   );
    81                                               
    82                                               
    83                                               
    84                                               //-- States in Gray-Encoding ---------------------------------------------
    85                                               
    86                                               localparam HJ_IDLE            = 3'b000 ; 
    87                                               localparam CTRL_ACK_BIT       = 3'b001 ;
    88                                               localparam CTRL_NACK_BIT      = 3'b011 ;
    89                                               localparam REPEATED_START_BIT = 3'b010 ;
    90                                               localparam CCC_ADDRESS        = 3'b110 ;
    91                                               localparam TRGT_ACK_BIT       = 3'b111 ;
    92                                               localparam CCC_DATA           = 3'b101 ;
    93                                               localparam PARITY_BIT         = 3'b100 ;
    94                                               
    95                                               //-- CCCs Modes  ---------------------------------------------------------
    96                                               
    97                                               localparam ENHJ_MODE  = 1'b1 ;
    98                                               localparam DISHJ_MODE = 1'b0 ;
    99                                               
    100                                              //-- internal wires declaration ------------------------------------------
    101                                              
    102                                              reg [2:0] state                  ;
    103                                              reg       second_frame_done      ;
    104                                              reg       hot_join_cfg_ack_nack  ; //HJ Configuration register [1 >> ACK HJ   ] , [0 >> NACK HJ   ]
    105                                              reg       hot_join_cfg_en_dis    ; //HJ Configuration register [1 >> Enable HJ] , [0 >> Disable HJ]
    106                                              reg       hot_join_cfg_aval_busy ; //HJ Configuration register [1 >> Available] , [0 >> Busy      ] //for DAA or CR-Pass procedures
    107                                              
    108                                              
    109             1                    1228820     always @(posedge i_hot_join_clk or negedge i_hot_join_rst_n) 
    110                                                  begin: hot_join_controller_fsm
    111                                                      if (!i_hot_join_rst_n) 
    112                                                          begin
    113             1                          1                     o_hot_join_tx_en          <= 1'b0                         ;
    114             1                          1                     o_hot_join_tx_mode        <= 3'b0                         ;
    115             1                          1                     o_hot_join_rx_en          <= 1'b0                         ;
    116             1                          1                     o_hot_join_rx_mode        <= 2'b0                         ;
    117             1                          1                     o_hot_join_regf_rd_en     <= 1'b0                         ;
    118             1                          1                     o_hot_join_regf_addr      <= 10'd0                        ;
    119             1                          1                     o_hot_join_cnt_en         <= 1'b0                         ;
    120             1                          1                     o_hot_join_pp_od          <= 1'b0                         ;
    121             1                          1                     o_hot_join_daa_req        <= 1'b0                         ;
    122             1                          1                     o_hot_join_ctrl_role_pass <= 1'b0                         ;
    123             1                          1                     o_hot_join_acc_rej        <= 1'b0                         ;
    124             1                          1                     o_hot_join_done           <= 1'b0                         ;
    125             1                          1                     second_frame_done         <= 1'b0                         ;
    126                                                              //preventing glitching or configuration-changing during sending CCCs
    127             1                          1                     hot_join_cfg_ack_nack     <= i_hot_join_configuration[0] ;
    128             1                          1                     hot_join_cfg_en_dis       <= i_hot_join_configuration[1] ;
    129             1                          1                     hot_join_cfg_aval_busy    <= i_hot_join_configuration[2] ;
    130             1                          1                     state <= HJ_IDLE ;
    131                                                          end
    132                                                      else 
    133                                                          begin
    134                                                              case (state)
    135                                                              HJ_IDLE:
    136                                                                  begin
    137             1                    1228818                             o_hot_join_tx_en          <= 1'b0                         ;
    138             1                    1228818                             o_hot_join_tx_mode        <= 3'b0                         ;
    139             1                    1228818                             o_hot_join_rx_en          <= 1'b0                         ;
    140             1                    1228818                             o_hot_join_rx_mode        <= 2'b0                         ;
    141             1                    1228818                             o_hot_join_regf_rd_en     <= 1'b1                         ; //early reg_file setup as the 7'h7E is the first reg being read
    142             1                    1228818                             o_hot_join_regf_addr      <= 10'd46                       ; 
    143             1                    1228818                             o_hot_join_cnt_en         <= 1'b0                         ;
    144             1                    1228818                             o_hot_join_pp_od          <= 1'b0                         ;
    145             1                    1228818                             o_hot_join_daa_req        <= 1'b0                         ;
    146             1                    1228818                             o_hot_join_ctrl_role_pass <= 1'b0                         ;
    147             1                    1228818                             o_hot_join_acc_rej        <= 1'b0                         ;
    148             1                    1228818                             o_hot_join_done           <= 1'b0                         ;
    149             1                    1228818                             second_frame_done         <= 1'b0                         ;
    150                                                                      //preventing glitching or configuration-changing during sending CCCs
    151             1                    1228818                             hot_join_cfg_ack_nack     <= i_hot_join_configuration[0] ;
    152             1                    1228818                             hot_join_cfg_en_dis       <= i_hot_join_configuration[1] ;
    153             1                    1228818                             hot_join_cfg_aval_busy    <= i_hot_join_configuration[2] ;
    154                                              
    155                                                                      if (i_hot_join_enable)
    156                                                                          begin
    157                                                                              if (i_hot_join_ccc)
    158                                                                                  begin
    159             1                    ***0***                                             o_hot_join_regf_addr  <= 10'd46      ; //BROADCAST ADDRESS (7h'7E/W)
    160             1                    ***0***                                             o_hot_join_regf_rd_en <= 1'b1        ;
    161             1                    ***0***                                             o_hot_join_tx_en      <= 1'b1        ;
    162             1                    ***0***                                             o_hot_join_pp_od      <= 1'b0        ; //open-drain
    163             1                    ***0***                                             o_hot_join_tx_mode    <= 3'b001      ; //SERIALIZING Mode
    164             1                    ***0***                                             state                 <= CCC_ADDRESS ; //supposing that i3c_control_unit initiated START before hot_join_enable
    165                                                                                  end
    166                                                                              else if (!i_hot_join_support || !hot_join_cfg_ack_nack)
    167                                                                                  begin
    168             1                    ***0***                                             o_hot_join_acc_rej    <= 1'b0          ; //HJ IS REJECTED
    169             1                    ***0***                                             o_hot_join_regf_rd_en <= 1'b0          ;
    170             1                    ***0***                                             o_hot_join_tx_en      <= 1'b1          ;
    171             1                    ***0***                                             o_hot_join_pp_od      <= 1'b1          ; //push-pull
    172             1                    ***0***                                             o_hot_join_tx_mode    <= 3'b101        ; //CTRL_NACK Mode (High-Z)
    173             1                    ***0***                                             o_hot_join_cnt_en     <= 1'b0          ; //Disable Bits Counter
    174             1                    ***0***                                             state                 <= CTRL_NACK_BIT ;
    175                                                                                  end
    176                                                                              else
    177                                                                                  begin
    178             1                    ***0***                                             o_hot_join_acc_rej    <= 1'b1         ; //HJ IS ACCEPTED
    179             1                    ***0***                                             o_hot_join_regf_rd_en <= 1'b0         ;
    180             1                    ***0***                                             o_hot_join_pp_od      <= 1'b1         ; //push-pull
    181             1                    ***0***                                             o_hot_join_tx_en      <= 1'b1         ;
    182             1                    ***0***                                             o_hot_join_tx_mode    <= 3'b111       ; //CTRL_ACK Mode
    183             1                    ***0***                                             o_hot_join_cnt_en     <= 1'b0         ; //Disable Bits Counter
    184             1                    ***0***                                             state                 <= CTRL_ACK_BIT ;
    185                                                                                  end
    186                                                                          end
    187                                                                      else 
    188                                                                          begin
    189             1                    1228818                                     state <= HJ_IDLE ;
    190                                                                          end
    191                                                                  end
    192                                              
    193                                                              CTRL_ACK_BIT:
    194                                                                  begin
    195                                                                      if (i_hot_join_tx_mode_done)
    196                                                                          begin
    197                                                                              if (!hot_join_cfg_en_dis)  //controller may DISHJ after ACK
    198                                                                                  begin
    199             1                    ***0***                                             o_hot_join_tx_en   <= 1'b1               ;
    200             1                    ***0***                                             o_hot_join_pp_od   <= 1'b1               ; //push-pull
    201             1                    ***0***                                             o_hot_join_tx_mode <= 3'b110             ; //REPEATED_START Mode
    202             1                    ***0***                                             o_hot_join_cnt_en  <= 1'b0               ; //Disable Bits Counter
    203             1                    ***0***                                             o_hot_join_done    <= 1'b0               ;
    204             1                    ***0***                                             state              <= REPEATED_START_BIT ; //starting DISHJ CCC 
    205                                                                                  end
    206                                                                              else 
    207                                                                                  begin
    208             1                    ***0***                                             o_hot_join_tx_en <= 1'b0 ;
    209                                              
    210             1                    ***0***                                             o_hot_join_pp_od <= 1'b0 ;
    211             1                    ***0***                                             state <= HJ_IDLE ; 
    212             1                    ***0***                                             o_hot_join_done <= 1'b1 ; 
    213                                                                                      if (hot_join_cfg_aval_busy)
    214                                                                                          begin
    215             1                    ***0***                                                     o_hot_join_daa_req <= 1'b1 ;  //DAA will initiate Sr and cont. the flow
    216                                                                                          end
    217                                                                                  end
    218                                                                          end   
    219                                                                      else
    220                                                                          begin
    221             1                    ***0***                                     state <= CTRL_ACK_BIT ;
    222                                                                          end
    223                                                                  end  
    224                                              
    225                                                              CTRL_NACK_BIT:
    226                                                                  begin
    227                                                                      if (i_hot_join_tx_mode_done)
    228                                                                          begin
    229                                                                          //NACK and DISHJ path
    230                                                                              if (!hot_join_cfg_en_dis || !i_hot_join_support) 
    231                                                                                  begin
    232             1                    ***0***                                             o_hot_join_tx_en   <= 1'b1               ;
    233             1                    ***0***                                             o_hot_join_pp_od   <= 1'b1               ; //push-pull
    234             1                    ***0***                                             o_hot_join_tx_mode <= 3'b110             ; //REPEATED_START Mode
    235             1                    ***0***                                             o_hot_join_cnt_en  <= 1'b0               ; //Disable Bits Counter
    236             1                    ***0***                                             o_hot_join_done    <= 1'b0               ;
    237             1                    ***0***                                             state              <= REPEATED_START_BIT ; //starting DISHJ CCC
    238                                                                                  end
    239                                                                          //NACK only path
    240                                                                              else                        
    241                                                                                  begin
    242             1                    ***0***                                             state <= HJ_IDLE ;  
    243             1                    ***0***                                             o_hot_join_done <= 1'b1 ;
    244                                                                                  end 
    245                                                                          end   
    246                                                                      else
    247                                                                          begin
    248             1                    ***0***                                     state <= CTRL_NACK_BIT ;
    249                                                                          end
    250                                                                  end  
    251                                              
    252                                                              REPEATED_START_BIT:  //only for ENEC/DISEC paths
    253                                                                  begin
    254                                                                      if (i_hot_join_tx_mode_done)
    255                                                                          begin
    256             1                    ***0***                                     o_hot_join_tx_en      <= 1'b1        ;
    257             1                    ***0***                                     o_hot_join_pp_od      <= 1'b1        ; //push-pull
    258             1                    ***0***                                     o_hot_join_tx_mode    <= 3'b001      ; //SERIALIZING Mode
    259             1                    ***0***                                     o_hot_join_cnt_en     <= 1'b1        ; //Enable Bits Counter
    260             1                    ***0***                                     o_hot_join_regf_addr  <= 10'd46      ; //BROADCAST ADDRESS (7h'7E/W)
    261             1                    ***0***                                     o_hot_join_regf_rd_en <= 1'b1        ;
    262             1                    ***0***                                     state                 <= CCC_ADDRESS ;
    263                                                                          end   
    264                                                                      else
    265                                                                          begin
    266             1                    ***0***                                     o_hot_join_tx_en   <= 1'b1               ;
    267             1                    ***0***                                     o_hot_join_pp_od   <= 1'b1               ; //push-pull
    268             1                    ***0***                                     o_hot_join_tx_mode <= 3'b110             ; //REPEATED_START Mode
    269             1                    ***0***                                     o_hot_join_cnt_en  <= 1'b0               ; //Disable Bits Counter
    270             1                    ***0***                                     o_hot_join_done    <= 1'b0               ;
    271             1                    ***0***                                     state              <= REPEATED_START_BIT ;
    272                                                                          end
    273                                                                  end 
    274                                              
    275                                                              CCC_ADDRESS:  //sending BROADCAST ADDRESS
    276                                                                  begin
    277             1                    ***0***                             o_hot_join_cnt_en     <= 1'b1 ; //Enable Bits Counter
    278             1                    ***0***                             o_hot_join_regf_rd_en <= 1'b0 ;
    279                                                                      if (i_hot_join_tx_pp_mode_done)
    280                                                                          begin
    281             1                    ***0***                                     o_hot_join_pp_od   <= 1'b0         ; //open-drain
    282             1                    ***0***                                     o_hot_join_cnt_en  <= 1'b0         ; //Disable Bits Counter
    283             1                    ***0***                                     o_hot_join_tx_en   <= 1'b0         ;
    284             1                    ***0***                                     o_hot_join_tx_mode <= 3'b000       ;
    285             1                    ***0***                                     o_hot_join_rx_en   <= 1'b1         ;
    286             1                    ***0***                                     o_hot_join_rx_mode <= 3'b000       ; //ACK Mode
    287             1                    ***0***                                     state              <= TRGT_ACK_BIT ;
    288                                                                          end   
    289                                                                      else
    290                                                                          begin
    291             1                    ***0***                                     state <= CCC_ADDRESS ;
    292                                                                          end
    293                                                                  end 
    294                                              
    295                                                              TRGT_ACK_BIT:
    296                                                                  begin
    297             1                    ***0***                             o_hot_join_regf_rd_en <= 1'b1 ; //early reg_file setup for timing optimization
    298                                                                      case (hot_join_cfg_en_dis)
    299             1                    ***0***                             ENHJ_MODE : o_hot_join_regf_addr <= 10'd401 ; //ENEC CCC (0x00)
    300             1                    ***0***                             DISHJ_MODE: o_hot_join_regf_addr <= 10'd403 ; //DISEC CCC (0x01)
    301                                                                      endcase 
    302                                                                      if (i_hot_join_rx_mode_done && i_hot_join_scl_neg_edge)
    303                                                                          begin
    304                                                                              if (!i_hot_join_nack_ack)
    305                                                                                  begin
    306             1                    ***0***                                             state <= CCC_DATA ;
    307             1                    ***0***                                             o_hot_join_tx_en          <= 1'b1   ;
    308             1                    ***0***                                             o_hot_join_rx_en          <= 1'b0   ;
    309             1                    ***0***                                             o_hot_join_pp_od          <= 1'b1   ; //push-pull
    310             1                    ***0***                                             o_hot_join_tx_mode        <= 3'b001 ; //SERIALIZING Mode
    311             1                    ***0***                                             o_hot_join_cnt_en         <= 1'b1   ; //Enable Bits Counter
    312                                                                                  end
    313                                                                              else
    314                                                                                  begin
    315             1                    ***0***                                             state <= HJ_IDLE ; //STOP after NACK
    316             1                    ***0***                                             o_hot_join_done    <= 1'b1 ;
    317             1                    ***0***                                             o_hot_join_acc_rej <= 1'b0 ;
    318                                                                                  end
    319                                                                          end   
    320                                                                      else
    321                                                                          begin
    322             1                    ***0***                                     state <= TRGT_ACK_BIT ;
    323                                                                          end
    324                                                                  end 
    325                                              
    326                                                              CCC_DATA:
    327                                                                  begin
    328             1                    ***0***                             o_hot_join_regf_rd_en <= 1'b0 ;
    329                                                                      if (i_hot_join_tx_pp_mode_done)
    330                                                                          begin
    331             1                    ***0***                                     state <= PARITY_BIT ;
    332             1                    ***0***                                     o_hot_join_tx_en   <= 1'b1   ;
    333             1                    ***0***                                     o_hot_join_pp_od   <= 1'b1   ; //push-pull
    334             1                    ***0***                                     o_hot_join_tx_mode <= 3'b011 ; //PARITY Mode
    335             1                    ***0***                                     o_hot_join_cnt_en  <= 1'b0   ; //Disable Bits Counter
    336                                                                          end   
    337                                                                      else
    338                                                                          begin
    339             1                    ***0***                                     state <= CCC_DATA ;
    340                                                                          end
    341                                                                  end 
    342                                                                  
    343                                                              PARITY_BIT:
    344                                                                  begin
    345             1                    ***0***                             o_hot_join_regf_rd_en <= 1'b1 ; //early reg_file setup for second_frame optimization
    346                                                                      case (hot_join_cfg_en_dis) 
    347             1                    ***0***                             ENHJ_MODE : o_hot_join_regf_addr <= 10'd402 ; //ENEC BYTE
    348             1                    ***0***                             DISHJ_MODE: o_hot_join_regf_addr <= 10'd404 ; //DISEC BYTE
    349                                                                      endcase
    350                                                                      if (i_hot_join_tx_pp_mode_done)
    351                                                                          begin
    352                                                                              if (!second_frame_done)
    353                                                                                  begin
    354             1                    ***0***                                             state <= CCC_DATA ;
    355             1                    ***0***                                             o_hot_join_tx_en   <= 1'b1   ;
    356             1                    ***0***                                             o_hot_join_pp_od   <= 1'b1   ; //push-pull
    357             1                    ***0***                                             o_hot_join_tx_mode <= 3'b001 ; //SERIALIZING Mode
    358             1                    ***0***                                             o_hot_join_cnt_en  <= 1'b1   ; //Enable Bits Counter
    359             1                    ***0***                                             second_frame_done  <= 1'b1   ;
    360                                                                                  end
    361                                                                              else
    362                                                                                  begin
    363             1                    ***0***                                             state <= HJ_IDLE ;
    364             1                    ***0***                                             second_frame_done  <= 1'b0   ;
    365             1                    ***0***                                             o_hot_join_tx_mode <= 3'b010 ; //STOP Mode for a smooth mux select with i3c_engine
    366             1                    ***0***                                             o_hot_join_done    <= 1'b1   ;
    367                                                                                      if (!i_hot_join_support && hot_join_cfg_aval_busy)
    368                                                                                          begin
    369             1                    ***0***                                                     o_hot_join_ctrl_role_pass <= 1'b1 ;  //i3c_main_controller will enable CRH
    370                                                                                          end
    371                                                                                  end
    372                                                                          end   
    373                                                                      else
    374                                                                          begin
    375             1                    ***0***                                     state <= PARITY_BIT ;
    376                                                                          end                        
    377                                                                  end 
    378                                                              endcase    
    379                                              
    380                                                              if (!i_hot_join_enable)
    381                                                                  begin
    382             1                    1228818                             state <= HJ_IDLE ; //supporting immediate hj_disable for all states

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         92        21        71    22.82%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_hot_join --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                             hot_join_cfg_ack_nack           0           0        0.00 
                            hot_join_cfg_aval_busy           0           0        0.00 
                               hot_join_cfg_en_dis           0           0        0.00 
                                    i_hot_join_ccc           0           0        0.00 
                                    i_hot_join_clk           1           1      100.00 
                     i_hot_join_configuration[0-2]           0           0        0.00 
                                 i_hot_join_enable           0           0        0.00 
                               i_hot_join_nack_ack           1           1      100.00 
                                  i_hot_join_rst_n           1           1      100.00 
                           i_hot_join_rx_mode_done           1           1      100.00 
                           i_hot_join_scl_neg_edge           1           1      100.00 
                           i_hot_join_scl_pos_edge           1           1      100.00 
                                i_hot_join_support           0           0        0.00 
                           i_hot_join_tx_mode_done           1           1      100.00 
                        i_hot_join_tx_pp_mode_done           1           1      100.00 
                                o_hot_join_acc_rej           0           0        0.00 
                                 o_hot_join_cnt_en           0           0        0.00 
                         o_hot_join_ctrl_role_pass           0           0        0.00 
                                o_hot_join_daa_req           0           0        0.00 
                                   o_hot_join_done           0           0        0.00 
                                  o_hot_join_pp_od           0           0        0.00 
                         o_hot_join_regf_addr[9-6]           0           0        0.00 
                           o_hot_join_regf_addr[5]           0           1       50.00 
                           o_hot_join_regf_addr[4]           0           0        0.00 
                         o_hot_join_regf_addr[3-1]           0           1       50.00 
                           o_hot_join_regf_addr[0]           0           0        0.00 
                             o_hot_join_regf_rd_en           0           1       50.00 
                                  o_hot_join_rx_en           0           0        0.00 
                           o_hot_join_rx_mode[2-0]           0           0        0.00 
                                  o_hot_join_tx_en           0           0        0.00 
                           o_hot_join_tx_mode[2-0]           0           0        0.00 
                                 second_frame_done           0           0        0.00 
                                        state[2-0]           0           0        0.00 

Total Node Count     =         46 
Toggled Node Count   =          8 
Untoggled Node Count =         38 

Toggle Coverage      =      22.82% (21 of 92 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_ibi
=== Design Unit: work.IBI
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                       101         9        92     8.91%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_ibi

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File IBI.v
------------------------------------IF Branch------------------------------------
    122                                        4     Count coming in to IF
    122             1                          1         if (!i_ibi_rst_n) 
    124             1                          3         else    
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    135                                    68058     Count coming in to IF
    135             1                          1         if (!i_ibi_rst_n) 
    137             1                      68057         else    
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    156                                  1685449     Count coming in to IF
    156             1                          1         if (!i_ibi_rst_n) 
    174             1                    1685448         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    176                                  1685448     Count coming in to CASE
    177             1                    1685447         		IDLE: begin
    208             1                    ***0***         		ACK: begin  //Entered in LOW SCL with TX driving 0 OD
    232             1                    ***0***         	    MDB: begin
    251             1                    ***0***         	    MDB_T_BIT:begin     
    273             1                    ***0***         	    PAYLOAD: begin      
    290             1                    ***0***         		NACK: begin // Entered in LOW SCL with TX driving High imp. OD
    308             1                    ***0***         		REP_START: begin  
    342             1                    ***0***         		BDCST: begin // Entered in HIGH SCL with TX driving 0 PP TX enabled
    355             1                    ***0***         		DISABLE_INT_CCC_BDCST: begin       
    372             1                    ***0***                 PARITY: begin
    405             1                    ***0***                 TGT_ACK: begin       
    441             1                    ***0***               DISABLE_INT_CCC_DIRECT: begin       
    457             1                    ***0***         		TGT_ADDRESS : begin
    477             1                    ***0***         		DISABLE_INT_BYTE: begin 
    497             1                    ***0***         		END_IBI:         begin       // Entered from NACK in High SCL with TX driving High Imp 
    510             1                    ***0***         		 STOP :    begin      
                                               1     All False Count
Branch totals: 2 hits of 17 branches = 11.76%

------------------------------------IF Branch------------------------------------
    178                                  1685447     Count coming in to IF
    178             1                    ***0***                       if (i_ibi_en) // Received in SCL High    		
    202             1                    1685447                      else   
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    180                                  ***0***     Count coming in to IF
    180             1                    ***0***                             if (i_ibi_cfg_reg[0]) // CTRLR ACK/NACK
    192             1                    ***0***                             else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    184                                  ***0***     Count coming in to IF
    184             1                    ***0***                                         if (i_ibi_scl_neg_edge)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    194                                  ***0***     Count coming in to IF
    194             1                    ***0***                                     if (i_ibi_scl_neg_edge)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    209                                  ***0***     Count coming in to IF
    209             1                    ***0***                       if(i_ibi_scl)  	//wait for HIGH SCL level
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    211                                  ***0***     Count coming in to IF
    211             1                    ***0***                         if (i_ibi_bcr_reg[2])
    222             1                    ***0***                         else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    233                                  ***0***     Count coming in to IF
    233             1                    ***0***         	         if(i_ibi_rx_mode_done_ff1)          
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    237                                  ***0***     Count coming in to IF
    237             1                    ***0***         	          if(i_ibi_rx_mode_done_ff2)     
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    240                                  ***0***     Count coming in to IF
    240             1                    ***0***         	                    if (!i_ibi_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    253                                  ***0***     Count coming in to IF
    253             1                    ***0***         	                   if (!i_ibi_cfg_reg[1]) // Additional Payload: 1: Read .. 0:Terminate
    262             1                    ***0***         	                   else     
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    255                                  ***0***     Count coming in to IF
    255             1                    ***0***         	                           if (i_ibi_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    278                                  ***0***     Count coming in to IF
    278             1                    ***0***                             if (i_ibi_payload_done)	    
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    291                                  ***0***     Count coming in to IF
    291             1                    ***0***         		    if(i_ibi_scl) //wait for HIGH
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    293                                  ***0***     Count coming in to IF
    293             1                    ***0***         		        if (i_ibi_cfg_reg[3:2] == 2'b00) // Keep IBI enabled 
    297             1                    ***0***                         else     
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    310                                  ***0***     Count coming in to IF
    310             1                    ***0***                                  if (end_ibi_flag == 2'b01) 
    316             1                    ***0***                                  else if (end_ibi_flag == 2'b00) // Entered in HIGH SCL with TX driving High imp. OD 
    325             1                    ***0***                                  else if (end_ibi_flag == 2'b10)
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    328                                  ***0***     Count coming in to IF
    328             1                    ***0***                                       if (i_ibi_ser_mode_done)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    332                                  ***0***     Count coming in to IF
    332             1                    ***0***                                       if(ibi_ser_mode_done_pulse)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    343                                  ***0***     Count coming in to IF
    343             1                    ***0***                              if (i_ibi_tx_mode_done_ff2)   // Entered in the low SCL of last bit 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    356                                  ***0***     Count coming in to IF
    356             1                    ***0***         		                  if (!i_ibi_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    362                                  ***0***     Count coming in to IF
    362             1                    ***0***         		                  if (i_ibi_tx_mode_done_ff1)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    373                                  ***0***     Count coming in to IF
    373             1                    ***0***                            if(parity_to_SR_flag == 2'b11)
    383             1                    ***0***                     	   else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    375                                  ***0***     Count coming in to IF
    375             1                    ***0***         		                         if (ibi_ser_mode_done_pulse)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    385                                  ***0***     Count coming in to IF
    385             1                    ***0***                     	           if (ibi_ser_mode_done_pulse)                	   
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    387                                  ***0***     Count coming in to IF
    387             1                    ***0***         		                          if(parity_to_SR_flag == 2'b00)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    394                                  ***0***     Count coming in to IF
    394             1                    ***0***                                           if(parity_to_SR_flag == 2'b01)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    406                                  ***0***     Count coming in to IF
    406             1                    ***0***                        if(i_ibi_scl) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    408                                  ***0***     Count coming in to IF
    408             1                    ***0***                          if (i_ibi_ack_nack)
    434             1                    ***0***                          else    
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    413                                  ***0***     Count coming in to IF
    413             1                    ***0***                                 if (tgt_address_flag)
    420             1                    ***0***                                else     
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    422                                  ***0***     Count coming in to IF
    422             1                    ***0***                                     if (i_ibi_cfg_reg[3:2] == 2'b01) //disable Direct tgt 
    427             1                    ***0***                                     else if (i_ibi_cfg_reg[3:2] == 2'b11)// disable for all tgts           
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    442                                  ***0***     Count coming in to IF
    442             1                    ***0***                                  if (!i_ibi_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    448                                  ***0***     Count coming in to IF
    448             1                    ***0***         		                  if (i_ibi_tx_mode_done_ff1)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    459                                  ***0***     Count coming in to IF
    459             1                    ***0***         		                if (ibi_ser_mode_done_pulse) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    464                                  ***0***     Count coming in to IF
    464             1                    ***0***         		                if(!i_ibi_scl && i_ibi_tx_mode_done_ff3)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    480                                  ***0***     Count coming in to IF
    480             1                    ***0***         		                  if (!i_ibi_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    486                                  ***0***     Count coming in to IF
    486             1                    ***0***         		                  if (ibi_ser_mode_done_pulse)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    501                                  ***0***     Count coming in to IF
    501             1                    ***0***         		                  if (!i_ibi_scl) // wait for Low SCL and maintaing High imp.
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    512                                  ***0***     Count coming in to IF
    512             1                    ***0***         		             if (!i_ibi_scl)
    517             1                    ***0***                            else  if (i_ibi_ser_mode_done)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      11         0        11     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_ibi --

  File IBI.v
----------------Focused Condition View-------------------
Line       293 Item    1  (i_ibi_cfg_reg[3:2] == 0)
Condition totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_ibi_cfg_reg[3:2] == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:    ***0***  (i_ibi_cfg_reg[3:2] == 0)_0  -                             
  Row   2:    ***0***  (i_ibi_cfg_reg[3:2] == 0)_1  -                             

----------------Focused Condition View-------------------
Line       310 Item    1  (end_ibi_flag == 1)
Condition totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (end_ibi_flag == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (end_ibi_flag == 1)_0  -                             
  Row   2:    ***0***  (end_ibi_flag == 1)_1  -                             

----------------Focused Condition View-------------------
Line       316 Item    1  (end_ibi_flag == 0)
Condition totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (end_ibi_flag == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (end_ibi_flag == 0)_0  -                             
  Row   2:    ***0***  (end_ibi_flag == 0)_1  -                             

----------------Focused Condition View-------------------
Line       325 Item    1  (end_ibi_flag == 2)
Condition totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (end_ibi_flag == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (end_ibi_flag == 2)_0  -                             
  Row   2:    ***0***  (end_ibi_flag == 2)_1  -                             

----------------Focused Condition View-------------------
Line       373 Item    1  (parity_to_SR_flag == 3)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (parity_to_SR_flag == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (parity_to_SR_flag == 3)_0  -                             
  Row   2:    ***0***  (parity_to_SR_flag == 3)_1  -                             

----------------Focused Condition View-------------------
Line       387 Item    1  (parity_to_SR_flag == 0)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (parity_to_SR_flag == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (parity_to_SR_flag == 0)_0  -                             
  Row   2:    ***0***  (parity_to_SR_flag == 0)_1  -                             

----------------Focused Condition View-------------------
Line       394 Item    1  (parity_to_SR_flag == 1)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (parity_to_SR_flag == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (parity_to_SR_flag == 1)_0  -                             
  Row   2:    ***0***  (parity_to_SR_flag == 1)_1  -                             

----------------Focused Condition View-------------------
Line       422 Item    1  (i_ibi_cfg_reg[3:2] == 1)
Condition totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_ibi_cfg_reg[3:2] == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:    ***0***  (i_ibi_cfg_reg[3:2] == 1)_0  -                             
  Row   2:    ***0***  (i_ibi_cfg_reg[3:2] == 1)_1  -                             

----------------Focused Condition View-------------------
Line       427 Item    1  (i_ibi_cfg_reg[3:2] == 3)
Condition totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_ibi_cfg_reg[3:2] == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:    ***0***  (i_ibi_cfg_reg[3:2] == 3)_0  -                             
  Row   2:    ***0***  (i_ibi_cfg_reg[3:2] == 3)_1  -                             

----------------Focused Condition View-------------------
Line       464 Item    1  (~i_ibi_scl && i_ibi_tx_mode_done_ff3)
Condition totals: 0 of 2 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
               i_ibi_scl         N  No hits                  Hit '_0' and '_1'
  i_ibi_tx_mode_done_ff3         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  i_ibi_scl_0               i_ibi_tx_mode_done_ff3        
  Row   2:    ***0***  i_ibi_scl_1               -                             
  Row   3:    ***0***  i_ibi_tx_mode_done_ff3_0  ~i_ibi_scl                    
  Row   4:    ***0***  i_ibi_tx_mode_done_ff3_1  ~i_ibi_scl                    


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      4         2         2    50.00%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/u_ibi --

  File IBI.v
----------------Focused Expression View-----------------
Line       126 Item    1  (~regf_wr_en_prev & ibi_regf_wr_en)
Expression totals: 0 of 2 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  regf_wr_en_prev         N  No hits                  Hit '_0' and '_1'
   ibi_regf_wr_en         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  regf_wr_en_prev_0     ibi_regf_wr_en                
  Row   2:    ***0***  regf_wr_en_prev_1     ibi_regf_wr_en                
  Row   3:          1  ibi_regf_wr_en_0      ~regf_wr_en_prev              
  Row   4:    ***0***  ibi_regf_wr_en_1      ~regf_wr_en_prev              

----------------Focused Expression View-----------------
Line       139 Item    1  (~ibi_ser_mode_done_prev & i_ibi_ser_mode_done)
Expression totals: 2 of 2 input terms covered = 100.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  ibi_ser_mode_done_prev         Y
     i_ibi_ser_mode_done         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  ibi_ser_mode_done_prev_0  i_ibi_ser_mode_done           
  Row   2:          1  ibi_ser_mode_done_prev_1  i_ibi_ser_mode_done           
  Row   3:          1  i_ibi_ser_mode_done_0     ~ibi_ser_mode_done_prev       
  Row   4:          1  i_ibi_ser_mode_done_1     ~ibi_ser_mode_done_prev       


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                      16         1        15     6.25%
    FSM Transitions                 39         0        39     0.00%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/u_ibi --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 177                IDLE                   0
 290                NACK                   2
 208                 ACK                   1
 510                STOP                  15
 232                 MDB                   3
 251           MDB_T_BIT                  14
 273             PAYLOAD                   4
 308           REP_START                   5
 457         TGT_ADDRESS                  13
 342               BDCST                   6
 405             TGT_ACK                  17
 355DISABLE_INT_CCC_BDCST                   9
 372              PARITY                  16
 477    DISABLE_INT_BYTE                  11
 441DISABLE_INT_CCC_DIRECT                  10
 497             END_IBI                  12
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE                   1          
    Uncovered States :
    ------------------
                   State
                   -----
                    NACK
                     ACK
                    STOP
                     MDB
               MDB_T_BIT
                 PAYLOAD
               REP_START
             TGT_ADDRESS
                   BDCST
                 TGT_ACK
    DISABLE_INT_CCC_BDCST
                  PARITY
        DISABLE_INT_BYTE
    DISABLE_INT_CCC_DIRECT
                 END_IBI
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 196                   0          IDLE -> NACK        
 186                   1          IDLE -> ACK         
 299                   2          NACK -> REP_START   
 295                   3          NACK -> STOP        
 158                   4          NACK -> IDLE        
 224                   5          ACK -> STOP         
 214                   6          ACK -> MDB          
 158                   7          ACK -> IDLE         
 519                   8          STOP -> IDLE        
 244                   9          MDB -> MDB_T_BIT    
 158                  10          MDB -> IDLE         
 264                  11          MDB_T_BIT -> PAYLOAD
 258                  12          MDB_T_BIT -> STOP   
 158                  13          MDB_T_BIT -> IDLE   
 283                  14          PAYLOAD -> IDLE     
 334                  15          REP_START -> TGT_ADDRESS
 318                  16          REP_START -> BDCST  
 314                  17          REP_START -> IDLE   
 469                  18          TGT_ADDRESS -> TGT_ACK
 158                  19          TGT_ADDRESS -> IDLE 
 345                  20          BDCST -> TGT_ACK    
 158                  21          BDCST -> IDLE       
 436                  22          TGT_ACK -> STOP     
 429                  23          TGT_ACK -> DISABLE_INT_CCC_BDCST
 424                  24          TGT_ACK -> DISABLE_INT_CCC_DIRECT
 415                  25          TGT_ACK -> DISABLE_INT_BYTE
 158                  26          TGT_ACK -> IDLE     
 367                  27          DISABLE_INT_CCC_BDCST -> PARITY
 158                  28          DISABLE_INT_CCC_BDCST -> IDLE
 399                  29          PARITY -> STOP      
 392                  30          PARITY -> DISABLE_INT_BYTE
 380                  31          PARITY -> REP_START 
 158                  32          PARITY -> IDLE      
 491                  33          DISABLE_INT_BYTE -> PARITY
 158                  34          DISABLE_INT_BYTE -> IDLE
 452                  35          DISABLE_INT_CCC_DIRECT -> PARITY
 158                  36          DISABLE_INT_CCC_DIRECT -> IDLE
 505                  37          END_IBI -> REP_START
 158                  38          END_IBI -> IDLE     


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                  16         1        15     6.25%
        FSM Transitions             39         0        39     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     162        31       131    19.13%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_ibi --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File IBI.v
    23                                               module IBI(
    24                                                   input        i_ibi_clk,
    25                                                   input        i_ibi_rst_n,
    26                                                   input        i_ibi_en,
    27                                                   input        i_ibi_scl_neg_edge,
    28                                                   input        i_ibi_scl_pos_edge,
    29                                                   input  [7:0] i_ibi_bcr_reg,
    30                                                   input  [7:0] i_ibi_cfg_reg,
    31                                                   input  [7:0] i_ibi_payload_size_reg,
    32                                                   input  [7:0] i_ibi_tgt_address,
    33                                                   input        i_ibi_ser_mode_done,
    34                                                   input        i_ibi_scl,
    35                                                   input        i_ibi_rx_mode_done,
    36                                                   input        i_ibi_payload_done,
    37                                                   input        i_ibi_ack_nack,
    38                                                  
    39                                                   output reg       o_ibi_pp_od,    
    40                                                   output reg [11:0] o_ibi_regf_address,
    41                                                   output reg       o_ibi_regf_rd_en,
    42                                                   output reg       o_ibi_rx_en,
    43                                                   output reg       o_ibi_tx_en,
    44                                                   output reg       o_ibi_regf_wr_en,
    45                                                   output reg [2:0] o_ibi_rx_mode,
    46                                                   output reg [2:0] o_ibi_tx_mode,
    47                                                   output reg       o_ibi_payload_en,
    48                                                   output reg       o_ibi_cnt_en,
    49                                                   output reg       o_ibi_ser_rx_tx ,
    50                                                   output reg       o_ibi_done
    51                                                  );
    52                                                  
    53                                                  
    54                                               //-------------------------------- states encoding in Binare ----------------------------------------------
    55                                               
    56                                               localparam IDLE     	             = 5'b00000 ; 
    57                                               localparam ACK       	             = 5'b00001 ;
    58                                               localparam NACK       	             = 5'b00010 ;
    59                                               localparam MDB       	             = 5'b00011 ;
    60                                               localparam PAYLOAD    		         = 5'b00100 ;
    61                                               localparam REP_START                 = 5'b00101 ;
    62                                               localparam BDCST                     = 5'b00110 ;
    63                                               localparam DISABLE_ALL_INT           = 5'b00111 ;
    64                                               localparam DISABLE_TGT_INT           = 5'b01000 ;
    65                                               localparam DISABLE_INT_CCC_BDCST     = 5'b01001 ;
    66                                               localparam DISABLE_INT_CCC_DIRECT    = 5'b01010 ;
    67                                               localparam DISABLE_INT_BYTE          = 5'b01011 ;
    68                                               localparam END_IBI                   = 5'b01100 ;
    69                                               localparam TGT_ADDRESS               = 5'b01101 ;
    70                                               localparam MDB_T_BIT                 = 5'b01110 ;
    71                                               localparam STOP                      = 5'b01111 ;
    72                                               localparam PARITY                    = 5'b10000 ;
    73                                               localparam TGT_ACK                   = 5'b10001 ;
    74                                               
    75                                               
    76                                               
    77                                               //--------------------------------- parameters and defines ------------------------------------------
    78                                               /*To get BCR from Target Address :
    79                                                1) Target Address value - 7'h08 = Target index
    80                                                2) Base Address + 6 + 8*(Target index)
    81                                               h08 -> 206
    82                                               h09->  214
    83                                               h10->  222
    84                                               H11 -> 230
    85                                               */
    86                                               localparam FIRST_TGT_ADDRESS = 7'h08;
    87                                               localparam BASE_ADDRESS = 200; 
    88                                               localparam OFFSET = 6;
    89                                               localparam TGT_ADDR_OFFSET = 8;
    90                                               
    91                                               //--------------------------------- parameters and defines in RegFile ------------------------------------------
    92                                               localparam MDB_ADDRESS = 8'd107; //MDB location in RegFile
    93                                               localparam BDCST_WRITE_ADDRESS = 8'd46; //  write for broadcasring location in RegFile 8'h7E
    94                                               localparam EVENT_DISABLE_DIRECT_CCC_ADDRESS = 8'd103; // "Event" interrupt "DISEC" Direct location in RegFile 8'h81
    95                                               localparam EVENT_DISABLE_BDCST_CCC_ADDRESS =8'd104; //Disable "Event" interrupt "DISEC" Broadcast location in RegFile 8'h01
    96                                               localparam EVENT_DISABLE_BYTE_ADDRESS=10'd392; //Disable Target Events Command Byte location in RegFile 8'b00001011
    97                                               localparam ARBITRATION_REG_ADDRESS = 8'd48; 
    98                                               localparam PAYLOAD_SIZE_REG_ADDRESS ='d102;	
    99                                               localparam IBI_CFG_REG_ADDRESS ='d101;
    100                                              
    101                                              
    102                                              
    103                                              //--------------------------------- internal wires declaration ------------------------------------------
    104                                              reg [4:0] state ;
    105                                              reg [1:0] end_ibi_flag;
    106                                              reg [1:0] parity_to_SR_flag;
    107                                              reg tgt_address_flag;
    108                                              //--------------------------------- shift rx mode done 2 cycles ------------------------------------------
    109                                              
    110                                              reg i_ibi_rx_mode_done_ff1, i_ibi_rx_mode_done_ff2;
    111             1                    1417996     always @(posedge i_ibi_clk or negedge i_ibi_rst_n )
    112                                                  begin
    113             1                    1417996           i_ibi_rx_mode_done_ff1 <= i_ibi_rx_mode_done; 
    114             1                    1417996           i_ibi_rx_mode_done_ff2 <= i_ibi_rx_mode_done_ff1;
    115                                                  end
    116                                              //----------------------------------Pulse Generator for RegFile wr_en ------------------------------------//
    117                                              reg ibi_regf_wr_en;
    118                                              reg regf_wr_en_prev;
    119                                                
    120             1                          4     always@(posedge i_ibi_clk or negedge i_ibi_rst_n )
    121                                                  begin
    122                                                  if (!i_ibi_rst_n) 
    123             1                          1           regf_wr_en_prev  <= 1'b0;
    124                                                  else    
    125             1                          3           regf_wr_en_prev  <=   ibi_regf_wr_en ;  
    126             1                          4           o_ibi_regf_wr_en <= ~(regf_wr_en_prev) & ibi_regf_wr_en ;
    127                                                  end
    128                                              //----------------------------------Pulse Generator for tx mode done ------------------------------------//
    129                                              reg ibi_ser_mode_done_prev;
    130                                              reg ibi_ser_mode_done_pulse;
    131                                              
    132                                                
    133             1                      68058     always@(posedge i_ibi_clk or negedge i_ibi_rst_n )
    134                                                  begin
    135                                                  if (!i_ibi_rst_n) 
    136             1                          1           regf_wr_en_prev  <= 1'b0;
    137                                                  else    
    138             1                      68057           ibi_ser_mode_done_prev  <=   i_ibi_ser_mode_done ;  
    139             1                      68058           ibi_ser_mode_done_pulse <= ~(ibi_ser_mode_done_prev) & i_ibi_ser_mode_done ;
    140                                                  end
    141                                              //--------------------------------- shift ser mode done 3 cycles ------------------------------------------
    142                                              
    143                                              reg i_ibi_tx_mode_done_ff1, i_ibi_tx_mode_done_ff2, i_ibi_tx_mode_done_ff3;
    144             1                      97225     always @(posedge i_ibi_clk or negedge i_ibi_rst_n )
    145                                                  begin
    146             1                      97225           i_ibi_tx_mode_done_ff1 <= i_ibi_ser_mode_done; 
    147             1                      97225           i_ibi_tx_mode_done_ff2 <= i_ibi_tx_mode_done_ff1;
    148             1                      97225           i_ibi_tx_mode_done_ff3 <= i_ibi_tx_mode_done_ff2;
    149                                                  end
    150                                              
    151                                              //--------------------------------- controller main fsm ---------------------------------------------------
    152                                              
    153             1                    1685449     always @(posedge i_ibi_clk or negedge i_ibi_rst_n) 
    154                                                begin: IBI
    155                                                  
    156                                                  if (!i_ibi_rst_n) 
    157                                                  	begin
    158             1                          1         	state <= IDLE;
    159             1                          1         	o_ibi_pp_od <= 1'b0;
    160             1                          1         	o_ibi_regf_address <= 12'b0;
    161             1                          1             o_ibi_regf_rd_en   <= 1'b0;
    162             1                          1             ibi_regf_wr_en     <= 1'b0;
    163             1                          1             o_ibi_rx_mode      <= 3'b0;
    164             1                          1             o_ibi_tx_mode      <= 3'b0;
    165             1                          1             o_ibi_done         <= 1'b0;
    166             1                          1             o_ibi_tx_en        <= 1'b0;
    167             1                          1             o_ibi_rx_en        <= 1'b0;
    168             1                          1             o_ibi_payload_en   <= 1'b0;
    169             1                          1             o_ibi_ser_rx_tx    <=1'b0;
    170             1                          1             end_ibi_flag       <= 2'b00;
    171             1                          1             o_ibi_cnt_en       <= 1'b0;
    172                                                  	end
    173                                              
    174                                                  else
    175                                                  	begin
    176                                                  		case(state)
    177                                                  		IDLE: begin
    178                                                                if (i_ibi_en) // Received in SCL High    		
    179                                                                   begin
    180                                                                      if (i_ibi_cfg_reg[0]) // CTRLR ACK/NACK
    181                                                                          begin
    182             1                    ***0***                                     o_ibi_regf_rd_en <=1'b1; 
    183             1                    ***0***                                     o_ibi_regf_address <= ((i_ibi_tgt_address[7:1] - FIRST_TGT_ADDRESS) << 3) + OFFSET + BASE_ADDRESS ; // to get the target BCR register Address
    184                                                                                  if (i_ibi_scl_neg_edge)
    185                                                                                      begin
    186             1                    ***0***                                             state <= ACK;
    187             1                    ***0***                                             o_ibi_tx_en <= 1'b1;
    188             1                    ***0***                                             o_ibi_tx_mode <= 3'b100;//CTRL ACK OPen-Drain 0
    189             1                    ***0***                                             o_ibi_pp_od <= 1'b0;
    190                                                                                      end
    191                                                                          end
    192                                                                      else 
    193                                                                          begin
    194                                                                              if (i_ibi_scl_neg_edge)
    195                                                                                 begin
    196             1                    ***0***                                        state <= NACK;
    197             1                    ***0***                                        o_ibi_tx_en <= 1'b0; 
    198             1                    ***0***                                        o_ibi_pp_od <= 1'b0;
    199                                                                                 end
    200                                                                          end
    201                                                                   end
    202                                                               else   
    203                                                                    begin  
    204             1                    1685447                              o_ibi_tx_en        <= 1'b0;
    205                                                                    end
    206                                                  		      end
    207                                                  		      
    208                                                  		ACK: begin  //Entered in LOW SCL with TX driving 0 OD
    209                                                                if(i_ibi_scl)  	//wait for HIGH SCL level
    210                                                                  begin 		 
    211                                                                  if (i_ibi_bcr_reg[2])
    212                                                                   //0 : No data after IBI.. 1: MDB then Payload the payload continuity determined by T-bit  
    213                                                                      begin
    214             1                    ***0***                                state <= MDB ; 
    215             1                    ***0***                                o_ibi_regf_rd_en <=1'b0;
    216             1                    ***0***                                o_ibi_cnt_en <= 1'b1;
    217             1                    ***0***                                o_ibi_rx_en <= 1'b1;
    218             1                    ***0***                                o_ibi_tx_en <= 1'b0;
    219             1                    ***0***                                o_ibi_pp_od <= 1'b1;
    220             1                    ***0***                                o_ibi_rx_mode <= 3'b001; //Deserializing
    221                                                                      end
    222                                                                  else 
    223                                                                      begin  		                      
    224             1                    ***0***         		              state <= STOP;
    225                                                                      end
    226                                                                  end   
    227                                                  	         end
    228                                                  	         
    229                                                  	         
    230                                                  	         
    231                                                  	         
    232                                                  	    MDB: begin
    233                                                  	         if(i_ibi_rx_mode_done_ff1)          
    234                                                  	           begin
    235             1                    ***0***         	            ibi_regf_wr_en <= 1'b1;
    236                                                  	           end
    237                                                  	          if(i_ibi_rx_mode_done_ff2)     
    238                                                  	            begin   
    239             1                    ***0***         	               o_ibi_regf_address <= MDB_ADDRESS; //MDB location in RegFile
    240                                                  	                    if (!i_ibi_scl)
    241                                                  		                  begin
    242             1                    ***0***         	                       o_ibi_rx_en <= 1'b0;
    243             1                    ***0***         	                       o_ibi_cnt_en <= 1'b0;
    244             1                    ***0***         	                       state <= MDB_T_BIT;
    245             1                    ***0***         	                       o_ibi_tx_mode <= 3'b100; // driving SDA LOW to create SR 
    246                                                  	                      end
    247                                                  	            end       	              
    248                                                  	         end     
    249                                                  	         
    250                                                  	         
    251                                                  	    MDB_T_BIT:begin     
    252             1                    ***0***         	                    ibi_regf_wr_en <= 1'b0;
    253                                                  	                   if (!i_ibi_cfg_reg[1]) // Additional Payload: 1: Read .. 0:Terminate
    254                                                  	                       begin  
    255                                                  	                           if (i_ibi_scl)
    256                                                  		                         begin
    257             1                    ***0***         		                          o_ibi_tx_mode <= 3'b100; // driving SDA LOW to create SR
    258             1                    ***0***         		                          state <= STOP;
    259             1                    ***0***         		                          o_ibi_tx_en <= 1'b1;
    260                                                  		                         end
    261                                                  		                   end      
    262                                                  	                   else     
    263                                                  	                        begin
    264             1                    ***0***         	                            state <= PAYLOAD;
    265             1                    ***0***         	                            o_ibi_payload_en <= 1'b1;  
    266             1                    ***0***                                         o_ibi_ser_rx_tx <=1'b1;
    267                                                  	                        end
    268                                                  	              end         
    269                                                  	         
    270                                                  	         
    271                                                  	         
    272                                                  	         
    273                                                  	    PAYLOAD: begin      
    274                                                  	               // same process as Data-In Sdr mode 
    275                                                  	               // 8-bit frame then a T-bit with specific number of frames to be received 
    276                                                  	               // SDR take payload enable signal 
    277                                                  	               // frame counter take payload max no frames RegFile[102]   
    278                                                                      if (i_ibi_payload_done)	    
    279                                                                          begin
    280             1                    ***0***                                 o_ibi_payload_en <= 1'b0;
    281             1                    ***0***                                  o_ibi_done  <= 1'b1;
    282             1                    ***0***                                  o_ibi_ser_rx_tx <= 1'b0;
    283             1                    ***0***         		                state <= IDLE;
    284                                                                          end       
    285                                                  	             end  
    286                                                  		     
    287                                               // SDA should be maintained high during both low&high of SCL during ack bit    		     
    288                                               // then high for the next low of SCL and then go down in High SCL making Rep. Start
    289                                               
    290                                                  		NACK: begin // Entered in LOW SCL with TX driving High imp. OD
    291                                                  		    if(i_ibi_scl) //wait for HIGH
    292                                                  		      begin
    293                                                  		        if (i_ibi_cfg_reg[3:2] == 2'b00) // Keep IBI enabled 
    294                                                                    begin                      
    295             1                    ***0***                            state <= STOP;
    296                                                                    end    
    297                                                                  else     
    298                                                                    begin   
    299             1                    ***0***                             state <= REP_START;
    300             1                    ***0***                             end_ibi_flag <= 2'b00;
    301             1                    ***0***                             o_ibi_tx_mode <= 3'b100; // driving SDA LOW PP
    302             1                    ***0***                             o_ibi_tx_en <= 1'b1;
    303                                                                   end
    304                                                                end   
    305                                                  		     end
    306                                                  		      
    307                                                  		      
    308                                                  		REP_START: begin  
    309             1                    ***0***                                  o_ibi_pp_od <= 1'b1;
    310                                                                           if (end_ibi_flag == 2'b01) 
    311                                                                              begin
    312             1                    ***0***                                         o_ibi_tx_mode <= 3'b100; // driving SDA LOW PP
    313             1                    ***0***                                         o_ibi_done <= 1'b1;
    314             1                    ***0***                                         state <= IDLE;
    315                                                                              end
    316                                                                           else if (end_ibi_flag == 2'b00) // Entered in HIGH SCL with TX driving High imp. OD 
    317                                                                              begin
    318             1                    ***0***                                         state <= BDCST; 
    319             1                    ***0***                                         o_ibi_tx_mode <= 3'b001; // Serializing
    320             1                    ***0***                                         o_ibi_regf_rd_en   <= 1'b1 ; 
    321             1                    ***0***                                         o_ibi_regf_address <= BDCST_WRITE_ADDRESS; // 8'h7E/write for broadcasring
    322             1                    ***0***                                         o_ibi_cnt_en <= 1'b1;
    323                                                                              end    
    324                                                                              
    325                                                                           else if (end_ibi_flag == 2'b10)
    326                                                                              begin
    327             1                    ***0***                                       o_ibi_tx_mode <= 3'b000; // Rep_Start
    328                                                                                if (i_ibi_ser_mode_done)
    329                                                                                   begin   
    330             1                    ***0***                                             o_ibi_regf_address <= ARBITRATION_REG_ADDRESS;//((i_ibi_tgt_address[7:1] - FIRST_TGT_ADDRESS) * 4'd9) + TGT_ADDR_OFFSET + BASE_ADDRESS;
    331                                                                                   end   
    332                                                                                if(ibi_ser_mode_done_pulse)
    333                                                                                   begin 
    334             1                    ***0***                                             state <= TGT_ADDRESS; 
    335             1                    ***0***                                             o_ibi_tx_en <= 1'b1;
    336             1                    ***0***                                             o_ibi_tx_mode  <= 3'b001;
    337             1                    ***0***                                             o_ibi_cnt_en <= 1'b1; 
    338                                                                                   end   
    339                                                                              end        
    340                                                  		           end
    341                                                  		           
    342                                                  		BDCST: begin // Entered in HIGH SCL with TX driving 0 PP TX enabled
    343                                                                       if (i_ibi_tx_mode_done_ff2)   // Entered in the low SCL of last bit 
    344                                                                          begin      
    345             1                    ***0***                                    state <= TGT_ACK;
    346             1                    ***0***                                    o_ibi_pp_od <= 1'b0;
    347             1                    ***0***                                    o_ibi_tx_en <= 1'b0;
    348             1                    ***0***                                    o_ibi_rx_en <= 1'b1;
    349             1                    ***0***                                    o_ibi_rx_mode <= 3'b0; //ACK mode
    350             1                    ***0***                                    o_ibi_regf_rd_en <= 1'b1; 
    351             1                    ***0***                                    o_ibi_cnt_en <= 1'b0;
    352                                                                          end       
    353                                                  		       end
    354                                                  		       
    355                                                  		DISABLE_INT_CCC_BDCST: begin       
    356                                                  		                  if (!i_ibi_scl)
    357                                                  		                      begin
    358             1                    ***0***         		                          o_ibi_tx_en  <= 1'b1;
    359             1                    ***0***         		                          o_ibi_pp_od  <= 1'b1;
    360             1                    ***0***         		                          o_ibi_tx_mode <= 3'b001; //Serializing mode
    361                                                  		                      end
    362                                                  		                  if (i_ibi_tx_mode_done_ff1)
    363                                                  		                      begin
    364             1                    ***0***         		                          o_ibi_cnt_en <= 1'b0; 
    365             1                    ***0***         		                          o_ibi_tx_mode <= 3'b011; //Parity mode
    366             1                    ***0***                                           o_ibi_regf_address <= EVENT_DISABLE_BYTE_ADDRESS; //Disable Target Events Command Byte
    367             1                    ***0***                                           state <= PARITY;
    368             1                    ***0***                                           parity_to_SR_flag <= 2'b00;
    369                                                                                end    
    370                                                                           end     
    371                                                                           
    372                                                          PARITY: begin
    373                                                                     if(parity_to_SR_flag == 2'b11)
    374                                                  		                       begin
    375                                                  		                         if (ibi_ser_mode_done_pulse)
    376                                                  		                              begin
    377             1                    ***0***         		                                  o_ibi_regf_rd_en <= 1'b1;
    378             1                    ***0***         		                                  o_ibi_cnt_en <= 1'b0; 
    379             1                    ***0***         		                                  end_ibi_flag <= 2'b10;
    380             1                    ***0***                                                   state <= REP_START;
    381                                                                                        end    
    382                                                                                 end       
    383                                                              	   else 
    384                                                              	       begin
    385                                                              	           if (ibi_ser_mode_done_pulse)                	   
    386                                                  		                      begin
    387                                                  		                          if(parity_to_SR_flag == 2'b00)
    388                                                  		                              begin
    389             1                    ***0***         		                                  o_ibi_regf_rd_en <= 1'b1;
    390             1                    ***0***         		                                  o_ibi_cnt_en <= 1'b1; 
    391             1                    ***0***         		                                  o_ibi_tx_mode <= 3'b001; //Serializing mode
    392             1                    ***0***                                                   state <= DISABLE_INT_BYTE;
    393                                                                                        end    
    394                                                                                    if(parity_to_SR_flag == 2'b01)
    395                                                  		                              begin
    396             1                    ***0***         		                                  o_ibi_regf_rd_en <= 1'b1;
    397             1                    ***0***         		                                  o_ibi_cnt_en <= 1'b0; 
    398             1                    ***0***         		                                  o_ibi_tx_mode <= 3'b010; //STOP mode
    399             1                    ***0***                                                   state <= STOP;
    400                                                                                        end                              
    401                                                                                end         
    402                                                                          end    
    403                                                                  end              
    404                                                                  
    405                                                          TGT_ACK: begin       
    406                                                                 if(i_ibi_scl) 
    407                                                                  begin
    408                                                                   if (i_ibi_ack_nack)
    409                                                                      begin
    410             1                    ***0***                                 o_ibi_cnt_en <= 1'b1;
    411             1                    ***0***                                 o_ibi_rx_en  <= 1'b0;
    412             1                    ***0***                                 o_ibi_tx_mode <= 3'b100; // Driving 0 once it enabled to create Ack handoff
    413                                                                          if (tgt_address_flag)
    414                                                                              begin
    415             1                    ***0***                                         state <= DISABLE_INT_BYTE;
    416             1                    ***0***                                         o_ibi_regf_rd_en <= 1'b1;
    417             1                    ***0***         		                        o_ibi_cnt_en <= 1'b1; 
    418             1                    ***0***                                         o_ibi_regf_address <= EVENT_DISABLE_BYTE_ADDRESS; // "Event" interrupt "DISEC" Direct
    419                                                                              end
    420                                                                         else     
    421                                                                           begin
    422                                                                              if (i_ibi_cfg_reg[3:2] == 2'b01) //disable Direct tgt 
    423                                                                                 begin
    424             1                    ***0***                                           state <= DISABLE_INT_CCC_DIRECT;
    425             1                    ***0***                                           o_ibi_regf_address <= EVENT_DISABLE_DIRECT_CCC_ADDRESS; // "Event" interrupt "DISEC" Direct
    426                                                                                 end   
    427                                                                              else if (i_ibi_cfg_reg[3:2] == 2'b11)// disable for all tgts           
    428                                                                                  begin
    429             1                    ***0***                                           state <= DISABLE_INT_CCC_BDCST;
    430             1                    ***0***                                           o_ibi_regf_address <= EVENT_DISABLE_BDCST_CCC_ADDRESS; //Disable "Event" interrupt "DISEC" Broadcast
    431                                                                                  end    		                
    432                                                                           end        
    433                                                                      end
    434                                                                   else    
    435                                                                      begin
    436             1                    ***0***                               state <= STOP;
    437                                                                      end
    438                                                                  end
    439                                                                end      
    440                                                                  
    441                                                        DISABLE_INT_CCC_DIRECT: begin       
    442                                                                           if (!i_ibi_scl)
    443                                                  		                      begin
    444             1                    ***0***         		                          o_ibi_tx_en  <= 1'b1;
    445             1                    ***0***         		                          o_ibi_pp_od  <= 1'b1;
    446             1                    ***0***         		                          o_ibi_tx_mode <= 3'b001; //Serializing mode
    447                                                  		                      end  
    448                                                  		                  if (i_ibi_tx_mode_done_ff1)
    449                                                  		                      begin
    450             1                    ***0***         		                            o_ibi_tx_mode <= 3'b011; //Parity mode
    451             1                    ***0***         		                            o_ibi_cnt_en <= 1'b0;  
    452             1                    ***0***                                             state <= PARITY;
    453             1                    ***0***                                             parity_to_SR_flag <= 2'b11;
    454                                                                                end    
    455                                                                           end    
    456                                                  		                  
    457                                                  		TGT_ADDRESS : begin
    458             1                    ***0***         		                o_ibi_tx_mode <= 3'b001;  
    459                                                  		                if (ibi_ser_mode_done_pulse) 
    460                                                  		                  begin
    461             1                    ***0***         		                    o_ibi_pp_od <= 1'b0;
    462             1                    ***0***         		                    o_ibi_tx_en <= 1'b0;
    463                                                  		                  end
    464                                                  		                if(!i_ibi_scl && i_ibi_tx_mode_done_ff3)
    465                                                  		                      begin
    466             1                    ***0***         		                          o_ibi_regf_rd_en   <= 1'b1  ; 
    467             1                    ***0***         		                          o_ibi_cnt_en <= 1'b0;
    468             1                    ***0***                                           o_ibi_regf_address <= EVENT_DISABLE_BYTE_ADDRESS; //Disable Target Events Command Byte
    469             1                    ***0***                                           state <= TGT_ACK;
    470             1                    ***0***                                           tgt_address_flag <=1'b1;
    471             1                    ***0***                                           o_ibi_rx_en <= 1'b1;
    472             1                    ***0***                                           o_ibi_rx_mode <= 3'b0; //ACK mode
    473                                                                                end       
    474                                                                        end        
    475                                                  		              
    476                                                  		              
    477                                                  		DISABLE_INT_BYTE: begin 
    478             1                    ***0***         		                   o_ibi_regf_rd_en <= 1'b1;
    479             1                    ***0***         		                   o_ibi_tx_en <= 1'b1;
    480                                                  		                  if (!i_ibi_scl)
    481                                                  		                      begin
    482             1                    ***0***         		                          o_ibi_tx_en  <= 1'b1;
    483             1                    ***0***         		                          o_ibi_pp_od  <= 1'b1;
    484             1                    ***0***         		                          o_ibi_tx_mode <= 3'b001; //Serializing mode
    485                                                  		                      end
    486                                                  		                  if (ibi_ser_mode_done_pulse)
    487                                                  		                      begin
    488             1                    ***0***         		                          o_ibi_cnt_en <= 1'b0; 
    489             1                    ***0***         		                          o_ibi_tx_mode <= 3'b011; //Parity mode
    490             1                    ***0***                                           o_ibi_regf_address <= EVENT_DISABLE_BYTE_ADDRESS; //Disable Target Events Command Byte
    491             1                    ***0***                                           state <= PARITY;
    492             1                    ***0***                                           parity_to_SR_flag <= 2'b01;
    493                                                                                end                   
    494                                                  		                  end
    495                                                  		                 
    496                                                  		                 
    497                                                  		END_IBI:         begin       // Entered from NACK in High SCL with TX driving High Imp 
    498             1                    ***0***                                   o_ibi_pp_od <= 1'b1; // Rep. Start is PP      		
    499                                                                           // o_ibi_tx_mode <= 3'b101; // Driving 1... in case of ACK this creating a STOP
    500             1                    ***0***                                   ibi_regf_wr_en <= 1'b0;
    501                                                  		                  if (!i_ibi_scl) // wait for Low SCL and maintaing High imp.
    502                                                  		                      begin
    503             1                    ***0***         		                          end_ibi_flag <= 2'b01;
    504             1                    ***0***         		                          o_ibi_tx_mode <= 3'b100; // Driving 0
    505             1                    ***0***         		                          state <= REP_START;
    506                                                  		                      end    
    507                                                  		                 end     
    508                                                  		                 
    509                                                  		                     
    510                                                  		 STOP :    begin      
    511             1                    ***0***         		             ibi_regf_wr_en <= 1'b0; 
    512                                                  		             if (!i_ibi_scl)
    513                                                  		                  begin
    514             1                    ***0***         		                      o_ibi_tx_en <= 1'b1;
    515             1                    ***0***         		                      o_ibi_tx_mode <= 3'b010; //STOP
    516                                                  		                  end
    517                                                                     else  if (i_ibi_ser_mode_done)
    518                                                                          begin 
    519             1                    ***0***                                      state       <= IDLE ;
    520             1                    ***0***                                      o_ibi_done  <= 1'b1;
    521             1                    ***0***                                      o_ibi_tx_en <= 1'b0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        176        53       123    30.11%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_ibi --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                 end_ibi_flag[1-0]           0           0        0.00 
                                    i_ibi_ack_nack           1           1      100.00 
                                i_ibi_bcr_reg[0-7]           1           1      100.00 
                                  i_ibi_cfg_reg[0]           0           1       50.00 
                                i_ibi_cfg_reg[1-7]           0           0        0.00 
                                         i_ibi_clk           1           1      100.00 
                                          i_ibi_en           0           0        0.00 
                                i_ibi_payload_done           0           0        0.00 
                       i_ibi_payload_size_reg[0-1]           0           1       50.00 
                       i_ibi_payload_size_reg[2-7]           0           0        0.00 
                                       i_ibi_rst_n           1           1      100.00 
                                i_ibi_rx_mode_done           1           1      100.00 
                            i_ibi_rx_mode_done_ff1           1           1      100.00 
                            i_ibi_rx_mode_done_ff2           1           1      100.00 
                                         i_ibi_scl           1           1      100.00 
                                i_ibi_scl_neg_edge           1           1      100.00 
                                i_ibi_scl_pos_edge           1           1      100.00 
                               i_ibi_ser_mode_done           1           1      100.00 
                            i_ibi_tgt_address[0-1]           0           1       50.00 
                            i_ibi_tgt_address[2-3]           0           0        0.00 
                              i_ibi_tgt_address[4]           0           1       50.00 
                              i_ibi_tgt_address[5]           0           0        0.00 
                              i_ibi_tgt_address[6]           0           1       50.00 
                              i_ibi_tgt_address[7]           0           0        0.00 
                            i_ibi_tx_mode_done_ff1           1           1      100.00 
                            i_ibi_tx_mode_done_ff2           1           1      100.00 
                            i_ibi_tx_mode_done_ff3           1           1      100.00 
                                    ibi_regf_wr_en           0           0        0.00 
                            ibi_ser_mode_done_prev           1           1      100.00 
                           ibi_ser_mode_done_pulse           1           1      100.00 
                                      o_ibi_cnt_en           0           0        0.00 
                                        o_ibi_done           0           0        0.00 
                                  o_ibi_payload_en           0           0        0.00 
                                       o_ibi_pp_od           0           0        0.00 
                          o_ibi_regf_address[11-0]           0           0        0.00 
                                  o_ibi_regf_rd_en           0           0        0.00 
                                  o_ibi_regf_wr_en           0           0        0.00 
                                       o_ibi_rx_en           0           0        0.00 
                                o_ibi_rx_mode[2-0]           0           0        0.00 
                                   o_ibi_ser_rx_tx           0           0        0.00 
                                       o_ibi_tx_en           0           0        0.00 
                                o_ibi_tx_mode[2-0]           0           0        0.00 
                            parity_to_SR_flag[1-0]           0           0        0.00 
                                   regf_wr_en_prev           0           0        0.00 
                                        state[4-0]           0           0        0.00 
                                  tgt_address_flag           0           0        0.00 

Total Node Count     =         88 
Toggled Node Count   =         23 
Untoggled Node Count =         65 

Toggle Coverage      =      30.11% (53 of 176 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_controller_crh
=== Design Unit: work.controller_crh
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                       207         5       202     2.41%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_controller_crh

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_crh.v
------------------------------------IF Branch------------------------------------
    165                                  1729257     Count coming in to IF
    165             1                          1       if(!i_crh_rst_n)
    190             1                    1729256       else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    192                                  1729256     Count coming in to CASE
    193             1                    1729255             IDLE : begin
    239             1                    ***0***             ACK_TO_SEC_CR : begin //ack to the sec cr
    259             1                    ***0***             NACK_TO_SEC_CR : begin //nack to the sec cr
    276             1                    ***0***             REP_START : begin
    339             1                    ***0***               BROADCAST_ADDR : begin 
    365             1                    ***0***               ACK : begin 
    598             1                    ***0***               CCC_CODE: begin 
    616             1                    ***0***               ADDRESS : begin
    636             1                    ***0***               PAR_BIT : begin
    1084            1                    ***0***               DEF_BYTE : begin 
    1104            1                    ***0***               DATA_RETURNED_1 : begin
    1147            1                    ***0***                DATA_RETURNED_2 : begin 
    1188            1                    ***0***                  DATA_SENT_1 : begin
    1207            1                    ***0***                  HANDOFF : begin 
    1248            1                    ***0***                 TESTING : begin 
    1276            1                    ***0***                 MONITOR : begin
                                               1     All False Count
Branch totals: 2 hits of 17 branches = 11.76%

------------------------------------IF Branch------------------------------------
    201                                  1729255     Count coming in to IF
    201             1                    ***0***               if(i_crh_en && !dont_repeat)
    231             1                    1729255               else
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    203                                  ***0***     Count coming in to IF
    203             1                    ***0***                   if(i_crh_initiated_request) //initiated by active controller
    213             1                    ***0***                   else   //controller role request condition
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    215                                  ***0***     Count coming in to IF
    215             1                    ***0***                       if(i_crh_cfg_reg[0]) // controller ack 
    222             1                    ***0***                       else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    241                                  ***0***     Count coming in to IF
    241             1                    ***0***             if(i_crh_tx_mode_done )
    250             1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    261                                  ***0***     Count coming in to IF
    261             1                    ***0***             if(i_crh_tx_mode_done )
    268             1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    278                                  ***0***     Count coming in to IF
    278             1                    ***0***               if(i_crh_tx_mode_done  )
    329             1                    ***0***               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    280                                  ***0***     Count coming in to CASE
    281             1                    ***0***                       GETSTATUS , GETCAPS , GETMXDS , GETSTATUS_DEF , GETACCCR : begin
    281             2                    ***0***     
    281             3                    ***0***     
    281             4                    ***0***     
    281             5                    ***0***     
    313             1                    ***0***                         DISEC , ENTASx , DEFTGTS: begin
    313             2                    ***0***     
    313             3                    ***0***     
                                         ***0***     All False Count
Branch totals: 0 hits of 9 branches = 0.00%

------------------------------------IF Branch------------------------------------
    282                                  ***0***     Count coming in to IF
    282             1                    ***0***                         if(REP_START_COUNT == 1'b0) 
    295             1                    ***0***                         else if(REP_START_COUNT == 1'b1) 
    307             1                    ***0***                         else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    342                                  ***0***     Count coming in to IF
    342             1                    ***0***                 if(i_crh_tx_pp_mode_done)
    357             1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    351                                  ***0***     Count coming in to CASE
    352             1                    ***0***                      DISEC : begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    371                                  ***0***     Count coming in to IF
    371             1                    ***0***                 if(i_crh_rx_mode_done && i_crh_scl_neg_edge)
    590             1                    ***0***                 else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    373                                  ***0***     Count coming in to IF
    373             1                    ***0***                     if(!i_crh_rx_nack_ack)
    460             1                    ***0***                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    375                                  ***0***     Count coming in to CASE
    376             1                    ***0***                           GETSTATUS , GETCAPS , GETMXDS , GETSTATUS_DEF , GETACCCR : begin
    376             2                    ***0***     
    376             3                    ***0***     
    376             4                    ***0***     
    376             5                    ***0***     
    423             1                    ***0***                           DISEC , DEFTGTS , ENTASx  : begin
    423             2                    ***0***     
    423             3                    ***0***     
                                         ***0***     All False Count
Branch totals: 0 hits of 9 branches = 0.00%

------------------------------------IF Branch------------------------------------
    377                                  ***0***     Count coming in to IF
    377             1                    ***0***                             if(ACK_COUNT == 2'b00 )
    406             1                    ***0***                             else if(ACK_COUNT == 2'b01)
    418             1                    ***0***                             else 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    387                                  ***0***     Count coming in to IF
    387             1                    ***0***                                 if(int_state == GETSTATUS || int_state == GETSTATUS_DEF)
    391             1                    ***0***                                 else if(int_state == GETCAPS)
    395             1                    ***0***                                 else if(int_state == GETMXDS)
    399             1                    ***0***                                 else if(int_state == GETACCCR)
                                         ***0***     All False Count
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    431                                  ***0***     Count coming in to IF
    431             1                    ***0***                            if(int_state == DISEC)
    435             1                    ***0***                            else if(int_state == DEFTGTS)
    439             1                    ***0***                             else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b00)
    443             1                    ***0***                             else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b01)
    447             1                    ***0***                             else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b10)
    451             1                    ***0***                             else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b11)
                                         ***0***     All False Count
Branch totals: 0 hits of 7 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    462                                  ***0***     Count coming in to CASE
    463             1                    ***0***                           GETSTATUS : begin
    486             1                    ***0***                           GETCAPS : begin
    494             1                    ***0***                           GETMXDS : begin
    502             1                    ***0***                           DISEC : begin
    518             1                    ***0***                           ENTASx : begin
    538             1                    ***0***                           GETSTATUS_DEF : begin
    567             1                    ***0***                           DEFTGTS : begin
                                         ***0***     All False Count
Branch totals: 0 hits of 8 branches = 0.00%

------------------------------------IF Branch------------------------------------
    464                                  ***0***     Count coming in to IF
    464             1                    ***0***                            if(i_crh_getstatus_data[7:6] == 2'b11)
    476             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    503                                  ***0***     Count coming in to IF
    503             1                    ***0***                             if(i_crh_CRHDLY[2] == 1'b1)
    512             1                    ***0***                               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    519                                  ***0***     Count coming in to IF
    519             1                    ***0***                           if(i_crh_CRCAP2[3] || i_crh_CRCAP2[2]) //deep sleep capable + delayed handoff 
    528             1                    ***0***                           else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    539                                  ***0***     Count coming in to IF
    539             1                    ***0***                           if(i_crh_PRECR[0])
    548             1                    ***0***                           else if(i_crh_PRECR[1:0] == 2'b10)
    557             1                    ***0***                           else if(i_crh_PRECR[1:0] == 2'b00)
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    568                                  ***0***     Count coming in to IF
    568             1                    ***0***                           if(i_crh_PRECR[1]) 
    577             1                    ***0***                           else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    600                                  ***0***     Count coming in to IF
    600             1                    ***0***                 if(i_crh_tx_pp_mode_done )
    609             1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    617                                  ***0***     Count coming in to IF
    617             1                    ***0***                 if(i_crh_tx_pp_mode_done)
    627             1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    638                                  ***0***     Count coming in to IF
    638             1                    ***0***                 if(i_crh_tx_pp_mode_done )
    1076            1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    640                                  ***0***     Count coming in to CASE
    641             1                    ***0***                       GETSTATUS : begin
    704             1                    ***0***                         GETCAPS  : begin 
    763             1                    ***0***                         GETMXDS : begin
    811             1                    ***0***                         DISEC : begin
    851             1                    ***0***                         ENTASx : begin
    892             1                    ***0***                         GETSTATUS_DEF : begin 
    963             1                    ***0***                         DEFTGTS : begin 
    1042            1                    ***0***                         GETACCCR : begin
                                         ***0***     All False Count
Branch totals: 0 hits of 9 branches = 0.00%

------------------------------------IF Branch------------------------------------
    642                                  ***0***     Count coming in to IF
    642             1                    ***0***                         if(PAR_BIT_COUNT == 6'd0)
    659             1                    ***0***                         else if(PAR_BIT_COUNT == 6'd1)
    669             1                    ***0***                         else if(PAR_BIT_COUNT == 6'd2)
    698             1                    ***0***                         else
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    648                                  ***0***     Count coming in to IF
    648             1                    ***0***                             if(i_crh_initiated_request) //address of the target to be sent the controller role 
    652             1                    ***0***                               else //address of the target wining the arbitration 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    672                                  ***0***     Count coming in to IF
    672             1                    ***0***                             if(i_crh_getstatus_data[7:6] == 2'b11)
    685             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    705                                  ***0***     Count coming in to IF
    705             1                    ***0***                           if(PAR_BIT_COUNT == 6'd0)
    718             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd1)
    735             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd2)
    746             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd3)
    758             1                    ***0***                           else
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    724                                  ***0***     Count coming in to IF
    724             1                    ***0***                               if(i_crh_initiated_request) //address of the target to be sent the controller role 
    728             1                    ***0***                               else //address of the target wining the arbitration 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    764                                  ***0***     Count coming in to IF
    764             1                    ***0***                           if(PAR_BIT_COUNT == 6'd0)
    777             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd1)
    794             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd2)
    806             1                    ***0***                           else
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    783                                  ***0***     Count coming in to IF
    783             1                    ***0***                               if(i_crh_initiated_request) //address of the target to be sent the controller role 
    787             1                    ***0***                               else //address of the target wining the arbitration 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    812                                  ***0***     Count coming in to IF
    812             1                    ***0***                           if(PAR_BIT_COUNT == 6'd0)
    826             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd1)
    845             1                    ***0***                           else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    836                                  ***0***     Count coming in to IF
    836             1                    ***0***                               if(i_crh_CRHDLY[2] == 1'b1)
    840             1                    ***0***                               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    855                                  ***0***     Count coming in to IF
    855             1                    ***0***                           if(i_crh_CRHDLY[1:0] == 2'b00)
    859             1                    ***0***                           else if(i_crh_CRHDLY[1:0] == 2'b01)
    863             1                    ***0***                           else if(i_crh_CRHDLY[1:0] == 2'b10)
    867             1                    ***0***                           else if(i_crh_CRHDLY[1:0] == 2'b11)
                                         ***0***     All False Count
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    872                                  ***0***     Count coming in to IF
    872             1                    ***0***                           if(i_crh_CRCAP2[3] || i_crh_CRCAP2[2]) //deep sleep capable + delayed handoff 
    881             1                    ***0***                           else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    893                                  ***0***     Count coming in to IF
    893             1                    ***0***                           if(PAR_BIT_COUNT == 6'd0)
    906             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd1)
    923             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd2)
    933             1                    ***0***                           else if(PAR_BIT_COUNT == 6'd3)
    958             1                    ***0***                           else
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    912                                  ***0***     Count coming in to IF
    912             1                    ***0***                               if(i_crh_initiated_request) //address of the target to be sent the controller role 
    916             1                    ***0***                               else //address of the target wining the arbitration 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    942                                  ***0***     Count coming in to IF
    942             1                    ***0***                               if(i_crh_PRECR[0])
    947             1                    ***0***                               else if(i_crh_PRECR[1:0] == 2'b10)
    952             1                    ***0***                               else if(i_crh_PRECR[1:0] == 2'b00)
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    966                                  ***0***     Count coming in to IF
    966             1                    ***0***                               if( PAR_BIT_COUNT == ((i_crh_tgts_count+1)*4 + 1) )
    988             1                    ***0***                               else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    977                                  ***0***     Count coming in to IF
    977             1                    ***0***                                   if(i_crh_PRECR[1]) 
    982             1                    ***0***                                   else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1001                                 ***0***     Count coming in to IF
    1001            1                    ***0***                                   if( DATA_SENT_COUNT == 6'd0 )
    1005            1                    ***0***                                   else if (DATA_SENT_COUNT == 6'd1)
    1009            1                    ***0***                                   else if (DATA_SENT_COUNT == 6'd2)
    1013            1                    ***0***                                   else if (DATA_SENT_COUNT == 6'd3)
    1017            1                    ***0***                                   else if(DATA_SENT_COUNT == 6'd4)
    1021            1                    ***0***                                   else if(DATA_SENT_COUNT == counter*4 + 6'd1)
    1025            1                    ***0***                                   else if(DATA_SENT_COUNT == counter*4 + 6'd2)
    1029            1                    ***0***                                   else if(DATA_SENT_COUNT == counter*4 + 6'd3)
    1033            1                    ***0***                                   else if(DATA_SENT_COUNT == counter*4 + 6'd4)
                                         ***0***     All False Count
Branch totals: 0 hits of 10 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1043                                 ***0***     Count coming in to IF
    1043            1                    ***0***                         if(PAR_BIT_COUNT == 6'd0)
    1060            1                    ***0***                         else if(PAR_BIT_COUNT == 6'd1)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1049                                 ***0***     Count coming in to IF
    1049            1                    ***0***                             if(i_crh_initiated_request) //address of the target to be sent the controller role 
    1053            1                    ***0***                               else //address of the target wining the arbitration 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1086                                 ***0***     Count coming in to IF
    1086            1                    ***0***                 if(i_crh_tx_pp_mode_done)
    1095            1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    1106                                 ***0***     Count coming in to CASE
    1107            1                    ***0***                       GETSTATUS : begin 
    1112            1                    ***0***                       GETCAPS : begin
    1118            1                    ***0***                       GETMXDS : begin
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1127                                 ***0***     Count coming in to IF
    1127            1                    ***0***                 if(i_crh_rx_pp_mode_done ) 
    1139            1                    ***0***                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    1150                                 ***0***     Count coming in to CASE
    1151            1                    ***0***                        GETSTATUS : begin 
    1156            1                    ***0***                        GETCAPS : begin 
    1161            1                    ***0***                        GETSTATUS_DEF : begin
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1168                                 ***0***     Count coming in to IF
    1168            1                    ***0***                  if(i_crh_rx_pp_mode_done)
    1181            1                    ***0***                  else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1190                                 ***0***     Count coming in to IF
    1190            1                    ***0***                    if(i_crh_tx_pp_mode_done)
    1199            1                    ***0***                    else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1218                                 ***0***     Count coming in to IF
    1218            1                    ***0***                    else */if(i_crh_stop_is_sent)
    1225            1                    ***0***                    else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1232                                 ***0***     Count coming in to IF
    1232            1                    ***0***                   if(!i_crh_crhpoverlap && stop_is_sent ) //overlap condition
    1237            1                    ***0***                   else if(i_crh_crhpoverlap && stop_is_sent )
    1242            1                    ***0***                   else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1250                                 ***0***     Count coming in to IF
    1250            1                    ***0***                    if(i_crh_newcrlock) //
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1256                                 ***0***     Count coming in to IF
    1256            1                    ***0***                        if(i_crh_rx_mode_done ) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1258                                 ***0***     Count coming in to IF
    1258            1                    ***0***                            if(i_crh_start_detected) //new controller pulled sda low 
    1265            1                    ***0***                            else if(!i_crh_start_detected && i_crh_scl_pos_edge) //new controller didn't pull sda low & former controller needs to drive sda low 
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1277                                 ***0***     Count coming in to IF
    1277            1                    ***0***                   if(i_crh_sda_low)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1279                                 ***0***     Count coming in to IF
    1279            1                    ***0***                       if(!i_crh_timer_cas) //need to be edited to 100us or higher 
    1299            1                    ***0***                       else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1281                                 ***0***     Count coming in to IF
    1281            1                    ***0***                           if(i_crh_scl_neg_edge) //new controller pulled the scl low
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      69         0        69     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_controller_crh --

  File controller_crh.v
----------------Focused Condition View-------------------
Line       201 Item    1  (i_crh_en && ~dont_repeat)
Condition totals: 0 of 2 input terms covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
     i_crh_en         N  '_1' not hit             Hit '_1'
  dont_repeat         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_crh_en_0            -                             
  Row   2:    ***0***  i_crh_en_1            ~dont_repeat                  
  Row   3:    ***0***  dont_repeat_0         i_crh_en                      
  Row   4:    ***0***  dont_repeat_1         i_crh_en                      

----------------Focused Condition View-------------------
Line       371 Item    1  (i_crh_rx_mode_done && i_crh_scl_neg_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_crh_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_crh_scl_neg_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_crh_rx_mode_done_0  -                             
  Row   2:    ***0***  i_crh_rx_mode_done_1  i_crh_scl_neg_edge            
  Row   3:    ***0***  i_crh_scl_neg_edge_0  i_crh_rx_mode_done            
  Row   4:    ***0***  i_crh_scl_neg_edge_1  i_crh_rx_mode_done            

----------------Focused Condition View-------------------
Line       377 Item    1  (ACK_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (ACK_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (ACK_COUNT == 0)_0    -                             
  Row   2:    ***0***  (ACK_COUNT == 0)_1    -                             

----------------Focused Condition View-------------------
Line       387 Item    1  ((int_state == 0) || (int_state == 13))
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
   (int_state == 0)         N  No hits                  Hit '_0' and '_1'
  (int_state == 13)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 0)_0    ~(int_state == 13)            
  Row   2:    ***0***  (int_state == 0)_1    -                             
  Row   3:    ***0***  (int_state == 13)_0   ~(int_state == 0)             
  Row   4:    ***0***  (int_state == 13)_1   ~(int_state == 0)             

----------------Focused Condition View-------------------
Line       391 Item    1  (int_state == 2)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (int_state == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 2)_0    -                             
  Row   2:    ***0***  (int_state == 2)_1    -                             

----------------Focused Condition View-------------------
Line       395 Item    1  (int_state == 5)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (int_state == 5)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 5)_0    -                             
  Row   2:    ***0***  (int_state == 5)_1    -                             

----------------Focused Condition View-------------------
Line       399 Item    1  (int_state == 12)
Condition totals: 0 of 1 input term covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (int_state == 12)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 12)_0   -                             
  Row   2:    ***0***  (int_state == 12)_1   -                             

----------------Focused Condition View-------------------
Line       406 Item    1  (ACK_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (ACK_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (ACK_COUNT == 1)_0    -                             
  Row   2:    ***0***  (ACK_COUNT == 1)_1    -                             

----------------Focused Condition View-------------------
Line       431 Item    1  (int_state == 1)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (int_state == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 1)_0    -                             
  Row   2:    ***0***  (int_state == 1)_1    -                             

----------------Focused Condition View-------------------
Line       435 Item    1  (int_state == 6)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (int_state == 6)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (int_state == 6)_0    -                             
  Row   2:    ***0***  (int_state == 6)_1    -                             

----------------Focused Condition View-------------------
Line       439 Item    1  ((int_state == 3) && (i_crh_CRHDLY[1:0] == 0))
Condition totals: 0 of 2 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
          (int_state == 3)         N  No hits                  Hit '_0' and '_1'
  (i_crh_CRHDLY[1:0] == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (int_state == 3)_0          -                             
  Row   2:    ***0***  (int_state == 3)_1          (i_crh_CRHDLY[1:0] == 0)      
  Row   3:    ***0***  (i_crh_CRHDLY[1:0] == 0)_0  (int_state == 3)              
  Row   4:    ***0***  (i_crh_CRHDLY[1:0] == 0)_1  (int_state == 3)              

----------------Focused Condition View-------------------
Line       443 Item    1  ((int_state == 3) && (i_crh_CRHDLY[1:0] == 1))
Condition totals: 0 of 2 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
          (int_state == 3)         N  No hits                  Hit '_0' and '_1'
  (i_crh_CRHDLY[1:0] == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (int_state == 3)_0          -                             
  Row   2:    ***0***  (int_state == 3)_1          (i_crh_CRHDLY[1:0] == 1)      
  Row   3:    ***0***  (i_crh_CRHDLY[1:0] == 1)_0  (int_state == 3)              
  Row   4:    ***0***  (i_crh_CRHDLY[1:0] == 1)_1  (int_state == 3)              

----------------Focused Condition View-------------------
Line       447 Item    1  ((int_state == 3) && (i_crh_CRHDLY[1:0] == 2))
Condition totals: 0 of 2 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
          (int_state == 3)         N  No hits                  Hit '_0' and '_1'
  (i_crh_CRHDLY[1:0] == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (int_state == 3)_0          -                             
  Row   2:    ***0***  (int_state == 3)_1          (i_crh_CRHDLY[1:0] == 2)      
  Row   3:    ***0***  (i_crh_CRHDLY[1:0] == 2)_0  (int_state == 3)              
  Row   4:    ***0***  (i_crh_CRHDLY[1:0] == 2)_1  (int_state == 3)              

----------------Focused Condition View-------------------
Line       451 Item    1  ((int_state == 3) && (i_crh_CRHDLY[1:0] == 3))
Condition totals: 0 of 2 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
          (int_state == 3)         N  No hits                  Hit '_0' and '_1'
  (i_crh_CRHDLY[1:0] == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (int_state == 3)_0          -                             
  Row   2:    ***0***  (int_state == 3)_1          (i_crh_CRHDLY[1:0] == 3)      
  Row   3:    ***0***  (i_crh_CRHDLY[1:0] == 3)_0  (int_state == 3)              
  Row   4:    ***0***  (i_crh_CRHDLY[1:0] == 3)_1  (int_state == 3)              

----------------Focused Condition View-------------------
Line       464 Item    1  (i_crh_getstatus_data[7:6] == 3)
Condition totals: 0 of 1 input term covered = 0.00%

                        Input Term   Covered  Reason for no coverage   Hint
                       -----------  --------  -----------------------  --------------
  (i_crh_getstatus_data[7:6] == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                          Non-masking condition(s)      
 ---------  ---------  --------------------                -------------------------     
  Row   1:    ***0***  (i_crh_getstatus_data[7:6] == 3)_0  -                             
  Row   2:    ***0***  (i_crh_getstatus_data[7:6] == 3)_1  -                             

----------------Focused Condition View-------------------
Line       519 Item    1  (i_crh_CRCAP2[3] || i_crh_CRCAP2[2])
Condition totals: 0 of 2 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  i_crh_CRCAP2[3]         N  No hits                  Hit '_0' and '_1'
  i_crh_CRCAP2[2]         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_crh_CRCAP2[3]_0     ~i_crh_CRCAP2[2]              
  Row   2:    ***0***  i_crh_CRCAP2[3]_1     -                             
  Row   3:    ***0***  i_crh_CRCAP2[2]_0     ~i_crh_CRCAP2[3]              
  Row   4:    ***0***  i_crh_CRCAP2[2]_1     ~i_crh_CRCAP2[3]              

----------------Focused Condition View-------------------
Line       548 Item    1  (i_crh_PRECR[1:0] == 2)
Condition totals: 0 of 1 input term covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (i_crh_PRECR[1:0] == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  (i_crh_PRECR[1:0] == 2)_0  -                             
  Row   2:    ***0***  (i_crh_PRECR[1:0] == 2)_1  -                             

----------------Focused Condition View-------------------
Line       557 Item    1  (i_crh_PRECR[1:0] == 0)
Condition totals: 0 of 1 input term covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (i_crh_PRECR[1:0] == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  (i_crh_PRECR[1:0] == 0)_0  -                             
  Row   2:    ***0***  (i_crh_PRECR[1:0] == 0)_1  -                             

----------------Focused Condition View-------------------
Line       642 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       659 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       669 Item    1  (PAR_BIT_COUNT == 2)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 2)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 2)_1  -                             

----------------Focused Condition View-------------------
Line       672 Item    1  (i_crh_getstatus_data[7:6] == 3)
Condition totals: 0 of 1 input term covered = 0.00%

                        Input Term   Covered  Reason for no coverage   Hint
                       -----------  --------  -----------------------  --------------
  (i_crh_getstatus_data[7:6] == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                          Non-masking condition(s)      
 ---------  ---------  --------------------                -------------------------     
  Row   1:    ***0***  (i_crh_getstatus_data[7:6] == 3)_0  -                             
  Row   2:    ***0***  (i_crh_getstatus_data[7:6] == 3)_1  -                             

----------------Focused Condition View-------------------
Line       705 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       718 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       735 Item    1  (PAR_BIT_COUNT == 2)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 2)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 2)_1  -                             

----------------Focused Condition View-------------------
Line       746 Item    1  (PAR_BIT_COUNT == 3)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 3)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 3)_1  -                             

----------------Focused Condition View-------------------
Line       764 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       777 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       794 Item    1  (PAR_BIT_COUNT == 2)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 2)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 2)_1  -                             

----------------Focused Condition View-------------------
Line       812 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       826 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       855 Item    1  (i_crh_CRHDLY[1:0] == 0)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (i_crh_CRHDLY[1:0] == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (i_crh_CRHDLY[1:0] == 0)_0  -                             
  Row   2:    ***0***  (i_crh_CRHDLY[1:0] == 0)_1  -                             

----------------Focused Condition View-------------------
Line       859 Item    1  (i_crh_CRHDLY[1:0] == 1)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (i_crh_CRHDLY[1:0] == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (i_crh_CRHDLY[1:0] == 1)_0  -                             
  Row   2:    ***0***  (i_crh_CRHDLY[1:0] == 1)_1  -                             

----------------Focused Condition View-------------------
Line       863 Item    1  (i_crh_CRHDLY[1:0] == 2)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (i_crh_CRHDLY[1:0] == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (i_crh_CRHDLY[1:0] == 2)_0  -                             
  Row   2:    ***0***  (i_crh_CRHDLY[1:0] == 2)_1  -                             

----------------Focused Condition View-------------------
Line       867 Item    1  (i_crh_CRHDLY[1:0] == 3)
Condition totals: 0 of 1 input term covered = 0.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (i_crh_CRHDLY[1:0] == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:    ***0***  (i_crh_CRHDLY[1:0] == 3)_0  -                             
  Row   2:    ***0***  (i_crh_CRHDLY[1:0] == 3)_1  -                             

----------------Focused Condition View-------------------
Line       872 Item    1  (i_crh_CRCAP2[3] || i_crh_CRCAP2[2])
Condition totals: 0 of 2 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  i_crh_CRCAP2[3]         N  No hits                  Hit '_0' and '_1'
  i_crh_CRCAP2[2]         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_crh_CRCAP2[3]_0     ~i_crh_CRCAP2[2]              
  Row   2:    ***0***  i_crh_CRCAP2[3]_1     -                             
  Row   3:    ***0***  i_crh_CRCAP2[2]_0     ~i_crh_CRCAP2[3]              
  Row   4:    ***0***  i_crh_CRCAP2[2]_1     ~i_crh_CRCAP2[3]              

----------------Focused Condition View-------------------
Line       893 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       906 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       923 Item    1  (PAR_BIT_COUNT == 2)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 2)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 2)_1  -                             

----------------Focused Condition View-------------------
Line       933 Item    1  (PAR_BIT_COUNT == 3)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 3)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 3)_1  -                             

----------------Focused Condition View-------------------
Line       947 Item    1  (i_crh_PRECR[1:0] == 2)
Condition totals: 0 of 1 input term covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (i_crh_PRECR[1:0] == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  (i_crh_PRECR[1:0] == 2)_0  -                             
  Row   2:    ***0***  (i_crh_PRECR[1:0] == 2)_1  -                             

----------------Focused Condition View-------------------
Line       952 Item    1  (i_crh_PRECR[1:0] == 0)
Condition totals: 0 of 1 input term covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (i_crh_PRECR[1:0] == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:    ***0***  (i_crh_PRECR[1:0] == 0)_0  -                             
  Row   2:    ***0***  (i_crh_PRECR[1:0] == 0)_1  -                             

----------------Focused Condition View-------------------
Line       966 Item    1  (PAR_BIT_COUNT == (((i_crh_tgts_count + 1) * 4) + 1))
Condition totals: 0 of 1 input term covered = 0.00%

                                             Input Term   Covered  Reason for no coverage   Hint
                                            -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == (((i_crh_tgts_count + 1) * 4) + 1))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                               Non-masking condition(s)      
 ---------  ---------  --------------------                                     -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == (((i_crh_tgts_count + 1) * 4) + 1))_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == (((i_crh_tgts_count + 1) * 4) + 1))_1  -                             

----------------Focused Condition View-------------------
Line       1001 Item    1  (DATA_SENT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       1005 Item    1  (DATA_SENT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       1009 Item    1  (DATA_SENT_COUNT == 2)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == 2)_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == 2)_1  -                             

----------------Focused Condition View-------------------
Line       1013 Item    1  (DATA_SENT_COUNT == 3)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == 3)_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == 3)_1  -                             

----------------Focused Condition View-------------------
Line       1017 Item    1  (DATA_SENT_COUNT == 4)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == 4)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == 4)_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == 4)_1  -                             

----------------Focused Condition View-------------------
Line       1021 Item    1  (DATA_SENT_COUNT == ((counter * 4) + 1))
Condition totals: 0 of 1 input term covered = 0.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == ((counter * 4) + 1))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 1))_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 1))_1  -                             

----------------Focused Condition View-------------------
Line       1025 Item    1  (DATA_SENT_COUNT == ((counter * 4) + 2))
Condition totals: 0 of 1 input term covered = 0.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == ((counter * 4) + 2))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 2))_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 2))_1  -                             

----------------Focused Condition View-------------------
Line       1029 Item    1  (DATA_SENT_COUNT == ((counter * 4) + 3))
Condition totals: 0 of 1 input term covered = 0.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == ((counter * 4) + 3))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 3))_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 3))_1  -                             

----------------Focused Condition View-------------------
Line       1033 Item    1  (DATA_SENT_COUNT == ((counter * 4) + 4))
Condition totals: 0 of 1 input term covered = 0.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (DATA_SENT_COUNT == ((counter * 4) + 4))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 4))_0  -                             
  Row   2:    ***0***  (DATA_SENT_COUNT == ((counter * 4) + 4))_1  -                             

----------------Focused Condition View-------------------
Line       1043 Item    1  (PAR_BIT_COUNT == 0)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 0)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 0)_1  -                             

----------------Focused Condition View-------------------
Line       1060 Item    1  (PAR_BIT_COUNT == 1)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (PAR_BIT_COUNT == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (PAR_BIT_COUNT == 1)_0  -                             
  Row   2:    ***0***  (PAR_BIT_COUNT == 1)_1  -                             

----------------Focused Condition View-------------------
Line       1232 Item    1  (~i_crh_crhpoverlap && stop_is_sent)
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  i_crh_crhpoverlap         N  No hits                  Hit '_0' and '_1'
       stop_is_sent         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_crh_crhpoverlap_0   stop_is_sent                  
  Row   2:    ***0***  i_crh_crhpoverlap_1   -                             
  Row   3:    ***0***  stop_is_sent_0        ~i_crh_crhpoverlap            
  Row   4:    ***0***  stop_is_sent_1        ~i_crh_crhpoverlap            

----------------Focused Condition View-------------------
Line       1237 Item    1  (i_crh_crhpoverlap && stop_is_sent)
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  i_crh_crhpoverlap         N  No hits                  Hit '_0' and '_1'
       stop_is_sent         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_crh_crhpoverlap_0   -                             
  Row   2:    ***0***  i_crh_crhpoverlap_1   stop_is_sent                  
  Row   3:    ***0***  stop_is_sent_0        i_crh_crhpoverlap             
  Row   4:    ***0***  stop_is_sent_1        i_crh_crhpoverlap             

----------------Focused Condition View-------------------
Line       1265 Item    1  (~i_crh_start_detected && i_crh_scl_pos_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  i_crh_start_detected         N  No hits                  Hit '_0' and '_1'
    i_crh_scl_pos_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  i_crh_start_detected_0  i_crh_scl_pos_edge            
  Row   2:    ***0***  i_crh_start_detected_1  -                             
  Row   3:    ***0***  i_crh_scl_pos_edge_0    ~i_crh_start_detected         
  Row   4:    ***0***  i_crh_scl_pos_edge_1    ~i_crh_start_detected         


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                      26         2        24     7.69%
    FSM Transitions                 65         0        65     0.00%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/u_controller_crh --

FSM_ID: ACK_COUNT
    Current State Object : ACK_COUNT
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 377                 st0                   0
 406                 st1                   1
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                     st0                   1          
    Uncovered States :
    ------------------
                   State
                   -----
                     st1
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 404                   0          st0 -> st1          
 416                   1          st1 -> st0          


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   2         1         1    50.00%
        FSM Transitions              2         0         2     0.00%
FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 193                IDLE                   0
 259      NACK_TO_SEC_CR                   7
 239       ACK_TO_SEC_CR                   6
 276           REP_START                   1
 339      BROADCAST_ADDR                   5
 616             ADDRESS                   3
 365                 ACK                   2
1207             HANDOFF                  11
 598            CCC_CODE                   4
1104     DATA_RETURNED_1                  15
 636             PAR_BIT                  13
1188         DATA_SENT_1                  10
1147     DATA_RETURNED_2                  14
1084            DEF_BYTE                  12
1248             TESTING                   9
1276             MONITOR                   8
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE             1729256          
    Uncovered States :
    ------------------
                   State
                   -----
          NACK_TO_SEC_CR
           ACK_TO_SEC_CR
               REP_START
          BROADCAST_ADDR
                 ADDRESS
                     ACK
                 HANDOFF
                CCC_CODE
         DATA_RETURNED_1
                 PAR_BIT
             DATA_SENT_1
         DATA_RETURNED_2
                DEF_BYTE
                 TESTING
                 MONITOR
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 227                   0          IDLE -> NACK_TO_SEC_CR
 220                   1          IDLE -> ACK_TO_SEC_CR
 209                   2          IDLE -> REP_START   
 264                   3          NACK_TO_SEC_CR -> IDLE
 247                   4          ACK_TO_SEC_CR -> REP_START
 167                   5          ACK_TO_SEC_CR -> IDLE
 322                   6          REP_START -> BROADCAST_ADDR
 304                   7          REP_START -> ADDRESS
 167                   8          REP_START -> IDLE   
 344                   9          BROADCAST_ADDR -> ACK
 167                  10          BROADCAST_ADDR -> IDLE
 625                  11          ADDRESS -> ACK      
 167                  12          ADDRESS -> IDLE     
 583                  13          ACK -> REP_START    
 467                  14          ACK -> HANDOFF      
 455                  15          ACK -> CCC_CODE     
 415                  16          ACK -> DATA_RETURNED_1
 167                  17          ACK -> IDLE         
1239                  18          HANDOFF -> TESTING  
 167                  19          HANDOFF -> IDLE     
 607                  20          CCC_CODE -> PAR_BIT 
 167                  21          CCC_CODE -> IDLE    
1137                  22          DATA_RETURNED_1 -> PAR_BIT
 167                  23          DATA_RETURNED_1 -> IDLE
1062                  24          PAR_BIT -> HANDOFF  
1057                  25          PAR_BIT -> REP_START
1000                  26          PAR_BIT -> DATA_SENT_1
 930                  27          PAR_BIT -> DATA_RETURNED_2
 903                  28          PAR_BIT -> DEF_BYTE 
 167                  29          PAR_BIT -> IDLE     
1197                  30          DATA_SENT_1 -> PAR_BIT
 167                  31          DATA_SENT_1 -> IDLE 
1178                  32          DATA_RETURNED_2 -> PAR_BIT
 167                  33          DATA_RETURNED_2 -> IDLE
1093                  34          DEF_BYTE -> PAR_BIT 
 167                  35          DEF_BYTE -> IDLE    
1270                  36          TESTING -> MONITOR  
1260                  37          TESTING -> IDLE     
1301                  38          MONITOR -> IDLE     


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                  16         1        15     6.25%
        FSM Transitions             39         0        39     0.00%
FSM_ID: int_state
    Current State Object : int_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 641           GETSTATUS                   0
 704             GETCAPS                   2
 763             GETMXDS                   5
 811               DISEC                   1
 892       GETSTATUS_DEF                  13
 851              ENTASx                   3
 248            GETACCCR                  12
 963             DEFTGTS                   6
    Uncovered States :
    ------------------
                   State
                   -----
               GETSTATUS
                 GETCAPS
                 GETMXDS
                   DISEC
           GETSTATUS_DEF
                  ENTASx
                GETACCCR
                 DEFTGTS
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 694                   0          GETSTATUS -> GETCAPS
 756                   1          GETCAPS -> GETMXDS  
 210                   2          GETCAPS -> GETSTATUS
 804                   3          GETMXDS -> DISEC    
 248                   4          GETMXDS -> GETCAPS  
 210                   5          GETMXDS -> GETSTATUS
 842                   6          DISEC -> GETSTATUS_DEF
 838                   7          DISEC -> ENTASx     
 248                   8          DISEC -> GETCAPS    
 210                   9          DISEC -> GETSTATUS  
 955                  10          GETSTATUS_DEF -> GETACCCR
 945                  11          GETSTATUS_DEF -> DEFTGTS
 248                  12          GETSTATUS_DEF -> GETCAPS
 210                  13          GETSTATUS_DEF -> GETSTATUS
 888                  14          ENTASx -> GETACCCR  
 879                  15          ENTASx -> GETSTATUS_DEF
 248                  16          ENTASx -> GETCAPS   
 210                  17          ENTASx -> GETSTATUS 
 248                  18          GETACCCR -> GETCAPS 
 210                  19          GETACCCR -> GETSTATUS
 985                  20          DEFTGTS -> GETACCCR 
 980                  21          DEFTGTS -> GETSTATUS_DEF
 248                  22          DEFTGTS -> GETCAPS  
 210                  23          DEFTGTS -> GETSTATUS


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   8         0         8     0.00%
        FSM Transitions             24         0        24     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     538        31       507     5.76%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_controller_crh --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_crh.v
    35                                               module controller_crh (
    36                                               //inputs from system top  
    37                                               input  wire              i_crh_clk,
    38                                               input  wire              i_crh_rst_n,
    39                                               //inputs from i3c_engine
    40                                               input  wire              i_crh_en,
    41                                               input  wire              i_crh_initiated_request,
    42                                               input  wire              i_crh_stop_is_sent,
    43                                               //inputs from reg file
    44                                               input  wire  [7:0]       i_crh_CRHDLY,
    45                                               input  wire  [7:0]       i_crh_getstatus_data,
    46                                               input  wire  [7:0]       i_crh_CRCAP2,
    47                                               input  wire  [7:0]       i_crh_PRECR,
    48                                               input  wire  [7:0]       i_crh_cfg_reg,
    49                                               input  wire  [7:0]       i_crh_tgts_count,
    50                                               //inputs from controller tx
    51                                               input  wire              i_crh_tx_mode_done,
    52                                               input  wire              i_crh_tx_pp_mode_done,
    53                                               input  wire              i_crh_sda_low,
    54                                               //inputs from controller rx
    55                                               input  wire              i_crh_rx_mode_done,
    56                                               input  wire              i_crh_rx_pp_mode_done,
    57                                               input  wire              i_crh_rx_nack_ack, //if>>0 then ack, if>>1 then nack --from RX
    58                                               input  wire              i_crh_scl_neg_edge,
    59                                               input  wire              i_crh_scl_pos_edge,
    60                                               input  wire              i_crh_start_detected,
    61                                               //inputs from timer 
    62                                               input  wire              i_crh_crhpoverlap,
    63                                               input  wire              i_crh_newcrlock,
    64                                               input  wire              i_crh_timer_cas,
    65                                               //outputs to controller tx
    66                                               output  reg              o_crh_tx_en, //TX enable 
    67                                               output  reg  [2:0]       o_crh_tx_mode, //define the mode of TX
    68                                               //outputs to controller rx
    69                                               output  reg              o_crh_rx_en,
    70                                               output  reg  [2:0]       o_crh_rx_mode,
    71                                               //outputs to reg file
    72                                               output  reg              o_crh_regf_wr_en,
    73                                               output  reg              o_crh_regf_rd_en, //to be edited to pulse
    74                                               output  reg  [11:0]       o_crh_regf_addr,
    75                                               //outputs to i3c_engine
    76                                               output  reg              o_crh_done,
    77                                               //output  reg              o_crh_ncr_win,
    78                                               //output  reg              o_crh_ncr_take_control,
    79                                               output  reg              o_crh_send_stop,
    80                                               //outputs to bits counter
    81                                               output  reg              o_crh_pp_od,
    82                                               output  reg              o_crh_cnt_en,
    83                                               output  reg              o_crh_rx_cnt_en,
    84                                               //outputs to timer
    85                                               output  reg              o_crh_timer_set,
    86                                               output  reg  [1:0]       o_crh_timer_entasx,
    87                                               //outputs to frame counter
    88                                               output  reg              o_crh_fcnt_en,
    89                                               //outputs to scl generation
    90                                               output  reg              o_crh_scl_idle
    91                                               );
    92                                               
    93                                               
    94                                               reg [3:0] state ;
    95                                               reg [3:0] int_state ;
    96                                               
    97                                               reg       REP_START_COUNT ;
    98                                               reg [1:0] ACK_COUNT ;
    99                                               reg [5:0] PAR_BIT_COUNT ;
    100                                              reg [5:0] DATA_SENT_COUNT ;
    101                                              reg [5:0] counter ;
    102                                              reg       preparing_done ;
    103                                              reg       stop_is_sent ;
    104                                              reg       dont_repeat ;
    105                                              
    106                                              
    107                                              
    108                                              
    109                                              // parameters and defines in RegFile
    110                                              localparam BROADCAST_ADDR_REG_FILE = 9'd46 ; //broadcast address in reg file (7E+w)
    111                                              localparam ARBITRATION_ADDR_REG_FILE = 10'd48 ; //arbitration address 
    112                                              localparam TARGET_ADDR_REG_FILE =  9'd0   ; 
    113                                              localparam GETSTATUS_ADDR_REG_FILE = 9'd387 ; 
    114                                              localparam GETMXDS_ADDR_REG_FILE = 9'd381    ; 
    115                                              localparam GETCAPS_ADDR_REG_FILE = 9'd384    ; 
    116                                              localparam DISEC_ADDR_REG_FILE = 9'd104    ; 
    117                                              localparam ENTAS0_ADDR_REG_FILE = 9'd393    ;
    118                                              localparam ENTAS1_ADDR_REG_FILE = 9'd394    ;
    119                                              localparam ENTAS2_ADDR_REG_FILE = 9'd395    ;
    120                                              localparam ENTAS3_ADDR_REG_FILE = 9'd396    ;
    121                                              localparam DEFTGTS_ADDR_REG_FILE = 9'd397   ;
    122                                              localparam GETACCCR_ADDR_REG_FILE  = 9'd389    ;
    123                                              localparam DEF_BYTE_REG_FILE = 9'd382    ;
    124                                              localparam CRCAPS1_ADDR_REG_FILE = 9'd385    ;
    125                                              localparam CRHDLY1_ADDR_REG_FILE = 9'd383    ;
    126                                              localparam GETSTATUS_LSB_ADDR_REG_FILE = 9'd390    ;
    127                                              localparam CRCAPS2_ADDR_REG_FILE  = 9'd386    ;
    128                                              localparam PRECR_ADDR_REG_FILE = 9'd388 ; 
    129                                              localparam GETSTATUS_MSB_ADDR_REG_FILE = 9'd408 ;
    130                                              localparam DISEC_DATA_ADDR_REG_FILE  =  9'd406   ;
    131                                              
    132                                              
    133                                              //internal states
    134                                              localparam GETSTATUS         = 4'b0000 ;
    135                                              localparam DISEC             = 4'b0001 ;
    136                                              localparam ENTASx            = 4'b0011 ;
    137                                              localparam GETCAPS           = 4'b0010 ;
    138                                              localparam DEFTGTS           = 4'b0110 ;
    139                                              localparam DEFGRPA           = 4'b0111 ;
    140                                              localparam GETMXDS           = 4'b0101 ;
    141                                              localparam DEFTGT            = 4'b0100 ;
    142                                              localparam GETACCCR          = 4'b1100 ;
    143                                              localparam GETSTATUS_DEF     = 4'b1101 ;
    144                                              
    145                                              //global states
    146                                              localparam IDLE              = 4'b0000 ;
    147                                              localparam REP_START         = 4'b0001 ;
    148                                              localparam ADDRESS           = 4'b0011 ; //address sent by active cr
    149                                              localparam ACK               = 4'b0010 ; //ack to controller
    150                                              localparam ACK_TO_SEC_CR     = 4'b0110 ; //ack to sec controller
    151                                              localparam NACK_TO_SEC_CR    = 4'b0111 ; //nack to sec controller
    152                                              localparam BROADCAST_ADDR    = 4'b0101 ;
    153                                              localparam CCC_CODE          = 4'b0100 ; 
    154                                              localparam DEF_BYTE          = 4'b1100 ;
    155                                              localparam PAR_BIT           = 4'b1101 ;
    156                                              localparam DATA_RETURNED_1   = 4'b1111 ;
    157                                              localparam DATA_RETURNED_2   = 4'b1110 ;
    158                                              localparam DATA_SENT_1       = 4'b1010 ;
    159                                              localparam HANDOFF           = 4'b1011 ;
    160                                              localparam TESTING           = 4'b1001 ;
    161                                              localparam MONITOR           = 4'b1000 ;
    162                                              
    163             1                    1729257     always@(posedge i_crh_clk or negedge i_crh_rst_n)
    164                                              begin 
    165                                                if(!i_crh_rst_n)
    166                                                  begin
    167             1                          1           state                   <= IDLE ;
    168             1                          1           o_crh_tx_en             <= 1'b0      ;
    169             1                          1           o_crh_tx_mode           <= 3'b0      ;
    170             1                          1           o_crh_rx_en             <= 1'b0      ;
    171             1                          1           o_crh_rx_cnt_en         <= 1'b0      ;
    172             1                          1           o_crh_rx_mode           <= 2'b0      ;
    173             1                          1           o_crh_cnt_en            <= 1'b0      ; 
    174             1                          1           o_crh_fcnt_en           <= 1'b0      ;
    175             1                          1           o_crh_pp_od             <= 1'b1      ;
    176             1                          1           o_crh_done              <= 1'b0      ;
    177             1                          1           o_crh_regf_rd_en        <= 1'b0      ;
    178             1                          1           o_crh_regf_wr_en        <= 1'b0      ;  // write enable output  reg to reg file 
    179             1                          1           o_crh_regf_addr         <= 9'b000000 ;
    180             1                          1           o_crh_scl_idle          <= 1'b0      ;
    181             1                          1           o_crh_timer_set         <= 1'b0      ;
    182             1                          1           o_crh_timer_entasx      <= 2'b00     ;
    183             1                          1           REP_START_COUNT         <= 1'd0      ;
    184             1                          1           ACK_COUNT               <= 2'd0      ;
    185             1                          1           PAR_BIT_COUNT           <= 6'd0      ;
    186             1                          1           DATA_SENT_COUNT         <= 6'd0      ;
    187             1                          1           counter                 <= 6'd1      ;
    188             1                          1           dont_repeat             <= 1'b0      ;
    189                                                  end
    190                                                else 
    191                                                  begin 
    192                                                    case(state)
    193                                                      IDLE : begin
    194             1                    1729255               o_crh_scl_idle          <= 1'b0      ;
    195             1                    1729255               o_crh_pp_od             <= 1'b0      ;
    196             1                    1729255               o_crh_timer_set         <= 1'b0      ;
    197             1                    1729255               o_crh_timer_entasx      <= 2'b00     ;
    198             1                    1729255               o_crh_regf_rd_en        <= 1'b1      ;
    199             1                    1729255               o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;
    200             1                    1729255                dont_repeat             <= 1'b0      ;
    201                                                        if(i_crh_en && !dont_repeat)
    202                                                          begin
    203                                                            if(i_crh_initiated_request) //initiated by active controller
    204                                                              begin
    205             1                    ***0***                       o_crh_tx_en             <= 1'b1      ;
    206             1                    ***0***                       o_crh_tx_mode           <= 3'b110    ;
    207             1                    ***0***                       o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    208             1                    ***0***                       o_crh_scl_idle          <= 1'b0      ;
    209             1                    ***0***                       state                   <= REP_START ;
    210             1                    ***0***                       int_state               <= GETSTATUS ;   
    211                                                              end
    212                                              
    213                                                            else   //controller role request condition
    214                                                              begin
    215                                                                if(i_crh_cfg_reg[0]) // controller ack 
    216                                                                  begin
    217             1                    ***0***                           o_crh_tx_en             <= 1'b1      ;
    218             1                    ***0***                           o_crh_tx_mode           <= 3'b111    ; //ack in tx
    219             1                    ***0***                           o_crh_pp_od             <= 1'b1      ;
    220             1                    ***0***                           state                   <= ACK_TO_SEC_CR ;
    221                                                                  end
    222                                                                else
    223                                                                  begin
    224             1                    ***0***                           o_crh_tx_en             <= 1'b1      ;
    225             1                    ***0***                           o_crh_tx_mode           <= 3'b101    ; //nack(high-z) in tx
    226             1                    ***0***                           o_crh_pp_od             <= 1'b1      ;
    227             1                    ***0***                           state                   <= NACK_TO_SEC_CR ;
    228                                                                  end
    229                                                              end 
    230                                                           end  
    231                                                        else
    232                                                          begin
    233             1                    1729255                   state <= IDLE ; 
    234                                                          end 
    235                                                               
    236                                                          
    237                                                      end 
    238                                                      
    239                                                      ACK_TO_SEC_CR : begin //ack to the sec cr
    240             1                    ***0***             o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    241                                                      if(i_crh_tx_mode_done )
    242                                                        begin
    243             1                    ***0***                 o_crh_rx_en             <= 1'b0      ;
    244             1                    ***0***                 o_crh_tx_en             <= 1'b1      ;
    245             1                    ***0***                 o_crh_tx_mode           <= 3'b110    ;
    246             1                    ***0***                 o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    247             1                    ***0***                 state <= REP_START ;
    248             1                    ***0***                 int_state <= GETCAPS ;
    249                                                        end
    250                                                      else
    251                                                        begin
    252             1                    ***0***                 state <= ACK_TO_SEC_CR ;
    253                                                        end 
    254                                                      
    255                                                        
    256                                                        end 
    257                                                        
    258                                                        
    259                                                      NACK_TO_SEC_CR : begin //nack to the sec cr
    260             1                    ***0***             o_crh_pp_od             <= 1'b1      ; 
    261                                                      if(i_crh_tx_mode_done )
    262                                                        begin
    263             1                    ***0***                 o_crh_pp_od             <= 1'b0      ; 
    264             1                    ***0***                 state <= IDLE ;
    265             1                    ***0***                 o_crh_scl_idle          <= 1'b1      ;
    266             1                    ***0***                 o_crh_done              <= 1'b1      ;
    267                                                        end
    268                                                      else
    269                                                        begin
    270             1                    ***0***                 state <= NACK_TO_SEC_CR ;
    271                                                        end 
    272                                                      
    273                                              
    274                                                        end 
    275                                                        
    276                                                      REP_START : begin
    277                                                       
    278                                                        if(i_crh_tx_mode_done  )
    279                                                          begin
    280                                                            case(int_state)
    281                                                                GETSTATUS , GETCAPS , GETMXDS , GETSTATUS_DEF , GETACCCR : begin
    282                                                                  if(REP_START_COUNT == 1'b0) 
    283                                                                    begin
    284                                                                      
    285             1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    286             1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    287             1                    ***0***                             o_crh_tx_mode           <= 3'b001    ; 
    288             1                    ***0***                             o_crh_pp_od             <= 1'b1      ; //push-pull
    289             1                    ***0***                             o_crh_regf_wr_en        <= 1'b0      ;
    290             1                    ***0***                             o_crh_regf_rd_en        <= 1'b1      ;
    291             1                    ***0***                             o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;
    292             1                    ***0***                             state                   <= BROADCAST_ADDR ;
    293             1                    ***0***                             REP_START_COUNT         <= REP_START_COUNT + 1'b1 ;
    294                                                                    end 
    295                                                                  else if(REP_START_COUNT == 1'b1) 
    296                                                                    begin
    297             1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    298             1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    299             1                    ***0***                             o_crh_tx_mode           <= 3'b001    ;
    300             1                    ***0***                             o_crh_cnt_en            <= 1'b1      ;
    301             1                    ***0***                             o_crh_pp_od             <= 1'b1      ;
    302             1                    ***0***                             o_crh_regf_wr_en        <= 1'b0      ;
    303             1                    ***0***                             o_crh_regf_rd_en        <= 1'b1      ;
    304             1                    ***0***                             state <= ADDRESS ;
    305             1                    ***0***                             REP_START_COUNT <= 1'b0 ;
    306                                                                    end
    307                                                                  else
    308                                                                    begin
    309             1                    ***0***                             state <= REP_START ;
    310                                                                    end
    311                                                                    
    312                                                                  end
    313                                                                  DISEC , ENTASx , DEFTGTS: begin
    314             1                    ***0***                           o_crh_rx_en             <= 1'b0      ;
    315             1                    ***0***                           o_crh_tx_en             <= 1'b1      ;
    316             1                    ***0***                           o_crh_tx_mode           <= 3'b001    ;
    317             1                    ***0***                           o_crh_cnt_en            <= 1'b1      ;
    318             1                    ***0***                           o_crh_pp_od             <= 1'b1      ; //push-pull
    319             1                    ***0***                           o_crh_regf_rd_en        <= 1'b1      ;
    320             1                    ***0***                           o_crh_regf_wr_en        <= 1'b0      ;
    321             1                    ***0***                           o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;
    322             1                    ***0***                           state <= BROADCAST_ADDR ;
    323                                                                  end
    324                                              
    325                                                                  endcase
    326                                              
    327                                                            
    328                                                          end 
    329                                                        else
    330                                                          begin
    331             1                    ***0***                   state <= REP_START ;
    332                                                          end 
    333                                                                
    334                                              
    335                                                        end 
    336                                                        
    337                                                        
    338                                                        
    339                                                        BROADCAST_ADDR : begin 
    340             1                    ***0***                 o_crh_cnt_en            <= 1'b1      ;
    341                                                          
    342                                                          if(i_crh_tx_pp_mode_done)
    343                                                            begin
    344             1                    ***0***                     state <= ACK ;
    345             1                    ***0***                     o_crh_cnt_en         <= 1'b0      ;
    346             1                    ***0***                     o_crh_pp_od             <= 1'b0      ;
    347             1                    ***0***                     o_crh_tx_en             <= 1'b0 ;
    348             1                    ***0***                     o_crh_rx_en             <= 1'b1      ;       
    349             1                    ***0***                     o_crh_rx_mode           <= 3'b000     ; //ack mode in controller rx
    350             1                    ***0***                     o_crh_rx_cnt_en         <= 1'b0      ;
    351                                                              case(int_state)
    352                                                               DISEC : begin
    353             1                    ***0***                            o_crh_regf_addr <= DISEC_ADDR_REG_FILE     ; 
    354                                                                       end
    355                                                                   endcase
    356                                                            end 
    357                                                          else
    358                                                            begin
    359             1                    ***0***                     state <= BROADCAST_ADDR ;
    360                                                            end
    361                                                          end  
    362                                                         
    363                                                         
    364                                                          
    365                                                        ACK : begin 
    366             1                    ***0***                     o_crh_regf_rd_en        <= 1'b1      ;
    367             1                    ***0***                      o_crh_tx_en             <= 1'b0 ;
    368             1                    ***0***                     o_crh_rx_en             <= 1'b1      ;       
    369             1                    ***0***                     o_crh_rx_mode           <= 2'b00     ; //ack mode in controller rx
    370             1                    ***0***                     o_crh_rx_cnt_en         <= 1'b0      ;
    371                                                          if(i_crh_rx_mode_done && i_crh_scl_neg_edge)
    372                                                            begin
    373                                                              if(!i_crh_rx_nack_ack)
    374                                                                begin
    375                                                                  case(int_state)
    376                                                                    GETSTATUS , GETCAPS , GETMXDS , GETSTATUS_DEF , GETACCCR : begin
    377                                                                      if(ACK_COUNT == 2'b00 )
    378                                                                        begin
    379             1                    ***0***                                 o_crh_rx_en             <= 1'b0      ;
    380             1                    ***0***                                 o_crh_tx_en             <= 1'b1      ;
    381             1                    ***0***                                 o_crh_tx_mode           <= 3'b001    ; 
    382             1                    ***0***                                 o_crh_cnt_en            <= 1'b1      ;
    383             1                    ***0***                                 o_crh_regf_rd_en        <= 1'b1      ;
    384             1                    ***0***                                 o_crh_regf_wr_en        <= 1'b0      ;
    385             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ;
    386             1                    ***0***                                 state <= CCC_CODE ;
    387                                                                          if(int_state == GETSTATUS || int_state == GETSTATUS_DEF)
    388                                                                            begin
    389             1                    ***0***                                     o_crh_regf_addr <= GETSTATUS_ADDR_REG_FILE     ; 
    390                                                                            end
    391                                                                          else if(int_state == GETCAPS)
    392                                                                            begin
    393             1                    ***0***                                     o_crh_regf_addr <= GETCAPS_ADDR_REG_FILE     ; 
    394                                                                            end
    395                                                                          else if(int_state == GETMXDS)
    396                                                                            begin
    397             1                    ***0***                                     o_crh_regf_addr <= GETMXDS_ADDR_REG_FILE     ; 
    398                                                                            end
    399                                                                          else if(int_state == GETACCCR)
    400                                                                            begin
    401             1                    ***0***                                     o_crh_regf_addr <= GETACCCR_ADDR_REG_FILE     ; 
    402                                                                            end
    403                                                                              
    404             1                    ***0***                                 ACK_COUNT <= ACK_COUNT + 2'b1 ;
    405                                                                        end
    406                                                                      else if(ACK_COUNT == 2'b01)
    407                                                                        begin
    408             1                    ***0***                                 o_crh_tx_en             <= 1'b0      ;
    409             1                    ***0***                                 o_crh_rx_en             <= 1'b1      ;
    410             1                    ***0***                                 o_crh_rx_mode           <= 3'b001    ; //deserializing mode in controller rx
    411             1                    ***0***                                 o_crh_rx_cnt_en         <= 1'b1      ;
    412             1                    ***0***                                 o_crh_cnt_en            <= 1'b1      ;
    413             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ;
    414             1                    ***0***                                 o_crh_regf_rd_en        <= 1'b0 ;
    415             1                    ***0***                                 state <= DATA_RETURNED_1 ;
    416             1                    ***0***                                 ACK_COUNT <= 2'b0 ;
    417                                                                        end
    418                                                                      else 
    419                                                                        begin
    420             1                    ***0***                                 state <= ACK ;
    421                                                                        end 
    422                                                                    end
    423                                                                    DISEC , DEFTGTS , ENTASx  : begin
    424             1                    ***0***                            o_crh_rx_en             <= 1'b0      ;
    425             1                    ***0***                            o_crh_tx_en             <= 1'b1      ;
    426             1                    ***0***                            o_crh_tx_mode           <= 3'b001    ; 
    427             1                    ***0***                            o_crh_cnt_en            <= 1'b1      ;
    428             1                    ***0***                            o_crh_regf_rd_en        <= 1'b1      ;
    429             1                    ***0***                            o_crh_regf_wr_en        <= 1'b0      ;
    430             1                    ***0***                            o_crh_pp_od             <= 1'b1      ;
    431                                                                     if(int_state == DISEC)
    432                                                                        begin
    433             1                    ***0***                                 o_crh_regf_addr <= DISEC_ADDR_REG_FILE     ; 
    434                                                                        end
    435                                                                     else if(int_state == DEFTGTS)
    436                                                                        begin
    437             1                    ***0***                                 o_crh_regf_addr <= DEFTGTS_ADDR_REG_FILE     ; 
    438                                                                        end
    439                                                                      else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b00)
    440                                                                        begin
    441             1                    ***0***                                 o_crh_regf_addr <= ENTAS0_ADDR_REG_FILE     ; 
    442                                                                        end
    443                                                                      else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b01)
    444                                                                        begin
    445             1                    ***0***                                 o_crh_regf_addr <= ENTAS1_ADDR_REG_FILE     ; 
    446                                                                        end
    447                                                                      else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b10)
    448                                                                        begin
    449             1                    ***0***                                 o_crh_regf_addr <= ENTAS2_ADDR_REG_FILE     ; 
    450                                                                        end
    451                                                                      else if(int_state == ENTASx && i_crh_CRHDLY[1:0] == 2'b11)
    452                                                                        begin
    453             1                    ***0***                                 o_crh_regf_addr <= ENTAS3_ADDR_REG_FILE     ; 
    454                                                                        end
    455             1                    ***0***                            state <= CCC_CODE ;
    456                                                                    end      
    457                                                                           
    458                                                                  endcase
    459                                                                end
    460                                                              else
    461                                                                begin
    462                                                                  case(int_state)
    463                                                                    GETSTATUS : begin
    464                                                                     if(i_crh_getstatus_data[7:6] == 2'b11)
    465                                                                        begin
    466                                                                          //preparing_done <= 1'b1 ;
    467             1                    ***0***                                 state <= HANDOFF ;
    468             1                    ***0***                                 o_crh_rx_en             <= 1'b0      ;
    469             1                    ***0***                                 o_crh_tx_en             <= 1'b1      ;
    470             1                    ***0***                                 o_crh_tx_mode           <= 3'b010    ; 
    471             1                    ***0***                                 o_crh_send_stop         <= 1'b1      ;
    472             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ;
    473                                                                          //preparing_done          <= 1'b0      ;
    474                                                                          
    475                                                                        end
    476                                                                      else
    477                                                                        begin
    478             1                    ***0***                                 o_crh_rx_en             <= 1'b0      ;
    479             1                    ***0***                                 o_crh_tx_en             <= 1'b1      ;
    480             1                    ***0***                                 o_crh_tx_mode           <= 3'b110    ;
    481             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    482             1                    ***0***                                 state <= REP_START ;
    483             1                    ***0***                                 int_state <= GETCAPS ;                      
    484                                                                        end
    485                                                                    end
    486                                                                    GETCAPS : begin
    487             1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    488             1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    489             1                    ***0***                             o_crh_tx_mode           <= 3'b110    ;
    490             1                    ***0***                             o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    491             1                    ***0***                             state <= REP_START ;
    492             1                    ***0***                             int_state <= GETMXDS ;
    493                                                                    end
    494                                                                    GETMXDS : begin
    495             1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    496             1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    497             1                    ***0***                             o_crh_tx_mode           <= 3'b110    ;
    498             1                    ***0***                             o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    499             1                    ***0***                             state <= REP_START ;
    500             1                    ***0***                             int_state <= DISEC ;
    501                                                                    end
    502                                                                    DISEC : begin
    503                                                                      if(i_crh_CRHDLY[2] == 1'b1)
    504                                                                          begin
    505             1                    ***0***                                   o_crh_rx_en             <= 1'b0      ;
    506             1                    ***0***                                   o_crh_tx_en             <= 1'b1      ;
    507             1                    ***0***                                   o_crh_tx_mode           <= 3'b110    ;
    508             1                    ***0***                                   o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    509             1                    ***0***                                   state <= REP_START ;
    510             1                    ***0***                                   int_state <= ENTASx ;
    511                                                                          end
    512                                                                        else
    513                                                                          begin
    514             1                    ***0***                                   state <= REP_START ;
    515             1                    ***0***                                   int_state <= GETSTATUS_DEF ;
    516                                                                          end    
    517                                                                    end
    518                                                                    ENTASx : begin
    519                                                                    if(i_crh_CRCAP2[3] || i_crh_CRCAP2[2]) //deep sleep capable + delayed handoff 
    520                                                                      begin
    521             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    522             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    523             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    524             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    525             1                    ***0***                               state <= REP_START ;
    526             1                    ***0***                               int_state <= GETSTATUS_DEF ;
    527                                                                      end
    528                                                                    else 
    529                                                                      begin
    530             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    531             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    532             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    533             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    534             1                    ***0***                               state <= REP_START ;
    535             1                    ***0***                               int_state <= GETACCCR ;
    536                                                                      end 
    537                                                                    end
    538                                                                    GETSTATUS_DEF : begin
    539                                                                    if(i_crh_PRECR[0])
    540                                                                      begin
    541             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    542             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    543             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    544             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull 
    545             1                    ***0***                               state <= REP_START ;
    546             1                    ***0***                               int_state <= DEFTGTS ;
    547                                                                      end
    548                                                                    else if(i_crh_PRECR[1:0] == 2'b10)
    549                                                                      begin
    550             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    551             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    552             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    553             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    554             1                    ***0***                               state <= REP_START ;
    555             1                    ***0***                               int_state <= GETSTATUS_DEF ;
    556                                                                      end
    557                                                                    else if(i_crh_PRECR[1:0] == 2'b00)
    558                                                                      begin
    559             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    560             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    561             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    562             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull 
    563             1                    ***0***                               state <= REP_START ;
    564             1                    ***0***                               int_state <= GETACCCR ;
    565                                                                      end
    566                                                                    end
    567                                                                    DEFTGTS : begin
    568                                                                    if(i_crh_PRECR[1]) 
    569                                                                      begin
    570             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    571             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    572             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    573             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    574             1                    ***0***                               state <= REP_START ;
    575             1                    ***0***                               int_state <= GETSTATUS_DEF ;
    576                                                                      end
    577                                                                    else
    578                                                                      begin
    579             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    580             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    581             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    582             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    583             1                    ***0***                               state <= REP_START ;
    584             1                    ***0***                               int_state <= GETACCCR ;
    585                                                                      end
    586                                                                    end              
    587                                                                  endcase
    588                                                            end
    589                                                          end
    590                                                          else 
    591                                                            begin
    592             1                    ***0***                     state <= ACK ;
    593                                                            end 
    594                                                          
    595                                                        end
    596                                                        
    597                                                        
    598                                                        CCC_CODE: begin 
    599                                                          
    600                                                          if(i_crh_tx_pp_mode_done )
    601                                                            begin
    602             1                    ***0***                     o_crh_rx_en             <= 1'b0      ;
    603             1                    ***0***                     o_crh_cnt_en            <= 1'b0      ;
    604             1                    ***0***                     o_crh_tx_en             <= 1'b1      ;
    605             1                    ***0***                     o_crh_tx_mode           <= 3'b011    ; 
    606             1                    ***0***                     o_crh_pp_od             <= 1'b1      ;
    607             1                    ***0***                     state <= PAR_BIT ; 
    608                                                            end 
    609                                                          else
    610                                                            begin
    611             1                    ***0***                     state <= CCC_CODE ;
    612                                                            end 
    613                                                            
    614                                                        end
    615                                                        
    616                                                        ADDRESS : begin
    617                                                          if(i_crh_tx_pp_mode_done)
    618                                                            begin
    619             1                    ***0***                     o_crh_cnt_en            <= 1'b0      ;
    620             1                    ***0***                     o_crh_tx_en             <= 1'b0      ;
    621             1                    ***0***                     o_crh_rx_en             <= 1'b1      ;
    622             1                    ***0***                     o_crh_rx_mode           <= 2'b00     ; //ack mode in controller rx
    623             1                    ***0***                     o_crh_rx_cnt_en         <= 1'b0      ;
    624             1                    ***0***                     o_crh_pp_od             <= 1'b0      ; //open drain
    625             1                    ***0***                     state <= ACK  ;
    626                                                            end
    627                                                          else
    628                                                            begin
    629             1                    ***0***                     state <= ADDRESS ;
    630                                                            end
    631                                                            
    632                                                            
    633                                                          end
    634                                                        
    635                                                        
    636                                                        PAR_BIT : begin
    637                                                                
    638                                                          if(i_crh_tx_pp_mode_done )
    639                                                            begin
    640                                                              case(int_state)
    641                                                                GETSTATUS : begin
    642                                                                  if(PAR_BIT_COUNT == 6'd0)
    643                                                                    begin
    644             1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    645             1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    646             1                    ***0***                             o_crh_tx_mode           <= 3'b110    ;
    647             1                    ***0***                             o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    648                                                                      if(i_crh_initiated_request) //address of the target to be sent the controller role 
    649                                                                         begin
    650             1                    ***0***                                 o_crh_regf_addr <= TARGET_ADDR_REG_FILE ; //need to be edited
    651                                                                         end
    652                                                                        else //address of the target wining the arbitration 
    653                                                                         begin
    654             1                    ***0***                                 o_crh_regf_addr <= ARBITRATION_ADDR_REG_FILE  ;
    655                                                                         end
    656             1                    ***0***                             state <= REP_START;
    657             1                    ***0***                             PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    658                                                                    end 
    659                                                                  else if(PAR_BIT_COUNT == 6'd1)
    660                                                                    begin
    661             1                    ***0***                             o_crh_tx_en             <= 1'b0      ;
    662             1                    ***0***                             o_crh_rx_en             <= 1'b1      ;
    663             1                    ***0***                             o_crh_rx_mode           <= 3'b001    ; //deserializing mode in controller rx
    664             1                    ***0***                             o_crh_pp_od             <= 1'b1      ; 
    665             1                    ***0***                             o_crh_regf_rd_en        <= 1'b0      ;
    666             1                    ***0***                             state <= DATA_RETURNED_2 ;
    667             1                    ***0***                             PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    668                                                                    end
    669                                                                  else if(PAR_BIT_COUNT == 6'd2)
    670                                                                    begin
    671                                                                      
    672                                                                      if(i_crh_getstatus_data[7:6] == 2'b11)
    673                                                                        begin
    674                                                                          //preparing_done <= 1'b1 ;
    675             1                    ***0***                                 state <= HANDOFF ;
    676             1                    ***0***                                 PAR_BIT_COUNT <= 1'b0;
    677             1                    ***0***                                 o_crh_rx_en             <= 1'b0      ;
    678             1                    ***0***                                 o_crh_tx_en             <= 1'b1      ;
    679             1                    ***0***                                 o_crh_tx_mode           <= 3'b010    ; 
    680             1                    ***0***                                 o_crh_send_stop         <= 1'b1      ;
    681             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ;
    682                                                                          //preparing_done          <= 1'b0      ;
    683                                                                          
    684                                                                        end
    685                                                                      else
    686                                                                        begin
    687             1                    ***0***                                 o_crh_regf_rd_en        <= 1'b1      ;
    688             1                    ***0***                                 o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    689             1                    ***0***                                 o_crh_rx_en             <= 1'b0      ;
    690             1                    ***0***                                 o_crh_tx_en             <= 1'b1      ;
    691             1                    ***0***                                 o_crh_tx_mode           <= 3'b110    ;
    692             1                    ***0***                                 o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    693             1                    ***0***                                 state <= REP_START ;
    694             1                    ***0***                                 int_state <= GETCAPS ;     
    695             1                    ***0***                                 PAR_BIT_COUNT <= 1'b0;                 
    696                                                                        end
    697                                                                    end 
    698                                                                  else
    699                                                                    begin
    700             1                    ***0***                             state <= PAR_BIT ;
    701                                                                    end
    702                                                                    
    703                                                                  end
    704                                                                  GETCAPS  : begin 
    705                                                                    if(PAR_BIT_COUNT == 6'd0)
    706                                                                      begin
    707             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    708             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    709             1                    ***0***                               o_crh_tx_mode           <= 3'b001    ; 
    710             1                    ***0***                               o_crh_cnt_en            <= 1'b1      ;
    711             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    712             1                    ***0***                               o_crh_regf_wr_en        <= 1'b0      ;
    713             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    714             1                    ***0***                               o_crh_regf_addr         <= DEF_BYTE_REG_FILE ;
    715             1                    ***0***                               state <= DEF_BYTE ;
    716             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    717                                                                      end 
    718                                                                    else if(PAR_BIT_COUNT == 6'd1)
    719                                                                      begin
    720             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    721             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    722             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    723             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    724                                                                        if(i_crh_initiated_request) //address of the target to be sent the controller role 
    725                                                                         begin
    726             1                    ***0***                                 o_crh_regf_addr <= TARGET_ADDR_REG_FILE ; //need to be edited
    727                                                                         end
    728                                                                        else //address of the target wining the arbitration 
    729                                                                         begin
    730             1                    ***0***                                 o_crh_regf_addr <= ARBITRATION_ADDR_REG_FILE  ;
    731                                                                         end
    732             1                    ***0***                               state <= REP_START ;
    733             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    734                                                                      end
    735                                                                    else if(PAR_BIT_COUNT == 6'd2)
    736                                                                      begin
    737             1                    ***0***                               o_crh_tx_en             <= 1'b0      ;
    738             1                    ***0***                               o_crh_rx_en             <= 1'b1      ;
    739             1                    ***0***                               o_crh_rx_mode           <= 3'b001    ; //deserializing mode in controller rx
    740                                                                        
    741             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    742             1                    ***0***                               o_crh_regf_rd_en        <= 1'b0      ;
    743             1                    ***0***                               state <= DATA_RETURNED_2 ;
    744             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    745                                                                      end
    746                                                                    else if(PAR_BIT_COUNT == 6'd3)
    747                                                                      begin
    748                                                                        //o_crh_regf_rd_en        <= 1'b1      ;
    749             1                    ***0***                               o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    750             1                    ***0***                               PAR_BIT_COUNT <= 6'd0 ;
    751             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    752             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    753             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    754             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    755             1                    ***0***                               state <= REP_START ;
    756             1                    ***0***                               int_state <= GETMXDS ;
    757                                                                      end
    758                                                                    else
    759                                                                      begin
    760             1                    ***0***                               state <= PAR_BIT ;
    761                                                                      end
    762                                                                    end 
    763                                                                  GETMXDS : begin
    764                                                                    if(PAR_BIT_COUNT == 6'd0)
    765                                                                      begin
    766             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    767             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    768             1                    ***0***                               o_crh_tx_mode           <= 3'b001    ; 
    769             1                    ***0***                               o_crh_cnt_en            <= 1'b1      ;
    770             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    771             1                    ***0***                               o_crh_regf_wr_en        <= 1'b0      ;
    772             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    773             1                    ***0***                               o_crh_regf_addr         <= DEF_BYTE_REG_FILE ;
    774             1                    ***0***                               state <= DEF_BYTE ;
    775             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    776                                                                      end 
    777                                                                    else if(PAR_BIT_COUNT == 6'd1)
    778                                                                      begin
    779             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    780             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    781             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    782             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    783                                                                        if(i_crh_initiated_request) //address of the target to be sent the controller role 
    784                                                                         begin
    785             1                    ***0***                                 o_crh_regf_addr <= TARGET_ADDR_REG_FILE ; //need to be edited
    786                                                                         end
    787                                                                        else //address of the target wining the arbitration 
    788                                                                         begin
    789             1                    ***0***                                 o_crh_regf_addr <= ARBITRATION_ADDR_REG_FILE  ;
    790                                                                         end
    791             1                    ***0***                               state <= REP_START ;
    792             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    793                                                                      end
    794                                                                    else if(PAR_BIT_COUNT == 6'd2)
    795                                                                      begin
    796             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    797             1                    ***0***                             	 o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    798             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    799             1                    ***0***                               PAR_BIT_COUNT <= 6'd0 ;
    800             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    801             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    802             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    803             1                    ***0***                               state <= REP_START ;
    804             1                    ***0***                               int_state <= DISEC ;
    805                                                                      end
    806                                                                    else
    807                                                                      begin
    808             1                    ***0***                               state <= PAR_BIT ;
    809                                                                      end
    810                                                                    end 
    811                                                                  DISEC : begin
    812                                                                    if(PAR_BIT_COUNT == 6'd0)
    813                                                                      begin
    814             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    815             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    816             1                    ***0***                               o_crh_tx_mode           <= 3'b001    ; 
    817             1                    ***0***                               o_crh_cnt_en            <= 1'b1      ;
    818             1                    ***0***                               o_crh_fcnt_en           <= 1'b1      ;
    819             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    820             1                    ***0***                               o_crh_regf_wr_en        <= 1'b0      ;
    821             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    822             1                    ***0***                               o_crh_regf_addr <= DISEC_DATA_ADDR_REG_FILE ;
    823             1                    ***0***                               state <= DATA_SENT_1 ;
    824             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    825                                                                      end 
    826                                                                    else if(PAR_BIT_COUNT == 6'd1)
    827                                                                      begin
    828             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    829             1                    ***0***                               o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    830             1                    ***0***                               PAR_BIT_COUNT <= 6'd0 ;
    831             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    832             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    833             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    834             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    835             1                    ***0***                               state <= REP_START ;
    836                                                                        if(i_crh_CRHDLY[2] == 1'b1)
    837                                                                          begin
    838             1                    ***0***                                   int_state <= ENTASx ;
    839                                                                          end
    840                                                                        else
    841                                                                          begin
    842             1                    ***0***                                   int_state <= GETSTATUS_DEF ;
    843                                                                          end    
    844                                                                      end
    845                                                                    else
    846                                                                      begin
    847             1                    ***0***                               state <= PAR_BIT ;
    848                                                                      end
    849                                                                      
    850                                                                    end
    851                                                                  ENTASx : begin
    852             1                    ***0***                           o_crh_timer_set <= 1'b1 ;
    853             1                    ***0***                           o_crh_regf_rd_en        <= 1'b1      ;
    854             1                    ***0***                           o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    855                                                                    if(i_crh_CRHDLY[1:0] == 2'b00)
    856                                                                      begin
    857             1                    ***0***                               o_crh_timer_entasx <= 2'b00 ;
    858                                                                      end
    859                                                                    else if(i_crh_CRHDLY[1:0] == 2'b01)
    860                                                                      begin
    861             1                    ***0***                               o_crh_timer_entasx <= 2'b01 ;
    862                                                                      end
    863                                                                    else if(i_crh_CRHDLY[1:0] == 2'b10)
    864                                                                      begin
    865             1                    ***0***                               o_crh_timer_entasx <= 2'b10 ;
    866                                                                      end
    867                                                                    else if(i_crh_CRHDLY[1:0] == 2'b11)
    868                                                                      begin
    869             1                    ***0***                               o_crh_timer_entasx <= 2'b11 ; 
    870                                                                      end 
    871                                                                    
    872                                                                    if(i_crh_CRCAP2[3] || i_crh_CRCAP2[2]) //deep sleep capable + delayed handoff 
    873                                                                      begin
    874             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    875             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    876             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    877             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    878             1                    ***0***                               state <= REP_START ;
    879             1                    ***0***                               int_state <= GETSTATUS_DEF ;
    880                                                                      end
    881                                                                    else 
    882                                                                      begin
    883             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    884             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    885             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    886             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    887             1                    ***0***                               state <= REP_START ;
    888             1                    ***0***                               int_state <= GETACCCR ;
    889                                                                      end 
    890                                                                    
    891                                                                  end
    892                                                                  GETSTATUS_DEF : begin 
    893                                                                    if(PAR_BIT_COUNT == 6'd0)
    894                                                                      begin
    895             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    896             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    897             1                    ***0***                               o_crh_tx_mode           <= 3'b001    ; 
    898             1                    ***0***                               o_crh_cnt_en            <= 1'b1      ;
    899             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    900             1                    ***0***                               o_crh_regf_wr_en        <= 1'b0      ;
    901             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    902             1                    ***0***                               o_crh_regf_addr         <= DEF_BYTE_REG_FILE ;
    903             1                    ***0***                               state <= DEF_BYTE ;
    904             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    905                                                                      end 
    906                                                                    else if(PAR_BIT_COUNT == 6'd1)
    907                                                                      begin
    908             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    909             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    910             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    911             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    912                                                                        if(i_crh_initiated_request) //address of the target to be sent the controller role 
    913                                                                         begin
    914             1                    ***0***                                 o_crh_regf_addr <= TARGET_ADDR_REG_FILE ; //need to be edited
    915                                                                         end
    916                                                                        else //address of the target wining the arbitration 
    917                                                                         begin
    918             1                    ***0***                                 o_crh_regf_addr <= ARBITRATION_ADDR_REG_FILE  ;
    919                                                                         end
    920             1                    ***0***                               state <= REP_START ;
    921             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    922                                                                      end
    923                                                                    else if(PAR_BIT_COUNT == 6'd2)
    924                                                                      begin
    925             1                    ***0***                               o_crh_tx_en             <= 1'b0      ;
    926             1                    ***0***                               o_crh_rx_en             <= 1'b1      ;
    927             1                    ***0***                               o_crh_rx_mode           <= 3'b001    ; //deserializing mode in controller rx
    928                                              
    929             1                    ***0***                               o_crh_pp_od             <= 1'b1      ;
    930             1                    ***0***                               state <= DATA_RETURNED_2 ;
    931             1                    ***0***                               PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    932                                                                      end
    933                                                                    else if(PAR_BIT_COUNT == 6'd3)
    934                                                                      begin
    935             1                    ***0***                               o_crh_regf_rd_en        <= 1'b1      ;
    936             1                    ***0***                               o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ;    
    937             1                    ***0***                               PAR_BIT_COUNT <= 6'd0 ;
    938             1                    ***0***                               o_crh_rx_en             <= 1'b0      ;
    939             1                    ***0***                               o_crh_tx_en             <= 1'b1      ;
    940             1                    ***0***                               o_crh_tx_mode           <= 3'b110    ;
    941             1                    ***0***                               o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    942                                                                        if(i_crh_PRECR[0])
    943                                                                          begin
    944             1                    ***0***                                   state <= REP_START ;
    945             1                    ***0***                                   int_state <= DEFTGTS ;
    946                                                                          end
    947                                                                        else if(i_crh_PRECR[1:0] == 2'b10)
    948                                                                          begin
    949             1                    ***0***                                   state <= REP_START ;
    950             1                    ***0***                                   int_state <= GETSTATUS_DEF ;
    951                                                                          end
    952                                                                        else if(i_crh_PRECR[1:0] == 2'b00)
    953                                                                          begin
    954             1                    ***0***                                   state <= REP_START ;
    955             1                    ***0***                                   int_state <= GETACCCR ;
    956                                                                          end
    957                                                                      end
    958                                                                    else
    959                                                                      begin
    960             1                    ***0***                               state <= PAR_BIT ;
    961                                                                      end
    962                                                                  end
    963                                                                  DEFTGTS : begin 
    964                                                                    
    965                                                                    
    966                                                                        if( PAR_BIT_COUNT == ((i_crh_tgts_count+1)*4 + 1) )
    967                                                                          begin
    968             1                    ***0***                                   DATA_SENT_COUNT <= 6'd0 ;
    969             1                    ***0***                                   counter <= 6'd1 ;
    970             1                    ***0***                                   PAR_BIT_COUNT           <= 6'b0      ;
    971             1                    ***0***                                   o_crh_rx_en             <= 1'b0      ;
    972             1                    ***0***                                   o_crh_tx_en             <= 1'b1      ;
    973             1                    ***0***                                   o_crh_tx_mode           <= 3'b110    ;
    974             1                    ***0***                                   o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    975             1                    ***0***                                   o_crh_regf_rd_en        <= 1'b1      ;
    976             1                    ***0***                                   o_crh_regf_addr         <= BROADCAST_ADDR_REG_FILE  ; 
    977                                                                            if(i_crh_PRECR[1]) 
    978                                                                              begin
    979             1                    ***0***                                       state <= REP_START ;
    980             1                    ***0***                                       int_state <= GETSTATUS_DEF ;
    981                                                                              end
    982                                                                            else
    983                                                                              begin
    984             1                    ***0***                                       state <= REP_START ;
    985             1                    ***0***                                       int_state <= GETACCCR ;
    986                                                                              end
    987                                                                          end
    988                                                                        else 
    989                                                                          begin
    990             1                    ***0***                                   PAR_BIT_COUNT           <= PAR_BIT_COUNT + 1'b1 ; 
    991             1                    ***0***                                   DATA_SENT_COUNT         <= DATA_SENT_COUNT + 1'b1 ;
    992             1                    ***0***                                   o_crh_rx_en             <= 1'b0      ;
    993             1                    ***0***                                   o_crh_tx_en             <= 1'b1      ;
    994             1                    ***0***                                   o_crh_tx_mode           <= 3'b001    ; 
    995             1                    ***0***                                   o_crh_cnt_en            <= 1'b1      ;
    996             1                    ***0***                                   o_crh_fcnt_en           <= 1'b1      ;
    997             1                    ***0***                                   o_crh_regf_rd_en        <= 1'b1      ;
    998             1                    ***0***                                   o_crh_regf_wr_en        <= 1'b0      ;
    999             1                    ***0***                                   o_crh_pp_od             <= 1'b1      ;
    1000            1                    ***0***                                   state <= DATA_SENT_1 ; 
    1001                                                                           if( DATA_SENT_COUNT == 6'd0 )
    1002                                                                             begin
    1003            1                    ***0***                                       o_crh_regf_addr <= 9'd35    ;
    1004                                                                             end
    1005                                                                           else if (DATA_SENT_COUNT == 6'd1)
    1006                                                                             begin
    1007            1                    ***0***                                       o_crh_regf_addr <= 9'd35    ; //active controller DA (need to be edited)
    1008                                                                             end
    1009                                                                           else if (DATA_SENT_COUNT == 6'd2)
    1010                                                                             begin
    1011            1                    ***0***                                       o_crh_regf_addr <= 9'd35    ;  //active controller DCR (need to be edited)
    1012                                                                             end
    1013                                                                           else if (DATA_SENT_COUNT == 6'd3)
    1014                                                                             begin
    1015            1                    ***0***                                     	 o_crh_regf_addr <= 9'd35    ; //active controller BCR ( need to be edited) 
    1016                                                                             end
    1017                                                                           else if(DATA_SENT_COUNT == 6'd4)
    1018                                                                             begin
    1019            1                    ***0***                                       o_crh_regf_addr <= BROADCAST_ADDR_REG_FILE ;
    1020                                                                             end
    1021                                                                           else if(DATA_SENT_COUNT == counter*4 + 6'd1)
    1022                                                                               begin
    1023            1                    ***0***                                         o_crh_regf_addr <= 9'd199 +  counter*9   ;
    1024                                                                               end 
    1025                                                                           else if(DATA_SENT_COUNT == counter*4 + 6'd2)
    1026                                                                               begin 
    1027            1                    ***0***                                       	 o_crh_regf_addr <= 9'd198 + counter*9    ;
    1028                                                                               end
    1029                                                                           else if(DATA_SENT_COUNT == counter*4 + 6'd3)
    1030                                                                               begin
    1031            1                    ***0***                                         o_crh_regf_addr <= 9'd197 + counter*9    ;
    1032                                                                               end
    1033                                                                           else if(DATA_SENT_COUNT == counter*4 + 6'd4)
    1034                                                                               begin
    1035            1                    ***0***                                         o_crh_regf_addr <= 9'd199 + counter*9    ; //need to be edited
    1036            1                    ***0***                                         counter <= counter + 1 ;
    1037                                                                               end
    1038                                                                         end //end of the else
    1039                                                               //counter <= 6'd1 ;
    1040                                                                   //PAR_BIT_COUNT <= 6'd0 ;
    1041                                                                 end // end of the state 
    1042                                                                 GETACCCR : begin
    1043                                                                 if(PAR_BIT_COUNT == 6'd0)
    1044                                                                   begin
    1045            1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    1046            1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    1047            1                    ***0***                             o_crh_tx_mode           <= 3'b110    ;
    1048            1                    ***0***                             o_crh_pp_od             <= 1'b1      ; //rep start is push pull
    1049                                                                     if(i_crh_initiated_request) //address of the target to be sent the controller role 
    1050                                                                        begin
    1051            1                    ***0***                                 o_crh_regf_addr <= TARGET_ADDR_REG_FILE ; //need to be edited
    1052                                                                        end
    1053                                                                       else //address of the target wining the arbitration 
    1054                                                                        begin
    1055            1                    ***0***                                 o_crh_regf_addr <= ARBITRATION_ADDR_REG_FILE  ;
    1056                                                                        end
    1057            1                    ***0***                             state <= REP_START;
    1058            1                    ***0***                             PAR_BIT_COUNT <= PAR_BIT_COUNT + 6'd1 ;
    1059                                                                   end 
    1060                                                                 else if(PAR_BIT_COUNT == 6'd1)
    1061                                                                   begin
    1062            1                    ***0***                             state <= HANDOFF ;
    1063            1                    ***0***                             PAR_BIT_COUNT <= 6'd0 ;
    1064                                                                     //preparing_done <= 1'b1 ;
    1065            1                    ***0***                             o_crh_rx_en             <= 1'b0      ;
    1066            1                    ***0***                             o_crh_tx_en             <= 1'b1      ;
    1067            1                    ***0***                             o_crh_tx_mode           <= 3'b010    ; 
    1068            1                    ***0***                             o_crh_send_stop         <= 1'b1      ;
    1069            1                    ***0***                             o_crh_pp_od             <= 1'b1      ;
    1070                                                                     //preparing_done          <= 1'b0      ;
    1071                                                                   
    1072                                                                   end
    1073                                                                 end
    1074                                                            endcase
    1075                                                           end
    1076                                                         else
    1077                                                           begin
    1078            1                    ***0***                     state <= PAR_BIT ;
    1079                                                           end
    1080                                             
    1081                                                       end
    1082                                                       
    1083                                                       
    1084                                                       DEF_BYTE : begin 
    1085                                                         
    1086                                                         if(i_crh_tx_pp_mode_done)
    1087                                                           begin
    1088            1                    ***0***                     o_crh_cnt_en            <= 1'b0      ;
    1089            1                    ***0***                     o_crh_rx_en             <= 1'b0      ;
    1090            1                    ***0***                     o_crh_tx_en             <= 1'b1      ;
    1091            1                    ***0***                     o_crh_tx_mode           <= 3'b011    ; 
    1092            1                    ***0***                     o_crh_pp_od             <= 1'b1      ;
    1093            1                    ***0***                     state <= PAR_BIT ;
    1094                                                           end 
    1095                                                         else
    1096                                                           begin
    1097            1                    ***0***                     state <= DEF_BYTE ;
    1098                                                           end 
    1099                                                           
    1100                                                       end
    1101                                                       
    1102                                                       
    1103                                                      
    1104                                                       DATA_RETURNED_1 : begin
    1105                                                         //data will be saved in reg file depending on the CCC command 
    1106                                                         case(int_state)
    1107                                                               GETSTATUS : begin 
    1108            1                    ***0***                         o_crh_regf_wr_en <= 1'b1 ;
    1109            1                    ***0***                         o_crh_regf_addr <= GETSTATUS_MSB_ADDR_REG_FILE ;
    1110            1                    ***0***                         o_crh_regf_rd_en <= 1'b0 ;
    1111                                                               end
    1112                                                               GETCAPS : begin
    1113            1                    ***0***                         o_crh_regf_wr_en <= 1'b1 ;
    1114            1                    ***0***                         o_crh_regf_addr <= CRCAPS1_ADDR_REG_FILE ;
    1115            1                    ***0***                         o_crh_regf_rd_en <= 1'b0 ;
    1116                                                             
    1117                                                               end
    1118                                                               GETMXDS : begin
    1119            1                    ***0***                         o_crh_regf_wr_en <= 1'b1 ;
    1120            1                    ***0***                         o_crh_regf_addr <= CRHDLY1_ADDR_REG_FILE ;
    1121            1                    ***0***                         o_crh_regf_rd_en <= 1'b0 ;
    1122                                                             
    1123                                                               end
    1124                                                             endcase 
    1125                                             
    1126                                             
    1127                                                         if(i_crh_rx_pp_mode_done ) 
    1128                                                           begin
    1129            1                    ***0***                     o_crh_rx_cnt_en         <= 1'b0      ;
    1130            1                    ***0***                     o_crh_cnt_en            <= 1'b0      ;
    1131            1                    ***0***                     o_crh_rx_en             <= 1'b0      ;
    1132            1                    ***0***                     o_crh_tx_en             <= 1'b1      ;
    1133            1                    ***0***                     o_crh_tx_mode           <= 3'b011    ; 
    1134            1                    ***0***                     o_crh_pp_od             <= 1'b1      ;
    1135            1                    ***0***                     o_crh_regf_wr_en <= 1'b0 ;
    1136            1                    ***0***                     o_crh_regf_rd_en <= 1'b1 ;
    1137            1                    ***0***                     state <= PAR_BIT ;
    1138                                                           end 
    1139                                                         else
    1140                                                           begin
    1141            1                    ***0***                     state <= DATA_RETURNED_1 ;
    1142                                                           end 
    1143                                                           
    1144                                                           
    1145                                                         end
    1146                                                           
    1147                                                        DATA_RETURNED_2 : begin 
    1148            1                    ***0***                  o_crh_rx_cnt_en         <= 1'b1      ;
    1149            1                    ***0***                  o_crh_cnt_en            <= 1'b1      ;
    1150                                                             case(int_state)
    1151                                                                GETSTATUS : begin 
    1152            1                    ***0***                          o_crh_regf_rd_en <= 1'b0 ;
    1153            1                    ***0***                          o_crh_regf_wr_en <= 1'b1 ;
    1154            1                    ***0***                          o_crh_regf_addr <= GETSTATUS_LSB_ADDR_REG_FILE;
    1155                                                                end
    1156                                                                GETCAPS : begin 
    1157            1                    ***0***                          o_crh_regf_rd_en <= 1'b0 ;
    1158            1                    ***0***                          o_crh_regf_wr_en <= 1'b1 ;
    1159            1                    ***0***                          o_crh_regf_addr <= CRCAPS2_ADDR_REG_FILE  ;
    1160                                                                end
    1161                                                                GETSTATUS_DEF : begin
    1162            1                    ***0***                          o_crh_regf_rd_en <= 1'b0 ;
    1163            1                    ***0***                          o_crh_regf_wr_en <= 1'b1 ;
    1164            1                    ***0***                          o_crh_regf_addr <= PRECR_ADDR_REG_FILE ; 
    1165                                                                end
    1166                                                             endcase
    1167                                                             
    1168                                                          if(i_crh_rx_pp_mode_done)
    1169                                                            begin
    1170            1                    ***0***                      o_crh_cnt_en            <= 1'b0      ;
    1171            1                    ***0***                      o_crh_rx_cnt_en         <= 1'b0      ;
    1172            1                    ***0***                      o_crh_rx_en             <= 1'b0      ;
    1173            1                    ***0***                      o_crh_tx_en             <= 1'b1      ;
    1174            1                    ***0***                      o_crh_tx_mode           <= 3'b011    ; 
    1175            1                    ***0***                      o_crh_pp_od             <= 1'b1      ;
    1176            1                    ***0***                      o_crh_regf_wr_en        <= 1'b0 ;
    1177            1                    ***0***                      o_crh_regf_rd_en        <= 1'b1 ; 
    1178            1                    ***0***                      state                   <= PAR_BIT ;
    1179                                                            end
    1180                                                            
    1181                                                          else
    1182                                                            begin
    1183            1                    ***0***                      state <= DATA_RETURNED_2 ;
    1184                                                            end
    1185                                                            
    1186                                                            
    1187                                                          end
    1188                                                          DATA_SENT_1 : begin
    1189                                                            
    1190                                                            if(i_crh_tx_pp_mode_done)
    1191                                                              begin
    1192            1                    ***0***                        o_crh_cnt_en            <= 1'b0      ;
    1193            1                    ***0***                        o_crh_rx_en             <= 1'b0      ;
    1194            1                    ***0***                        o_crh_tx_en             <= 1'b1      ;
    1195            1                    ***0***                        o_crh_tx_mode           <= 3'b011    ; 
    1196            1                    ***0***                        o_crh_pp_od             <= 1'b1      ;
    1197            1                    ***0***                        state <= PAR_BIT ;
    1198                                                              end
    1199                                                            else
    1200                                                              begin
    1201            1                    ***0***                        state <= DATA_SENT_1 ;
    1202                                                              end
    1203                                                                    
    1204                                                                    
    1205                                                                    
    1206                                                          end
    1207                                                          HANDOFF : begin 
    1208                                                            
    1209                                                            /*if(preparing_done)
    1210                                                              begin
    1211                                                                o_crh_rx_en             <= 1'b0      ;
    1212                                                                o_crh_tx_en             <= 1'b1      ;
    1213                                                                o_crh_tx_mode           <= 3'b010    ; 
    1214                                                                o_crh_send_stop         <= 1'b1      ;
    1215                                                                o_crh_pp_od             <= 1'b1      ;
    1216                                                                preparing_done          <= 1'b0      ;
    1217                                                              end
    1218                                                            else */if(i_crh_stop_is_sent)
    1219                                                              begin
    1220            1                    ***0***                        o_crh_send_stop         <= 1'b0      ;
    1221            1                    ***0***                        o_crh_scl_idle <= 1'b1 ;
    1222            1                    ***0***                        o_crh_pp_od    <= 1'b0 ;
    1223            1                    ***0***                        stop_is_sent <= 1'b1 ; 
    1224                                                              end 
    1225                                                            else
    1226                                                              begin
    1227            1                    ***0***                        o_crh_send_stop         <= 1'b0      ;
    1228            1                    ***0***                        state <= HANDOFF ;
    1229                                                              end 
    1230                                                              
    1231                                                              
    1232                                                           if(!i_crh_crhpoverlap && stop_is_sent ) //overlap condition
    1233                                                             begin
    1234            1                    ***0***                       o_crh_tx_en             <= 1'b0      ;
    1235            1                    ***0***                       o_crh_tx_mode           <= 3'b111    ; //high-z 
    1236                                                             end
    1237                                                           else if(i_crh_crhpoverlap && stop_is_sent )
    1238                                                             begin
    1239            1                    ***0***                       state                     <= TESTING   ;
    1240                                                               //o_crh_ncr_take_control        <= 1'b1      ; //ncr will take the tx and rx and regfile   
    1241                                                             end
    1242                                                           else
    1243                                                              begin
    1244            1                    ***0***                        state <= HANDOFF ;
    1245                                                              end 
    1246                                                                             
    1247                                                            end
    1248                                                         TESTING : begin 
    1249                                                            
    1250                                                            if(i_crh_newcrlock) //
    1251                                                              begin
    1252            1                    ***0***                        o_crh_scl_idle          <= 1'b0      ;
    1253            1                    ***0***                        o_crh_tx_en             <= 1'b0      ;
    1254            1                    ***0***                        o_crh_rx_en             <= 1'b1      ;
    1255            1                    ***0***                        o_crh_rx_mode           <= 3'b110    ; //T_bit mode in controller rx (check for start)
    1256                                                                if(i_crh_rx_mode_done ) 
    1257                                                                  begin
    1258                                                                    if(i_crh_start_detected) //new controller pulled sda low 
    1259                                                                      begin
    1260            1                    ***0***                                state                   <= IDLE      ;
    1261                                                                        //o_crh_ncr_win           <= 1'b1      ; //ncr asserted the controller role 
    1262            1                    ***0***                                o_crh_scl_idle          <= 1'b0      ;
    1263            1                    ***0***                                o_crh_done              <= 1'b1      ;
    1264                                                                      end
    1265                                                                    else if(!i_crh_start_detected && i_crh_scl_pos_edge) //new controller didn't pull sda low & former controller needs to drive sda low 
    1266                                                                      begin
    1267            1                    ***0***                                o_crh_rx_en             <= 1'b0      ;
    1268            1                    ***0***                                o_crh_tx_en             <= 1'b1      ;
    1269            1                    ***0***                                o_crh_tx_mode           <= 3'b111    ; //sda being pulled low 
    1270            1                    ***0***                                state                   <= MONITOR  ;
    1271                                                                      end
    1272                                                                  end
    1273                                                              end
    1274                                                                      
    1275                                                            end
    1276                                                         MONITOR : begin
    1277                                                           if(i_crh_sda_low)
    1278                                                             begin
    1279                                                               if(!i_crh_timer_cas) //need to be edited to 100us or higher 
    1280                                                                 begin
    1281                                                                   if(i_crh_scl_neg_edge) //new controller pulled the scl low
    1282                                                                     begin
    1283            1                    ***0***                               state                   <= IDLE ;
    1284                                                                       //o_crh_ncr_win           <= 1'b1      ; //ncr asserted the controller role 
    1285            1                    ***0***                               o_crh_done              <= 1'b1      ;
    1286            1                    ***0***                               dont_repeat             <= 1'b1      ;
    1287            1                    ***0***                               o_crh_scl_idle          <= 1'b0      ;
    1288            1                    ***0***                               o_crh_tx_en             <= 1'b0      ;
    1289                                                                     end
    1290                                                                   /* else //new controller didn't pull the scl low
    1291                                                                     begin
    1292                                                                       state                   <= IDLE ;
    1293                                                                       o_crh_ncr_win           <= 1'b0      ; //ncr didn't assert the controller role 
    1294                                                                       o_crh_done              <= 1'b1      ;
    1295                                                                       o_crh_scl_idle          <= 1'b0      ;
    1296                                                                       o_crh_tx_en             <= 1'b0      ;
    1297                                                                     end */
    1298                                                                 end
    1299                                                               else
    1300                                                                 begin
    1301            1                    ***0***                               state                   <= IDLE ;
    1302                                                                       //o_crh_ncr_win           <= 1'b0      ; //ncr didn't assert the controller role 
    1303            1                    ***0***                               o_crh_done              <= 1'b1      ;
    1304            1                    ***0***                               dont_repeat             <= 1'b1      ;
    1305            1                    ***0***                               o_crh_scl_idle          <= 1'b0      ;
    1306            1                    ***0***                               o_crh_tx_en             <= 1'b0      ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        258        24       234     9.30%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_controller_crh --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                    ACK_COUNT[1-0]           0           0        0.00 
                              DATA_SENT_COUNT[5-0]           0           0        0.00 
                                PAR_BIT_COUNT[5-0]           0           0        0.00 
                                   REP_START_COUNT           0           0        0.00 
                                      counter[5-0]           0           0        0.00 
                                       dont_repeat           0           0        0.00 
                                 i_crh_CRCAP2[0-7]           0           0        0.00 
                                 i_crh_CRHDLY[0-7]           0           0        0.00 
                                  i_crh_PRECR[0-7]           0           0        0.00 
                                i_crh_cfg_reg[0-7]           0           0        0.00 
                                         i_crh_clk           1           1      100.00 
                                 i_crh_crhpoverlap           0           0        0.00 
                                          i_crh_en           0           0        0.00 
                         i_crh_getstatus_data[0-7]           0           0        0.00 
                           i_crh_initiated_request           0           0        0.00 
                                   i_crh_newcrlock           0           0        0.00 
                                       i_crh_rst_n           1           1      100.00 
                                i_crh_rx_mode_done           1           1      100.00 
                                 i_crh_rx_nack_ack           1           1      100.00 
                             i_crh_rx_pp_mode_done           0           0        0.00 
                                i_crh_scl_neg_edge           1           1      100.00 
                                i_crh_scl_pos_edge           1           1      100.00 
                                     i_crh_sda_low           0           0        0.00 
                              i_crh_start_detected           0           0        0.00 
                                i_crh_stop_is_sent           0           0        0.00 
                             i_crh_tgts_count[0-7]           0           0        0.00 
                                   i_crh_timer_cas           1           1      100.00 
                                i_crh_tx_mode_done           1           1      100.00 
                             i_crh_tx_pp_mode_done           1           1      100.00 
                                    int_state[3-0]           0           0        0.00 
                                      o_crh_cnt_en           0           0        0.00 
                                        o_crh_done           0           0        0.00 
                                     o_crh_fcnt_en           0           0        0.00 
                                       o_crh_pp_od           1           0       50.00 
                             o_crh_regf_addr[11-6]           0           0        0.00 
                                o_crh_regf_addr[5]           0           1       50.00 
                                o_crh_regf_addr[4]           0           0        0.00 
                              o_crh_regf_addr[3-1]           0           1       50.00 
                                o_crh_regf_addr[0]           0           0        0.00 
                                  o_crh_regf_rd_en           0           1       50.00 
                                  o_crh_regf_wr_en           0           0        0.00 
                                   o_crh_rx_cnt_en           0           0        0.00 
                                       o_crh_rx_en           0           0        0.00 
                                o_crh_rx_mode[2-0]           0           0        0.00 
                                    o_crh_scl_idle           0           0        0.00 
                                   o_crh_send_stop           0           0        0.00 
                           o_crh_timer_entasx[1-0]           0           0        0.00 
                                   o_crh_timer_set           0           0        0.00 
                                       o_crh_tx_en           0           0        0.00 
                                o_crh_tx_mode[2-0]           0           0        0.00 
                                    preparing_done           0           0        0.00 
                                        state[3-0]           0           0        0.00 
                                      stop_is_sent           0           0        0.00 

Total Node Count     =        129 
Toggled Node Count   =          9 
Untoggled Node Count =        120 

Toggle Coverage      =       9.30% (24 of 258 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_i3c_timer
=== Design Unit: work.i3c_timer_fsm
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        40        11        29    27.50%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_i3c_timer

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File i3c_timer_fsm.v
------------------------------------IF Branch------------------------------------
    105                                    38889     Count coming in to IF
    105             1                          1         if (!i_rst_n) 
    121             1                      38888         else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    124                                    38888     Count coming in to CASE
    126             1                      24305               IDLE: 
    155             1                       4860               POST_STOP_CALCULATIONS:
    228             1                       9722               POST_START_CALCULATIONS:
    307             1                          1               default: 
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    133                                    24305     Count coming in to IF
    133             1                       4860                     if (i_stop_pattern)
    139             1                       9722                     else if (i_start_pattern)
                                            9723     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    156                                     4860     Count coming in to IF
    156             1                    ***0***               if (i_stop_pattern) begin
    225             1                       4860       else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    161                                  ***0***     Count coming in to IF
    161             1                    ***0***                   if (count == T_CAS)
    166             1                    ***0***                   else if (count == T_CRHPOverlap)                 // bus is ready for new controller handoff
    171             1                    ***0***                   else if (count == T_BUF_FM)                      // bus has enetered free condition 
    176             1                    ***0***                   else if (count == T_AVAL)                        // bus has enetered available condition 
    181             1                    ***0***                   else if (count == T_BUF_FM_P)                    // bus has enetered free condition 
    186             1                    ***0***                   else if (count == T_IDLE)                        // bus has enetered idle condition
    192             1                    ***0***                   else 
Branch totals: 0 hits of 7 branches = 0.00%

------------------------------------IF Branch------------------------------------
    199                                  ***0***     Count coming in to IF
    199             1                    ***0***                   if (i_i3c_idle_flag) 
    209             1                    ***0***                   else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    204                                  ***0***     Count coming in to IF
    204             1                    ***0***                         if (i_i3c_idle_flag && !idle_flag_pulse) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    214                                  ***0***     Count coming in to IF
    214             1                    ***0***                   if (count == stp_to_idle_trans_time + T_NEWCRLOCK_I2C)
    218             1                    ***0***                   else if (count == stp_to_idle_trans_time + T_AVAL)
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    232                                     9722     Count coming in to IF
    232             1                       9722                   if (!i_chr_set) 
    239             1                    ***0***                   else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------CASE Branch------------------------------------
    242                                  ***0***     Count coming in to CASE
    244             1                    ***0***                         ENTER_ACTIVITY_STATE_0: 
    258             1                    ***0***                         ENTER_ACTIVITY_STATE_1:
    273             1                    ***0***                         ENTER_ACTIVITY_STATE_2:
    288             1                    ***0***                         ENTER_ACTIVITY_STATE_3:
                                         ***0***     All False Count
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    247                                  ***0***     Count coming in to IF
    247             1                    ***0***                             if (count == T_AVAL)
    252             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    261                                  ***0***     Count coming in to IF
    261             1                    ***0***                             if (count == T_ENTAS1)
    266             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    276                                  ***0***     Count coming in to IF
    276             1                    ***0***                             if (count == T_ENTAS2)
    281             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    291                                  ***0***     Count coming in to IF
    291             1                    ***0***                             if (count == T_ENTAS3)
    296             1                    ***0***                             else
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      14         0        14     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_i3c_timer --

  File i3c_timer_fsm.v
----------------Focused Condition View-------------------
Line       161 Item    1  (count == 2)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 2)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 2)_0        -                             
  Row   2:    ***0***  (count == 2)_1        -                             

----------------Focused Condition View-------------------
Line       166 Item    1  (count == 11)
Condition totals: 0 of 1 input term covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 11)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 11)_0       -                             
  Row   2:    ***0***  (count == 11)_1       -                             

----------------Focused Condition View-------------------
Line       171 Item    1  (count == 25)
Condition totals: 0 of 1 input term covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 25)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 25)_0       -                             
  Row   2:    ***0***  (count == 25)_1       -                             

----------------Focused Condition View-------------------
Line       176 Item    1  (count == 50)
Condition totals: 0 of 1 input term covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 50)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 50)_0       -                             
  Row   2:    ***0***  (count == 50)_1       -                             

----------------Focused Condition View-------------------
Line       181 Item    1  (count == 65)
Condition totals: 0 of 1 input term covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 65)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 65)_0       -                             
  Row   2:    ***0***  (count == 65)_1       -                             

----------------Focused Condition View-------------------
Line       186 Item    1  (count == 10000)
Condition totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (count == 10000)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 10000)_0    -                             
  Row   2:    ***0***  (count == 10000)_1    -                             

----------------Focused Condition View-------------------
Line       204 Item    1  (i_i3c_idle_flag && ~idle_flag_pulse)
Condition totals: 0 of 2 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  i_i3c_idle_flag         N  No hits                  Hit '_0' and '_1'
  idle_flag_pulse         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_i3c_idle_flag_0     -                             
  Row   2:    ***0***  i_i3c_idle_flag_1     ~idle_flag_pulse              
  Row   3:    ***0***  idle_flag_pulse_0     i_i3c_idle_flag               
  Row   4:    ***0***  idle_flag_pulse_1     i_i3c_idle_flag               

----------------Focused Condition View-------------------
Line       214 Item    1  (count == (stp_to_idle_trans_time + 15))
Condition totals: 0 of 1 input term covered = 0.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (count == (stp_to_idle_trans_time + 15))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:    ***0***  (count == (stp_to_idle_trans_time + 15))_0  -                             
  Row   2:    ***0***  (count == (stp_to_idle_trans_time + 15))_1  -                             

----------------Focused Condition View-------------------
Line       218 Item    1  (count == (stp_to_idle_trans_time + 50))
Condition totals: 0 of 1 input term covered = 0.00%

                                Input Term   Covered  Reason for no coverage   Hint
                               -----------  --------  -----------------------  --------------
  (count == (stp_to_idle_trans_time + 50))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                  Non-masking condition(s)      
 ---------  ---------  --------------------                        -------------------------     
  Row   1:    ***0***  (count == (stp_to_idle_trans_time + 50))_0  -                             
  Row   2:    ***0***  (count == (stp_to_idle_trans_time + 50))_1  -                             

----------------Focused Condition View-------------------
Line       247 Item    1  (count == 50)
Condition totals: 0 of 1 input term covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 50)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 50)_0       -                             
  Row   2:    ***0***  (count == 50)_1       -                             

----------------Focused Condition View-------------------
Line       261 Item    1  (count == 5000)
Condition totals: 0 of 1 input term covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
  (count == 5000)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 5000)_0     -                             
  Row   2:    ***0***  (count == 5000)_1     -                             

----------------Focused Condition View-------------------
Line       276 Item    1  (count == 100000)
Condition totals: 0 of 1 input term covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (count == 100000)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 100000)_0   -                             
  Row   2:    ***0***  (count == 100000)_1   -                             

----------------Focused Condition View-------------------
Line       291 Item    1  (count == 2500000)
Condition totals: 0 of 1 input term covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (count == 2500000)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 2500000)_0  -                             
  Row   2:    ***0***  (count == 2500000)_1  -                             


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       3         3         0   100.00%
    FSM Transitions                  4         4         0   100.00%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/u_i3c_timer --

FSM_ID: timer_state
    Current State Object : timer_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 126                IDLE                   4
 228POST_START_CALCULATIONS                   7
 155POST_STOP_CALCULATIONS                   5
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE               14583          
    POST_START_CALCULATIONS                9722          
    POST_STOP_CALCULATIONS                4860          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 142                   0                9722          IDLE -> POST_START_CALCULATIONS          
 136                   1                4860          IDLE -> POST_STOP_CALCULATIONS          
 294                   2                9722          POST_START_CALCULATIONS -> IDLE          
 226                   3                4860          POST_STOP_CALCULATIONS -> IDLE          


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   3         3         0   100.00%
        FSM Transitions              4         4         0   100.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      65        34        31    52.30%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_i3c_timer --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File i3c_timer_fsm.v
    34                                               module i3c_timer_fsm (
    35                                                                     input  wire          i_clk                      , // system clock 50MHZ from FPGA
    36                                                                     input  wire          i_rst_n                    , // asynch active low reset 
    37                                                                     input  wire          i_start_pattern            , // start pattern flag input from tx
    38                                                                     input  wire          i_stop_pattern             , // stop pattern flag input from tx
    39                                                                     input  wire          i_chr_set                  , // input from crh of activity state set
    40                                                                     input  wire  [1:0]   i_crh_entasx               , // enter activity states input value
    41                                                                     input  wire          i_i3c_idle_flag            , // stop is done and od 
    42                                                                     output reg           o_timer_cas                , // clock after start flag 
    43                                                                     output reg           o_timer_bus_free_pure      , // pure i3c bus condition >> after tcas 
    44                                                                     output reg           o_timer_bus_free_mix_fm    , // clock for bus free condition when fm
    45                                                                     output reg           o_timer_bus_free_mix_fm_p  , // clock for bus free condition when fm+
    46                                                                     output reg           o_timer_bus_aval           , // clock for available bus condition 
    47                                                                     output reg           o_timer_bus_idle           , // clock for idle bus condition 
    48                                                                     output reg           o_timer_crhpol             , // clock for new controller handoff
    49                                                                     output reg           o_timer_newcrlck_i2c       , // clock for new controller driving SDA when i2c
    50                                                                     output reg           o_timer_newcrlck_i3c      ); // clock for new controller driving SDA when i3c
    51                                                
    52                                               //`include "timings.v"
    53                                               
    54                                               
    55                                               // system clock is 50 MHZ >> period is 20 ns 
    56                                               // T_ENTAS3 is default when no target supports ENTASx CCC
    57                                               
    58                                               // -- Start and Stop timings 
    59                                               localparam T_CAS            = 24'd2       ; // 38.4 ns ~ 40 ns //garanteed
    60                                               //localparam T_CBP            = 24'd1       ; // 19.2 ns ~ 20 ns //garanteed 
    61                                               
    62                                               // -- Bus Condition timings
    63                                               // T_AVAL = T_ENTAS0 = T_NEWCRLOCK_I3C = 1 us
    64                                               localparam T_BUF_FM         = 24'd25      ; // 0.5 us = 500 ns >> 500/20 = 25 cycles 
    65                                               localparam T_BUF_FM_P       = 24'd65      ; // 1.3 us = 1300 ns >> 1300/20 = 65 cycles 
    66                                               localparam T_AVAL           = 24'd50      ; // 1 us = 1000 ns >> 1000/20 = 50 cycles
    67                                               localparam T_IDLE           = 24'd10000   ; // 200 us = 200000 ns >> 200000/20 = 10000
    68                                               
    69                                               // -- Activity States timings
    70                                               localparam T_ENTAS1         = 24'd5000    ; // 100 us = 100000 ns >> 100000/20 = 5000 cycles
    71                                               localparam T_ENTAS2         = 24'd100000  ; // 2 ms = 2000000 ns >> 2000000/20 = 100000 cycles
    72                                               localparam T_ENTAS3         = 24'd2500000 ; // 50 ms = 50000000 ns >> 50000000/20 = 2500000 cycles 
    73                                               
    74                                               // -- Control Role Handoff timings
    75                                               localparam T_CRHPOverlap    = 24'd11      ; // (200 + 12 = 212 ns ~ 200 + 10 = 210 ns) >> 21/2 cycles 
    76                                               localparam T_NEWCRLOCK_I2C  = 24'd15      ; // 300 ns >> 300/20 = 15 cycles
    77                                               
    78                                               
    79                                               
    80                                               
    81                                               
    82                                               localparam ENTER_ACTIVITY_STATE_0  = 2'b00 ;
    83                                               localparam ENTER_ACTIVITY_STATE_1  = 2'b01 ;
    84                                               localparam ENTER_ACTIVITY_STATE_2  = 2'b10 ;
    85                                               localparam ENTER_ACTIVITY_STATE_3  = 2'b11 ;
    86                                               
    87                                               localparam IDLE                    = 3'b100;
    88                                               localparam POST_STOP_CALCULATIONS  = 3'b101;
    89                                               localparam POST_START_CALCULATIONS = 3'b111;
    90                                               
    91                                               
    92                                               // timer_states <<<<
    93                                               
    94                                               // TBD after this block is done >>
    95                                               // wire i_i3c_idle_flag  ;
    96                                               // assign i_i3c_idle_flag = i_dda_idle_flag | i_sdr_idle_flag | i_crh_idle_flag;
    97                                               
    98                                               reg  [2:0]   timer_state            ;
    99                                               reg          idle_flag_pulse        ;
    100                                              reg  [23:0]  count                  ;
    101                                              reg  [23:0]  stp_to_idle_trans_time ;
    102                                              
    103             1                      38889     always @(posedge i_clk or negedge i_rst_n) 
    104                                                begin: i3c_timings_counter
    105                                                  if (!i_rst_n) 
    106                                                    begin  
    107             1                          1             o_timer_cas                <= 1'b0 ;     
    108             1                          1             o_timer_bus_free_pure      <= 1'b0 ; 
    109             1                          1             o_timer_bus_free_mix_fm    <= 1'b0 ; 
    110             1                          1             o_timer_bus_free_mix_fm_p  <= 1'b0 ; 
    111             1                          1             o_timer_bus_aval           <= 1'b0 ; 
    112             1                          1             o_timer_bus_idle           <= 1'b0 ; 
    113             1                          1             o_timer_crhpol             <= 1'b0 ; 
    114             1                          1             o_timer_newcrlck_i2c       <= 1'b0 ;
    115             1                          1             o_timer_newcrlck_i3c       <= 1'b0 ;
    116             1                          1             idle_flag_pulse            <= 1'b0 ;
    117             1                          1             count                      <= 24'b0;
    118             1                          1             stp_to_idle_trans_time     <= 24'b0;
    119                                              
    120                                                    end 
    121                                                  else 
    122                                                    begin
    123                                              
    124                                                      case (timer_state)
    125                                              
    126                                                        IDLE: 
    127                                                          begin 
    128             1                      24305                   o_timer_cas                <= 1'b0 ;    
    129             1                      24305                   idle_flag_pulse            <= 1'b0 ;
    130             1                      24305                   count                      <= 24'b0;
    131             1                      24305                   stp_to_idle_trans_time     <= 24'b0;
    132                                              
    133                                                              if (i_stop_pattern)
    134                                                                begin 
    135             1                       4860                         count       <= count + 1'b1 ;
    136             1                       4860                         timer_state <= POST_STOP_CALCULATIONS;
    137                                                                end
    138                                              
    139                                                              else if (i_start_pattern)
    140                                                                begin
    141             1                       9722                         count                      <= count + 1'b1 ;
    142             1                       9722                         timer_state                <= POST_START_CALCULATIONS;
    143             1                       9722                         o_timer_bus_idle           <= 1'b0 ;
    144             1                       9722                         o_timer_bus_free_pure      <= 1'b0 ; 
    145             1                       9722                         o_timer_bus_free_mix_fm    <= 1'b0 ; 
    146             1                       9722                         o_timer_bus_free_mix_fm_p  <= 1'b0 ; 
    147             1                       9722                         o_timer_bus_aval           <= 1'b0 ;  
    148             1                       9722                         o_timer_crhpol             <= 1'b0 ; 
    149             1                       9722                         o_timer_newcrlck_i2c       <= 1'b0 ;
    150             1                       9722                         o_timer_newcrlck_i3c       <= 1'b0 ;
    151                                                                end 
    152                                              
    153                                                          end
    154                                              
    155                                                        POST_STOP_CALCULATIONS:
    156                                                        if (i_stop_pattern) begin
    157                                                          begin 
    158             1                    ***0***                   count  <= count + 1'b1  ;
    159                                              
    160                                                          //---- bus conditions and controller overlap time  
    161                                                            if (count == T_CAS)
    162                                                              begin: bus_free_pure_condition                 // bus has become in free condition 
    163             1                    ***0***                       o_timer_bus_free_pure     <= 1'b1 ;         //  for any pure I3C device who may concern
    164                                                              end   
    165                                              
    166                                                            else if (count == T_CRHPOverlap)                 // bus is ready for new controller handoff
    167                                                              begin: control_role_handoff_overlap    
    168             1                    ***0***                       o_timer_crhpol            <= 1'b1 ;   
    169                                                              end  
    170                                              
    171                                                            else if (count == T_BUF_FM)                      // bus has enetered free condition 
    172                                                              begin: bus_free_mixed_condition_fmode         //  for fast mode I2C devices who may concern
    173             1                    ***0***                       o_timer_bus_free_mix_fm   <= 1'b1 ;   
    174                                                              end 
    175                                              
    176                                                            else if (count == T_AVAL)                        // bus has enetered available condition 
    177                                                              begin: bus_available_condition                //  IBI is free to take place 
    178             1                    ***0***                       o_timer_bus_aval          <= 1'b1 ;
    179                                                              end
    180                                              
    181                                                            else if (count == T_BUF_FM_P)                    // bus has enetered free condition 
    182                                                              begin: bus_free_mixed_condition_fmode_plus    //  for fast mode plus I2C devices who may concern
    183             1                    ***0***                       o_timer_bus_free_mix_fm_p <= 1'b1 ;
    184                                                              end
    185                                              
    186                                                            else if (count == T_IDLE)                        // bus has enetered idle condition
    187                                                              begin: bus_idle_condition                     //  Hot-Join is free to take place 
    188             1                    ***0***                       o_timer_bus_idle          <= 1'b1 ;
    189             1                    ***0***                       timer_state               <= IDLE ;
    190                                                              end
    191                                              
    192                                                            else 
    193                                                              begin
    194             1                    ***0***                       timer_state  <= POST_STOP_CALCULATIONS ;
    195             1                    ***0***                       count        <= count + 1'b1           ;
    196                                                              end
    197                                              
    198                                                          //---- transition from stop to idle (assumed od) 
    199                                                            if (i_i3c_idle_flag) 
    200                                                              begin: capturing_count_and_wait_till_NEWCRLOCK
    201                                              
    202             1                    ***0***                       idle_flag_pulse <= 1'b1 ;
    203                                              
    204                                                                  if (i_i3c_idle_flag && !idle_flag_pulse) 
    205                                                                    begin:capturing_transition_time
    206             1                    ***0***                             stp_to_idle_trans_time <= count ;
    207                                                                  end  
    208                                                              end
    209                                                            else 
    210                                                              begin 
    211             1                    ***0***                       idle_flag_pulse <= 1'b0 ;
    212                                                              end
    213                                              
    214                                                            if (count == stp_to_idle_trans_time + T_NEWCRLOCK_I2C)
    215                                                              begin: new_ctrl_lock_i2c
    216             1                    ***0***                       o_timer_newcrlck_i2c    <= 1'b1 ;
    217                                                              end                      
    218                                                            else if (count == stp_to_idle_trans_time + T_AVAL)
    219                                                              begin: new_ctrl_lock_i3c
    220             1                    ***0***                       o_timer_newcrlck_i3c    <= 1'b1 ;
    221                                                              end
    222                                              
    223                                                          end
    224                                                end 
    225                                                else 
    226             1                       4860         timer_state <= IDLE;
    227                                              
    228                                                        POST_START_CALCULATIONS:
    229                                                          begin 
    230             1                       9722                   count  <= count + 1'b1  ;
    231                                              
    232                                                            if (!i_chr_set) 
    233                                                              begin: no_activity_states_needed 
    234                                                              
    235             1                       9722                           o_timer_cas  <= 1'b1  ;
    236             1                       9722                           timer_state  <= IDLE  ;         
    237                                              
    238                                                              end 
    239                                                            else 
    240                                                              begin 
    241                                              
    242                                                                case (i_crh_entasx)
    243                                              
    244                                                                  ENTER_ACTIVITY_STATE_0: 
    245                                                                    begin 
    246                                              
    247                                                                      if (count == T_AVAL)
    248                                                                        begin 
    249             1                    ***0***                                 o_timer_cas  <= 1'b1  ;
    250             1                    ***0***                                 timer_state  <= IDLE  ;
    251                                                                        end 
    252                                                                      else
    253                                                                        begin
    254             1                    ***0***                                 o_timer_cas  <= 1'b0  ;
    255             1                    ***0***                                 timer_state  <= POST_START_CALCULATIONS ;
    256                                                                        end        
    257                                                                    end 
    258                                                                  ENTER_ACTIVITY_STATE_1:
    259                                                                    begin 
    260                                              
    261                                                                      if (count == T_ENTAS1)
    262                                                                        begin 
    263             1                    ***0***                                 o_timer_cas  <= 1'b1  ;
    264             1                    ***0***                                 timer_state  <= IDLE  ;
    265                                                                        end 
    266                                                                      else
    267                                                                        begin
    268             1                    ***0***                                 o_timer_cas  <= 1'b0  ;
    269             1                    ***0***                                 timer_state  <= POST_START_CALCULATIONS ;
    270                                                                        end    
    271                                              
    272                                                                    end 
    273                                                                  ENTER_ACTIVITY_STATE_2:
    274                                                                    begin 
    275                                              
    276                                                                      if (count == T_ENTAS2)
    277                                                                        begin 
    278             1                    ***0***                                 o_timer_cas  <= 1'b1  ;
    279             1                    ***0***                                 timer_state  <= IDLE  ;
    280                                                                        end 
    281                                                                      else
    282                                                                        begin
    283             1                    ***0***                                 o_timer_cas  <= 1'b0  ;
    284             1                    ***0***                                 timer_state  <= POST_START_CALCULATIONS ;
    285                                                                        end        
    286                                              
    287                                                                    end 
    288                                                                  ENTER_ACTIVITY_STATE_3:
    289                                                                    begin 
    290                                              
    291                                                                      if (count == T_ENTAS3)
    292                                                                        begin 
    293             1                    ***0***                                 o_timer_cas  <= 1'b1  ;
    294             1                    ***0***                                 timer_state  <= IDLE  ;
    295                                                                        end 
    296                                                                      else
    297                                                                        begin
    298             1                    ***0***                                 o_timer_cas  <= 1'b0  ;
    299             1                    ***0***                                 timer_state  <= POST_START_CALCULATIONS ;
    300                                                                        end        
    301                                              
    302                                                                    end 
    303                                                                endcase
    304                                                              end 
    305                                                          end
    306                                              
    307                                                        default: 
    308             1                          1                      timer_state  <= IDLE ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        138        20       118    14.49%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_i3c_timer --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       count[23-3]           0           0        0.00 
                                        count[2-0]           1           1      100.00 
                                         i_chr_set           0           0        0.00 
                                             i_clk           1           1      100.00 
                                 i_crh_entasx[0-1]           0           0        0.00 
                                   i_i3c_idle_flag           0           0        0.00 
                                           i_rst_n           1           1      100.00 
                                   i_start_pattern           1           1      100.00 
                                    i_stop_pattern           1           1      100.00 
                                   idle_flag_pulse           0           0        0.00 
                                  o_timer_bus_aval           0           0        0.00 
                           o_timer_bus_free_mix_fm           0           0        0.00 
                         o_timer_bus_free_mix_fm_p           0           0        0.00 
                             o_timer_bus_free_pure           0           0        0.00 
                                  o_timer_bus_idle           0           0        0.00 
                                       o_timer_cas           1           1      100.00 
                                    o_timer_crhpol           0           0        0.00 
                              o_timer_newcrlck_i2c           0           0        0.00 
                              o_timer_newcrlck_i3c           0           0        0.00 
                      stp_to_idle_trans_time[23-0]           0           0        0.00 
                                    timer_state[2]           0           0        0.00 
                                  timer_state[1-0]           1           1      100.00 

Total Node Count     =         69 
Toggled Node Count   =         10 
Untoggled Node Count =         59 

Toggle Coverage      =      14.49% (20 of 138 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_controller_tx
=== Design Unit: work.controller_tx
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        40        25        15    62.50%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_controller_tx

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_TX.v
------------------------------------IF Branch------------------------------------
    85                                   1354769     Count coming in to IF
    85              1                          1             if(~i_rst_n)
    98              1                     315963             else if (i_ser_en)
    290             1                    1038805             else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    100                                   315963     Count coming in to CASE
    101             1                      29165                   START_BIT   : begin
    126             1                     262494                   SERIALIZING : begin
    164             1                      19444                   PARITY      : begin
    194             1                       4860                   STOP        : begin
    217             1                    ***0***                   CTRL_ACK    : begin
    249             1                    ***0***                     CTRL_NACK  : begin
    261             1                    ***0***                   REPEATED_START : begin
    280             1                    ***0***                   Hold_Zero    : begin
                                         ***0***     All False Count
Branch totals: 4 hits of 9 branches = 44.44%

------------------------------------IF Branch------------------------------------
    108                                    29165     Count coming in to IF
    108             1                      24304                                   if (i_ser_scl)
                                            4861     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    113                                    24304     Count coming in to IF
    113             1                       4861                                       if (i_timer_cas)
    118             1                      19443                                       else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    130                                   262494     Count coming in to IF
    130             1                      19444                                   if(i_ser_count_done)
    134             1                     243050                                   else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    140                                   262494     Count coming in to IF
    140             1                       9722                                     if (i_ser_scl_pos_edge && !i_ser_count)
    144             1                     252772                                     else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    149                                   262494     Count coming in to IF
    149             1                     106942                                   if (!i_ser_scl) 
                                          155552     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    154                                   262494     Count coming in to IF
    154             1                      34027                                    if(i_ser_count == 3'b1)
    158             1                     228467                                       else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    174                                    19444     Count coming in to IF
    174             1                       9722                                   if (!i_ser_scl)
    179             1                       9722                                     else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    188                                    19444     Count coming in to IF
    188             1                       4861                                   if (i_ser_scl_pos_edge)
                                           14583     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    202                                     4860     Count coming in to IF
    202             1                    ***0***                                   if (i_ser_scl)
                                            4860     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    211                                     4860     Count coming in to IF
    211             1                    ***0***                                   if(i_timer_bus_free_pure)
                                            4860     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    223                                  ***0***     Count coming in to IF
    223             1                    ***0***                                 if (i_ser_scl_pos_edge)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    255                                  ***0***     Count coming in to IF
    255             1                    ***0***                                 if (i_ser_scl_pos_edge)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    265                                  ***0***     Count coming in to IF
    265             1                    ***0***                                   if (!i_ser_scl)
    269             1                    ***0***                                   else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    274                                  ***0***     Count coming in to IF
    274             1                    ***0***                                   if (i_ser_scl_pos_edge)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       1         1         0   100.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_controller_tx --

  File controller_TX.v
----------------Focused Condition View-------------------
Line       154 Item    1  (i_ser_count == 1)
Condition totals: 1 of 1 input term covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  (i_ser_count == 1)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (i_ser_count == 1)_0  -                             
  Row   2:          1  (i_ser_count == 1)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      70        47        23    67.14%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_controller_tx --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_TX.v
    33                                               module controller_tx (
    34                                                   input   wire           i_clk               ,
    35                                                   input   wire           i_rst_n             ,
    36                                                   input   wire           i_ser_scl           ,
    37                                                   input   wire           i_ser_scl_neg_edge  ,
    38                                                   input   wire           i_ser_scl_pos_edge  ,
    39                                                   input   wire           i_ser_en            , // to enable the serializer as long as we're in TX
    40                                                   input   wire           i_ser_valid         , // to load a new frame "must be a pulse" //UNUSED
    41                                                   input   wire  [2:0]    i_ser_count         ,
    42                                                   input   wire           i_ser_count_done    ,
    43                                                   input   wire  [2:0]    i_ser_mode          ,
    44                                                   input   wire  [7:0]    i_ser_regf_data     ,
    45                                                   input   wire           i_timer_cas         , // input from timer block for start condition
    46                                               
    47                                                   input   wire           i_timer_bus_free_pure, //202444444444
    48                                                   output  reg            o_ser_sda_low       ,//added by mostafa 
    49                                                   output  reg            o_stop_pattern      , // output to i3c_timer block
    50                                                   output  reg            o_start_pattern     , // output to i3c_timer block
    51                                                   output  reg            o_ser_s_data        ,
    52                                                   output  reg            o_ser_mode_done     ,
    53                                                   output  reg            o_ser_pp_mode_done  , //early mode_done for push_pull short periods
    54                                                   output  reg            o_tx_daa_done       ,
    55                                                   output  reg            o_ser_to_parity_transition
    56                                               
    57                                                   );
    58                                               
    59                                               
    60                                                 //-- i_ser_mode parameters --------------------------------------------------
    61                                               
    62                                               
    63                                                   localparam START_BIT      = 3'b000 ;
    64                                                   localparam SERIALIZING    = 3'b001 ;
    65                                                   localparam PARITY         = 3'b011 ;
    66                                                   localparam STOP           = 3'b010 ;
    67                                                   localparam CTRL_ACK       = 3'b111 ;  //  To be changed from 3'b100 to 3'b111 in HJ and I2C
    68                                                   localparam Hold_Zero      = 3'b100 ;
    69                                                   localparam CTRL_NACK      = 3'b101 ;
    70                                                   localparam REPEATED_START = 3'b110 ;
    71                                                   //localparam EXIT_PATTERN   = 3'b ;
    72                                               
    73                                               
    74                                               
    75                                                 //-- internal wires declaration ---------------------------------------------
    76                                               reg last_bit_flag ;
    77                                               reg parity_counter;
    78                                               
    79                                                 //-- transmitter ------------------------------------------------
    80                                               
    81              1                    1354769         always @(posedge i_clk or negedge i_rst_n)
    82                                                     begin : proc_serializer
    83                                               
    84                                               
    85                                                       if(~i_rst_n)
    86                                                         begin
    87              1                          1                 o_ser_mode_done    <= 1'b0 ;
    88              1                          1                 o_ser_pp_mode_done <= 1'b0 ;
    89              1                          1                 o_ser_s_data  <=  1'b1 ;
    90              1                          1                 o_ser_to_parity_transition <= 1'b0 ;
    91              1                          1                 o_ser_sda_low <= 1'b0 ;
    92              1                          1                 last_bit_flag <= 1'b0 ;
    93                                               
    94              1                          1                 o_tx_daa_done <= 1'b0;
    95                                                          // temp            <=  ser_p_mux_out;
    96                                                         end
    97                                               
    98                                                       else if (i_ser_en)
    99                                                         begin
    100                                                          case (i_ser_mode)
    101                                                            START_BIT   : begin
    102             1                      29165                                   o_start_pattern <= 1'b0 ; 
    103             1                      29165                                   o_stop_pattern  <= 1'b0 ;
    104             1                      29165                                   o_ser_mode_done <= 1'b0 ;
    105             1                      29165                                   o_ser_to_parity_transition <= 1'b0;
    106             1                      29165                                   o_ser_s_data    <= 1'b1 ; // need to check if it will make problems to anyone
    107             1                      29165                                   o_ser_sda_low <= 1'b0 ;
    108                                                                            if (i_ser_scl)
    109                                                                              begin
    110             1                      24304                                       o_ser_s_data    <= 1'b0 ;
    111             1                      24304                                       o_start_pattern <= 1'b1 ;
    112                                              
    113                                                                                if (i_timer_cas)
    114                                                                                  begin
    115             1                       4861                                           o_start_pattern <= 1'b0 ;
    116             1                       4861                                           o_ser_mode_done <= 1'b1 ;
    117                                                                                  end
    118                                                                                else
    119                                                                                  begin
    120             1                      19443                                           o_start_pattern <= 1'b1 ;
    121             1                      19443                                           o_ser_mode_done <= 1'b0 ;
    122                                                                                  end
    123                                              
    124                                                                              end
    125                                                                          end
    126                                                            SERIALIZING : begin
    127             1                     262494                                 o_ser_mode_done <= 1'b0;
    128             1                     262494                                 o_ser_to_parity_transition <= 1'b1;
    129             1                     262494                                 o_ser_sda_low <= 1'b0 ;
    130                                                                            if(i_ser_count_done)
    131                                                                              begin
    132             1                      19444                                         o_ser_mode_done <= 1'b1;
    133                                                                              end
    134                                                                            else
    135                                                                              begin
    136             1                     243050                                         o_ser_mode_done <= 1'b0;
    137                                                                              end
    138                                              
    139                                                                              //for push-pull
    140                                                                              if (i_ser_scl_pos_edge && !i_ser_count)
    141                                                                                begin
    142             1                       9722                                         o_ser_pp_mode_done <= 1'b1 ;
    143                                                                                end
    144                                                                              else
    145                                                                                begin
    146             1                     252772                                         o_ser_pp_mode_done <= 1'b0 ;
    147                                                                                end
    148                                              
    149                                                                            if (!i_ser_scl) 
    150                                                                              begin
    151             1                     106942                                       o_ser_s_data    <= i_ser_regf_data[i_ser_count] ;
    152                                                                              end
    153                                              
    154                                                                             if(i_ser_count == 3'b1)
    155                                                                                  begin
    156             1                      34027                                             o_tx_daa_done <= 1'b1;
    157                                                                                  end
    158                                                                                else
    159                                                                                  begin
    160             1                     228467                                             o_tx_daa_done <= 1'b0;
    161                                                                                  end
    162                                                                        end
    163                                              
    164                                                            PARITY      : begin
    165             1                      19444                                   o_ser_mode_done    <= 1'b0 ;
    166             1                      19444                                   o_ser_pp_mode_done <= 1'b0 ;
    167             1                      19444                                   o_ser_to_parity_transition <= 1'b0;
    168             1                      19444                                   o_ser_sda_low <= 1'b0 ;
    169                                                                           /*if (i_ser_count_done)
    170                                                                              o_ser_mode_done <= 1'b1;
    171                                                                            else
    172                                                                              o_ser_mode_done <= 1'b0; */
    173                                                                               //unused-wrong implementation
    174                                                                            if (!i_ser_scl)
    175                                                                              begin
    176             1                       9722                                       o_ser_s_data    <= ~^i_ser_regf_data ;
    177                                                                                //o_ser_mode_done    <= 1'b1 ;
    178                                                                              end
    179                                                                              else
    180             1                       9722                                       o_ser_mode_done    <= 1'b1 ;
    181                                              
    182                                                                          //  if(i_ser_scl) begin
    183                                                                          //    o_ser_mode_done    <= 1'b1 ;
    184                                                                           // end
    185                                              
    186                                              
    187                                                                            //for push-pull
    188                                                                            if (i_ser_scl_pos_edge)
    189                                                                              begin
    190             1                       4861                                       o_ser_pp_mode_done <= 1'b1 ;
    191                                                                              end
    192                                                                          end
    193                                              
    194                                                            STOP        : begin
    195             1                       4860                                   o_ser_s_data    <= 1'b0 ;
    196             1                       4860                                   o_ser_mode_done <= 1'b0;
    197             1                       4860                                   o_ser_to_parity_transition <= 1'b0;
    198             1                       4860                                   o_ser_sda_low <= 1'b0 ;
    199                                              
    200             1                       4860                                   o_stop_pattern  <= 1'b1 ;
    201                                              
    202                                                                            if (i_ser_scl)
    203                                                                              begin
    204                                                                                //o_stop_pattern  <= 1'b1 ;
    205             1                    ***0***                                       o_ser_s_data    <= 1'b1 ;
    206                                                                                //o_ser_mode_done <= 1'b1 ;
    207                                                                              end 
    208                                                                            
    209                                              
    210                                              
    211                                                                            if(i_timer_bus_free_pure)
    212                                                                            begin
    213             1                    ***0***                                       o_ser_mode_done <= 1'b1 ;
    214             1                    ***0***                                       o_stop_pattern  <= 1'b0 ;
    215                                                                            end
    216                                                                          end
    217                                                            CTRL_ACK    : begin
    218             1                    ***0***                                   o_start_pattern <= 1'b0 ;
    219             1                    ***0***                                   o_ser_s_data <= 1'b0 ;
    220             1                    ***0***                                   o_ser_sda_low <= 1'b1 ; //added by mostafa
    221             1                    ***0***                                   o_ser_mode_done <= 1'b0;
    222             1                    ***0***                                   o_ser_to_parity_transition <= 1'b0;
    223                                                                          if (i_ser_scl_pos_edge)
    224                                                                              begin
    225                                                                                //o_ser_s_data    <= 1'b1 ;
    226             1                    ***0***                                       o_ser_mode_done <= 1'b1 ;
    227             1                    ***0***                                       o_ser_sda_low <= 1'b0 ; //added by mostafa
    228             1                    ***0***                                       o_start_pattern <= 1'b1 ;
    229                                                                              end
    230                                                                          
    231                                                                          
    232                                                                          
    233                                                                              
    234                                              
    235                                                                              
    236                                                                              
    237                                                                              
    238                                                                              
    239                                                                            /*if (i_ser_scl)
    240                                                                              begin
    241                                                                                o_start_pattern <= 1'b1 ;
    242                                                                              end */
    243                                                                              
    244                                                                              
    245                                                                              
    246                                                                          end
    247                                              
    248                                              
    249                                                              CTRL_NACK  : begin
    250             1                    ***0***                                   o_ser_sda_low <= 1'b0 ;
    251             1                    ***0***                                   o_ser_s_data <= 1'b1 ;
    252             1                    ***0***                                   o_ser_mode_done <= 1'b0;
    253             1                    ***0***                                   o_ser_to_parity_transition <= 1'b0;
    254                                              
    255                                                                          if (i_ser_scl_pos_edge)
    256                                                                              begin
    257             1                    ***0***                                       o_ser_mode_done <= 1'b1 ;
    258                                                                              end
    259                                                                         end
    260                                              
    261                                                            REPEATED_START : begin
    262             1                    ***0***                                   o_ser_sda_low <= 1'b0 ;
    263             1                    ***0***                                   o_ser_mode_done <= 1'b0 ;
    264             1                    ***0***                                   o_ser_to_parity_transition <= 1'b0;
    265                                                                            if (!i_ser_scl)
    266                                                                              begin
    267             1                    ***0***                                       o_ser_s_data    <= 1'b1 ;
    268                                                                              end
    269                                                                            else
    270                                                                              begin
    271             1                    ***0***                                       o_ser_s_data    <= 1'b0 ;
    272                                                                              end
    273                                              
    274                                                                            if (i_ser_scl_pos_edge)
    275                                                                              begin
    276             1                    ***0***                                       o_ser_mode_done <= 1'b1 ;
    277                                                                              end
    278                                                                          end
    279                                              
    280                                                            Hold_Zero    : begin
    281             1                    ***0***                                   o_ser_s_data    <= 1'b0 ;
    282                                                                           end
    283                                                                           
    284                                                                           
    285                                                           /* EXIT_PATTERN : begin
    286                                                                           end */
    287                                                            
    288                                                          endcase
    289                                                        end
    290                                                      else
    291                                                          begin
    292             1                    1038805                     o_ser_sda_low <= 1'b0 ;
    293             1                    1038805                     o_ser_s_data       <= 1'b1 ;
    294             1                    1038805                     o_ser_mode_done    <= 1'b0 ;
    295             1                    1038805                     o_ser_pp_mode_done <= 1'b0 ;
    296             1                    1038805                     last_bit_flag      <= 1'b0 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         68        56        12    82.35%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_controller_tx --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                             i_clk           1           1      100.00 
                                           i_rst_n           1           1      100.00 
                                  i_ser_count[0-2]           1           1      100.00 
                                  i_ser_count_done           1           1      100.00 
                                          i_ser_en           1           1      100.00 
                                   i_ser_mode[0-1]           1           1      100.00 
                                     i_ser_mode[2]           0           0        0.00 
                              i_ser_regf_data[0-7]           1           1      100.00 
                                         i_ser_scl           1           1      100.00 
                                i_ser_scl_neg_edge           1           1      100.00 
                                i_ser_scl_pos_edge           1           1      100.00 
                                       i_ser_valid           0           0        0.00 
                             i_timer_bus_free_pure           0           0        0.00 
                                       i_timer_cas           1           1      100.00 
                                     last_bit_flag           0           0        0.00 
                                   o_ser_mode_done           1           1      100.00 
                                o_ser_pp_mode_done           1           1      100.00 
                                      o_ser_s_data           1           1      100.00 
                                     o_ser_sda_low           0           0        0.00 
                        o_ser_to_parity_transition           1           1      100.00 
                                   o_start_pattern           1           1      100.00 
                                    o_stop_pattern           1           1      100.00 
                                     o_tx_daa_done           1           1      100.00 
                                    parity_counter           0           0        0.00 

Total Node Count     =         34 
Toggled Node Count   =         28 
Untoggled Node Count =          6 

Toggle Coverage      =      82.35% (56 of 68 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_bits_counter_sdr
=== Design Unit: work.bits_counter_sdr
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        13         8         5    61.53%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_bits_counter_sdr

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File bits_counter_sdr.v
------------------------------------IF Branch------------------------------------
    55                                   1724396     Count coming in to IF
    55              1                          1             if (!i_rst_n)
    61              1                     335409             else if (i_cnt_en)
    96              1                    1388986             else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    63                                    335409     Count coming in to IF
    63              1                    ***0***                     if(i_bits_cnt_regf_rx_tx && i_ctrl_rx_cnt_en) // RX condition 
    79              1                     335409                     else                    // TX condition 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    65                                   ***0***     Count coming in to IF
    65              1                    ***0***                             if (i_scl_neg_edge) 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    67                                   ***0***     Count coming in to IF
    67              1                    ***0***                                     if (!cnt_bit_count )
    72              1                    ***0***                                     else    
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    81                                    335409     Count coming in to IF
    81              1                      82637                             if (i_scl_pos_edge) 
                                          252772     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    83                                     82637     Count coming in to IF
    83              1                       9722                                     if (!cnt_bit_count )
    88              1                      72915                                     else    
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_bits_counter_sdr --

  File bits_counter_sdr.v
----------------Focused Condition View-------------------
Line       63 Item    1  (i_bits_cnt_regf_rx_tx && i_ctrl_rx_cnt_en)
Condition totals: 0 of 2 input terms covered = 0.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_bits_cnt_regf_rx_tx         N  '_1' not hit             Hit '_1'
       i_ctrl_rx_cnt_en         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_bits_cnt_regf_rx_tx_0  -                             
  Row   2:    ***0***  i_bits_cnt_regf_rx_tx_1  i_ctrl_rx_cnt_en              
  Row   3:    ***0***  i_ctrl_rx_cnt_en_0       i_bits_cnt_regf_rx_tx         
  Row   4:    ***0***  i_ctrl_rx_cnt_en_1       i_bits_cnt_regf_rx_tx         


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      13         9         4    69.23%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_bits_counter_sdr --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File bits_counter_sdr.v
    33                                               module bits_counter_sdr(
    34                                                   input  wire       i_cnt_en              ,  
    35                                                   input  wire       i_ctrl_rx_cnt_en      , // controller is in DATA IN state 
    36                                                   input  wire       i_rst_n               ,
    37                                                   input  wire       i_bits_cnt_clk        ,
    38                                                   input  wire       i_sdr_ctrl_pp_od      , //UNUSED
    39                                                   input  wire       i_scl_pos_edge        ,  
    40                                                   input  wire       i_scl_neg_edge        ,  
    41                                                   input  wire       i_bits_cnt_regf_rx_tx ,  // 0 for TX , 1 for RX
    42                                                   output reg        o_cnt_done            ,
    43                                                   output wire [2:0] o_cnt_bit_count
    44                                                   );
    45                                               
    46                                               // INTERNAL SIGNALS 
    47                                                   reg [2:0] cnt_bit_count ;
    48                                                   
    49                                               // OUTPUT 
    50                                                   assign o_cnt_bit_count = cnt_bit_count;
    51                                                   
    52                                               // COUNTER CORE
    53              1                    1724396     always @ (posedge i_bits_cnt_clk or negedge i_rst_n)
    54                                                   begin : counter
    55                                                       if (!i_rst_n)
    56                                                           begin 
    57              1                          1                     cnt_bit_count <= 3'b111 ;
    58              1                          1                     o_cnt_done    <= 1'b0   ;    
    59                                                           end
    60                                                           
    61                                                       else if (i_cnt_en)
    62                                                           begin
    63                                                               if(i_bits_cnt_regf_rx_tx && i_ctrl_rx_cnt_en) // RX condition 
    64                                                                   begin
    65                                                                       if (i_scl_neg_edge) 
    66                                                                           begin 
    67                                                                               if (!cnt_bit_count )
    68                                                                                    begin
    69              1                    ***0***                                             cnt_bit_count <= 3'b111 ;
    70              1                    ***0***                                             o_cnt_done    <= 1'b1   ;    
    71                                                                                    end
    72                                                                               else    
    73                                                                                    begin               
    74              1                    ***0***                                             cnt_bit_count <= cnt_bit_count - 1'd1 ;
    75              1                    ***0***                                             o_cnt_done    <= 1'b0                 ;
    76                                                                                    end
    77                                                                           end
    78                                                                   end
    79                                                               else                    // TX condition 
    80                                                                   begin
    81                                                                       if (i_scl_pos_edge) 
    82                                                                           begin 
    83                                                                               if (!cnt_bit_count )
    84                                                                                    begin
    85              1                       9722                                             cnt_bit_count <= 3'b111 ;
    86              1                       9722                                             o_cnt_done    <= 1'b1   ;    
    87                                                                                    end
    88                                                                               else    
    89                                                                                    begin               
    90              1                      72915                                             cnt_bit_count <= cnt_bit_count - 1'd1 ;
    91              1                      72915                                             o_cnt_done    <= 1'b0                 ;
    92                                                                                    end
    93                                                                           end
    94                                                                   end        
    95                                                           end
    96                                                       else
    97                                                             begin
    98              1                    1388986                       cnt_bit_count <= 3'b111 ;
    99              1                    1388986                       o_cnt_done    <= 1'b0   ;    

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         30        26         4    86.66%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_bits_counter_sdr --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                cnt_bit_count[2-0]           1           1      100.00 
                                    i_bits_cnt_clk           1           1      100.00 
                             i_bits_cnt_regf_rx_tx           0           0        0.00 
                                          i_cnt_en           1           1      100.00 
                                  i_ctrl_rx_cnt_en           0           0        0.00 
                                           i_rst_n           1           1      100.00 
                                    i_scl_neg_edge           1           1      100.00 
                                    i_scl_pos_edge           1           1      100.00 
                                  i_sdr_ctrl_pp_od           1           1      100.00 
                              o_cnt_bit_count[0-2]           1           1      100.00 
                                        o_cnt_done           1           1      100.00 

Total Node Count     =         15 
Toggled Node Count   =         13 
Untoggled Node Count =          2 

Toggle Coverage      =      86.66% (26 of 30 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_controller_rx
=== Design Unit: work.controller_rx
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        35         9        26    25.71%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_controller_rx

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_RX.v
------------------------------------IF Branch------------------------------------
    79                                   1752950     Count coming in to IF
    79              1                          1         if(!i_rst_n)
    90              1                    1597391         else if (i_sdr_rx_en)
    219             1                     155558         else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    94                                   1597391     Count coming in to CASE
    95              1                    1471005               ACK           : begin // NEED TO BE REDONE
    108             1                    ***0***               DESERIALIZING : begin
    136             1                    ***0***                         T_BIT : begin
    165             1                    ***0***                   CHECK_FOR_START : begin                                
    200             1                     126386                 ARBITRATION    : begin           // 2024 note : should be treated as idle state 
                                         ***0***     All False Count
Branch totals: 2 hits of 6 branches = 33.33%

------------------------------------IF Branch------------------------------------
    101                                  1471005     Count coming in to IF
    101             1                     704071                                 if (i_sdr_rx_scl)
                                          766934     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    114                                  ***0***     Count coming in to IF
    114             1                    ***0***                                 if (i_sdr_rx_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    123                                  ***0***     Count coming in to IF
    123             1                    ***0***                                 if (!i_sdr_rx_des_count && i_sdr_rx_scl_pos_edge )
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    129                                  ***0***     Count coming in to IF
    129             1                    ***0***                                 if (!i_sdr_rx_des_count )
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    142                                  ***0***     Count coming in to IF
    142             1                    ***0***                                 if (i_sdr_rx_scl)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    144                                  ***0***     Count coming in to IF
    144             1                    ***0***                                     if (!i_sdr_rx_sda)
    149             1                    ***0***                                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    151                                  ***0***     Count coming in to IF
    151             1                    ***0***                                         if (i_fcnt_last_frame)
    156             1                    ***0***                                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    168                                  ***0***     Count coming in to IF
    168             1                    ***0***                                 if (!i_timer_cas)
    194             1                    ***0***     								               else //added by mostafa
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    170                                  ***0***     Count coming in to IF
    170             1                    ***0***                                     if(!i_sdr_rx_scl) //added by mostafa
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    172                                  ***0***     Count coming in to IF
    172             1                    ***0***                                         if (!i_sdr_rx_sda)
    177             1                    ***0***                                         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    181                                  ***0***     Count coming in to IF
    181             1                    ***0***                                             if (i_fcnt_last_frame)
    186             1                    ***0***                                             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    202                                   126386     Count coming in to IF
    202             1                      77776                                     if ( i_sdr_rx_scl && !sdr_rx_arbitration_lost)
    207             1                    ***0***                                      else if ( (i_sdr_rx_des_count=='b0) && sdr_rx_arbitration_lost)
    212             1                    ***0***                                     else if (i_sdr_rx_scl)
                                           48610     All False Count
Branch totals: 2 hits of 4 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       4         1         3    25.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_controller_rx --

  File controller_RX.v
----------------Focused Condition View-------------------
Line       202 Item    1  (i_sdr_rx_scl && ~sdr_rx_arbitration_lost)
Condition totals: 1 of 2 input terms covered = 50.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
             i_sdr_rx_scl         Y
  sdr_rx_arbitration_lost         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  i_sdr_rx_scl_0             -                             
  Row   2:          1  i_sdr_rx_scl_1             ~sdr_rx_arbitration_lost      
  Row   3:          1  sdr_rx_arbitration_lost_0  i_sdr_rx_scl                  
  Row   4:    ***0***  sdr_rx_arbitration_lost_1  i_sdr_rx_scl                  

----------------Focused Condition View-------------------
Line       207 Item    1  ((i_sdr_rx_des_count == 0) && sdr_rx_arbitration_lost)
Condition totals: 0 of 2 input terms covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_sdr_rx_des_count == 0)         N  '_1' not hit             Hit '_1'
    sdr_rx_arbitration_lost         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:          1  (i_sdr_rx_des_count == 0)_0  -                             
  Row   2:    ***0***  (i_sdr_rx_des_count == 0)_1  sdr_rx_arbitration_lost       
  Row   3:          1  sdr_rx_arbitration_lost_0    (i_sdr_rx_des_count == 0)     
  Row   4:    ***0***  sdr_rx_arbitration_lost_1    (i_sdr_rx_des_count == 0)     


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         0         2     0.00%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/u_controller_rx --

  File controller_RX.v
-----------Focused Expression View (Bimodal)------------
Line       204 Item    1  (i_sdr_rx_tx_ser_data ^ i_sdr_rx_sda)
Expression totals: 0 of 2 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage                  Hint
             -----------  --------  --------------------------------------  --------------
    i_sdr_rx_tx_ser_data         N  Both rows hit for same output ->0      Hit either row for output ->1
            i_sdr_rx_sda         N  Both rows hit for same output ->0      Hit either row for output ->1

    Rows:   Hits(->0)   Hits(->1)  FEC Target                Non-masking condition(s)           

---------  ----------  ----------  --------------------      -------------------------          
 Row   1:           1           0  i_sdr_rx_tx_ser_data_0    -                                  
 Row   2:           1           0  i_sdr_rx_tx_ser_data_1    -                                  
 Row   3:           1           0  i_sdr_rx_sda_0            -                                  
 Row   4:           1           0  i_sdr_rx_sda_1            -                                  


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      48        21        27    43.75%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_controller_rx --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File controller_RX.v
    36                                               module controller_rx(
    37                                                   input   wire           i_clk                  , // system clk
    38                                                   input   wire           i_rst_n                , // system reset
    39                                                   input   wire           i_sdr_rx_scl           , // scl bus input from scl_generation
    40                                                   input   wire           i_sdr_rx_en            , // rx block enable from sdr_controller
    41                                                   input   wire           i_sdr_rx_sda           , // sda bus input from sda_handling
    42                                                   input   wire  [2:0]    i_sdr_rx_des_count     , // bit count input from bits_counter
    43                                                   input   wire  [2:0]    i_sdr_rx_mode          , // rx mode input 0 >> deser, 1 >> Tbit
    44                                                   input   wire           i_fcnt_last_frame      , // last frame flag from frame_counter
    45                                               	  input   wire           i_timer_cas            , //added by mostafa
    46                                               	  input   wire           i_sdr_rx_scl_pos_edge  , //added by mostafa
    47                                                   //output  reg            o_sdr_rx_valid       , // flag for ready valid parallel data
    48                                                   input   wire           i_sdr_rx_tx_ser_data     ,
    49                                                	  output  reg            o_crh_start_detected    ,
    50                                                   output  reg            o_sdr_rx_nack_ack      , // Ack output for the sdr_controller
    51                                                   output  reg            o_sdr_rx_rd_abort      , // T_bit 0 >> abort reading , T_bit 1 >> check i_fcnt_last_frame
    52                                                   output  reg   [7:0]    o_sdr_rx_regf_data_wr  , // receiver parallel data output to reg file
    53                                                   output  reg            o_sdr_rx_mode_done     , // rx block done flag
    54                                                   output  reg            o_sdr_rx_pp_mode_done,
    55                                                   //output  reg            last_bit_flag  ,
    56                                                   output  wire           o_sdr_rx_arbitration_lost
    57                                                   );
    58                                               
    59                                               
    60                                               
    61                                               reg [7:0] arbitrated_adress ;
    62                                               
    63                                               reg sdr_rx_arbitration_lost ;
    64                                               assign o_sdr_rx_arbitration_lost = sdr_rx_arbitration_lost ;
    65                                               
    66                                               //-- i_ser_mode parameters --------------------------------------------------
    67                                               
    68                                               localparam ACK             = 3'b000 ; // 0
    69                                               localparam DESERIALIZING   = 3'b001 ; // 1
    70                                               localparam T_BIT           = 3'b011 ; // 3
    71                                               localparam ARBITRATION     = 3'b010 ; // 2
    72                                               localparam CHECK_FOR_START = 3'b110 ; // 6
    73                                               
    74                                               
    75                                               //-- reciever --------------------------------------------------
    76                                               
    77              1                    1752950     always @(posedge i_clk or negedge i_rst_n)
    78                                                 begin : proc_deserializer
    79                                                   if(!i_rst_n)
    80                                                     begin
    81              1                          1             o_sdr_rx_nack_ack            <=  1'b1 ;
    82              1                          1             o_sdr_rx_rd_abort            <=  1'b0 ;
    83              1                          1             o_sdr_rx_mode_done           <=  1'b0 ;
    84              1                          1             o_sdr_rx_pp_mode_done <= 1'b0 ;
    85              1                          1             o_sdr_rx_regf_data_wr        <=  8'b0 ;
    86              1                          1             sdr_rx_arbitration_lost   <=  1'b0 ;
    87              1                          1             arbitrated_adress <='b0;
    88                                               
    89                                                     end
    90                                                   else if (i_sdr_rx_en)
    91                                                     begin
    92              1                    1597391             o_sdr_rx_mode_done <=  1'b0 ;
    93              1                    1597391             o_sdr_rx_pp_mode_done <= 1'b0 ;
    94                                                       case (i_sdr_rx_mode)
    95                                                         ACK           : begin // NEED TO BE REDONE
    96                                               
    97              1                    1471005                                 o_sdr_rx_mode_done <=  1'b0 ;
    98              1                    1471005                                 o_sdr_rx_pp_mode_done <= 1'b0 ;
    99              1                    1471005                                 sdr_rx_arbitration_lost <=1'b0;
    100                                                                          // missing 
    101                                                                          if (i_sdr_rx_scl)
    102                                                                            begin
    103             1                     704071                                     o_sdr_rx_nack_ack  <= i_sdr_rx_sda ; // 1sda >> nack , 0sda >> ack
    104             1                     704071                                     o_sdr_rx_mode_done <= 1'b1         ;
    105                                                                            end
    106                                                                        end
    107                                              
    108                                                        DESERIALIZING : begin
    109             1                    ***0***                                 o_sdr_rx_mode_done <=  1'b0 ;
    110             1                    ***0***                                 o_sdr_rx_pp_mode_done <= 1'b0 ;
    111                                                                          //last_bit_flag      <=  1'b0 ;
    112             1                    ***0***                                 sdr_rx_arbitration_lost <=1'b0;
    113                                              
    114                                                                          if (i_sdr_rx_scl)
    115                                                                            begin
    116             1                    ***0***                                     o_sdr_rx_regf_data_wr[i_sdr_rx_des_count] <= i_sdr_rx_sda ;
    117                                                                            end
    118                                                                          /*if(&i_sdr_rx_des_count && )
    119                                                                            begin
    120                                                                              last_bit_flag <= 1'b1 ;
    121                                                                            end */
    122                                              
    123                                                                          if (!i_sdr_rx_des_count && i_sdr_rx_scl_pos_edge )
    124                                                                            begin
    125                                                                              //last_bit_flag <= 1'b1 ;
    126             1                    ***0***                                     o_sdr_rx_pp_mode_done <=  1'b1 ;
    127                                                                            end
    128                                              
    129                                                                          if (!i_sdr_rx_des_count )
    130                                                                            begin
    131             1                    ***0***                                     o_sdr_rx_mode_done <=  1'b1 ;
    132                                                                            end
    133                                              
    134                                                                        end
    135                                              
    136                                                                  T_BIT : begin
    137                                              
    138             1                    ***0***                                 o_sdr_rx_mode_done <=  1'b0 ;
    139             1                    ***0***                                 o_sdr_rx_pp_mode_done <= 1'b0 ;
    140             1                    ***0***                                 sdr_rx_arbitration_lost <=1'b0;
    141                                              
    142                                                                          if (i_sdr_rx_scl)
    143                                                                            begin
    144                                                                              if (!i_sdr_rx_sda)
    145                                                                                begin
    146             1                    ***0***                                         o_sdr_rx_rd_abort  <=  1'b1 ;
    147             1                    ***0***                                         o_sdr_rx_mode_done <=  1'b1 ;
    148                                                                                end
    149                                                                              else
    150                                                                                begin
    151                                                                                  if (i_fcnt_last_frame)
    152                                                                                    begin
    153             1                    ***0***                                             o_sdr_rx_rd_abort  <=  1'b1 ;
    154             1                    ***0***                                             o_sdr_rx_mode_done <=  1'b1 ;
    155                                                                                    end
    156                                                                                  else
    157                                                                                    begin
    158             1                    ***0***                                             o_sdr_rx_rd_abort  <=  1'b0 ;
    159             1                    ***0***                                             o_sdr_rx_mode_done <=  1'b1 ;
    160                                                                                    end
    161                                                                                end
    162                                                                            end
    163                                                                        end
    164                                              
    165                                                            CHECK_FOR_START : begin                                
    166             1                    ***0***                                 o_sdr_rx_mode_done <=  1'b0 ;
    167             1                    ***0***                                 o_sdr_rx_pp_mode_done <= 1'b0 ;
    168                                                                          if (!i_timer_cas)
    169                                                                            begin
    170                                                                              if(!i_sdr_rx_scl) //added by mostafa
    171                                              								                  begin
    172                                                                                  if (!i_sdr_rx_sda)
    173                                                                                    begin
    174             1                    ***0***      								                        o_crh_start_detected <= 1'b1 ; //added by mostafa
    175             1                    ***0***                                             o_sdr_rx_mode_done <=  1'b1 ;
    176                                                                                    end
    177                                                                                  else
    178                                                                                    begin
    179             1                    ***0***     									                      o_crh_start_detected <= 1'b0 ; //added by mostafa
    180             1                    ***0***     									                      o_sdr_rx_mode_done <=  1'b1 ;
    181                                                                                      if (i_fcnt_last_frame)
    182                                                                                        begin
    183             1                    ***0***                                                 o_sdr_rx_rd_abort  <=  1'b1 ;
    184                                                                                          //o_sdr_rx_mode_done <=  1'b1 ;
    185                                                                                        end
    186                                                                                      else
    187                                                                                        begin
    188             1                    ***0***                                                 o_sdr_rx_rd_abort  <=  1'b0 ;
    189                                                                                          //o_sdr_rx_mode_done <=  1'b1 ;
    190                                                                                        end
    191                                                                                    end
    192                                                                                end
    193                                                                              end
    194                                              								               else //added by mostafa
    195                                              								                 begin
    196             1                    ***0***     								                   o_sdr_rx_mode_done <=  1'b0 ;
    197                                              								                 end
    198                                                                        end
    199                                              
    200                                                          ARBITRATION    : begin           // 2024 note : should be treated as idle state 
    201                                              
    202                                                                              if ( i_sdr_rx_scl && !sdr_rx_arbitration_lost)
    203                                                                                 begin
    204             1                      77776                                           sdr_rx_arbitration_lost <= i_sdr_rx_tx_ser_data^i_sdr_rx_sda;  // 1 if they arent the same
    205             1                      77776                                           arbitrated_adress [i_sdr_rx_des_count-1] <= i_sdr_rx_sda ;
    206                                                                                  end
    207                                                                               else if ( (i_sdr_rx_des_count=='b0) && sdr_rx_arbitration_lost)
    208                                                                                  begin
    209             1                    ***0***                                           o_sdr_rx_regf_data_wr <= arbitrated_adress ;
    210             1                    ***0***                                           o_sdr_rx_mode_done <=  1'b1 ;
    211                                                                                 end
    212                                                                              else if (i_sdr_rx_scl)
    213                                                                                 begin
    214             1                    ***0***                                           arbitrated_adress [i_sdr_rx_des_count-1] <= i_sdr_rx_sda ;
    215                                                                                  end
    216                                                                           end
    217                                                      endcase
    218                                                    end
    219                                                  else
    220                                                    begin
    221             1                     155558             o_sdr_rx_rd_abort <= 1'b0 ;
    222             1                     155558             sdr_rx_arbitration_lost <= 1'b0 ;
    223             1                     155558             o_sdr_rx_mode_done <=  1'b0 ;
    224             1                     155558             o_sdr_rx_pp_mode_done <=  1'b0 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         76        38        38    50.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_controller_rx --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                              arbitrated_adress[7]           0           0        0.00 
                              arbitrated_adress[6]           1           1      100.00 
                            arbitrated_adress[5-1]           0           1       50.00 
                              arbitrated_adress[0]           1           1      100.00 
                                             i_clk           1           1      100.00 
                                 i_fcnt_last_frame           1           0       50.00 
                                           i_rst_n           1           1      100.00 
                           i_sdr_rx_des_count[0-2]           1           1      100.00 
                                       i_sdr_rx_en           1           1      100.00 
                                  i_sdr_rx_mode[0]           0           0        0.00 
                                  i_sdr_rx_mode[1]           1           1      100.00 
                                  i_sdr_rx_mode[2]           0           0        0.00 
                                      i_sdr_rx_scl           1           1      100.00 
                             i_sdr_rx_scl_pos_edge           1           1      100.00 
                                      i_sdr_rx_sda           1           1      100.00 
                              i_sdr_rx_tx_ser_data           1           1      100.00 
                                       i_timer_cas           1           1      100.00 
                              o_crh_start_detected           0           0        0.00 
                         o_sdr_rx_arbitration_lost           0           0        0.00 
                                o_sdr_rx_mode_done           1           1      100.00 
                                 o_sdr_rx_nack_ack           1           1      100.00 
                             o_sdr_rx_pp_mode_done           0           0        0.00 
                                 o_sdr_rx_rd_abort           0           0        0.00 
                        o_sdr_rx_regf_data_wr[7-0]           0           0        0.00 
                           sdr_rx_arbitration_lost           0           0        0.00 

Total Node Count     =         38 
Toggled Node Count   =         16 
Untoggled Node Count =         22 

Toggle Coverage      =      50.00% (38 of 76 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_frame_counter_sdr
=== Design Unit: work.frame_counter_sdr
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         3         2         1    66.66%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_frame_counter_sdr

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File frame_counter_sdr.v
------------------------------------IF Branch------------------------------------
    37                                         2     Count coming in to IF
    37              1                          1       if(~i_fcnt_rst_n)
    42              1                    ***0***       else if(i_fcnt_en && ~count_done)
    47              1                          1       else 
Branch totals: 2 hits of 3 branches = 66.66%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_frame_counter_sdr --

  File frame_counter_sdr.v
----------------Focused Condition View-------------------
Line       42 Item    1  (i_fcnt_en && ~count_done)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   i_fcnt_en         N  No hits                  Hit '_0' and '_1'
  count_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_fcnt_en_0           -                             
  Row   2:    ***0***  i_fcnt_en_1           ~count_done                   
  Row   3:    ***0***  count_done_0          i_fcnt_en                     
  Row   4:    ***0***  count_done_1          i_fcnt_en                     


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         0         1     0.00%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/u_frame_counter_sdr --

  File frame_counter_sdr.v
----------------Focused Expression View-----------------
Line       34 Item    1  (count == i_fcnt_no_frms)
Expression totals: 0 of 1 input term covered = 0.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (count == i_fcnt_no_frms)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:          1  (count == i_fcnt_no_frms)_0  -                             
  Row   2:    ***0***  (count == i_fcnt_no_frms)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       8         6         2    75.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_frame_counter_sdr --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File frame_counter_sdr.v
    22                                               module frame_counter_sdr(
    23                                                   input  wire  [7:0] i_fcnt_no_frms ,
    24                                                   input  wire  i_fcnt_clk           ,
    25                                                   input  wire  i_fcnt_rst_n         ,
    26                                                   input  wire  i_fcnt_en            ,
    27                                                   output reg   o_fcnt_last_frame
    28                                                   );
    29                                               	
    30              1                          1     reg [3:0] count = 4'b0 ;
    31                                               wire      count_done   ;
    32                                               
    33                                               // for tx : assign count_done = (count == i_fcnt_no_frms - 1'b1)? 1'b1 : 1'b0 ; we need to create mux at integration
    34              1                          2     assign count_done = (count == i_fcnt_no_frms)? 1'b1 : 1'b0 ;
    35              1                          2     always@(posedge i_fcnt_en or negedge i_fcnt_rst_n)
    36                                               begin 
    37                                                 if(~i_fcnt_rst_n)
    38                                                   begin 
    39              1                          1           o_fcnt_last_frame <= 1'b0 ;
    40              1                          1           count <= 4'b0 ;
    41                                                   end
    42                                                 else if(i_fcnt_en && ~count_done)
    43                                                   begin
    44              1                    ***0***           o_fcnt_last_frame <= 1'b0 ;
    45              1                    ***0***           count <= count + 4'b1 ;
    46                                                   end
    47                                                 else 
    48                                                   begin
    49              1                          1           o_fcnt_last_frame <= 1'b1 ; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         34         5        29    14.70%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_frame_counter_sdr --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                        count[3-0]           0           0        0.00 
                                        count_done           0           0        0.00 
                                        i_fcnt_clk           1           1      100.00 
                                         i_fcnt_en           0           0        0.00 
                               i_fcnt_no_frms[0-7]           0           0        0.00 
                                      i_fcnt_rst_n           1           1      100.00 
                                 o_fcnt_last_frame           1           0       50.00 

Total Node Count     =         17 
Toggled Node Count   =          2 
Untoggled Node Count =         15 

Toggle Coverage      =      14.70% (5 of 34 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_sda_handling/u_open_drain_behav_model/u_tri_state_buf_n
=== Design Unit: work.tri_state_buf_n
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_open_drain_behav_model/u_tri_state_buf_n

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf_n.v
------------------------------------IF Branch------------------------------------
    8                                       9725     Count coming in to IF
    8               1                       4862     	assign o_tri_state = (~i_tri_state_en)? i_tri_state_data:1'bz;
    8               2                       4863     	assign o_tri_state = (~i_tri_state_en)? i_tri_state_data:1'bz;
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         0         1     0.00%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_open_drain_behav_model/u_tri_state_buf_n --

  File tri_state_buf_n.v
----------------Focused Expression View-----------------
Line       8 Item    1  (~i_tri_state_en? i_tri_state_data: 1'bZ)
Expression totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  i_tri_state_data         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   3:          1  i_tri_state_data_0    ~i_tri_state_en               
  Row   4:    ***0***  i_tri_state_data_1    ~i_tri_state_en               


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_open_drain_behav_model/u_tri_state_buf_n --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf_n.v
    3                                                module tri_state_buf_n (
    4                                                	input  wire  i_tri_state_data ,
    5                                                	input  wire  i_tri_state_en   ,
    6                                                	output wire  o_tri_state       );
    7                                                
    8               1                       9727     	assign o_tri_state = (~i_tri_state_en)? i_tri_state_data:1'bz;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          6         4         2    66.66%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_open_drain_behav_model/u_tri_state_buf_n --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                  i_tri_state_data           0           0        0.00 
                                    i_tri_state_en           1           1      100.00 
                                       o_tri_state           1           1      100.00 

Total Node Count     =          3 
Toggled Node Count   =          2 
Untoggled Node Count =          1 

Toggle Coverage      =      66.66% (4 of 6 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_sda_handling/u_open_drain_behav_model
=== Design Unit: work.open_drain_behav_model
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          6         6         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_open_drain_behav_model --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     i_behav_model           1           1      100.00 
                                        o_behav_od           1           1      100.00 
                                               sda           1           1      100.00 

Total Node Count     =          3 
Toggled Node Count   =          3 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (6 of 6 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model/u_push_tri_state_buf
=== Design Unit: work.tri_state_buf
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model/u_push_tri_state_buf

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf.v
------------------------------------IF Branch------------------------------------
    8                                     348912     Count coming in to IF
    8               1                     174456     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;
    8               2                     174456     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         0         1     0.00%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model/u_push_tri_state_buf --

  File tri_state_buf.v
----------------Focused Expression View-----------------
Line       8 Item    1  (i_tri_state_en? i_tri_state_data: 1'bZ)
Expression totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  i_tri_state_data         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   3:          1  i_tri_state_data_0    i_tri_state_en                
  Row   4:    ***0***  i_tri_state_data_1    i_tri_state_en                


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model/u_push_tri_state_buf --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf.v
    3                                                module tri_state_buf (
    4                                                	input  wire  i_tri_state_data ,
    5                                                	input  wire  i_tri_state_en   ,
    6                                                	output wire  o_tri_state       );
    7                                                
    8               1                     348915     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          6         4         2    66.66%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model/u_push_tri_state_buf --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                  i_tri_state_data           0           0        0.00 
                                    i_tri_state_en           1           1      100.00 
                                       o_tri_state           1           1      100.00 

Total Node Count     =          3 
Toggled Node Count   =          2 
Untoggled Node Count =          1 

Toggle Coverage      =      66.66% (4 of 6 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model/u_pull_tri_state_buf
=== Design Unit: work.tri_state_buf
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model/u_pull_tri_state_buf

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf.v
------------------------------------IF Branch------------------------------------
    8                                     396241     Count coming in to IF
    8               1                     198120     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;
    8               2                     198121     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         0         1     0.00%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model/u_pull_tri_state_buf --

  File tri_state_buf.v
----------------Focused Expression View-----------------
Line       8 Item    1  (i_tri_state_en? i_tri_state_data: 1'bZ)
Expression totals: 0 of 1 input term covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  i_tri_state_data         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   3:    ***0***  i_tri_state_data_0    i_tri_state_en                
  Row   4:    ***0***  i_tri_state_data_1    i_tri_state_en                


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model/u_pull_tri_state_buf --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File tri_state_buf.v
    3                                                module tri_state_buf (
    4                                                	input  wire  i_tri_state_data ,
    5                                                	input  wire  i_tri_state_en   ,
    6                                                	output wire  o_tri_state       );
    7                                                
    8               1                     396243     	assign o_tri_state = (i_tri_state_en)?i_tri_state_data:1'bz;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          6         4         2    66.66%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model/u_pull_tri_state_buf --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                  i_tri_state_data           0           0        0.00 
                                    i_tri_state_en           1           1      100.00 
                                       o_tri_state           1           1      100.00 

Total Node Count     =          3 
Toggled Node Count   =          2 
Untoggled Node Count =          1 

Toggle Coverage      =      66.66% (4 of 6 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model
=== Design Unit: work.push_pull_behav_model
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File push_pull_behav_model.v
------------------------------------IF Branch------------------------------------
    14                                    425404     Count coming in to IF
    14              1                     372576     	assign tri_state_push_in = (i_push_pull_en) ? (!i_sda_push_pull) : 0 ;
    14              2                      52828     	assign tri_state_push_in = (i_push_pull_en) ? (!i_sda_push_pull) : 0 ;
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File push_pull_behav_model.v
    3                                                module push_pull_behav_model(
    4                                                	input   wire   i_sda_push_pull   , // 1 push :: 0 pull
    5                                                	input   wire   i_push_pull_en    ,
    6                                                	inout   wire   sda               ,
    7                                                	output  wire   o_sda_push_pull  );
    8                                                
    9                                                	wire tri_state_pull_in ;
    10                                               	wire tri_state_push_in ;
    11                                               
    12                                               	assign o_sda_push_pull   = sda;
    13                                               	assign tri_state_pull_in = (i_push_pull_en) ? (i_sda_push_pull)  : 0 ;
    14              1                     425407     	assign tri_state_push_in = (i_push_pull_en) ? (!i_sda_push_pull) : 0 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         12        12         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling/u_push_pull_behav_model --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                    i_push_pull_en           1           1      100.00 
                                   i_sda_push_pull           1           1      100.00 
                                   o_sda_push_pull           1           1      100.00 
                                               sda           1           1      100.00 
                                 tri_state_pull_in           1           1      100.00 
                                 tri_state_push_in           1           1      100.00 

Total Node Count     =          6 
Toggled Node Count   =          6 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (12 of 12 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_sda_handling
=== Design Unit: work.sda_handling
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         4         0   100.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sda_handling.v
------------------------------------IF Branch------------------------------------
    53                                    388357     Count coming in to IF
    53              1                     368913     assign o_handling_s_data = (i_handling_sel_pp_od )?  push_pull_out : open_drain_out ;
    53              2                      19444     assign o_handling_s_data = (i_handling_sel_pp_od )?  push_pull_out : open_drain_out ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    60                                    358638     Count coming in to IF
    60              1                     348912         if (i_handling_sel_pp_od)
    65              1                       9726         else
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      5         5         0   100.00%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling --

  File sda_handling.v
----------------Focused Expression View-----------------
Line       49 Item    1  (i_handling_pp_en && i_handling_sel_pp_od)
Expression totals: 2 of 2 input terms covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
      i_handling_pp_en         Y
  i_handling_sel_pp_od         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  i_handling_pp_en_0      -                             
  Row   2:          1  i_handling_pp_en_1      i_handling_sel_pp_od          
  Row   3:          1  i_handling_sel_pp_od_0  i_handling_pp_en              
  Row   4:          1  i_handling_sel_pp_od_1  i_handling_pp_en              

-----------Focused Expression View (Bimodal)------------
Line       53 Item    1  (i_handling_sel_pp_od? push_pull_out: open_drain_out)
Expression totals: 3 of 3 input terms covered = 100.00%

              Input Term   Covered  Reason for no coverage                  Hint
             -----------  --------  --------------------------------------  --------------
    i_handling_sel_pp_od         Y
           push_pull_out         Y
          open_drain_out         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target                Non-masking condition(s)           

---------  ----------  ----------  --------------------      -------------------------          
 Row   1:           1           1  i_handling_sel_pp_od_0    -                                  
 Row   2:           0           1  i_handling_sel_pp_od_1    -                                  
 Row   3:           1           0  push_pull_out_0           i_handling_sel_pp_od               
 Row   4:           0           1  push_pull_out_1           i_handling_sel_pp_od               
 Row   5:           1           0  open_drain_out_0          ~i_handling_sel_pp_od              
 Row   6:           0           1  open_drain_out_1          ~i_handling_sel_pp_od              


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       7         7         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File sda_handling.v
    33                                               module sda_handling(
    34                                                 input   wire   i_handling_s_data     ,
    35                                               	input   wire   i_handling_sel_pp_od  , 	//push-pull_open-drain: takes 1 when push-pull and 0 when open-drain
    36                                               	input   wire   i_handling_pp_en      ,
    37                                               	inout   wire   sda	                 ,
    38                                               	output  wire   o_handling_s_data    );
    39                                               
    40                                               
    41                                               //-- internal wires declaration -----------------------------------------------
    42                                               
    43                                               	wire          open_drain_out ;
    44                                               	wire          push_pull_out  ;
    45                                               	reg           open_drain_in  ;
    46                                               	reg           push_pull_in   ;
    47                                               	wire          push_pull_enable ;
    48                                               
    49              1                      86219     assign push_pull_enable = i_handling_pp_en && i_handling_sel_pp_od ; 
    50                                               
    51                                               //-- SDA from PP/OD to Rx MUX ------------------------------------------------
    52                                               
    53              1                     388360     assign o_handling_s_data = (i_handling_sel_pp_od )?  push_pull_out : open_drain_out ;
    54                                               
    55                                               
    56                                               //-- SDA from Tx to PP/OD DEMUX -----------------------------------------------
    57                                               
    58              1                     358638     always@(*)
    59                                                 begin : demux_combo_logic
    60                                                   if (i_handling_sel_pp_od)
    61                                                     begin
    62              1                     348912             open_drain_in = 1'b1 ;  //--------- because it is active low
    63              1                     348912             push_pull_in  = i_handling_s_data ;
    64                                                     end
    65                                                   else
    66                                                     begin
    67              1                       9726             open_drain_in = i_handling_s_data ;
    68              1                       9726             push_pull_in  = 1'b0 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20        20         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_sda_handling --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                  i_handling_pp_en           1           1      100.00 
                                 i_handling_s_data           1           1      100.00 
                              i_handling_sel_pp_od           1           1      100.00 
                                 o_handling_s_data           1           1      100.00 
                                     open_drain_in           1           1      100.00 
                                    open_drain_out           1           1      100.00 
                                  push_pull_enable           1           1      100.00 
                                      push_pull_in           1           1      100.00 
                                     push_pull_out           1           1      100.00 
                                               sda           1           1      100.00 

Total Node Count     =         10 
Toggled Node Count   =         10 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (20 of 20 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_scl_generation
=== Design Unit: work.scl_generation
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        20        18         2    90.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_scl_generation

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File scl_generation.v
------------------------------------IF Branch------------------------------------
    64                                   1863866     Count coming in to IF
    64              1                          1         if (!i_sdr_ctrl_rst_n)
    74              1                    1863865         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    76                                   1863865     Count coming in to CASE
    77              1                    1004235               LOW: begin
    98              1                     859629               HIGH:
                                               1     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    79                                   1004235     Count coming in to IF
    79              1                     149039                     if (i_scl_gen_stall) begin
    82              1                     855196                     else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    83                                    855196     Count coming in to IF
    83              1                     432383                         if (switch)
    89              1                     422813                         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    101                                   859629     Count coming in to IF
    101             1                      10000                     if (i_scl_gen_stall) begin // badr 
    106             1                     422383                     else if ((switch && !i_sdr_ctrl_scl_idle) || (i_timer_cas) )
    112             1                     427246                     else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    127                                  1873597     Count coming in to IF
    127             1                          1         if (!i_sdr_ctrl_rst_n)
    134             1                    1844418         else if (i_sdr_scl_gen_pp_od)
    149             1                      29178         else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    136                                  1844418     Count coming in to IF
    136             1                     922210               if (count >= 7'd2)
    141             1                     922208               else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    151                                    29178     Count coming in to IF
    151             1                    ***0***               if (count == 7'd62)
    156             1                    ***0***               else if (count == 7'd125)
    161             1                      29178               else
Branch totals: 1 hit of 3 branches = 33.33%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         3         3    50.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_scl_generation --

  File scl_generation.v
----------------Focused Condition View-------------------
Line       106 Item    1  ((switch && ~i_sdr_ctrl_scl_idle) || i_timer_cas)
Condition totals: 2 of 3 input terms covered = 66.66%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
               switch         Y
  i_sdr_ctrl_scl_idle         N  '_1' not hit             Hit '_1'
          i_timer_cas         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  switch_0               ~i_timer_cas                  
  Row   2:          1  switch_1               ~i_sdr_ctrl_scl_idle          
  Row   3:          1  i_sdr_ctrl_scl_idle_0  switch                        
  Row   4:    ***0***  i_sdr_ctrl_scl_idle_1  (~i_timer_cas && switch)      
  Row   5:          1  i_timer_cas_0          ~(switch && ~i_sdr_ctrl_scl_idle)
  Row   6:          1  i_timer_cas_1          ~(switch && ~i_sdr_ctrl_scl_idle)

----------------Focused Condition View-------------------
Line       136 Item    1  (count >= 2)
Condition totals: 1 of 1 input term covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count >= 2)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count >= 2)_0        -                             
  Row   2:          1  (count >= 2)_1        -                             

----------------Focused Condition View-------------------
Line       151 Item    1  (count == 62)
Condition totals: 0 of 1 input term covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 62)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 62)_0       -                             
  Row   2:    ***0***  (count == 62)_1       -                             

----------------Focused Condition View-------------------
Line       156 Item    1  (count == 125)
Condition totals: 0 of 1 input term covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (count == 125)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 125)_0      -                             
  Row   2:    ***0***  (count == 125)_1      -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      36        32         4    88.88%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_scl_generation --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File scl_generation.v
    34                                               module scl_generation(
    35                                                   input  wire       i_sdr_ctrl_clk          ,   // 50 MHz clock
    36                                                   input  wire       i_sdr_ctrl_rst_n        ,
    37                                                   input  wire       i_sdr_scl_gen_pp_od     ,   // 1: Push-Pull      // 0: for Open-Drain
    38                                                   input  wire       i_scl_gen_stall         ,  // 1 for stalling
    39                                                   input  wire       i_sdr_ctrl_scl_idle     ,
    40                                                   input  wire       i_timer_cas             ,
    41                                                   output reg        o_scl_pos_edge          ,
    42                                                   output reg        o_scl_neg_edge          ,
    43                                                   output reg        o_scl                  );
    44                                               
    45                                               
    46                                               //-- states encoding in gray ---------------------------------------------
    47                                               
    48                                               localparam LOW  = 1'b0 ;
    49                                               localparam HIGH = 1'b1 ;
    50                                               
    51                                               
    52                                               //-- internal wires declaration -------------------------------------------
    53                                               
    54                                               reg          state   ;  //assigned at fsm
    55                                               reg  [6:0]   count   ;  //assigned at counter
    56                                               reg          switch  ;  //assigned at counter
    57                                               
    58                                               
    59                                               //-- scl generation fsm ---------------------------------------------------
    60                                               
    61              1                    1863866     always @(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n)
    62                                                 begin: scl_generation_fsm
    63                                               
    64                                                   if (!i_sdr_ctrl_rst_n)
    65                                                     begin
    66                                                       //-- state
    67              1                          1               state   <=  HIGH   ;
    68                                                       //-- outputs
    69              1                          1               o_scl   <=  1'b1  ;
    70              1                          1               o_scl_pos_edge <= 1'b0;
    71              1                          1               o_scl_neg_edge <= 1'b0;
    72                                                     end
    73                                               
    74                                                   else
    75                                                     begin
    76                                                       case (state)
    77                                                         LOW: begin
    78              1                    1004235                     o_scl_neg_edge <= 1'b0;
    79                                                               if (i_scl_gen_stall) begin
    80              1                     149039                      state <=   LOW  ;
    81                                                               end
    82                                                               else begin
    83                                                                   if (switch)
    84                                                                     begin
    85              1                     432383                             o_scl <=   1'b1 ;
    86              1                     432383                             state <=   HIGH ;
    87              1                     432383                             o_scl_pos_edge <= 1'b1;
    88                                                                     end
    89                                                                   else
    90                                                                     begin
    91              1                     422813                             o_scl <=   1'b0 ;
    92              1                     422813                             state <=   LOW  ;
    93              1                     422813                             o_scl_pos_edge <= 1'b0;
    94                                                                     end
    95                                                               end
    96                                                           end
    97                                               
    98                                                         HIGH:
    99                                                           begin
    100             1                     859629                 o_scl_pos_edge <= 1'b0;
    101                                                              if (i_scl_gen_stall) begin // badr 
    102             1                      10000                       o_scl <=   1'b0 ;
    103             1                      10000                       state <=   LOW  ;
    104             1                      10000                       o_scl_neg_edge <= 1'b1;
    105                                                              end
    106                                                              else if ((switch && !i_sdr_ctrl_scl_idle) || (i_timer_cas) )
    107                                                                begin
    108             1                     422383                         o_scl <=   1'b0 ;
    109             1                     422383                         state <=   LOW  ;
    110             1                     422383                         o_scl_neg_edge <= 1'b1;
    111                                                                end
    112                                                              else
    113                                                                begin
    114             1                     427246                         o_scl <=   1'b1 ;
    115             1                     427246                         state <=   HIGH ;
    116             1                     427246                         o_scl_neg_edge <= 1'b0;
    117                                                                end
    118                                                          end
    119                                                      endcase
    120                                                    end
    121                                                end
    122                                              //-- switch generation counter --------------------------------------------
    123                                              
    124             1                    1873597     always @(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n)
    125                                                begin: scl_generation_counter
    126                                              
    127                                                  if (!i_sdr_ctrl_rst_n)
    128                                                    begin
    129             1                          1               count  <= 7'b1 ;
    130             1                          1               switch <= 1'b0 ;
    131                                                    end
    132                                              
    133                                                // 50 MHz/4 = 12.5 MHz for Push-Pull
    134                                                  else if (i_sdr_scl_gen_pp_od)
    135                                                    begin
    136                                                        if (count >= 7'd2)
    137                                                          begin
    138             1                     922210                   count  <= 7'b1 ;
    139             1                     922210                   switch <= 1'b1 ;
    140                                                          end
    141                                                        else
    142                                                          begin
    143             1                     922208                   count  <= count + 1'b1 ;
    144             1                     922208                   switch <= 1'b0 ;
    145                                                          end
    146                                                    end
    147                                              
    148                                                // 50 MHz/125 = 400 KHz for Open-Drain
    149                                                  else
    150                                                    begin
    151                                                        if (count == 7'd62)
    152                                                          begin
    153             1                    ***0***                   switch <= 1'b1;
    154             1                    ***0***                   count <= count + 1'b1;
    155                                                          end
    156                                                        else if (count == 7'd125)
    157                                                          begin
    158             1                    ***0***                   count  <= 7'b1 ;
    159             1                    ***0***                   switch <= 1'b1;
    160                                                          end
    161                                                        else
    162                                                          begin
    163             1                      29178                   count <= count + 1'b1;
    164             1                      29178                   switch <= 1'b0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         36        32         4    88.88%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_scl_generation --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                        count[6-5]           0           0        0.00 
                                        count[4-0]           1           1      100.00 
                                   i_scl_gen_stall           1           1      100.00 
                                    i_sdr_ctrl_clk           1           1      100.00 
                                  i_sdr_ctrl_rst_n           1           1      100.00 
                               i_sdr_ctrl_scl_idle           1           1      100.00 
                               i_sdr_scl_gen_pp_od           1           1      100.00 
                                       i_timer_cas           1           1      100.00 
                                             o_scl           1           1      100.00 
                                    o_scl_neg_edge           1           1      100.00 
                                    o_scl_pos_edge           1           1      100.00 
                                             state           1           1      100.00 
                                            switch           1           1      100.00 

Total Node Count     =         18 
Toggled Node Count   =         16 
Untoggled Node Count =          2 

Toggle Coverage      =      88.88% (32 of 36 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_scl_generation_not_stalled
=== Design Unit: work.scl_generation
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        20        16         4    80.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_scl_generation_not_stalled

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File scl_generation.v
------------------------------------IF Branch------------------------------------
    64                                   1863866     Count coming in to IF
    64              1                          1         if (!i_sdr_ctrl_rst_n)
    74              1                    1863865         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    76                                   1863865     Count coming in to CASE
    77              1                     935203               LOW: begin
    98              1                     928661               HIGH:
                                               1     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    79                                    935203     Count coming in to IF
    79              1                    ***0***                     if (i_scl_gen_stall) begin
    82              1                     935203                     else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    83                                    935203     Count coming in to IF
    83              1                     462717                         if (switch)
    89              1                     472486                         else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    101                                   928661     Count coming in to IF
    101             1                    ***0***                     if (i_scl_gen_stall) begin // badr 
    106             1                     462717                     else if ((switch && !i_sdr_ctrl_scl_idle) || (i_timer_cas) )
    112             1                     465944                     else
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    127                                  1873597     Count coming in to IF
    127             1                          1         if (!i_sdr_ctrl_rst_n)
    134             1                    1844418         else if (i_sdr_scl_gen_pp_od)
    149             1                      29178         else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    136                                  1844418     Count coming in to IF
    136             1                     922210               if (count >= 7'd2)
    141             1                     922208               else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    151                                    29178     Count coming in to IF
    151             1                    ***0***               if (count == 7'd62)
    156             1                    ***0***               else if (count == 7'd125)
    161             1                      29178               else
Branch totals: 1 hit of 3 branches = 33.33%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         3         3    50.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_scl_generation_not_stalled --

  File scl_generation.v
----------------Focused Condition View-------------------
Line       106 Item    1  ((switch && ~i_sdr_ctrl_scl_idle) || i_timer_cas)
Condition totals: 2 of 3 input terms covered = 66.66%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
               switch         Y
  i_sdr_ctrl_scl_idle         N  '_1' not hit             Hit '_1'
          i_timer_cas         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  switch_0               ~i_timer_cas                  
  Row   2:          1  switch_1               ~i_sdr_ctrl_scl_idle          
  Row   3:          1  i_sdr_ctrl_scl_idle_0  switch                        
  Row   4:    ***0***  i_sdr_ctrl_scl_idle_1  (~i_timer_cas && switch)      
  Row   5:          1  i_timer_cas_0          ~(switch && ~i_sdr_ctrl_scl_idle)
  Row   6:          1  i_timer_cas_1          ~(switch && ~i_sdr_ctrl_scl_idle)

----------------Focused Condition View-------------------
Line       136 Item    1  (count >= 2)
Condition totals: 1 of 1 input term covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count >= 2)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count >= 2)_0        -                             
  Row   2:          1  (count >= 2)_1        -                             

----------------Focused Condition View-------------------
Line       151 Item    1  (count == 62)
Condition totals: 0 of 1 input term covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 62)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 62)_0       -                             
  Row   2:    ***0***  (count == 62)_1       -                             

----------------Focused Condition View-------------------
Line       156 Item    1  (count == 125)
Condition totals: 0 of 1 input term covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (count == 125)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 125)_0      -                             
  Row   2:    ***0***  (count == 125)_1      -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      36        28         8    77.77%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_scl_generation_not_stalled --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File scl_generation.v
    34                                               module scl_generation(
    35                                                   input  wire       i_sdr_ctrl_clk          ,   // 50 MHz clock
    36                                                   input  wire       i_sdr_ctrl_rst_n        ,
    37                                                   input  wire       i_sdr_scl_gen_pp_od     ,   // 1: Push-Pull      // 0: for Open-Drain
    38                                                   input  wire       i_scl_gen_stall         ,  // 1 for stalling
    39                                                   input  wire       i_sdr_ctrl_scl_idle     ,
    40                                                   input  wire       i_timer_cas             ,
    41                                                   output reg        o_scl_pos_edge          ,
    42                                                   output reg        o_scl_neg_edge          ,
    43                                                   output reg        o_scl                  );
    44                                               
    45                                               
    46                                               //-- states encoding in gray ---------------------------------------------
    47                                               
    48                                               localparam LOW  = 1'b0 ;
    49                                               localparam HIGH = 1'b1 ;
    50                                               
    51                                               
    52                                               //-- internal wires declaration -------------------------------------------
    53                                               
    54                                               reg          state   ;  //assigned at fsm
    55                                               reg  [6:0]   count   ;  //assigned at counter
    56                                               reg          switch  ;  //assigned at counter
    57                                               
    58                                               
    59                                               //-- scl generation fsm ---------------------------------------------------
    60                                               
    61              1                    1863866     always @(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n)
    62                                                 begin: scl_generation_fsm
    63                                               
    64                                                   if (!i_sdr_ctrl_rst_n)
    65                                                     begin
    66                                                       //-- state
    67              1                          1               state   <=  HIGH   ;
    68                                                       //-- outputs
    69              1                          1               o_scl   <=  1'b1  ;
    70              1                          1               o_scl_pos_edge <= 1'b0;
    71              1                          1               o_scl_neg_edge <= 1'b0;
    72                                                     end
    73                                               
    74                                                   else
    75                                                     begin
    76                                                       case (state)
    77                                                         LOW: begin
    78              1                     935203                     o_scl_neg_edge <= 1'b0;
    79                                                               if (i_scl_gen_stall) begin
    80              1                    ***0***                      state <=   LOW  ;
    81                                                               end
    82                                                               else begin
    83                                                                   if (switch)
    84                                                                     begin
    85              1                     462717                             o_scl <=   1'b1 ;
    86              1                     462717                             state <=   HIGH ;
    87              1                     462717                             o_scl_pos_edge <= 1'b1;
    88                                                                     end
    89                                                                   else
    90                                                                     begin
    91              1                     472486                             o_scl <=   1'b0 ;
    92              1                     472486                             state <=   LOW  ;
    93              1                     472486                             o_scl_pos_edge <= 1'b0;
    94                                                                     end
    95                                                               end
    96                                                           end
    97                                               
    98                                                         HIGH:
    99                                                           begin
    100             1                     928661                 o_scl_pos_edge <= 1'b0;
    101                                                              if (i_scl_gen_stall) begin // badr 
    102             1                    ***0***                       o_scl <=   1'b0 ;
    103             1                    ***0***                       state <=   LOW  ;
    104             1                    ***0***                       o_scl_neg_edge <= 1'b1;
    105                                                              end
    106                                                              else if ((switch && !i_sdr_ctrl_scl_idle) || (i_timer_cas) )
    107                                                                begin
    108             1                     462717                         o_scl <=   1'b0 ;
    109             1                     462717                         state <=   LOW  ;
    110             1                     462717                         o_scl_neg_edge <= 1'b1;
    111                                                                end
    112                                                              else
    113                                                                begin
    114             1                     465944                         o_scl <=   1'b1 ;
    115             1                     465944                         state <=   HIGH ;
    116             1                     465944                         o_scl_neg_edge <= 1'b0;
    117                                                                end
    118                                                          end
    119                                                      endcase
    120                                                    end
    121                                                end
    122                                              //-- switch generation counter --------------------------------------------
    123                                              
    124             1                    1873597     always @(posedge i_sdr_ctrl_clk or negedge i_sdr_ctrl_rst_n)
    125                                                begin: scl_generation_counter
    126                                              
    127                                                  if (!i_sdr_ctrl_rst_n)
    128                                                    begin
    129             1                          1               count  <= 7'b1 ;
    130             1                          1               switch <= 1'b0 ;
    131                                                    end
    132                                              
    133                                                // 50 MHz/4 = 12.5 MHz for Push-Pull
    134                                                  else if (i_sdr_scl_gen_pp_od)
    135                                                    begin
    136                                                        if (count >= 7'd2)
    137                                                          begin
    138             1                     922210                   count  <= 7'b1 ;
    139             1                     922210                   switch <= 1'b1 ;
    140                                                          end
    141                                                        else
    142                                                          begin
    143             1                     922208                   count  <= count + 1'b1 ;
    144             1                     922208                   switch <= 1'b0 ;
    145                                                          end
    146                                                    end
    147                                              
    148                                                // 50 MHz/125 = 400 KHz for Open-Drain
    149                                                  else
    150                                                    begin
    151                                                        if (count == 7'd62)
    152                                                          begin
    153             1                    ***0***                   switch <= 1'b1;
    154             1                    ***0***                   count <= count + 1'b1;
    155                                                          end
    156                                                        else if (count == 7'd125)
    157                                                          begin
    158             1                    ***0***                   count  <= 7'b1 ;
    159             1                    ***0***                   switch <= 1'b1;
    160                                                          end
    161                                                        else
    162                                                          begin
    163             1                      29178                   count <= count + 1'b1;
    164             1                      29178                   switch <= 1'b0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         36        30         6    83.33%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_scl_generation_not_stalled --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                        count[6-5]           0           0        0.00 
                                        count[4-0]           1           1      100.00 
                                   i_scl_gen_stall           0           0        0.00 
                                    i_sdr_ctrl_clk           1           1      100.00 
                                  i_sdr_ctrl_rst_n           1           1      100.00 
                               i_sdr_ctrl_scl_idle           1           1      100.00 
                               i_sdr_scl_gen_pp_od           1           1      100.00 
                                       i_timer_cas           1           1      100.00 
                                             o_scl           1           1      100.00 
                                    o_scl_neg_edge           1           1      100.00 
                                    o_scl_pos_edge           1           1      100.00 
                                             state           1           1      100.00 
                                            switch           1           1      100.00 

Total Node Count     =         18 
Toggled Node Count   =         15 
Untoggled Node Count =          3 

Toggle Coverage      =      83.33% (30 of 36 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_reg_file
=== Design Unit: work.reg_file
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         9         8         1    88.88%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_reg_file

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File reg_file.v
------------------------------------IF Branch------------------------------------
    167                                   197829     Count coming in to IF
    167             1                          1      		if (!i_regf_rst_n)
    262             1                     197828      		else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    280                                   197828     Count coming in to IF
    280             1                     197824      		  		if (DWORD_0_Vector [0] == 1'b1) begin 					  // immediate 
    285             1                          4      		  		else begin  	 	 	 	 	 	 	 	 	 										// regular 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    316                                   197828     Count coming in to IF
    316             1                      74009      		    if (i_regf_rd_en && !i_regf_wr_en)  // read // enable should be a pulse
    320             1                      90001      		    else if (i_regf_wr_en && !i_regf_rd_en)  // write
                                           33818     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    326                                   197828     Count coming in to IF
    326             1                    ***0***      			if (reg_array[409][0] && reg_array[405][1]) //CRCAP1[0] supports hot-join & HJ_CFG[2] enables hot-join
    331             1                     197828      			else
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         2         4    33.33%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_reg_file --

  File reg_file.v
----------------Focused Condition View-------------------
Line       316 Item    1  (i_regf_rd_en && ~i_regf_wr_en)
Condition totals: 1 of 2 input terms covered = 50.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  i_regf_rd_en         Y
  i_regf_wr_en         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_regf_rd_en_0        -                             
  Row   2:          1  i_regf_rd_en_1        ~i_regf_wr_en                 
  Row   3:          1  i_regf_wr_en_0        i_regf_rd_en                  
  Row   4:    ***0***  i_regf_wr_en_1        i_regf_rd_en                  

----------------Focused Condition View-------------------
Line       320 Item    1  (i_regf_wr_en && ~i_regf_rd_en)
Condition totals: 1 of 2 input terms covered = 50.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  i_regf_wr_en         Y
  i_regf_rd_en         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_regf_wr_en_0        -                             
  Row   2:          1  i_regf_wr_en_1        ~i_regf_rd_en                 
  Row   3:          1  i_regf_rd_en_0        i_regf_wr_en                  
  Row   4:    ***0***  i_regf_rd_en_1        i_regf_wr_en                  

----------------Focused Condition View-------------------
Line       326 Item    1  (reg_array[409][0] && reg_array[405][1])
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  reg_array[409][0]         N  '_1' not hit             Hit '_1'
  reg_array[405][1]         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  reg_array[409][0]_0   -                             
  Row   2:    ***0***  reg_array[409][0]_1   reg_array[405][1]             
  Row   3:    ***0***  reg_array[405][1]_0   reg_array[409][0]             
  Row   4:    ***0***  reg_array[405][1]_1   reg_array[409][0]             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     113       111         2    98.23%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_reg_file --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File reg_file.v
    33                                               module reg_file #(parameter WIDTH = 8 , DEPTH = 2**12 , ADDR = 12 )
    34                                               
    35                                               	( input  wire			            i_regf_clk  		            ,   // clock , connected to the 50mhz clock , input from controller
    36                                               	  input  wire			            i_regf_rst_n	              ,  	// active low reset , input from controller
    37                                               	  input  wire			            i_regf_rd_en 	              ,  	// read data enable , input from controller
    38                                               	  input  wire			            i_regf_wr_en 	              ,  	// write data enable, pulse at the end of the last bit , input from controller
    39                                               	  input  wire  [ADDR-1:0]     i_regf_addr  	              ,  	// adress of the reg file , input from controller
    40                                               	  input  wire  [WIDTH-1:0]    i_regf_data_wr	            ,	  // data write  , input from rx
    41                                               
    42                                               
    43                                               
    44                                               /////////////////////////////////////////// HDR //////////////////////////////////////////
    45                                               	  input wire  [ADDR-1:0]      i_engine_configuration      ,   // location of configuration it has only 2 values either normal conf = 1000 or dummy conf = 900
    46                                               
    47                                               	  output reg  [15:0]          o_frmcnt_data_len 			    ,
    48                                               		output reg  [2:0] 	        o_cccnt_CMD_ATTR 			  	  ,
    49                                               		output reg  [3:0]	          o_engine_TID 	 			    		,	 	
    50                                               		output reg  [7:0]	          o_ccc_CMD  	 	 	 	 	        ,
    51                                               		output reg  [4:0]	          o_cccnt_DEV_INDEX 	 	 	    ,
    52                                               		output reg  [2:0]		        o_frmcnt_DTT  	   	 	      ,
    53                                               		output reg  [2:0]		        o_engine_MODE  		 	 	      ,
    54                                               		output reg  			          o_cccnt_RnW 	 		 		      ,
    55                                               		output reg 				          o_cccnt_WROC 				        ,
    56                                               		output reg 				          o_cccnt_TOC 		 	 	 	      ,
    57                                               		output reg 				          o_engine_CP  		  	 	      ,
    58                                               		output reg 	 	 	 		        o_cccnt_DBP  	 	 	 	 	 	 	 	,
    59                                               		output reg 	 	 	 		        o_cccnt_SRE  	 	 	 	 	 	 	 	,
    60                                               
    61                                               ////////////////////////////////////////////////////////////////////////////////////////////
    62                                               
    63                                               
    64                                               	  output reg                  o_ser_rx_tx		  			      ,
    65                                               	  output reg  [WIDTH-1:0]     o_regf_data_rd    			    ,	// data read   ,  output to tx
    66                                               	  output reg  [WIDTH-1:0]     o_regf_num_frames 	 		    ,	
    67                                               	 
    68                                               	  //outputs for crh    
    69                                               	  output reg  [WIDTH-1:0]     o_crh_CRHDLY	 	 	  			  ,
    70                                               	  output reg  [WIDTH-1:0]     o_crh_getstatus_data 			  ,
    71                                               	  output reg  [WIDTH-1:0]     o_crh_CRCAP2	 	 	  			  ,
    72                                               	  output reg  [WIDTH-1:0]     o_crh_PRECR	 	 	  			    ,
    73                                               	  output reg  [WIDTH-1:0]     o_crh_cfg_reg	 	  			    ,
    74                                               	  output reg  [WIDTH-1:0]     o_crh_tgts_count     			  ,
    75                                               	  output reg  [WIDTH-1:0]     o_regf_ibi_cfg 	     			  ,
    76                                               	  output reg  [WIDTH-1:0]     o_regf_ibi_payload_size_reg ,
    77                                               	  output reg  [WIDTH-1:0]     o_i_ibi_tgt_address 			  ,
    78                                               	  output wire [2:0]           o_regf_hj_cfg     				  ,
    79                                               	  output wire                 o_regf_hj_support 
    80                                               	 
    81                                               	 );
    82                                               
    83                                               
    84                                               //--------------------------------- parameters and defines in RegFile ------------------------------------------	
    85                                               localparam ARBITRATION_REG_ADDRESS = 8'd48; 	
    86                                               localparam IBI_CFG_REG_ADDRESS ='d101;	
    87                                               localparam PAYLOAD_SIZE_REG_ADDRESS ='d102;
    88                                               localparam EVENT_DISABLE_DIRECT_CCC_ADDRESS = 8'd103; // "Event" interrupt "DISEC" Direct location in RegFile 8'h81
    89                                               localparam EVENT_DISABLE_BDCST_CCC_ADDRESS =8'd104; //Disable "Event" interrupt "DISEC" Broadcast location in RegFile 8'h01
    90                                               localparam MDB_ADDRESS = 8'd107; //MDB location in RegFile
    91                                               localparam BDCST_WRITE_ADDRESS = 8'd46; //  write for broadcasring location in RegFile 8'h7E
    92                                               localparam EVENT_DISABLE_BYTE_ADDRESS=10'd392; //Disable Target Events Command Byte location in RegFile
    93                                               
    94                                               //////////////////              CONTROLLER ROLE HANDOFF PARAMETERS              /////////////////
    95                                                localparam BROADCAST_ADDR_REG_FILE        = 9'd46     ; //broadcast address in reg file (7E+w)
    96                                                localparam ARBITRATION_ADDR_REG_FILE      = 9'd48     ; //arbitration address 
    97                                                localparam TARGET_ADDR_REG_FILE           =  9'd0     ; 
    98                                                localparam GETSTATUS_ADDR_REG_FILE        = 9'd387    ; 
    99                                                localparam GETMXDS_ADDR_REG_FILE          = 9'd381    ; 
    100                                               localparam GETCAPS_ADDR_REG_FILE          = 9'd384    ; 
    101                                               localparam DISEC_ADDR_REG_FILE            = 9'd104    ; 
    102                                               localparam ENTAS0_ADDR_REG_FILE           = 9'd393    ;
    103                                               localparam ENTAS1_ADDR_REG_FILE           = 9'd394    ;
    104                                               localparam ENTAS2_ADDR_REG_FILE           = 9'd395    ;
    105                                               localparam ENTAS3_ADDR_REG_FILE           = 9'd396    ;
    106                                               localparam DEFTGTS_ADDR_REG_FILE          = 9'd397    ;
    107                                               localparam GETACCCR_ADDR_REG_FILE         = 9'd389    ;
    108                                               localparam DEF_BYTE_REG_FILE              = 9'd382    ;
    109                                               localparam CRCAPS1_ADDR_REG_FILE          = 9'd385    ;
    110                                               localparam CRHDLY1_ADDR_REG_FILE          = 9'd383    ; 
    111                                               localparam GETSTATUS_LSB_ADDR_REG_FILE    = 9'd390    ;
    112                                               localparam CRCAPS2_ADDR_REG_FILE          = 9'd386    ;
    113                                               localparam PRECR_ADDR_REG_FILE            = 9'd388    ; 
    114                                               localparam CRH_CFG_REG_FILE               = 9'd407    ;
    115                                               localparam TGTS_COUNT_REG_FILE            = 9'd35     ;
    116                                               localparam GETSTATUS_MSB_ADDR_REG_FILE    = 9'd408    ;
    117                                               localparam DISEC_DATA_ADDR_REG_FILE       = 9'd406    ;
    118                                              
    119                                              
    120                                              
    121                                               localparam DUMMY_CONFIGURATION = 12'd450 ;
    122                                              //--------------------------------- ----------------------------------- ------------------------------------------	
    123                                              	
    124                                              
    125                                              
    126                                               reg [WIDTH-1:0] reg_array [DEPTH-1:0] ;  // 32 entry * 8 bits
    127                                               integer I, J ,K ;
    128                                              
    129                                              /////////////////////////////////////////////      HDR     ///////////////////////////////////////////////////////
    130                                              reg [31:0] DWORD_0_Vector ;
    131                                              reg [31:0] DWORD_1_Vector ;
    132                                              
    133             1                      61620     always @(*) begin 
    134             1                      61620     	DWORD_0_Vector [7:0]   = reg_array [i_engine_configuration] ;
    135             1                      61620     	DWORD_0_Vector [15:8]  = reg_array [i_engine_configuration + 1] ;
    136             1                      61620     	DWORD_0_Vector [23:16] = reg_array [i_engine_configuration + 2] ;  
    137             1                      61620     	DWORD_0_Vector [31:24] = reg_array [i_engine_configuration + 3] ;  
    138                                              
    139             1                      61620     	DWORD_1_Vector [7:0]   = reg_array [i_engine_configuration + 4] ;
    140             1                      61620     	DWORD_1_Vector [15:8]  = reg_array [i_engine_configuration + 5] ;
    141             1                      61620     	DWORD_1_Vector [23:16] = reg_array [i_engine_configuration + 6] ;  
    142             1                      61620     	DWORD_1_Vector [31:24] = reg_array [i_engine_configuration + 7] ; 
    143                                              end 
    144                                              
    145                                              //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    146                                              
    147                                              
    148                                              
    149                                              
    150                                              
    151                                              
    152                                              
    153                                              
    154                                              
    155                                              
    156                                              
    157                                              
    158                                              
    159                                                // Always checking on bit 0 of the frame, but we will only read it in ACK state when the data is Address 
    160                                                //assign o_ser_rx_tx  = reg_array[0][0] ; 
    161                                              
    162             1                      61621     assign o_regf_hj_cfg      = reg_array[405][2:0] ;
    163             1                      61621     assign o_regf_hj_support  = reg_array[409][0]   ;
    164                                              
    165             1                     197829      always @(posedge i_regf_clk or negedge i_regf_rst_n)
    166                                               	begin: regf_file_always
    167                                               		if (!i_regf_rst_n)
    168                                               			begin
    169                                               				
    170                                               				  /////////////////////////////////////////////      HDR     ///////////////////////////////////////////////////////
    171                                               				  // DWORD0 for Dummy configuration .. that's a fixed configurations that doesn't change so it's made on the reset condition
    172                                               				  // so whenever is needed to excute this dummy configuration the engine just has to give the input "i_engine_configuration" a value equals "DUMMY_CONFIGURATION" value .. say 'd 900
    173             1                          1      				  reg_array[DUMMY_CONFIGURATION]     <= 8'b1000_0001 ;		// 413
    174             1                          1      				  reg_array[DUMMY_CONFIGURATION + 1] <= 8'b1000_1111 ;		// 414
    175             1                          1      				  reg_array[DUMMY_CONFIGURATION + 2] <= 8'b0000_0000 ;		// 415
    176             1                          1      				  reg_array[DUMMY_CONFIGURATION + 3] <= 8'b0001_1000 ;		// 416 
    177                                                        
    178                                                				  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    179                                                
    180                                                
    181                                                
    182                                                
    183             1                          1      				  o_regf_data_rd    <= 'b0 ;
    184             1                          1      				  o_regf_num_frames <= 'b0 ;     // editted by nour
    185             1                          1     				  o_regf_ibi_cfg  <= 'b0 ;
    186             1                          1      		   	  o_regf_ibi_payload_size_reg <= 'b0 ;
    187             1                          1      		   		o_i_ibi_tgt_address <= 'b0 ;
    188                                              
    189             1                          1      				reg_array[TARGET_ADDR_REG_FILE]   <= 8'b10101000   	 ; // Target Address , Address[0] = 0 for TX, 1 for RX
    190             1                          1      				reg_array[1]   <= 'b00000010    ; // Number of frames
    191             1                          1      				reg_array[2]   <= 'b00000001  	 ;
    192             1                          1      				reg_array[3]   <= 'b00000010  	 ;
    193             1                          1      				reg_array[4]   <= 'b00000110  	 ;
    194                                              
    195                                              
    196             1                          1      				for (I=5; I < 46 ; I = I +1) // SDR RX Data bytes
    196             2                         41     
    197             1                         41     	 			reg_array[I] <= 'b0 ;
    198                                              
    199             1                          1                for (J=50; J < 381 ; J = J +1) // UNUSED
    199             2                        331     
    200             1                        331                     reg_array[J] <= 'b0 ;
    201                                              
    202             1                          1      				reg_array[46]  <= 'b11111100 ; // 7'h7E broadcast address with rnw = 0 *write*
    203             1                          1      				reg_array[47]  <= 'b11111101 ; // 7'h7E broadcast address with rnw = 1 *read*
    204             1                          1      				reg_array[49]  <= 'b00000111 ; // ENTDAA CCC
    205             1                          1     				reg_array[50]  <= 'b0010_0000; // ENTHDR CCC (DDR VALUE --> 'h20)
    206                                              
    207                                               				//////////// Hot-Join Registers ////////////
    208             1                          1      				reg_array[401] <= 'b00000000     ;   //ENEC CCC
    209             1                          1      				reg_array[402] <= 'b00001011     ;   //ENEC BYTE //including ENINT, ENCR, ENHJ
    210             1                          1      				reg_array[403] <= 'b00000001     ;   //DISEC CCC
    211             1                          1      				reg_array[404] <= 'b00000000     ;   //DISEC BYTE //including DISINT, DISCR, DISHJ
    212                                               				//reg_array[405] <= 'bxxxxx000     ;   //HJ_CFG
    213             1                          1      				reg_array[409] <= 'bxxxxx000  	 ;   //CRCAP1 
    214                                               				//reg_array[404] <= 'bxxxx0x00     ;   //DISEC BYTE //including DISINT, DISCR, DISHJ
    215             1                          1      				reg_array[405] <= 'bxxxxx111     ;   //HJ_CFG
    216                                               				//reg_array[409] <= 'bxxxxx001  	 ;   //CRCAP1 
    217                                              
    218                                              				//////////// IBI Registers ////////////
    219             1                          1     				reg_array[BDCST_WRITE_ADDRESS]<= 'b11111101 ; //'h7E/1 BDCST Write
    220             1                          1      				reg_array[ARBITRATION_REG_ADDRESS]  <= 'b01010011 ; // Arbitration Address [7:1] = h9
    221             1                          1      				reg_array[PAYLOAD_SIZE_REG_ADDRESS] <= 'b00000011 ; // PAYLOAD MAX SIZE
    222             1                          1      				reg_array[EVENT_DISABLE_DIRECT_CCC_ADDRESS] <= 'h81       ; // "Event" interrupt "DISEC" Direct location in RegFile 8'h81
    223             1                          1      				reg_array[EVENT_DISABLE_BDCST_CCC_ADDRESS] <= 'h01; //Disable "Event" interrupt "DISEC" Broadcast location in RegFile 8'h01
    224             1                          1      				reg_array[EVENT_DISABLE_BYTE_ADDRESS] <= 'b00001011 ; // Disable Target Events Command Byte location in RegFile 8'b00001011
    225             1                          1      				reg_array[IBI_CFG_REG_ADDRESS] <= 'b00000001 ; /// Ack + mdb only 
    226                                              
    227                                                            //// controller role registers //////
    228             1                          1                    reg_array[BROADCAST_ADDR_REG_FILE]   <= {7'h7E , 1'b0} ; //broadcast address 7'h7E + W = 8'hFC  
    229             1                          1                    reg_array[GETSTATUS_ADDR_REG_FILE]   <= 'h90 ;
    230             1                          1                    reg_array[GETMXDS_ADDR_REG_FILE]   <= 'h94 ;
    231             1                          1                    reg_array[GETCAPS_ADDR_REG_FILE]   <= 'h95 ; 
    232             1                          1                    reg_array[DISEC_ADDR_REG_FILE]   <= 'h01 ;
    233             1                          1                    reg_array[ENTAS0_ADDR_REG_FILE]   <= 'h02 ;
    234             1                          1                    reg_array[ENTAS1_ADDR_REG_FILE]   <= 'h03 ;
    235             1                          1                    reg_array[ENTAS2_ADDR_REG_FILE]   <= 'h04 ;
    236             1                          1                    reg_array[ENTAS3_ADDR_REG_FILE]   <= 'h05 ;
    237             1                          1                    reg_array[DEFTGTS_ADDR_REG_FILE]   <= 'h08 ;
    238             1                          1                    reg_array[GETACCCR_ADDR_REG_FILE]   <= 'h91 ;
    239             1                          1                    reg_array[DEF_BYTE_REG_FILE]        <= 'h91 ; 
    240             1                          1                    reg_array[DISEC_DATA_ADDR_REG_FILE] <= 'h09 ; //hot join disabled + interrupts disabled
    241                                                             //for testing 
    242             1                          1                    reg_array[ARBITRATION_ADDR_REG_FILE]  <= 'b01010011 ;
    243             1                          1                    reg_array[CRHDLY1_ADDR_REG_FILE] <= 'h02 ;
    244             1                          1                    reg_array[GETSTATUS_LSB_ADDR_REG_FILE] <= 'h02 ;
    245             1                          1                    reg_array[CRCAPS2_ADDR_REG_FILE] <= 'h02 ;
    246             1                          1                    reg_array[PRECR_ADDR_REG_FILE] <= 'h02 ;
    247             1                          1                    reg_array[CRH_CFG_REG_FILE] <= 'h01 ;
    248             1                          1                    reg_array[TGTS_COUNT_REG_FILE] <= 'h02 ;
    249                                              
    250             1                          1                     for (K=454; K< DEPTH; K = K +1) 	 	
    250             2                       3642     
    251             1                       3642                     reg_array[K] <= 'b0 ;
    252                                                             
    253                                                             
    254             1                          1                    o_crh_CRHDLY <= reg_array[CRHDLY1_ADDR_REG_FILE] ;
    255             1                          1                    o_crh_getstatus_data <= reg_array[GETSTATUS_LSB_ADDR_REG_FILE] ;
    256             1                          1                    o_crh_CRCAP2 <= reg_array[CRCAPS2_ADDR_REG_FILE] ;
    257             1                          1                    o_crh_PRECR <= reg_array[PRECR_ADDR_REG_FILE] ;
    258             1                          1                    o_crh_cfg_reg <= reg_array[CRH_CFG_REG_FILE] ;
    259             1                          1                    o_crh_tgts_count <= reg_array[TGTS_COUNT_REG_FILE] ; 
    260                                              
    261                                               			end
    262                                               		else
    263                                               		  begin
    264                                              
    265                                              
    266                                               		  	/////////////////////////////////////////////      HDR     ///////////////////////////////////////////////////////
    267             1                     197828      		  		o_frmcnt_data_len <= DWORD_1_Vector [31:16] ;
    268                                              
    269             1                     197828      		  		o_cccnt_CMD_ATTR  <= DWORD_0_Vector [2:0]   ; 
    270             1                     197828      		  		o_engine_TID 	 	  <= DWORD_0_Vector [6:3]   ;
    271             1                     197828      		  		o_ccc_CMD  	 	 	  <= DWORD_0_Vector [14:7]  ;
    272             1                     197828      		  		o_engine_CP  		  <= DWORD_0_Vector [15]    ;
    273             1                     197828      		  		o_cccnt_DEV_INDEX <= DWORD_0_Vector [20:16] ;
    274             1                     197828      		  		o_frmcnt_DTT  	  <= DWORD_0_Vector [25:23] ;
    275             1                     197828      		  		o_engine_MODE  	  <= DWORD_0_Vector [28:26] ;
    276             1                     197828      		  		o_cccnt_RnW 	 	  <= DWORD_0_Vector [29]    ;
    277             1                     197828      		  		o_cccnt_WROC 		  <= DWORD_0_Vector [30]    ;
    278             1                     197828      		  		o_cccnt_TOC 		  <= DWORD_0_Vector [31]    ;
    279                                              
    280                                               		  		if (DWORD_0_Vector [0] == 1'b1) begin 					  // immediate 
    281             1                     197824      		  			o_frmcnt_DTT  	  <= DWORD_0_Vector [25:23] ;
    282             1                     197824      		  			o_cccnt_DBP 	 	 	<= 1'b0 ;
    283             1                     197824      		  			o_cccnt_SRE 	 	 	<= 1'b0 ;
    284                                               		  		end
    285                                               		  		else begin  	 	 	 	 	 	 	 	 	 										// regular 
    286             1                          4      		  			o_cccnt_DBP 	 	  <= DWORD_0_Vector [25] ;
    287             1                          4      		  			o_cccnt_SRE 	 	  <= DWORD_0_Vector [24] ;
    288             1                          4      		  			o_frmcnt_DTT  	  <= 'd0 ;
    289                                               		  		end  
    290                                              
    291             1                     197828      		  		reg_array [i_engine_configuration - 1] = 8'b0000_0000 ; //zerozzzz location to ba serialized in ZEROS state 
    292                                              
    293                                              			//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    294                                              
    295                                              
    296                                              
    297                                              
    298                                              
    299                                              
    300                                              
    301             1                     197828      		    o_crh_CRHDLY <= reg_array[CRHDLY1_ADDR_REG_FILE] ;
    302             1                     197828                                      o_crh_getstatus_data <= reg_array[GETSTATUS_LSB_ADDR_REG_FILE] ;
    303             1                     197828                                      o_crh_CRCAP2 <= reg_array[CRCAPS2_ADDR_REG_FILE] ;
    304             1                     197828                                      o_crh_PRECR <= reg_array[PRECR_ADDR_REG_FILE] ;
    305             1                     197828                                      o_crh_cfg_reg <= reg_array[CRH_CFG_REG_FILE] ;
    306             1                     197828                                      o_crh_tgts_count <= reg_array[TGTS_COUNT_REG_FILE] ; 
    307                                                                               
    308                                                                                                        
    309             1                     197828      		    o_regf_num_frames <= reg_array[1]     ; //editted by nour
    310             1                     197828     		    o_ser_rx_tx       <= reg_array [0][0] ; //Yaseen's Edit
    311                                              
    312             1                     197828     		   o_regf_ibi_cfg  <= reg_array[IBI_CFG_REG_ADDRESS];
    313             1                     197828      		   o_regf_ibi_payload_size_reg <= reg_array[PAYLOAD_SIZE_REG_ADDRESS];
    314             1                     197828      		   o_i_ibi_tgt_address <= reg_array[ARBITRATION_REG_ADDRESS]; //Arbitrated Address
    315                                              			
    316                                               		    if (i_regf_rd_en && !i_regf_wr_en)  // read // enable should be a pulse
    317                                               			  begin
    318             1                      74009      				o_regf_data_rd <= reg_array [i_regf_addr] ;
    319                                               			  end
    320                                               		    else if (i_regf_wr_en && !i_regf_rd_en)  // write
    321                                               			  begin
    322             1                      90001      			  	reg_array [i_regf_addr] <= i_regf_data_wr ;
    323                                               			  end
    324                                              
    325                                               			//////////// ENHJ/DISHJ Defining-Bits Logic ////////////
    326                                               			if (reg_array[409][0] && reg_array[405][1]) //CRCAP1[0] supports hot-join & HJ_CFG[2] enables hot-join
    327                                               				begin
    328             1                    ***0***      					reg_array[402][3] <= 1'b1 ; //ENEC_BYTE[3]  >> ENHJ=1
    329             1                    ***0***      					reg_array[404][3] <= 1'b0 ; //DISEC_BYTE[3] >> DISHJ=0
    330                                               				end
    331                                               			else
    332                                               				begin
    333             1                     197828      					reg_array[402][3] <= 1'b0 ; //ENEC_BYTE[3]  >> ENHJ=0
    334             1                     197828      					reg_array[404][3] <= 1'b1 ; //DISEC_BYTE[3] >> DISHJ=1

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        674       196       478    29.08%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_reg_file --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                             DWORD_0_Vector[31-30]           1           1      100.00 
                                DWORD_0_Vector[29]           0           0        0.00 
                             DWORD_0_Vector[28-27]           0           1       50.00 
                             DWORD_0_Vector[26-25]           0           0        0.00 
                             DWORD_0_Vector[24-16]           1           1      100.00 
                                DWORD_0_Vector[15]           0           1       50.00 
                                DWORD_0_Vector[14]           1           1      100.00 
                             DWORD_0_Vector[13-12]           0           0        0.00 
                              DWORD_0_Vector[11-3]           1           1      100.00 
                               DWORD_0_Vector[2-1]           0           0        0.00 
                                 DWORD_0_Vector[0]           0           1       50.00 
                             DWORD_1_Vector[31-18]           0           0        0.00 
                              DWORD_1_Vector[17-0]           1           1      100.00 
                                           I[31-0]           0           0        0.00 
                                           J[31-0]           0           0        0.00 
                                           K[31-0]           0           0        0.00 
                      i_engine_configuration[0-11]           0           0        0.00 
                                  i_regf_addr[0-9]           1           1      100.00 
                                i_regf_addr[10-11]           0           0        0.00 
                                        i_regf_clk           1           1      100.00 
                               i_regf_data_wr[0-7]           1           1      100.00 
                                      i_regf_rd_en           1           1      100.00 
                                      i_regf_rst_n           1           1      100.00 
                                      i_regf_wr_en           1           1      100.00 
                                      o_ccc_CMD[7]           1           1      100.00 
                                    o_ccc_CMD[6-5]           0           0        0.00 
                                    o_ccc_CMD[4-0]           1           1      100.00 
                             o_cccnt_CMD_ATTR[2-1]           0           0        0.00 
                               o_cccnt_CMD_ATTR[0]           0           1       50.00 
                                       o_cccnt_DBP           0           0        0.00 
                            o_cccnt_DEV_INDEX[4-0]           1           1      100.00 
                                       o_cccnt_RnW           0           0        0.00 
                                       o_cccnt_SRE           0           0        0.00 
                                       o_cccnt_TOC           1           1      100.00 
                                      o_cccnt_WROC           1           1      100.00 
                                 o_crh_CRCAP2[7-0]           0           0        0.00 
                                 o_crh_CRHDLY[7-0]           0           0        0.00 
                                  o_crh_PRECR[7-0]           0           0        0.00 
                                o_crh_cfg_reg[7-0]           0           0        0.00 
                         o_crh_getstatus_data[7-0]           0           0        0.00 
                             o_crh_tgts_count[7-0]           0           0        0.00 
                                       o_engine_CP           0           1       50.00 
                                o_engine_MODE[2-1]           0           1       50.00 
                                  o_engine_MODE[0]           0           0        0.00 
                                 o_engine_TID[3-0]           1           1      100.00 
                                   o_frmcnt_DTT[2]           0           0        0.00 
                                 o_frmcnt_DTT[1-0]           1           1      100.00 
                           o_frmcnt_data_len[15-2]           0           0        0.00 
                            o_frmcnt_data_len[1-0]           1           1      100.00 
                            o_i_ibi_tgt_address[7]           0           0        0.00 
                            o_i_ibi_tgt_address[6]           0           1       50.00 
                            o_i_ibi_tgt_address[5]           0           0        0.00 
                            o_i_ibi_tgt_address[4]           0           1       50.00 
                          o_i_ibi_tgt_address[3-2]           0           0        0.00 
                          o_i_ibi_tgt_address[1-0]           0           1       50.00 
                               o_regf_data_rd[7-0]           1           1      100.00 
                                o_regf_hj_cfg[0-2]           0           0        0.00 
                                 o_regf_hj_support           0           0        0.00 
                               o_regf_ibi_cfg[7-1]           0           0        0.00 
                                 o_regf_ibi_cfg[0]           0           1       50.00 
                  o_regf_ibi_payload_size_reg[7-2]           0           0        0.00 
                  o_regf_ibi_payload_size_reg[1-0]           0           1       50.00 
                            o_regf_num_frames[7-2]           0           0        0.00 
                              o_regf_num_frames[1]           0           1       50.00 
                              o_regf_num_frames[0]           0           0        0.00 
                                       o_ser_rx_tx           0           0        0.00 

Total Node Count     =        337 
Toggled Node Count   =         90 
Untoggled Node Count =        247 

Toggle Coverage      =      29.08% (196 of 674 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_clk_divider
=== Design Unit: work.clk_divider
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_clk_divider

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File clk_divider.v
------------------------------------IF Branch------------------------------------
    41                                   3747194     Count coming in to IF
    41              1                          2         if(!i_rst_n)
    46              1                    3747192         else 
Branch totals: 2 hits of 2 branches = 100.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       3         3         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_clk_divider --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File clk_divider.v
    32                                               module clk_divider (
    33                                               	                input   wire    i_clk_in   ,  // XC7S15 FTGB196ABX FPGA Clk >> 100 MHZ (10 ns) 
    34                                               	                input   wire    i_rst_n    ,
    35                                               	                output  reg     o_clk_out );  // output divided clk by 2 >> 50 MHZ (20 ns)
    36                                               
    37                                               
    38              1                    3747194     always @(posedge i_clk_in or negedge i_rst_n)
    39                                                 begin: clk_divider_by_2
    40                                               
    41                                                   if(!i_rst_n)
    42                                                     begin 
    43              1                          2             o_clk_out <= 1'b0 ;
    44                                                     end 
    45                                               
    46                                                   else 
    47                                                     begin 
    48              1                    3747192             o_clk_out <= ~o_clk_out;  // delay of one clock cycle will be done by default so no need to count 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          6         6         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_clk_divider --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                          i_clk_in           1           1      100.00 
                                           i_rst_n           1           1      100.00 
                                         o_clk_out           1           1      100.00 

Total Node Count     =          3 
Toggled Node Count   =          3 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (6 of 6 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_enthdr
=== Design Unit: work.enthdr
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        20        19         1    95.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_enthdr

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ENTHDR.v
------------------------------------IF Branch------------------------------------
    76                                   1873597     Count coming in to IF
    76              1                          1          if(!i_rst_n)
    88              1                    1873596          else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    99                                   1873596     Count coming in to CASE
    100             1                    1523603                IDLE:         
    127             1                     155552                BROADCAST:  
    156             1                      14583                ACK:         
    181             1                     160413                ENTHDR_DDR: 
    204             1                      19444                PARITY:     
    226             1                          1                default:
Branch totals: 6 hits of 6 branches = 100.00%

------------------------------------IF Branch------------------------------------
    105                                  1523603     Count coming in to IF
    105             1                       4861                    if (i_i3cengine_en)
    117             1                    1518742                    else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    129                                   155552     Count coming in to IF
    129             1                     155552                if (i_i3cengine_en) begin  
    151             1                    ***0***                 else
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    130                                   155552     Count coming in to IF
    130             1                       4861                  if (i_tx_mode_done && i_scl_neg_edge )  // ****(scl neg edge condition check)
    138             1                     150691                  else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    160                                    14583     Count coming in to IF
    160             1                       4861                  if(!i_rx_ack_nack && i_rx_mode_done ) //if ACK next state is ENTHDR_DDR  //&& i_scl_neg_edge
    170             1                       9722                  else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    183                                   160413     Count coming in to IF
    183             1                       4861                  if(i_tx_mode_done && i_scl_neg_edge)     // ****(scl neg edge condition check)
    192             1                     155552                  else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    208                                    19444     Count coming in to IF
    208             1                       4861                   if(i_tx_mode_done && i_scl_neg_edge)    ///*** T bit completion plus scl falling edge condition should be added
    215             1                      14583                   else
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         6         2    75.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_enthdr --

  File ENTHDR.v
----------------Focused Condition View-------------------
Line       130 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 1 of 2 input terms covered = 50.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         Y
  i_scl_neg_edge         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_tx_mode_done_0      -                             
  Row   2:          1  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:          1  i_scl_neg_edge_1      i_tx_mode_done                

----------------Focused Condition View-------------------
Line       160 Item    1  (~i_rx_ack_nack && i_rx_mode_done)
Condition totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
   i_rx_ack_nack         Y
  i_rx_mode_done         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_rx_ack_nack_0       i_rx_mode_done                
  Row   2:          1  i_rx_ack_nack_1       -                             
  Row   3:          1  i_rx_mode_done_0      ~i_rx_ack_nack                
  Row   4:          1  i_rx_mode_done_1      ~i_rx_ack_nack                

----------------Focused Condition View-------------------
Line       183 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 1 of 2 input terms covered = 50.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         Y
  i_scl_neg_edge         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_tx_mode_done_0      -                             
  Row   2:          1  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:    ***0***  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:          1  i_scl_neg_edge_1      i_tx_mode_done                

----------------Focused Condition View-------------------
Line       208 Item    1  (i_tx_mode_done && i_scl_neg_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         Y
  i_scl_neg_edge         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_tx_mode_done_0      -                             
  Row   2:          1  i_tx_mode_done_1      i_scl_neg_edge                
  Row   3:          1  i_scl_neg_edge_0      i_tx_mode_done                
  Row   4:          1  i_scl_neg_edge_1      i_tx_mode_done                


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       5         5         0   100.00%
    FSM Transitions                  8         5         3    62.50%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/u_enthdr --

FSM_ID: state
    Current State Object : state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 100                IDLE                   0
 127           BROADCAST                   1
 156                 ACK                   3
 181          ENTHDR_DDR                   2
 204              PARITY                   6
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE             1523605          
               BROADCAST              155552          
                     ACK               14583          
              ENTHDR_DDR              160413          
                  PARITY               19444          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 107                   0                4861          IDLE -> BROADCAST             
 132                   2                4861          BROADCAST -> ACK              
 162                   3                4861          ACK -> ENTHDR_DDR             
 185                   5                4861          ENTHDR_DDR -> PARITY          
 211                   7                4861          PARITY -> IDLE                
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 152                   1          BROADCAST -> IDLE   
  78                   4          ACK -> IDLE         
  78                   6          ENTHDR_DDR -> IDLE  


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   5         5         0   100.00%
        FSM Transitions              8         5         3    62.50%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      85        84         1    98.82%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_enthdr --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ENTHDR.v
    33                                               module enthdr (
    34                                                 input   wire             i_clk           ,
    35                                                 input   wire             i_rst_n         ,
    36                                                 input   wire             i_i3cengine_en  ,
    37                                                 input   wire             i_tx_mode_done  ,
    38                                                 input   wire             i_rx_ack_nack   ,
    39                                                 input   wire             i_scl_neg_edge  ,
    40                                                 input   wire             i_rx_mode_done  ,
    41                                                 input   wire             i_scl_pos_edge  ,
    42                                                 
    43                                                 output  wire             o_pp_od         , 
    44                                                 output  reg              o_bit_cnt_en    ,   
    45                                                 output  reg              o_regf_rd_en    ,
    46                                                 output  reg     [11:0]   o_regf_addr     ,
    47                                                 output  reg              o_tx_en         ,
    48                                                 output  reg     [2:0]    o_tx_mode       ,
    49                                                 output  reg              o_rx_en         ,
    50                                                 output  reg     [2:0]    o_rx_mode       ,
    51                                                 output  reg              o_i3cengine_done       // Flag to indicate that the CCC is sent               
    52                                                 );
    53                                               
    54                                               
    55                                                //----------------Internal Signals----------------//
    56                                                
    57                                                reg [2:0] state;
    58                                                
    59                                                
    60                                                //----------------States Encoding----------------//
    61                                                localparam IDLE         = 3'b000 ;
    62                                                localparam BROADCAST    = 3'b001 ;
    63                                                localparam ACK          = 3'b011 ;
    64                                                localparam ENTHDR_DDR   = 3'b010 ;
    65                                                localparam PARITY       = 3'b110 ; 
    66                                                
    67                                                
    68                                               
    69                                                assign o_pp_od = 1'b1  ; 
    70                                               
    71                                               
    72                                               
    73                                                //----------------ENTHDR0 CCC FSM----------------//
    74              1                    1873597      always@(posedge i_clk or negedge i_rst_n)
    75                                                  begin
    76                                                    if(!i_rst_n)
    77                                                      begin
    78              1                          1              state <= IDLE;
    79              1                          1              o_regf_rd_en        <= 1'b0;
    80              1                          1              o_tx_en             <= 1'b0;
    81              1                          1              o_rx_en             <= 1'b0;
    82              1                          1              o_i3cengine_done    <= 1'b0;
    83              1                          1              o_tx_mode           <= 3'b0;
    84              1                          1              o_rx_mode           <= 3'b0;
    85              1                          1              o_regf_addr         <= 12'b0;
    86              1                          1              o_bit_cnt_en        <= 1'b0;
    87                                                      end
    88                                                    else 
    89                                                      begin
    90              1                    1873596              o_regf_rd_en        <= 1'b0;
    91              1                    1873596              o_tx_en             <= 1'b0;
    92              1                    1873596              o_rx_en             <= 1'b0;
    93              1                    1873596              o_i3cengine_done    <= 1'b0;
    94              1                    1873596              o_tx_mode           <= 3'b0;
    95              1                    1873596              o_rx_mode           <= 3'b0;
    96              1                    1873596              o_regf_addr         <= 12'b0;
    97              1                    1873596              o_bit_cnt_en        <= 1'b0;
    98                                                       
    99                                                       case(state)
    100                                                         IDLE:         
    101                                                           begin
    102             1                    1523603                   o_rx_en       <= 1'b1;
    103             1                    1523603                   o_regf_rd_en  <= 1'b1;
    104             1                    1523603                   o_regf_addr   <= 12'b000000101110;
    105                                                             if (i_i3cengine_en)
    106                                                                 begin
    107             1                       4861                          state         <= BROADCAST;
    108             1                       4861                          o_rx_en       <= 1'b1;   // rx block enable
    109             1                       4861                          o_rx_mode     <= 3'b010; // arbitration state   
    110                                                                   
    111             1                       4861                          o_regf_rd_en  <= 1'b1;
    112             1                       4861                          o_regf_addr   <= 12'b000000101110; // 9'd46 >> broadcast address in reg file ('h7E+w)
    113             1                       4861                          o_tx_en       <= 1'b1;
    114             1                       4861                          o_tx_mode     <= 3'b001;         // serializing state in TX
    115             1                       4861                          o_bit_cnt_en  <= 1'b1;
    116                                                                 end
    117                                                             else 
    118                                                                 begin
    119                                               
    120             1                    1518742                          state         <= IDLE;
    121                                                                 end
    122                                                             end
    123                                               
    124                                                           
    125                                               
    126                                               
    127                                                         BROADCAST:  
    128                                                          begin
    129                                                         if (i_i3cengine_en) begin  
    130                                                           if (i_tx_mode_done && i_scl_neg_edge )  // ****(scl neg edge condition check)
    131                                                             begin
    132             1                       4861                     state      <= ACK;
    133             1                       4861                     o_rx_en    <= 1'b1;
    134             1                       4861                     o_tx_en    <= 1'b0;
    135             1                       4861                     o_rx_mode  <= 3'b000;  // ACK mode in rx   
    136             1                       4861                     o_bit_cnt_en  <= 1'b0;
    137                                                             end
    138                                                           else 
    139                                                             begin
    140             1                     150691                      state <= BROADCAST; 
    141             1                     150691                      o_rx_en       <= 1'b1;   // rx block enable
    142             1                     150691                      o_rx_mode     <= 3'b010; // arbitration state   
    143                                                               
    144             1                     150691                      o_regf_rd_en  <= 1'b1;
    145             1                     150691                      o_regf_addr   <= 12'b000000101110; // 9'd46 >> broadcast address in reg file ('h7E+w)
    146             1                     150691                      o_tx_en       <= 1'b1;
    147             1                     150691                      o_tx_mode     <= 3'b001;         // serializing state in TX
    148             1                     150691                      o_bit_cnt_en  <= 1'b1;
    149                                                             end
    150                                                          end
    151                                                          else
    152             1                    ***0***                 state <= IDLE;
    153                                                        end
    154                                                        
    155                                              
    156                                                         ACK:         
    157                                                          begin
    158             1                      14583                 o_regf_addr         <= 'd50;
    159             1                      14583                 o_regf_rd_en        <=  1'b1;
    160                                                           if(!i_rx_ack_nack && i_rx_mode_done ) //if ACK next state is ENTHDR_DDR  //&& i_scl_neg_edge
    161                                                             begin
    162             1                       4861                      state               <= ENTHDR_DDR;
    163             1                       4861                      o_regf_rd_en        <= 1'b1;  
    164             1                       4861                      o_regf_addr         <= 'd50;  //*** DDR Mode value added in the regfile but needs to be rechecked  
    165             1                       4861                      o_tx_mode           <= 3'b001;
    166                                                               
    167             1                       4861                      o_tx_en             <= 1'b1;
    168             1                       4861                       o_bit_cnt_en       <= 1'b1;                
    169                                                             end
    170                                                           else 
    171                                                             begin
    172             1                       9722                      state <= ACK;    //*** check: if not ack is received, what should be done?
    173             1                       9722                      o_rx_en    <= 1'b1;
    174             1                       9722                      o_tx_en    <= 1'b0;
    175             1                       9722                      o_rx_mode  <= 3'b000;  // ACK mode in rx   
    176             1                       9722                      o_bit_cnt_en  <= 1'b0;
    177                                                             end
    178                                                           end
    179                                               
    180                                               
    181                                                         ENTHDR_DDR: 
    182                                                          begin
    183                                                           if(i_tx_mode_done && i_scl_neg_edge)     // ****(scl neg edge condition check)
    184                                                             begin
    185             1                       4861                      state         <= PARITY;  // next state is parity to send the T bit
    186             1                       4861                      o_tx_en       <= 1'b1;
    187             1                       4861                      o_tx_mode     <= 3'b011;
    188             1                       4861                      o_bit_cnt_en  <= 1'b1;
    189                                              
    190                                                               //o_i3cengine_done <= 1'b1; //editttttttttt
    191                                                             end
    192                                                           else
    193                                                             begin
    194             1                     155552                      state               <= ENTHDR_DDR;
    195             1                     155552                      o_regf_rd_en        <= 1'b1;  
    196             1                     155552                      o_regf_addr         <= 'd50;  //*** DDR Mode value added in the regfile but needs to be rechecked  
    197             1                     155552                      o_tx_mode           <= 3'b001;
    198             1                     155552                      o_tx_en             <= 1'b1;
    199             1                     155552                      o_bit_cnt_en        <= 1'b1; 
    200                                                             end
    201                                                           end
    202                                               
    203                                               
    204                                                         PARITY:     
    205                                                          begin
    206                                              
    207             1                      19444                   o_i3cengine_done <= 1'b1;
    208                                                            if(i_tx_mode_done && i_scl_neg_edge)    ///*** T bit completion plus scl falling edge condition should be added
    209                                                             begin  //( && i_scl_neg_edge)
    210             1                       4861                      o_i3cengine_done <= 1'b1;
    211             1                       4861                      state            <= IDLE;
    212             1                       4861                      o_bit_cnt_en     <= 1'b0;
    213             1                       4861                      o_tx_en          <= 1'b0;
    214                                                             end
    215                                                            else
    216                                                             begin
    217             1                      14583                      o_i3cengine_done <= 1'b1;  //0
    218             1                      14583                      state            <= PARITY;
    219             1                      14583                      o_bit_cnt_en     <= 1'b1;
    220             1                      14583                      o_tx_en          <= 1'b1;
    221             1                      14583                      o_tx_mode        <= 3'b011;
    222                                                             
    223                                                             end
    224                                                           end
    225                                              
    226                                                         default:
    227                                                          begin
    228             1                          1                  o_regf_rd_en        <= 1'b0;
    229             1                          1                  o_tx_en             <= 1'b0;
    230             1                          1                  o_rx_en             <= 1'b0;
    231             1                          1                  o_i3cengine_done    <= 1'b0;
    232             1                          1                  o_tx_mode           <= 3'b0;
    233             1                          1                  o_rx_mode           <= 3'b0;
    234             1                          1                  o_regf_addr         <= 12'b0;
    235             1                          1                  state               <= IDLE;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         70        48        22    68.57%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_enthdr --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                             i_clk           1           1      100.00 
                                    i_i3cengine_en           1           1      100.00 
                                           i_rst_n           1           1      100.00 
                                     i_rx_ack_nack           1           1      100.00 
                                    i_rx_mode_done           1           1      100.00 
                                    i_scl_neg_edge           1           1      100.00 
                                    i_scl_pos_edge           1           1      100.00 
                                    i_tx_mode_done           1           1      100.00 
                                      o_bit_cnt_en           1           1      100.00 
                                  o_i3cengine_done           1           1      100.00 
                                           o_pp_od           0           0        0.00 
                                 o_regf_addr[11-6]           0           0        0.00 
                                  o_regf_addr[5-1]           1           1      100.00 
                                    o_regf_addr[0]           0           0        0.00 
                                      o_regf_rd_en           1           1      100.00 
                                           o_rx_en           1           1      100.00 
                                      o_rx_mode[2]           0           0        0.00 
                                      o_rx_mode[1]           1           1      100.00 
                                      o_rx_mode[0]           0           0        0.00 
                                           o_tx_en           1           1      100.00 
                                      o_tx_mode[2]           0           0        0.00 
                                    o_tx_mode[1-0]           1           1      100.00 
                                        state[2-0]           1           1      100.00 

Total Node Count     =         35 
Toggled Node Count   =         24 
Untoggled Node Count =         11 

Toggle Coverage      =      68.57% (48 of 70 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_hdr_engine
=== Design Unit: work.hdr_engine
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        26        15        11    57.69%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_hdr_engine

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File HDR_Engine.v
------------------------------------IF Branch------------------------------------
    92                                     49386     Count coming in to IF
    92              1                          1         if (!i_sys_rst_n) 
    106             1                      49385         else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    111                                    49385     Count coming in to CASE
    113             1                      19448               IDLE : begin
    177             1                      29936               CCC : begin
    282             1                    ***0***               DDR_MODE : begin
                                               1     All False Count
Branch totals: 3 hits of 4 branches = 75.00%

------------------------------------IF Branch------------------------------------
    119                                    19448     Count coming in to IF
    119             1                       9721                 if (i_i3cengine_hdrengine_en) 
    167             1                       9727               else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    123                                     9721     Count coming in to IF
    123             1                       9721                           if(i_CP_temp) 
    145             1                    ***0***                           else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    179                                    29936     Count coming in to IF
    179             1                      25076                 if (i_i3cengine_hdrengine_en) begin
    273             1                       4860     else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    182                                    25076     Count coming in to IF
    182             1                       4860                 if((i_TOC_temp && i_ccc_done)||(i_MODE_temp != 'd6)) begin     // ||(i_MODE != 'd6) assuming mode will not be changed unless an exit pattern was sent before it. -laila
    192             1                       5140                 else if ((!i_TOC_temp && i_ccc_done) && (i_MODE_temp == 'd6)) begin
    263             1                      15076                 else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    205                                     5140     Count coming in to IF
    205             1                    ***0***                       if(!i_CP_temp) 
    213             1                       5140                       else
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    222                                     5140     Count coming in to IF
    222             1                    ***0***                       if(i_ccc_done && ccc_done && !i_CP_temp ) begin
    244             1                       5140                       else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    284                                  ***0***     Count coming in to IF
    284             1                    ***0***     if (i_i3cengine_hdrengine_en) begin
    349             1                    ***0***     else begin
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    288                                  ***0***     Count coming in to IF
    288             1                    ***0***                 if ((i_TOC_temp && i_ddr_mode_done)||(i_MODE_temp != 'd6)) begin
    294             1                    ***0***                 else if ((!i_TOC_temp && i_ddr_mode_done) && (i_MODE_temp == 'd6)) begin
    343             1                    ***0***                 else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    304                                  ***0***     Count coming in to IF
    304             1                    ***0***                       if (!i_CP_temp) begin
    323             1                    ***0***                       else begin
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      15         4        11    26.66%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_hdr_engine --

  File HDR_Engine.v
----------------Focused Condition View-------------------
Line       182 Item    1  ((i_TOC_temp && i_ccc_done) || (i_MODE_temp != 6))
Condition totals: 2 of 3 input terms covered = 66.66%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
          i_TOC_temp         Y
          i_ccc_done         Y
  (i_MODE_temp != 6)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_TOC_temp_0          ~(i_MODE_temp != 6)           
  Row   2:          1  i_TOC_temp_1          i_ccc_done                    
  Row   3:          1  i_ccc_done_0          (~(i_MODE_temp != 6) && i_TOC_temp)
  Row   4:          1  i_ccc_done_1          i_TOC_temp                    
  Row   5:          1  (i_MODE_temp != 6)_0  ~(i_TOC_temp && i_ccc_done)   
  Row   6:    ***0***  (i_MODE_temp != 6)_1  ~(i_TOC_temp && i_ccc_done)   

----------------Focused Condition View-------------------
Line       192 Item    1  ((~i_TOC_temp && i_ccc_done) && (i_MODE_temp == 6))
Condition totals: 2 of 3 input terms covered = 66.66%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
          i_TOC_temp         Y
          i_ccc_done         Y
  (i_MODE_temp == 6)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_TOC_temp_0          ((i_MODE_temp == 6) && i_ccc_done)
  Row   2:          1  i_TOC_temp_1          -                             
  Row   3:          1  i_ccc_done_0          ~i_TOC_temp                   
  Row   4:          1  i_ccc_done_1          ((i_MODE_temp == 6) && ~i_TOC_temp)
  Row   5:    ***0***  (i_MODE_temp == 6)_0  (~i_TOC_temp && i_ccc_done)   
  Row   6:          1  (i_MODE_temp == 6)_1  (~i_TOC_temp && i_ccc_done)   

----------------Focused Condition View-------------------
Line       222 Item    1  ((i_ccc_done && ccc_done) && ~i_CP_temp)
Condition totals: 0 of 3 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  i_ccc_done         N  No hits                  Hit '_0' and '_1'
    ccc_done         N  '_1' not hit             Hit '_1'
   i_CP_temp         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_ccc_done_0          -                             
  Row   2:    ***0***  i_ccc_done_1          (~i_CP_temp && ccc_done)      
  Row   3:          1  ccc_done_0            i_ccc_done                    
  Row   4:    ***0***  ccc_done_1            (~i_CP_temp && i_ccc_done)    
  Row   5:    ***0***  i_CP_temp_0           (i_ccc_done && ccc_done)      
  Row   6:    ***0***  i_CP_temp_1           (i_ccc_done && ccc_done)      

----------------Focused Condition View-------------------
Line       288 Item    1  ((i_TOC_temp && i_ddr_mode_done) || (i_MODE_temp != 6))
Condition totals: 0 of 3 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
          i_TOC_temp         N  No hits                  Hit '_0' and '_1'
     i_ddr_mode_done         N  No hits                  Hit '_0' and '_1'
  (i_MODE_temp != 6)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_TOC_temp_0          ~(i_MODE_temp != 6)           
  Row   2:    ***0***  i_TOC_temp_1          i_ddr_mode_done               
  Row   3:    ***0***  i_ddr_mode_done_0     (~(i_MODE_temp != 6) && i_TOC_temp)
  Row   4:    ***0***  i_ddr_mode_done_1     i_TOC_temp                    
  Row   5:    ***0***  (i_MODE_temp != 6)_0  ~(i_TOC_temp && i_ddr_mode_done)
  Row   6:    ***0***  (i_MODE_temp != 6)_1  ~(i_TOC_temp && i_ddr_mode_done)

----------------Focused Condition View-------------------
Line       294 Item    1  ((~i_TOC_temp && i_ddr_mode_done) && (i_MODE_temp == 6))
Condition totals: 0 of 3 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
          i_TOC_temp         N  No hits                  Hit '_0' and '_1'
     i_ddr_mode_done         N  No hits                  Hit '_0' and '_1'
  (i_MODE_temp == 6)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_TOC_temp_0          ((i_MODE_temp == 6) && i_ddr_mode_done)
  Row   2:    ***0***  i_TOC_temp_1          -                             
  Row   3:    ***0***  i_ddr_mode_done_0     ~i_TOC_temp                   
  Row   4:    ***0***  i_ddr_mode_done_1     ((i_MODE_temp == 6) && ~i_TOC_temp)
  Row   5:    ***0***  (i_MODE_temp == 6)_0  (~i_TOC_temp && i_ddr_mode_done)
  Row   6:    ***0***  (i_MODE_temp == 6)_1  (~i_TOC_temp && i_ddr_mode_done)


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                       3         2         1    66.66%
    FSM Transitions                  6         2         4    33.33%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/u_hdr_engine --

FSM_ID: next_state
    Current State Object : next_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 113                IDLE                   0
 282            DDR_MODE                   2
 177                 CCC                   1
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE               19448          
                     CCC               14861          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 126                   1                9721          IDLE -> CCC                   
 274                   4                9720          CCC -> IDLE                   
    Uncovered States :
    ------------------
                   State
                   -----
                DDR_MODE
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 148                   0          IDLE -> DDR_MODE    
 354                   2          DDR_MODE -> IDLE    
 325                   3          DDR_MODE -> CCC     
 227                   5          CCC -> DDR_MODE     


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                   3         2         1    66.66%
        FSM Transitions              6         2         4    33.33%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     160        70        90    43.75%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_hdr_engine --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File HDR_Engine.v
    32                                               module hdr_engine (
    33                                                   input   wire            i_sys_clk                             ,
    34                                                   input   wire            i_sys_rst_n                           ,
    35                                                   input   wire            i_i3cengine_hdrengine_en              , 
    36                                                   input   wire            i_ccc_done                            ,
    37                                                   input   wire            i_ddr_mode_done                       ,
    38                                                   input   wire            i_TOC                                 , //term of completion if 0 restart/ 1 exit needed for exit
    39                                                   input   wire            i_CP                                  , // Cmnd present=1 if CCC 0 for Normal Transcation
    40                                                   input   wire  [2:0]     i_MODE                                ,
    41                                                   //input   wire  [3:0]     i_TID                               ,
    42                                                   //to_blocks
    43                                                   output  reg             o_i3cengine_hdrengine_done            ,
    44                                                   output  reg             o_ddrmode_en                          ,
    45                                                   output  reg             o_ccc_en                              ,
    46                                               
    47                                                   output  reg   [11:0]    o_regf_addr_special                   ,
    48                                                   output  reg             o_int_regf_Dummy_conf                 ,
    49                                                   output  reg             o_cccnt_tx_special_data_mux_sel       , // by badr
    50                                               
    51                                                   output  reg             o_tx_en_sel                           ,
    52                                                   output  reg             o_rx_en_sel                           ,
    53                                                   output  reg             o_tx_mode_sel                         ,
    54                                                   output  reg             o_rx_mode_sel                         ,
    55                                                   output  reg             o_regf_rd_en_sel                      ,
    56                                                   output  reg             o_regf_wr_en_sel                      ,
    57                                                   output  reg             o_regf_addr_sel                       ,
    58                                                   output  reg             o_scl_pp_od_sel                       ,
    59                                                   output  reg             o_bit_cnt_en_sel                      ,
    60                                                   output  reg             o_frm_cnt_en_sel                      ,
    61                                                   output  reg             o_hdr_scl_stall_en_sel                , //new
    62                                                   output  reg             o_hdr_scl_stall_cycles_sel            , //new
    63                                                   output  reg             o_sdahand_pp_od_sel                   ,
    64                                                   output  reg             o_crc_rx_tx_mux_sel_ccc_nt_sel          //MAGH              
    65                                                                           
    66                                               
    67                                               
    68                                                   );
    69                                               
    70                                               
    71                                               
    72                                               /////////////parameters////////////
    73                                               localparam  IDLE          = 2'b00;
    74                                               localparam  CCC           = 2'b01;
    75                                               localparam  DDR_MODE      = 2'b10;
    76                                               
    77                                               reg [1:0] current_state, next_state;
    78                                               reg ccc_done;
    79                                               reg i_CP_temp;
    80                                               reg i_TOC_temp;
    81                                               reg [2:0] i_MODE_temp;
    82                                               
    83                                               
    84                                               /////////////Mux Selection Parameters///////////////
    85                                               localparam DDR_SEL=1'b0;
    86                                               localparam CCC_SEL=1'b1;
    87                                               
    88                                               //--------------------------------- main ------------------------------------------------
    89                                               
    90              1                      49386     always @(posedge i_sys_clk or negedge i_sys_rst_n ) 
    91                                                 begin: hdr_engine_fsm
    92                                                   if (!i_sys_rst_n) 
    93                                                       begin
    94              1                          1                 o_i3cengine_hdrengine_done      <= 1'b0   ;
    95              1                          1                 o_ddrmode_en                    <= 1'b0   ;
    96              1                          1                 o_ccc_en                        <= 1'b0   ;
    97              1                          1                 o_regf_addr_special             <= 12'd1000 ;
    98              1                          1                 o_int_regf_Dummy_conf           <= 0 ;
    99              1                          1                 i_CP_temp   <= 1'b0;
    100             1                          1                 i_TOC_temp    <=1'b0;
    101             1                          1                 i_MODE_temp   <='d6;
    102                                                          //current_state                   <= IDLE ;
    103             1                          1                 next_state                   <= IDLE ;
    104                                                      end
    105                                              
    106                                                  else 
    107                                                    begin
    108             1                      49385           o_regf_addr_special             <= 12'd1000 ;
    109             1                      49385           o_int_regf_Dummy_conf           <= 0 ;
    110                                                      //current_state <= next_state;
    111                                                      case (next_state)    //case (current_state)
    112                                              
    113                                                        IDLE : begin
    114                                              
    115                                                          // register the configuration values from regfile
    116             1                      19448                   i_CP_temp   <= i_CP;
    117             1                      19448                   i_TOC_temp  <= i_TOC;
    118             1                      19448                   i_MODE_temp <= i_MODE;
    119                                                          if (i_i3cengine_hdrengine_en) 
    120                                                           begin
    121                                              
    122                                              
    123                                                                    if(i_CP_temp) 
    124                                                                      begin
    125             1                       9721                                  o_ccc_en        <= 1'b1 ;
    126             1                       9721                                  next_state      <= CCC ;
    127                                                      
    128                                                                           // mux selectors         
    129             1                       9721                                  o_tx_en_sel            <=CCC_SEL;  
    130             1                       9721                                  o_rx_en_sel            <=CCC_SEL;
    131             1                       9721                                  o_tx_mode_sel          <=CCC_SEL;
    132             1                       9721                                  o_rx_mode_sel          <=CCC_SEL;
    133             1                       9721                                  o_regf_rd_en_sel       <=CCC_SEL;
    134             1                       9721                                  o_regf_wr_en_sel       <=CCC_SEL;
    135             1                       9721                                  o_regf_addr_sel        <=CCC_SEL;
    136             1                       9721                                  o_scl_pp_od_sel        <=CCC_SEL;
    137             1                       9721                                  o_bit_cnt_en_sel       <=CCC_SEL;
    138             1                       9721                                  o_frm_cnt_en_sel       <=CCC_SEL;
    139             1                       9721                                  o_sdahand_pp_od_sel    <=CCC_SEL; 
    140             1                       9721                                  o_hdr_scl_stall_en_sel <=CCC_SEL ;             
    141             1                       9721                                  o_hdr_scl_stall_cycles_sel <=CCC_SEL;
    142             1                       9721                                  o_cccnt_tx_special_data_mux_sel  <=CCC_SEL; // badr  
    143             1                       9721                                  o_crc_rx_tx_mux_sel_ccc_nt_sel   <=CCC_SEL; //magh
    144                                                                       end
    145                                                                    else 
    146                                                                      begin
    147             1                    ***0***                                   o_ddrmode_en      <= 1'b1 ;
    148             1                    ***0***                                   next_state        <= DDR_MODE ;
    149             1                    ***0***                                  o_tx_en_sel            <=DDR_SEL;  
    150             1                    ***0***                                  o_rx_en_sel            <=DDR_SEL;
    151             1                    ***0***                                  o_tx_mode_sel          <=DDR_SEL;
    152             1                    ***0***                                  o_rx_mode_sel          <=DDR_SEL;
    153             1                    ***0***                                  o_regf_rd_en_sel       <=DDR_SEL;
    154             1                    ***0***                                  o_regf_wr_en_sel       <=DDR_SEL;
    155             1                    ***0***                                  o_regf_addr_sel        <=DDR_SEL;
    156             1                    ***0***                                  o_scl_pp_od_sel        <=DDR_SEL;
    157             1                    ***0***                                  o_bit_cnt_en_sel       <=DDR_SEL;
    158             1                    ***0***                                  o_frm_cnt_en_sel       <=DDR_SEL;
    159             1                    ***0***                                  o_sdahand_pp_od_sel    <=DDR_SEL;  
    160             1                    ***0***                                  o_hdr_scl_stall_en_sel <=DDR_SEL ;             
    161             1                    ***0***                                  o_hdr_scl_stall_cycles_sel <=DDR_SEL;
    162             1                    ***0***                                  o_cccnt_tx_special_data_mux_sel  <=DDR_SEL; // badr   
    163             1                    ***0***                                  o_crc_rx_tx_mux_sel_ccc_nt_sel   <=DDR_SEL; //magh
    164                                                                      end
    165                                                        end
    166                                              
    167                                                        else
    168                                                            begin
    169             1                       9727                     o_i3cengine_hdrengine_done      <= 1'b0   ;
    170             1                       9727                     o_ddrmode_en                    <= 1'b0   ;
    171             1                       9727                     o_ccc_en                        <= 1'b0   ;
    172             1                       9727                     next_state                      <= IDLE;  
    173                                                            end
    174                                              
    175                                                        end 
    176                                              
    177                                                        CCC : begin
    178             1                      29936                 i_CP_temp   <= i_CP;
    179                                                          if (i_i3cengine_hdrengine_en) begin
    180                                              
    181                                                        
    182                                                          if((i_TOC_temp && i_ccc_done)||(i_MODE_temp != 'd6)) begin     // ||(i_MODE != 'd6) assuming mode will not be changed unless an exit pattern was sent before it. -laila
    183             1                       4860                       o_ccc_en    <= 1'b0 ;
    184             1                       4860                       o_i3cengine_hdrengine_done      <= 1'b1 ;
    185                                              
    186                                              
    187             1                       4860                       next_state <= IDLE;             
    188                                                                ///tid puts on output when the command is done
    189                                              
    190                                              
    191                                                          end
    192                                                          else if ((!i_TOC_temp && i_ccc_done) && (i_MODE_temp == 'd6)) begin
    193             1                       5140                   ccc_done                      <= 1'b0 ; //******signal 3mltha 3shan a3rf arg3 ll ddrmode*//////
    194             1                       5140                   o_ccc_en                      <= 1'b0 ;
    195             1                       5140                   o_regf_addr_special           <= 12'd1000;
    196             1                       5140                   o_int_regf_Dummy_conf         <= 0 ;
    197             1                       5140                   o_i3cengine_hdrengine_done    <= 1'b0 ;
    198                                                            ///tid puts on output when the command is done
    199                                                            
    200                                                          // register the configuration values from regfile
    201                                                            
    202             1                       5140                   i_TOC_temp  <= i_TOC;
    203             1                       5140                   i_MODE_temp <= i_MODE;
    204                                              
    205                                                                if(!i_CP_temp) 
    206                                                                begin
    207             1                    ***0***                         ccc_done   <= 1'b1 ;
    208             1                    ***0***                         o_regf_addr_special   <= 12'd450; //go to special address to get dummy value
    209             1                    ***0***                         o_int_regf_Dummy_conf <= 1 ;
    210             1                    ***0***                         o_ccc_en   <= 1'b1 ;
    211             1                    ***0***                         next_state <= CCC ; ////********lma yru7 y3ml al dummy hwdeh ddr azay*******//////////
    212                                                                end
    213                                                                else
    214                                                                  begin
    215             1                       5140                           o_ccc_en                      <= 1'b1 ;
    216             1                       5140                           o_regf_addr_special           <= 12'd1000;
    217             1                       5140                           o_int_regf_Dummy_conf         <= 0 ;
    218             1                       5140                           next_state                    <= CCC ;    
    219                                                                  end
    220                                              
    221                                                                ////****/////
    222                                                                if(i_ccc_done && ccc_done && !i_CP_temp ) begin
    223             1                    ***0***                         o_regf_addr_special           <= 12'd1000;
    224             1                    ***0***                         o_int_regf_Dummy_conf         <= 0 ;
    225             1                    ***0***                         o_ccc_en   <= 1'b0 ;
    226             1                    ***0***                         o_ddrmode_en <= 1'b1 ;
    227             1                    ***0***                         next_state   <= DDR_MODE ;
    228             1                    ***0***                          o_tx_en_sel            <=DDR_SEL;  
    229             1                    ***0***                          o_rx_en_sel            <=DDR_SEL;
    230             1                    ***0***                          o_tx_mode_sel          <=DDR_SEL;
    231             1                    ***0***                          o_rx_mode_sel          <=DDR_SEL;
    232             1                    ***0***                          o_regf_rd_en_sel       <=DDR_SEL;
    233             1                    ***0***                          o_regf_wr_en_sel       <=DDR_SEL;
    234             1                    ***0***                          o_regf_addr_sel        <=DDR_SEL;
    235             1                    ***0***                          o_scl_pp_od_sel        <=DDR_SEL;
    236             1                    ***0***                          o_bit_cnt_en_sel       <=DDR_SEL;
    237             1                    ***0***                          o_frm_cnt_en_sel       <=DDR_SEL;
    238             1                    ***0***                          o_sdahand_pp_od_sel    <=DDR_SEL; 
    239             1                    ***0***                          o_hdr_scl_stall_en_sel <=DDR_SEL ;             
    240             1                    ***0***                          o_hdr_scl_stall_cycles_sel <=DDR_SEL;
    241             1                    ***0***                          o_cccnt_tx_special_data_mux_sel  <=DDR_SEL; // badr
    242             1                    ***0***                          o_crc_rx_tx_mux_sel_ccc_nt_sel   <=DDR_SEL; //magh                       
    243                                                                end
    244                                                                else begin
    245             1                       5140                         next_state   <= CCC ;
    246             1                       5140                         o_tx_en_sel            <=CCC_SEL;  
    247             1                       5140                         o_rx_en_sel            <=CCC_SEL;
    248             1                       5140                         o_tx_mode_sel          <=CCC_SEL;
    249             1                       5140                         o_rx_mode_sel          <=CCC_SEL;
    250             1                       5140                         o_regf_rd_en_sel       <=CCC_SEL;
    251             1                       5140                         o_regf_wr_en_sel       <=CCC_SEL;
    252             1                       5140                         o_regf_addr_sel        <=CCC_SEL;
    253             1                       5140                         o_scl_pp_od_sel        <=CCC_SEL;
    254             1                       5140                         o_bit_cnt_en_sel       <=CCC_SEL;
    255             1                       5140                         o_frm_cnt_en_sel       <=CCC_SEL;
    256             1                       5140                         o_sdahand_pp_od_sel    <=CCC_SEL;
    257             1                       5140                         o_hdr_scl_stall_en_sel <=CCC_SEL ;             
    258             1                       5140                         o_hdr_scl_stall_cycles_sel <=CCC_SEL;
    259             1                       5140                         o_cccnt_tx_special_data_mux_sel  <=CCC_SEL; // badr
    260             1                       5140                          o_crc_rx_tx_mux_sel_ccc_nt_sel   <=CCC_SEL; //magh                   
    261                                                                  end  
    262                                                          end
    263                                                          else
    264                                                             begin
    265             1                      15076                       o_i3cengine_hdrengine_done      <= 1'b0 ;
    266             1                      15076                       o_ccc_en                      <= 1'b1 ;
    267                                                              end
    268                                                                
    269                                                        
    270                                                        
    271                                              end
    272                                              
    273                                              else
    274             1                       4860                     next_state                      <= IDLE;
    275                                                             /* o_i3cengine_hdrengine_done      <= 1'b0   ;
    276                                                              o_ddrmode_en                    <= 1'b0   ;
    277                                                              o_ccc_en                        <= 1'b0   ;
    278                                              */
    279                                              
    280                                              end
    281                                              
    282                                                        DDR_MODE : begin
    283             1                    ***0***                 i_CP_temp   <= i_CP;
    284                                              if (i_i3cengine_hdrengine_en) begin
    285                                              
    286                                              
    287                                                        
    288                                                          if ((i_TOC_temp && i_ddr_mode_done)||(i_MODE_temp != 'd6)) begin
    289             1                    ***0***                   o_ddrmode_en    <= 1'b0 ;
    290             1                    ***0***                   o_i3cengine_hdrengine_done      <= 1'b1 ;
    291             1                    ***0***                   next_state <= IDLE;
    292                                                            //tid puts on output when it is done
    293                                                          end
    294                                                          else if ((!i_TOC_temp && i_ddr_mode_done) && (i_MODE_temp == 'd6)) begin
    295             1                    ***0***                   o_ddrmode_en    <= 1'b0 ;
    296             1                    ***0***                   o_i3cengine_hdrengine_done    <= 1'b0 ;
    297                                                            //tid puts on output when it is done
    298                                              
    299                                                        // register the new configuration values from regfile
    300                                                            
    301             1                    ***0***                   i_TOC_temp  <= i_TOC;
    302             1                    ***0***                   i_MODE_temp <= i_MODE;
    303                                              
    304                                                                if (!i_CP_temp) begin
    305             1                    ***0***                         o_ddrmode_en <= 1'b1 ;
    306             1                    ***0***                         next_state   <= DDR_MODE ;
    307             1                    ***0***                          o_tx_en_sel            <=DDR_SEL;  
    308             1                    ***0***                          o_rx_en_sel            <=DDR_SEL;
    309             1                    ***0***                          o_tx_mode_sel          <=DDR_SEL;
    310             1                    ***0***                          o_rx_mode_sel          <=DDR_SEL;
    311             1                    ***0***                          o_regf_rd_en_sel       <=DDR_SEL;
    312             1                    ***0***                          o_regf_wr_en_sel       <=DDR_SEL;
    313             1                    ***0***                          o_regf_addr_sel        <=DDR_SEL;
    314             1                    ***0***                          o_scl_pp_od_sel        <=DDR_SEL;
    315             1                    ***0***                          o_bit_cnt_en_sel       <=DDR_SEL;
    316             1                    ***0***                          o_frm_cnt_en_sel       <=DDR_SEL;
    317             1                    ***0***                          o_sdahand_pp_od_sel    <=DDR_SEL;
    318             1                    ***0***                          o_hdr_scl_stall_en_sel <=DDR_SEL ;             
    319             1                    ***0***                          o_hdr_scl_stall_cycles_sel <=DDR_SEL;
    320             1                    ***0***                          o_cccnt_tx_special_data_mux_sel  <=DDR_SEL; // badr 
    321             1                    ***0***                          o_crc_rx_tx_mux_sel_ccc_nt_sel   <=DDR_SEL; //magh                          
    322                                                                end
    323                                                                else begin
    324             1                    ***0***                         o_ccc_en <= 1'b1 ;
    325             1                    ***0***                         next_state <= CCC ;
    326             1                    ***0***                          o_tx_en_sel            <=CCC_SEL;  
    327             1                    ***0***                          o_rx_en_sel            <=CCC_SEL;
    328             1                    ***0***                          o_tx_mode_sel          <=CCC_SEL;
    329             1                    ***0***                          o_rx_mode_sel          <=CCC_SEL;
    330             1                    ***0***                          o_regf_rd_en_sel       <=CCC_SEL;
    331             1                    ***0***                          o_regf_wr_en_sel       <=CCC_SEL;
    332             1                    ***0***                          o_regf_addr_sel        <=CCC_SEL;
    333             1                    ***0***                          o_scl_pp_od_sel        <=CCC_SEL;
    334             1                    ***0***                          o_bit_cnt_en_sel       <=CCC_SEL;
    335             1                    ***0***                          o_frm_cnt_en_sel       <=CCC_SEL;
    336             1                    ***0***                          o_sdahand_pp_od_sel    <=CCC_SEL;
    337             1                    ***0***                          o_hdr_scl_stall_en_sel <=CCC_SEL ;             
    338             1                    ***0***                          o_hdr_scl_stall_cycles_sel <=CCC_SEL;
    339             1                    ***0***                          o_cccnt_tx_special_data_mux_sel  <=CCC_SEL; // badr    
    340             1                    ***0***                          o_crc_rx_tx_mux_sel_ccc_nt_sel   <=CCC_SEL; //magh                       
    341                                                                end
    342                                                          end
    343                                                          else
    344                                                            begin
    345             1                    ***0***                     o_i3cengine_hdrengine_done      <= 1'b0 ;
    346             1                    ***0***                     o_ddrmode_en                    <= 1'b1   ;
    347                                                            end
    348                                                        end
    349                                              else begin
    350                                              
    351             1                    ***0***                       o_i3cengine_hdrengine_done      <= 1'b0   ;
    352             1                    ***0***                     o_ddrmode_en                    <= 1'b0   ;
    353             1                    ***0***                     o_ccc_en                        <= 1'b0   ;
    354             1                    ***0***                     next_state                      <= IDLE; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        102        26        76    25.49%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_hdr_engine --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                          ccc_done           0           0        0.00 
                                current_state[1-0]           0           0        0.00 
                                              i_CP           0           1       50.00 
                                         i_CP_temp           0           1       50.00 
                                         i_MODE[0]           0           0        0.00 
                                       i_MODE[1-2]           0           1       50.00 
                                  i_MODE_temp[2-1]           1           1      100.00 
                                    i_MODE_temp[0]           0           0        0.00 
                                             i_TOC           1           1      100.00 
                                        i_TOC_temp           1           1      100.00 
                                        i_ccc_done           1           1      100.00 
                                   i_ddr_mode_done           0           0        0.00 
                          i_i3cengine_hdrengine_en           1           1      100.00 
                                         i_sys_clk           1           1      100.00 
                                       i_sys_rst_n           1           1      100.00 
                                     next_state[1]           0           0        0.00 
                                     next_state[0]           1           1      100.00 
                                  o_bit_cnt_en_sel           0           0        0.00 
                                          o_ccc_en           1           1      100.00 
                   o_cccnt_tx_special_data_mux_sel           0           0        0.00 
                    o_crc_rx_tx_mux_sel_ccc_nt_sel           0           0        0.00 
                                      o_ddrmode_en           0           0        0.00 
                                  o_frm_cnt_en_sel           0           0        0.00 
                        o_hdr_scl_stall_cycles_sel           0           0        0.00 
                            o_hdr_scl_stall_en_sel           0           0        0.00 
                        o_i3cengine_hdrengine_done           1           1      100.00 
                             o_int_regf_Dummy_conf           0           0        0.00 
                                   o_regf_addr_sel           0           0        0.00 
                         o_regf_addr_special[11-0]           0           0        0.00 
                                  o_regf_rd_en_sel           0           0        0.00 
                                  o_regf_wr_en_sel           0           0        0.00 
                                       o_rx_en_sel           0           0        0.00 
                                     o_rx_mode_sel           0           0        0.00 
                                   o_scl_pp_od_sel           0           0        0.00 
                               o_sdahand_pp_od_sel           0           0        0.00 
                                       o_tx_en_sel           0           0        0.00 
                                     o_tx_mode_sel           0           0        0.00 

Total Node Count     =         51 
Toggled Node Count   =         11 
Untoggled Node Count =         40 

Toggle Coverage      =      25.49% (26 of 102 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_rd_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_rd_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      19448       always @ ( * )
    31                                                 begin
    32              1                      19448         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         6        18    25.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_rd_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-3]           0           0        0.00 
                                        data_in[4]           0           1       50.00 
                                        data_in[5]           0           0        0.00 
                                        data_in[6]           0           1       50.00 
                                        data_in[7]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          2 
Untoggled Node Count =         10 

Toggle Coverage      =      25.00% (6 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_rd_address_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_rd_address_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      19449       always @ ( * )
    31                                                 begin
    32              1                      19449         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        222        28       194    12.61%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_rd_address_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                     data_in[0-48]           0           0        0.00 
                                    data_in[49-51]           0           1       50.00 
                                       data_in[52]           0           0        0.00 
                                       data_in[53]           0           1       50.00 
                                    data_in[54-72]           0           0        0.00 
                                    data_in[73-75]           0           1       50.00 
                                       data_in[76]           0           0        0.00 
                                       data_in[77]           0           1       50.00 
                                    data_in[78-84]           0           0        0.00 
                                    data_in[85-89]           1           1      100.00 
                                    data_in[90-95]           0           0        0.00 
                                    data_out[11-6]           0           0        0.00 
                                     data_out[5-1]           1           1      100.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =        111 
Toggled Node Count   =         10 
Untoggled Node Count =        101 

Toggle Coverage      =      12.61% (28 of 222 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_wr_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_wr_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          4       always @ ( * )
    31                                                 begin
    32              1                          4         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_wr_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_wr_data_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_wr_data_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          1       always @ ( * )
    31                                                 begin
    32              1                          1         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50         0        50     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_wr_data_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                     data_in[0-15]           0           0        0.00 
                                     data_out[7-0]           0           0        0.00 

Total Node Count     =         25 
Toggled Node Count   =          0 
Untoggled Node Count =         25 

Toggle Coverage      =       0.00% (0 of 50 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/scl_pp_od_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/scl_pp_od_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      19447       always @ ( * )
    31                                                 begin
    32              1                      19447         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         9        15    37.50%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/scl_pp_od_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                       ctrl_sel[1]           0           0        0.00 
                                       ctrl_sel[2]           1           1      100.00 
                                      data_in[0-1]           0           0        0.00 
                                        data_in[2]           1           1      100.00 
                                      data_in[3-5]           0           0        0.00 
                                        data_in[6]           1           0       50.00 
                                        data_in[7]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          4 
Untoggled Node Count =          8 

Toggle Coverage      =      37.50% (9 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/scl_idle_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/scl_idle_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      19445       always @ ( * )
    31                                                 begin
    32              1                      19445         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         8        16    33.33%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/scl_idle_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                       ctrl_sel[1]           0           0        0.00 
                                       ctrl_sel[2]           1           1      100.00 
                                      data_in[0-1]           0           0        0.00 
                                        data_in[2]           1           1      100.00 
                                      data_in[3-7]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          4 
Untoggled Node Count =          8 

Toggle Coverage      =      33.33% (8 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/tx_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/tx_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      34029       always @ ( * )
    31                                                 begin
    32              1                      34029         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24        10        14    41.66%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/tx_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                       ctrl_sel[1]           0           0        0.00 
                                       ctrl_sel[2]           1           1      100.00 
                                      data_in[0-1]           0           0        0.00 
                                        data_in[2]           1           1      100.00 
                                      data_in[3-6]           0           0        0.00 
                                        data_in[7]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          5 
Untoggled Node Count =          7 

Toggle Coverage      =      41.66% (10 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/tx_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/tx_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      38889       always @ ( * )
    31                                                 begin
    32              1                      38889         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         60        14        46    23.33%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/tx_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                       ctrl_sel[1]           0           0        0.00 
                                       ctrl_sel[2]           1           1      100.00 
                                      data_in[0-6]           0           0        0.00 
                                        data_in[7]           1           1      100.00 
                                     data_in[8-20]           0           0        0.00 
                                    data_in[21-22]           1           1      100.00 
                                       data_in[23]           0           0        0.00 
                                       data_out[2]           0           0        0.00 
                                     data_out[1-0]           1           1      100.00 

Total Node Count     =         30 
Toggled Node Count   =          7 
Untoggled Node Count =         23 

Toggle Coverage      =      23.33% (14 of 60 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/rx_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/rx_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                       9727       always @ ( * )
    31                                                 begin
    32              1                       9727         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         5        19    20.83%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/rx_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                        data_in[0]           0           0        0.00 
                                        data_in[1]           0           1       50.00 
                                      data_in[2-6]           0           0        0.00 
                                        data_in[7]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          2 
Untoggled Node Count =         10 

Toggle Coverage      =      20.83% (5 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/rx_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/rx_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                       9726       always @ ( * )
    31                                                 begin
    32              1                       9726         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         60         4        56     6.66%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/rx_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                     data_in[0-21]           0           0        0.00 
                                       data_in[22]           1           1      100.00 
                                       data_in[23]           0           0        0.00 
                                       data_out[2]           0           0        0.00 
                                       data_out[1]           1           1      100.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         30 
Toggled Node Count   =          2 
Untoggled Node Count =         28 

Toggle Coverage      =       6.66% (4 of 60 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/bit_cnt_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/bit_cnt_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      29168       always @ ( * )
    31                                                 begin
    32              1                      29168         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         8        16    33.33%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/bit_cnt_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                       ctrl_sel[1]           0           0        0.00 
                                       ctrl_sel[2]           1           1      100.00 
                                      data_in[0-6]           0           0        0.00 
                                        data_in[7]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =         12 
Toggled Node Count   =          4 
Untoggled Node Count =          8 

Toggle Coverage      =      33.33% (8 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/bit_rx_cnt_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/bit_rx_cnt_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          3       always @ ( * )
    31                                                 begin
    32              1                          3         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/bit_rx_cnt_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/fcnt_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/fcnt_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          3       always @ ( * )
    31                                                 begin
    32              1                          3         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/fcnt_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/fcnt_no_frms_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/fcnt_no_frms_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          3       always @ ( * )
    31                                                 begin
    32              1                          3         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        150         5       145     3.33%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/fcnt_no_frms_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                        data_in[0]           0           0        0.00 
                                        data_in[1]           0           1       50.00 
                                      data_in[2-8]           0           0        0.00 
                                        data_in[9]           0           1       50.00 
                                    data_in[10-16]           0           0        0.00 
                                       data_in[17]           0           1       50.00 
                                    data_in[18-39]           0           0        0.00 
                                    data_in[40-41]           0           1       50.00 
                                    data_in[42-63]           0           0        0.00 
                                     data_out[7-0]           0           0        0.00 

Total Node Count     =         75 
Toggled Node Count   =          0 
Untoggled Node Count =         75 

Toggle Coverage      =       3.33% (5 of 150 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/bits_cnt_regf_rx_tx_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/bits_cnt_regf_rx_tx_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          3       always @ ( * )
    31                                                 begin
    32              1                          3         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/bits_cnt_regf_rx_tx_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/scl_stall_flag_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         0         2     0.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/scl_stall_flag_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                    ***0***       always @ ( * )
    31                                                 begin
    32              1                    ***0***         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/scl_stall_flag_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/scl_stall_cycles_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         0         2     0.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/scl_stall_cycles_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                    ***0***       always @ ( * )
    31                                                 begin
    32              1                    ***0***         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         96         0        96     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/scl_stall_cycles_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                     data_in[0-39]           0           0        0.00 
                                     data_out[4-0]           0           0        0.00 

Total Node Count     =         48 
Toggled Node Count   =          0 
Untoggled Node Count =         48 

Toggle Coverage      =       0.00% (0 of 96 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_fcnt_en_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_fcnt_en_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          2       always @ ( * )
    31                                                 begin
    32              1                          2         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         24         0        24     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_fcnt_en_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     ctrl_sel[0-2]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =         12 
Toggled Node Count   =          0 
Untoggled Node Count =         12 

Toggle Coverage      =       0.00% (0 of 24 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/sda_handling_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/sda_handling_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                     368355       always @ ( * )
    31                                                 begin
    32              1                     368355         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         8         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/sda_handling_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          4 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (8 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_special_data_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_special_data_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      15452       always @ ( * )
    31                                                 begin
    32              1                      15452         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50        28        22    56.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_special_data_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-7]           0           0        0.00 
                                     data_in[8-14]           1           1      100.00 
                                       data_in[15]           0           0        0.00 
                                       data_out[7]           0           0        0.00 
                                     data_out[6-0]           1           1      100.00 

Total Node Count     =         25 
Toggled Node Count   =         14 
Untoggled Node Count =         11 

Toggle Coverage      =      56.00% (28 of 50 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_rd_en_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_rd_en_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      38466       always @ ( * )
    31                                                 begin
    32              1                      38466         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         4         4    50.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_rd_en_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                        data_in[0]           0           0        0.00 
                                        data_in[1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          2 
Untoggled Node Count =          2 

Toggle Coverage      =      50.00% (4 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_wr_en_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_wr_en_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          2       always @ ( * )
    31                                                 begin
    32              1                          2         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         0         8     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_wr_en_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =          4 
Toggled Node Count   =          0 
Untoggled Node Count =          4 

Toggle Coverage      =       0.00% (0 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_rd_address__hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_rd_address__hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      27328       always @ ( * )
    31                                                 begin
    32              1                      27328         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         74        12        62    16.21%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_rd_address__hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                     data_in[0-11]           0           0        0.00 
                                    data_in[12-13]           1           1      100.00 
                                       data_in[14]           0           0        0.00 
                                       data_in[15]           1           1      100.00 
                                    data_in[16-23]           0           0        0.00 
                                    data_out[11-4]           0           0        0.00 
                                       data_out[3]           1           1      100.00 
                                       data_out[2]           0           0        0.00 
                                     data_out[1-0]           1           1      100.00 

Total Node Count     =         37 
Toggled Node Count   =          6 
Untoggled Node Count =         31 

Toggle Coverage      =      16.21% (12 of 74 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/tx_en_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/tx_en_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      57049       always @ ( * )
    31                                                 begin
    32              1                      57049         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         4         4    50.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/tx_en_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                        data_in[0]           0           0        0.00 
                                        data_in[1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          2 
Untoggled Node Count =          2 

Toggle Coverage      =      50.00% (4 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/rx_en_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/rx_en_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      27328       always @ ( * )
    31                                                 begin
    32              1                      27328         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         4         4    50.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/rx_en_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                        data_in[0]           0           0        0.00 
                                        data_in[1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          2 
Untoggled Node Count =          2 

Toggle Coverage      =      50.00% (4 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/tx_mode_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/tx_mode_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                     167948       always @ ( * )
    31                                                 begin
    32              1                     167948         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         26        16        10    61.53%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/tx_mode_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-3]           0           0        0.00 
                                      data_in[4-7]           1           1      100.00 
                                     data_out[3-0]           1           1      100.00 

Total Node Count     =         13 
Toggled Node Count   =          8 
Untoggled Node Count =          5 

Toggle Coverage      =      61.53% (16 of 26 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/rx_mode_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/rx_mode_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          2       always @ ( * )
    31                                                 begin
    32              1                          2         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         20         0        20     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/rx_mode_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-5]           0           0        0.00 
                                     data_out[2-0]           0           0        0.00 

Total Node Count     =         10 
Toggled Node Count   =          0 
Untoggled Node Count =         10 

Toggle Coverage      =       0.00% (0 of 20 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/scl_pp_od_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/scl_pp_od_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                          2       always @ ( * )
    31                                                 begin
    32              1                          2         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         0         8     0.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/scl_pp_od_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =          4 
Toggled Node Count   =          0 
Untoggled Node Count =          4 

Toggle Coverage      =       0.00% (0 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/bit_cnt_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/bit_cnt_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      38587       always @ ( * )
    31                                                 begin
    32              1                      38587         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         5         3    62.50%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/bit_cnt_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                        data_in[0]           1           0       50.00 
                                        data_in[1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          2 
Untoggled Node Count =          2 

Toggle Coverage      =      62.50% (5 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/frm_cnt_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/frm_cnt_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      20003       always @ ( * )
    31                                                 begin
    32              1                      20003         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         5         3    62.50%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/frm_cnt_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                        data_in[0]           1           0       50.00 
                                        data_in[1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          2 
Untoggled Node Count =          2 

Toggle Coverage      =      62.50% (5 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/scl_stall_flag_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/scl_stall_flag_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      28864       always @ ( * )
    31                                                 begin
    32              1                      28864         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         4         4    50.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/scl_stall_flag_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                        data_in[0]           0           0        0.00 
                                        data_in[1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          2 
Untoggled Node Count =          2 

Toggle Coverage      =      50.00% (4 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/scl_stall_cycles_hdr_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/scl_stall_cycles_hdr_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      28864       always @ ( * )
    31                                                 begin
    32              1                      28864         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         32        16        16    50.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/scl_stall_cycles_hdr_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                      data_in[0-4]           0           0        0.00 
                                      data_in[5-8]           1           1      100.00 
                                        data_in[9]           0           0        0.00 
                                       data_out[4]           0           0        0.00 
                                     data_out[3-0]           1           1      100.00 

Total Node Count     =         16 
Toggled Node Count   =          8 
Untoggled Node Count =          8 

Toggle Coverage      =      50.00% (16 of 32 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/scl_stall_cycles_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/scl_stall_cycles_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      38585       always @ ( * )
    31                                                 begin
    32              1                      38585         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         32        18        14    56.25%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/scl_stall_cycles_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-4]           0           0        0.00 
                                      data_in[5-8]           1           1      100.00 
                                        data_in[9]           0           0        0.00 
                                       data_out[4]           0           0        0.00 
                                     data_out[3-0]           1           1      100.00 

Total Node Count     =         16 
Toggled Node Count   =          9 
Untoggled Node Count =          7 

Toggle Coverage      =      56.25% (18 of 32 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/scl_stall_flag_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/scl_stall_flag_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      38585       always @ ( * )
    31                                                 begin
    32              1                      38585         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         6         2    75.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/scl_stall_flag_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           0           0        0.00 
                                        data_in[1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          3 
Untoggled Node Count =          1 

Toggle Coverage      =      75.00% (6 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/reg_rd_en_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/reg_rd_en_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      67632       always @ ( * )
    31                                                 begin
    32              1                      67632         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         8         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/reg_rd_en_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          4 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (8 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/reg_wr_en_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/reg_wr_en_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                       9724       always @ ( * )
    31                                                 begin
    32              1                       9724         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         2         6    25.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/reg_wr_en_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           0           0        0.00 

Total Node Count     =          4 
Toggled Node Count   =          1 
Untoggled Node Count =          3 

Toggle Coverage      =      25.00% (2 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_rd_address_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_rd_address_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      56493       always @ ( * )
    31                                                 begin
    32              1                      56493         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         74        38        36    51.35%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_rd_address_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           0           0        0.00 
                                      data_in[1-5]           1           1      100.00 
                                     data_in[6-11]           0           0        0.00 
                                    data_in[12-13]           1           1      100.00 
                                       data_in[14]           0           0        0.00 
                                       data_in[15]           1           1      100.00 
                                    data_in[16-23]           0           0        0.00 
                                   data_out[11-10]           0           0        0.00 
                                     data_out[9-0]           1           1      100.00 

Total Node Count     =         37 
Toggled Node Count   =         19 
Untoggled Node Count =         18 

Toggle Coverage      =      51.35% (38 of 74 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_wr_data_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_wr_data_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                       9724       always @ ( * )
    31                                                 begin
    32              1                       9724         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50         2        48     4.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_wr_data_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                     data_in[0-15]           0           0        0.00 
                                     data_out[7-0]           0           0        0.00 

Total Node Count     =         25 
Toggled Node Count   =          1 
Untoggled Node Count =         24 

Toggle Coverage      =       4.00% (2 of 50 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/scl_pp_od_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/scl_pp_od_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      19445       always @ ( * )
    31                                                 begin
    32              1                      19445         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         6         2    75.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/scl_pp_od_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           1           1      100.00 
                                        data_in[1]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          3 
Untoggled Node Count =          1 

Toggle Coverage      =      75.00% (6 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/tx_en_mode_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/tx_en_mode_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      95936       always @ ( * )
    31                                                 begin
    32              1                      95936         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         8         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/tx_en_mode_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          4 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (8 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/reg_wr_en_config_data_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/reg_wr_en_config_data_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      20003       always @ ( * )
    31                                                 begin
    32              1                      20003         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         4         4    50.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/reg_wr_en_config_data_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-1]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          2 
Untoggled Node Count =          2 

Toggle Coverage      =      50.00% (4 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_rd_address_config_data_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_rd_address_config_data_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                     151631       always @ ( * )
    31                                                 begin
    32              1                     151631         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         74        48        26    64.86%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_rd_address_config_data_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-9]           1           1      100.00 
                                    data_in[10-11]           0           0        0.00 
                                    data_in[12-14]           1           1      100.00 
                                    data_in[15-23]           0           0        0.00 
                                   data_out[11-10]           0           0        0.00 
                                     data_out[9-0]           1           1      100.00 

Total Node Count     =         37 
Toggled Node Count   =         24 
Untoggled Node Count =         13 

Toggle Coverage      =      64.86% (48 of 74 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/regf_wr_data_config_data_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/regf_wr_data_config_data_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      99829       always @ ( * )
    31                                                 begin
    32              1                      99829         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50        34        16    68.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/regf_wr_data_config_data_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-7]           0           0        0.00 
                                     data_in[8-15]           1           1      100.00 
                                     data_out[7-0]           1           1      100.00 

Total Node Count     =         25 
Toggled Node Count   =         17 
Untoggled Node Count =          8 

Toggle Coverage      =      68.00% (34 of 50 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/reg_rd_en_config_data_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/reg_rd_en_config_data_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      77910       always @ ( * )
    31                                                 begin
    32              1                      77910         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         6         2    75.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/reg_rd_en_config_data_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           1           1      100.00 
                                        data_in[1]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          3 
Untoggled Node Count =          1 

Toggle Coverage      =      75.00% (6 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/CCC_Handler
=== Design Unit: work.CCC_Handler
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                       218       130        88    59.63%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/CCC_Handler

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File CCC_Handler.v
------------------------------------CASE Branch------------------------------------
    302                                     8923     Count coming in to CASE
    303             1                       1005                 8'h80 : Direct_Broadcast_n = 1'b1 ;   // ENEC     
    304             1                        981                 8'h81 : Direct_Broadcast_n = 1'b1 ;   // DISEC       
    305             1                       1007                 8'h89 : Direct_Broadcast_n = 1'b1 ;   // SETMWL        
    306             1                        984                 8'h8A : Direct_Broadcast_n = 1'b1 ;   // SETMRL        
    307             1                    ***0***                 8'h8B : Direct_Broadcast_n = 1'b1 ;   // GETMWL          
    308             1                    ***0***                 8'h8C : Direct_Broadcast_n = 1'b1 ;   // GETMRL        
    309             1                    ***0***                 8'h90 : Direct_Broadcast_n = 1'b1 ;   // GETSTATUS  
    310             1                    ***0***                 8'h8D : Direct_Broadcast_n = 1'b1 ;   // GETPID       
    311             1                    ***0***                 8'h8E : Direct_Broadcast_n = 1'b1 ;   // GETBCR        
    312             1                    ***0***                 8'h8F : Direct_Broadcast_n = 1'b1 ;   // GETDCR      
    314             1                        976                 8'h00 : Direct_Broadcast_n = 1'b0 ;   // ENEC      (broadcast version)
    315             1                        934                 8'h01 : Direct_Broadcast_n = 1'b0 ;   // DISEC     (broadcast version)
    316             1                        967                 8'h09 : Direct_Broadcast_n = 1'b0 ;   // SETMWL    (broadcast version)
    317             1                       1033                 8'h0A : Direct_Broadcast_n = 1'b0 ;   // SETMRL    (broadcast version)
    320             1                       1036                 8'h1F : Direct_Broadcast_n = 1'b0 ;    // Dummy CCC value for end procedure
    321             1                    ***0***                 default : Direct_Broadcast_n = 1'b0 ;  // broadcast by default
Branch totals: 9 hits of 16 branches = 56.25%

------------------------------------IF Branch------------------------------------
    326                                    77566     Count coming in to IF
    326             1                          1         if (!i_sys_rst) begin
    330             1                      77565         else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    331                                    77565     Count coming in to IF
    331             1                      65688             if (i_engine_en) begin 
    336             1                      11877             else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    345                                     6687     Count coming in to IF
    345             1                    ***0***             if      (!i_regf_CMD_ATTR[0] && i_regf_DBP)                                                         
    347             1                    ***0***             else if ( i_regf_CMD_ATTR[0] && ( i_regf_DTT == 3'd5 ||  i_regf_DTT == 3'd6 || i_regf_DTT == 3'd7))  
    349             1                       6687             else                                                                                                
Branch totals: 1 hit of 3 branches = 33.33%

------------------------------------IF Branch------------------------------------
    359                                   101020     Count coming in to IF
    359             1                          1         if (!i_sys_rst) begin
    363             1                     101019         else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    364                                   101019     Count coming in to IF
    364             1                      28862             if (i_sclstall_stall_done) begin
    368             1                      43293             else if (pulse_counter > 0) begin
    372             1                      28864             else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    391                                   396385     Count coming in to IF
    391             1                          1             if (!i_sys_rst) begin
    394             1                     396384             else  begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    421                                   475623     Count coming in to CASE
    423             1                      39236                 IDLE : begin                     // aw arbitration if needed  
    475             1                      97045                 PRE_CMD : begin // i'm driving the 2 bits with 2'b01
    503             1                    ***0***                 PRE_CRC_TARGET : begin // target is driving the 2 bits with 2'b01
    527             1                      20000                 RNW : begin
    550             1                      21261                 RESERVED : begin
    582             1                      21401                 SECOND_CMD_BYTE : begin  // contains either 7E or any target address 
    625             1                      20000                 PARITY_CMD : begin 
    645             1                      20000                 PRE_FIRST_DATA_ONE : begin // should be 10 to mean ACK ,    and 11 is NACK
    665             1                      20000                 PRE_FIRST_DATA_TWO : begin 
    749             1                      11138                 CCC_BYTE : begin    // contains CCC value
    774             1                    ***0***                 DEFINING_BYTE : begin    // contains definaing byte if exist
    792             1                      22430                 ZEROS : begin                               // eight zeros fixed at regfile (e.g location 999)
    827             1                      27326                 PARITY_DATA : begin // parity state any Data word
    878             1                       7326                 PRE_DATA_ONE : begin  //  11  means ok continue , and 10 to be aborted 
    919             1                       7326                 PRE_DATA_TWO : begin 
    1009            1                      19480                 FIRST_DATA_BYTE : begin    // contains first repeated data byte
    1101            1                      10203                 SECOND_DATA_BYTE : begin   // contains second repeated data byte
    1160            1                      28864                 C_TOKEN_STATE : begin 
    1196            1                      28862                 CRC_CHECKSUM_STATE : begin 
    1279            1                    ***0***                 RESTART_PATTERN_SPECIAL : begin 
    1313            1                      19142                 RESTART_PATTERN : begin 
    1372            1                      14580                 EXIT_PATTERN : begin 
    1404            1                    ***0***                 ERROR : begin      // controller error state 
    1449            1                      20000                 FINISH : begin 
                                               3     All False Count
Branch totals: 21 hits of 25 branches = 84.00%

------------------------------------IF Branch------------------------------------
    448                                    39236     Count coming in to IF
    448             1                      22364                     if (i_engine_en) begin 
    456             1                      16872                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    476                                    97045     Count coming in to IF
    476             1                      92185                     if (i_engine_en) begin 
    498             1                       4860                     else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    484                                    92185     Count coming in to IF
    484             1                      10000                         if (i_tx_mode_done && !(i_frmcnt_last_frame || (Direct_Broadcast_n && first_time))) begin   
    487             1                      14432                         else if (    (i_tx_mode_done || (i_rx_mode_done && !i_rx_error))   &&    (i_frmcnt_last_frame  || (Direct_Broadcast_n_del && first_time))   ) begin  // at reading operation with matched data length
    490             1                    ***0***                         else if ((i_tx_mode_done || (i_rx_mode_done && i_rx_error)) && (i_frmcnt_last_frame  || (Direct_Broadcast_n_del && first_time))) begin  // at reading operation with matched data length
    494             1                      67753                         else begin 
Branch totals: 3 hits of 4 branches = 75.00%

------------------------------------IF Branch------------------------------------
    504                                  ***0***     Count coming in to IF
    504             1                    ***0***                     if (i_engine_en) begin
    522             1                    ***0***                     else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    511                                  ***0***     Count coming in to IF
    511             1                    ***0***                         if ((i_rx_mode_done ) && i_frmcnt_last_frame) begin  // HENAAAAAAAAAAAAAA PUT THE CONDITION AFTER VERIFICATIONS (i_rx_mode_done && ! rx_err)
    514             1                    ***0***                         else if (i_rx_mode_done ) begin  // at reading operation with matched data length    HENA BARDO PUT THE CONDITION (i_rx_mode_done && rx_err)
    518             1                    ***0***                         else begin 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    533                                    20000     Count coming in to IF
    533             1                      11138                     if (first_time) begin 
    536             1                       8862                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    537                                     8862     Count coming in to IF
    537             1                    ***0***                         if (i_regf_RnW) o_tx_mode = one  ; // read 
    538             1                       8862                         else            o_tx_mode = zero  ; // write 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    541                                    20000     Count coming in to IF
    541             1                      10000                     if (i_tx_mode_done) begin 
    544             1                      10000                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    558                                    21261     Count coming in to IF
    558             1                      10000                     if (i_tx_mode_done) begin 
    577             1                      11261                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    587                                    21401     Count coming in to IF
    587             1                      11138                     if (first_time) begin 
    599             1                      10263                     else if (Direct_Broadcast_n_del && !first_time) begin 
    612             1                    ***0***                     else begin 
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    592                                    11138     Count coming in to IF
    592             1                       5569                         if (i_tx_mode_done) begin 
    595             1                       5569                         else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    604                                    10263     Count coming in to IF
    604             1                       4431                         if (i_tx_mode_done) begin 
    607             1                       5832                         else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    616                                  ***0***     Count coming in to IF
    616             1                    ***0***                         if (i_tx_mode_done) begin 
    619             1                    ***0***                         else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    632                                    20000     Count coming in to IF
    632             1                      10000                     if (i_tx_mode_done) begin 
    636             1                      10000                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    654                                    20000     Count coming in to IF
    654             1                      10000                     if (i_tx_mode_done) begin
    659             1                      10000                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    673                                    20000     Count coming in to IF
    673             1                       5569                     if (i_rx_mode_done && !i_rx_pre && first_time) begin
    684             1                       4431                     else if (i_rx_mode_done && !i_rx_pre && !first_time) begin 
    717             1                    ***0***                     else if (i_rx_mode_done && i_rx_pre) begin 
    723             1                      10000                     else begin 
Branch totals: 3 hits of 4 branches = 75.00%

------------------------------------IF Branch------------------------------------
    686                                     4431     Count coming in to IF
    686             1                    ***0***                         if (!i_regf_CMD_ATTR[0] && !i_regf_RnW) begin              // if regular command discriptor  (but long write) not supported cuurently but it's okk
    695             1                    ***0***                         else if (!i_regf_CMD_ATTR[0] && i_regf_RnW) begin              // if Read & Regular command discriptor  
    700             1                       4431                         else begin // if immediate
Branch totals: 1 hit of 3 branches = 33.33%

------------------------------------IF Branch------------------------------------
    703                                     4431     Count coming in to IF
    703             1                    ***0***                             if (Defining_byte) begin 
    707             1                       4431                             else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    731                                    20000     Count coming in to IF
    731             1                      20000                     if (!i_regf_RnW) begin  // write operation 
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    733                                    20000     Count coming in to IF
    733             1                    ***0***                         if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor 
    736             1                      20000                         else begin                                  // if immediate
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    737                                    20000     Count coming in to IF
    737             1                    ***0***                             if (Defining_byte) begin 
    740             1                      20000                             else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    758                                    11138     Count coming in to IF
    758             1                    ***0***                     if (i_tx_mode_done && Defining_byte) begin   // if a defining byte exists
    763             1                       5569                     else if (i_tx_mode_done && !Defining_byte) begin
    768             1                       5569                     else begin 
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    784                                  ***0***     Count coming in to IF
    784             1                    ***0***                     if (i_tx_mode_done) begin   
    787             1                    ***0***                     else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    802                                    22430     Count coming in to IF
    802             1                    ***0***                     if (Direct_Broadcast_n_del && first_time) begin 
    805             1                      22430                     else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    809                                    22430     Count coming in to IF
    809             1                      13198                     if (i_frmcnt_last_frame) begin 
    812             1                       9232                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    816                                    22430     Count coming in to IF
    816             1                      10262                     if (i_tx_mode_done) begin   
    820             1                      12168                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    828                                    27326     Count coming in to IF
    828             1                      27326                     if (!i_regf_RnW || first_time) begin // write 
    850             1                    ***0***                     else begin // read 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    836                                    27326     Count coming in to IF
    836             1                      13663                         if  (i_tx_mode_done) begin // if broadcast
    846             1                      13663                         else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    838                                    13663     Count coming in to IF
    838             1                      10000                             if (i_frmcnt_last_frame || (Direct_Broadcast_n_del & first_time)) begin  // crc state only in case of Direct or in case of last data 
    841             1                       3663                             else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    856                                  ***0***     Count coming in to IF
    856             1                    ***0***                         if  (i_rx_mode_done && !i_rx_error) begin 
    867             1                    ***0***                         else if (i_rx_mode_done && i_rx_error) begin 
    872             1                    ***0***                         else begin 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    858                                  ***0***     Count coming in to IF
    858             1                    ***0***                             if (i_frmcnt_last_frame || Direct_Broadcast_n_del) begin  // crc state only in case of Direct or in case of last data 
    861             1                    ***0***                             else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    879                                     7326     Count coming in to IF
    879             1                       7326                     if (!i_regf_RnW) begin // write 
    897             1                    ***0***                     else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    887                                     7326     Count coming in to IF
    887             1                       3663                         if (i_tx_mode_done) begin
    892             1                       3663                         else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    905                                  ***0***     Count coming in to IF
    905             1                    ***0***                         if (i_rx_mode_done && i_rx_pre) begin
    909             1                    ***0***                         else if (i_rx_mode_done && !i_rx_pre) begin
    913             1                    ***0***                         else begin 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    920                                     7326     Count coming in to IF
    920             1                       7326                     if (!i_regf_RnW) begin // write
    963             1                    ***0***                     else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    928                                     7326     Count coming in to IF
    928             1                       3663                         if (i_rx_mode_done && i_rx_pre) begin  // ack by target
    954             1                    ***0***                         else if (i_rx_mode_done && !i_rx_pre) begin // abort by target
    959             1                       3663                         else begin 
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    936                                     3663     Count coming in to IF
    936             1                    ***0***                             if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor  
    940             1                       3663                             else begin                                  // if immediate
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    941                                     3663     Count coming in to IF
    941             1                    ***0***                                 if (Defining_byte) begin 
    946             1                       3663                                 else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    969                                  ***0***     Count coming in to IF
    969             1                    ***0***                         if (controller_abort) begin 
    972             1                    ***0***                         else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    977                                  ***0***     Count coming in to IF
    977             1                    ***0***                         if (i_tx_mode_done) begin  
    983             1                    ***0***                         else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    990                                     7326     Count coming in to IF
    990             1                       7326                     if (!i_regf_RnW) begin  // write operation 
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    992                                     7326     Count coming in to IF
    992             1                    ***0***                         if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor 
    995             1                       7326                         else begin                                  // if immediate
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    996                                     7326     Count coming in to IF
    996             1                    ***0***                             if (Defining_byte) begin 
    999             1                       7326                             else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1010                                   19480     Count coming in to IF
    1010            1                      19480                     if (!i_regf_RnW) begin  // write operation 
    1034            1                    ***0***                     else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1016                                   19480     Count coming in to IF
    1016            1                    ***0***                         if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor  
    1020            1                      19480                         else begin                                  // if immediate
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1021                                   19480     Count coming in to IF
    1021            1                    ***0***                             if (Defining_byte) begin 
    1026            1                      19480                             else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1036                                 ***0***     Count coming in to IF
    1036            1                    ***0***                     if (i_frmcnt_last_frame) begin 
    1039            1                    ***0***                     else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1048                                 ***0***     Count coming in to IF
    1048            1                    ***0***                         if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor  
    1052            1                    ***0***                         else begin  // there is no immediate case in the read operation 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1059                                   19480     Count coming in to IF
    1059            1                       4693                     if (i_tx_mode_done && i_frmcnt_last_frame) begin  // to handle odd number of bytes in both regular and immediate
    1067            1                    ***0***                     else if (i_rx_mode_done && i_frmcnt_last_frame) begin 
    1076            1                       3401                     else if ((i_rx_mode_done | i_tx_mode_done) && !i_frmcnt_last_frame) begin  
    1094            1                      11386                     else begin 
Branch totals: 3 hits of 4 branches = 75.00%

------------------------------------IF Branch------------------------------------
    1083                                    3401     Count coming in to IF
    1083            1                    ***0***                         if (!i_regf_CMD_ATTR[0]) begin              
    1086            1                       3401                         else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1102                                   10203     Count coming in to IF
    1102            1                      10203                     if (!i_regf_RnW) begin // write operation 
    1132            1                    ***0***                     else begin  // read operation 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1109                                   10203     Count coming in to IF
    1109            1                    ***0***                         if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor  
    1112            1                      10203                         else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1115                                   10203     Count coming in to IF
    1115            1                       3401                         if (i_tx_mode_done) begin 
    1128            1                       6802                         else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1117                                    3401     Count coming in to IF
    1117            1                       3401                             if (i_frmcnt_last_frame) begin 
    1122            1                    ***0***                             else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1140                                 ***0***     Count coming in to IF
    1140            1                    ***0***                         if (!i_regf_CMD_ATTR[0]) begin                          // if regular command discriptor  
    1143            1                    ***0***                         else begin  // there is no immediate case in the read operation 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1147                                 ***0***     Count coming in to IF
    1147            1                    ***0***                         if (i_rx_mode_done) begin   
    1153            1                    ***0***                         else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1162                                   28864     Count coming in to IF
    1162            1                      28864                     if (!i_regf_RnW || first_time) begin // write 
    1176            1                    ***0***                     else begin // read 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1169                                   28864     Count coming in to IF
    1169            1                      14432                         if (i_tx_mode_done) begin 
    1172            1                      14432                         else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1182                                 ***0***     Count coming in to IF
    1182            1                    ***0***                         if (i_rx_error) begin 
    1186            1                    ***0***                         else if (i_rx_mode_done && !i_rx_error) begin 
    1190            1                    ***0***                         else begin 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1198                                   28862     Count coming in to IF
    1198            1                      28862                     if (!i_regf_RnW || first_time) begin  // write 
    1242            1                    ***0***                     else begin 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1204                                   28862     Count coming in to IF
    1204            1                      14431                         if (i_tx_mode_done) begin 
    1238            1                      14431                         else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1206                                   14431     Count coming in to IF
    1206            1                       2719                             if (!Direct_Broadcast_n_del && i_regf_TOC) begin 
    1212            1                       2850                             else if (!Direct_Broadcast_n_del && !i_regf_TOC) begin 
    1218            1                       4431                             else if (Direct_Broadcast_n_del && first_time) begin 
    1224            1                       4431                             else if (Direct_Broadcast_n_del && !first_time) begin 
                                         ***0***     All False Count
Branch totals: 4 hits of 5 branches = 80.00%

------------------------------------IF Branch------------------------------------
    1225                                    4431     Count coming in to IF
    1225            1                       2290                                 if (!i_regf_TOC) begin 
    1230            1                       2141                                 else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1248                                 ***0***     Count coming in to IF
    1248            1                    ***0***                         if (i_rx_mode_done && !i_rx_error) begin 
    1272            1                    ***0***                         else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1249                                 ***0***     Count coming in to IF
    1249            1                    ***0***                             if (i_regf_TOC) begin 
    1260            1                    ***0***                             else begin  
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1293                                 ***0***     Count coming in to IF
    1293            1                    ***0***                     if(i_sclstall_stall_done_strtch)
    1295            1                    ***0***                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1299                                 ***0***     Count coming in to IF
    1299            1                    ***0***                     if (i_tx_mode_done  && i_frmcnt_last_frame) begin 
    1303            1                    ***0***                     else if (i_tx_mode_done  && !i_frmcnt_last_frame) begin 
    1307            1                    ***0***                     else begin 
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1346                                   19142     Count coming in to IF
    1346            1                       9571                     if (i_sclstall_stall_done_strtch) o_sclstall_en   = 1'b0 ;
    1347            1                       9571                     else                              o_sclstall_en   = 1'b1 ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1352                                   19142     Count coming in to IF
    1352            1                       5140                     if (i_tx_mode_done  && i_frmcnt_last_frame) begin 
    1356            1                       4431                     else if (i_tx_mode_done  && !i_frmcnt_last_frame) begin 
    1360            1                       9571                     else begin 
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1387                                   14580     Count coming in to IF
    1387            1                       9720                     if (i_sclstall_stall_done_strtch) o_sclstall_en   = 1'b0 ;
    1388            1                       4860                     else                              o_sclstall_en   = 1'b1 ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1392                                   14580     Count coming in to IF
    1392            1                       4860                     if (i_tx_mode_done) begin 
    1397            1                       9720                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1410                                 ***0***     Count coming in to IF
    1410            1                    ***0***                     if(i_rx_mode_done) begin 
    1420            1                    ***0***                     else begin 
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      95        24        71    25.26%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/CCC_Handler --

  File CCC_Handler.v
----------------Focused Condition View-------------------
Line       345 Item    1  (~i_regf_CMD_ATTR[0] && i_regf_DBP)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_regf_CMD_ATTR[0]         N  '_0' not hit             Hit '_0'
          i_regf_DBP         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_regf_CMD_ATTR[0]_0  i_regf_DBP                    
  Row   2:          1  i_regf_CMD_ATTR[0]_1  -                             
  Row   3:          1  i_regf_DBP_0          ~i_regf_CMD_ATTR[0]           
  Row   4:    ***0***  i_regf_DBP_1          ~i_regf_CMD_ATTR[0]           

----------------Focused Condition View-------------------
Line       347 Item    1  (i_regf_CMD_ATTR[0] && (((i_regf_DTT == 5) || (i_regf_DTT == 6)) || (i_regf_DTT == 7)))
Condition totals: 0 of 4 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_regf_CMD_ATTR[0]         N  '_1' not hit             Hit '_1'
   (i_regf_DTT == 5)         N  '_1' not hit             Hit '_1'
   (i_regf_DTT == 6)         N  '_1' not hit             Hit '_1'
   (i_regf_DTT == 7)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_regf_CMD_ATTR[0]_0  -                             
  Row   2:    ***0***  i_regf_CMD_ATTR[0]_1  (((i_regf_DTT == 5) || (i_regf_DTT == 6)) || (i_regf_DTT == 7))
  Row   3:          1  (i_regf_DTT == 5)_0   (i_regf_CMD_ATTR[0] && ~(i_regf_DTT == 7) && ~(i_regf_DTT == 6))
  Row   4:    ***0***  (i_regf_DTT == 5)_1   i_regf_CMD_ATTR[0]            
  Row   5:          1  (i_regf_DTT == 6)_0   (i_regf_CMD_ATTR[0] && ~(i_regf_DTT == 7) && ~(i_regf_DTT == 5))
  Row   6:    ***0***  (i_regf_DTT == 6)_1   (i_regf_CMD_ATTR[0] && ~(i_regf_DTT == 5))
  Row   7:          1  (i_regf_DTT == 7)_0   (i_regf_CMD_ATTR[0] && ~((i_regf_DTT == 5) || (i_regf_DTT == 6)))
  Row   8:    ***0***  (i_regf_DTT == 7)_1   (i_regf_CMD_ATTR[0] && ~((i_regf_DTT == 5) || (i_regf_DTT == 6)))

----------------Focused Condition View-------------------
Line       368 Item    1  (pulse_counter > 0)
Condition totals: 1 of 1 input term covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (pulse_counter > 0)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (pulse_counter > 0)_0  -                             
  Row   2:          1  (pulse_counter > 0)_1  -                             

----------------Focused Condition View-------------------
Line       484 Item    1  (i_tx_mode_done && (i_frmcnt_last_frame ~| (Direct_Broadcast_n && first_time)))
Condition totals: 4 of 4 input terms covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
       i_tx_mode_done         Y
  i_frmcnt_last_frame         Y
   Direct_Broadcast_n         Y
           first_time         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  i_tx_mode_done_0       -                             
  Row   2:          1  i_tx_mode_done_1       (i_frmcnt_last_frame ~| (Direct_Broadcast_n && first_time))
  Row   3:          1  i_frmcnt_last_frame_0  (i_tx_mode_done && ~(Direct_Broadcast_n && first_time))
  Row   4:          1  i_frmcnt_last_frame_1  (i_tx_mode_done && ~(Direct_Broadcast_n && first_time))
  Row   5:          1  Direct_Broadcast_n_0   (i_tx_mode_done && ~i_frmcnt_last_frame)
  Row   6:          1  Direct_Broadcast_n_1   (i_tx_mode_done && ~i_frmcnt_last_frame && first_time)
  Row   7:          1  first_time_0           (i_tx_mode_done && ~i_frmcnt_last_frame && Direct_Broadcast_n)
  Row   8:          1  first_time_1           (i_tx_mode_done && ~i_frmcnt_last_frame && Direct_Broadcast_n)

----------------Focused Condition View-------------------
Line       487 Item    1  ((i_tx_mode_done || (i_rx_mode_done && ~i_rx_error)) && (i_frmcnt_last_frame || (Direct_Broadcast_n_del && first_time)))
Condition totals: 3 of 6 input terms covered = 50.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
          i_tx_mode_done         Y
          i_rx_mode_done         N  '_1' not hit             Hit '_1'
              i_rx_error         N  No hits                  Hit '_0' and '_1'
     i_frmcnt_last_frame         Y
  Direct_Broadcast_n_del         Y
              first_time         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  i_tx_mode_done_0          ~(i_rx_mode_done && ~i_rx_error)
  Row   2:          1  i_tx_mode_done_1          (i_frmcnt_last_frame || (Direct_Broadcast_n_del && first_time))
  Row   3:          1  i_rx_mode_done_0          ~i_tx_mode_done               
  Row   4:    ***0***  i_rx_mode_done_1          ((i_frmcnt_last_frame || (Direct_Broadcast_n_del && first_time)) && ~i_tx_mode_done && ~i_rx_error)
  Row   5:    ***0***  i_rx_error_0              ((i_frmcnt_last_frame || (Direct_Broadcast_n_del && first_time)) && ~i_tx_mode_done && i_rx_mode_done)
  Row   6:    ***0***  i_rx_error_1              (~i_tx_mode_done && i_rx_mode_done)
  Row   7:          1  i_frmcnt_last_frame_0     ((i_tx_mode_done || (i_rx_mode_done && ~i_rx_error)) && ~(Direct_Broadcast_n_del && first_time))
  Row   8:          1  i_frmcnt_last_frame_1     (i_tx_mode_done || (i_rx_mode_done && ~i_rx_error))
  Row   9:          1  Direct_Broadcast_n_del_0  ((i_tx_mode_done || (i_rx_mode_done && ~i_rx_error)) && ~i_frmcnt_last_frame)
 Row   10:          1  Direct_Broadcast_n_del_1  ((i_tx_mode_done || (i_rx_mode_done && ~i_rx_error)) && ~i_frmcnt_last_frame && first_time)
 Row   11:    ***0***  first_time_0              ((i_tx_mode_done || (i_rx_mode_done && ~i_rx_error)) && ~i_frmcnt_last_frame && Direct_Broadcast_n_del)
 Row   12:          1  first_time_1              ((i_tx_mode_done || (i_rx_mode_done && ~i_rx_error)) && ~i_frmcnt_last_frame && Direct_Broadcast_n_del)

----------------Focused Condition View-------------------
Line       490 Item    1  ((i_tx_mode_done || (i_rx_mode_done && i_rx_error)) && (i_frmcnt_last_frame || (Direct_Broadcast_n_del && first_time)))
Condition totals: 0 of 6 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
          i_tx_mode_done         N  '_1' not hit             Hit '_1'
          i_rx_mode_done         N  '_1' not hit             Hit '_1'
              i_rx_error         N  No hits                  Hit '_0' and '_1'
     i_frmcnt_last_frame         N  '_1' not hit             Hit '_1'
  Direct_Broadcast_n_del         N  '_1' not hit             Hit '_1'
              first_time         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  i_tx_mode_done_0          ~(i_rx_mode_done && i_rx_error)
  Row   2:    ***0***  i_tx_mode_done_1          (i_frmcnt_last_frame || (Direct_Broadcast_n_del && first_time))
  Row   3:          1  i_rx_mode_done_0          ~i_tx_mode_done               
  Row   4:    ***0***  i_rx_mode_done_1          ((i_frmcnt_last_frame || (Direct_Broadcast_n_del && first_time)) && ~i_tx_mode_done && i_rx_error)
  Row   5:    ***0***  i_rx_error_0              (~i_tx_mode_done && i_rx_mode_done)
  Row   6:    ***0***  i_rx_error_1              ((i_frmcnt_last_frame || (Direct_Broadcast_n_del && first_time)) && ~i_tx_mode_done && i_rx_mode_done)
  Row   7:          1  i_frmcnt_last_frame_0     ((i_tx_mode_done || (i_rx_mode_done && i_rx_error)) && ~(Direct_Broadcast_n_del && first_time))
  Row   8:    ***0***  i_frmcnt_last_frame_1     (i_tx_mode_done || (i_rx_mode_done && i_rx_error))
  Row   9:          1  Direct_Broadcast_n_del_0  ((i_tx_mode_done || (i_rx_mode_done && i_rx_error)) && ~i_frmcnt_last_frame)
 Row   10:    ***0***  Direct_Broadcast_n_del_1  ((i_tx_mode_done || (i_rx_mode_done && i_rx_error)) && ~i_frmcnt_last_frame && first_time)
 Row   11:    ***0***  first_time_0              ((i_tx_mode_done || (i_rx_mode_done && i_rx_error)) && ~i_frmcnt_last_frame && Direct_Broadcast_n_del)
 Row   12:    ***0***  first_time_1              ((i_tx_mode_done || (i_rx_mode_done && i_rx_error)) && ~i_frmcnt_last_frame && Direct_Broadcast_n_del)

----------------Focused Condition View-------------------
Line       511 Item    1  (i_rx_mode_done && i_frmcnt_last_frame)
Condition totals: 0 of 2 input terms covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
       i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_frmcnt_last_frame         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0       -                             
  Row   2:    ***0***  i_rx_mode_done_1       i_frmcnt_last_frame           
  Row   3:    ***0***  i_frmcnt_last_frame_0  i_rx_mode_done                
  Row   4:    ***0***  i_frmcnt_last_frame_1  i_rx_mode_done                

----------------Focused Condition View-------------------
Line       599 Item    1  (Direct_Broadcast_n_del && ~first_time)
Condition totals: 0 of 2 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  Direct_Broadcast_n_del         N  '_0' not hit             Hit '_0'
              first_time         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  Direct_Broadcast_n_del_0  -                             
  Row   2:          1  Direct_Broadcast_n_del_1  ~first_time                   
  Row   3:          1  first_time_0              Direct_Broadcast_n_del        
  Row   4:    ***0***  first_time_1              Direct_Broadcast_n_del        

----------------Focused Condition View-------------------
Line       673 Item    1  ((i_rx_mode_done && ~i_rx_pre) && first_time)
Condition totals: 2 of 3 input terms covered = 66.66%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         Y
        i_rx_pre         N  '_1' not hit             Hit '_1'
      first_time         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_rx_mode_done_0      -                             
  Row   2:          1  i_rx_mode_done_1      (first_time && ~i_rx_pre)     
  Row   3:          1  i_rx_pre_0            (first_time && i_rx_mode_done)
  Row   4:    ***0***  i_rx_pre_1            i_rx_mode_done                
  Row   5:          1  first_time_0          (i_rx_mode_done && ~i_rx_pre) 
  Row   6:          1  first_time_1          (i_rx_mode_done && ~i_rx_pre) 

----------------Focused Condition View-------------------
Line       684 Item    1  ((i_rx_mode_done && ~i_rx_pre) && ~first_time)
Condition totals: 1 of 3 input terms covered = 33.33%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         Y
        i_rx_pre         N  '_1' not hit             Hit '_1'
      first_time         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_rx_mode_done_0      -                             
  Row   2:          1  i_rx_mode_done_1      (~first_time && ~i_rx_pre)    
  Row   3:          1  i_rx_pre_0            (~first_time && i_rx_mode_done)
  Row   4:    ***0***  i_rx_pre_1            i_rx_mode_done                
  Row   5:          1  first_time_0          (i_rx_mode_done && ~i_rx_pre) 
  Row   6:    ***0***  first_time_1          (i_rx_mode_done && ~i_rx_pre) 

----------------Focused Condition View-------------------
Line       686 Item    1  (i_regf_CMD_ATTR[0] ~| i_regf_RnW)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_regf_CMD_ATTR[0]         N  '_0' not hit             Hit '_0'
          i_regf_RnW         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_regf_CMD_ATTR[0]_0  ~i_regf_RnW                   
  Row   2:          1  i_regf_CMD_ATTR[0]_1  ~i_regf_RnW                   
  Row   3:    ***0***  i_regf_RnW_0          ~i_regf_CMD_ATTR[0]           
  Row   4:    ***0***  i_regf_RnW_1          ~i_regf_CMD_ATTR[0]           

----------------Focused Condition View-------------------
Line       695 Item    1  (~i_regf_CMD_ATTR[0] && i_regf_RnW)
Condition totals: 0 of 2 input terms covered = 0.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  i_regf_CMD_ATTR[0]         N  '_0' not hit             Hit '_0'
          i_regf_RnW         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_regf_CMD_ATTR[0]_0  i_regf_RnW                    
  Row   2:          1  i_regf_CMD_ATTR[0]_1  -                             
  Row   3:    ***0***  i_regf_RnW_0          ~i_regf_CMD_ATTR[0]           
  Row   4:    ***0***  i_regf_RnW_1          ~i_regf_CMD_ATTR[0]           

----------------Focused Condition View-------------------
Line       717 Item    1  (i_rx_mode_done && i_rx_pre)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  '_1' not hit             Hit '_1'
        i_rx_pre         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      i_rx_pre                      
  Row   3:    ***0***  i_rx_pre_0            i_rx_mode_done                
  Row   4:    ***0***  i_rx_pre_1            i_rx_mode_done                

----------------Focused Condition View-------------------
Line       758 Item    1  (i_tx_mode_done && Defining_byte)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         N  '_1' not hit             Hit '_1'
   Defining_byte         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_tx_mode_done_0      -                             
  Row   2:    ***0***  i_tx_mode_done_1      Defining_byte                 
  Row   3:          1  Defining_byte_0       i_tx_mode_done                
  Row   4:    ***0***  Defining_byte_1       i_tx_mode_done                

----------------Focused Condition View-------------------
Line       763 Item    1  (i_tx_mode_done && ~Defining_byte)
Condition totals: 1 of 2 input terms covered = 50.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_tx_mode_done         Y
   Defining_byte         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_tx_mode_done_0      -                             
  Row   2:          1  i_tx_mode_done_1      ~Defining_byte                
  Row   3:          1  Defining_byte_0       i_tx_mode_done                
  Row   4:    ***0***  Defining_byte_1       i_tx_mode_done                

----------------Focused Condition View-------------------
Line       802 Item    1  (Direct_Broadcast_n_del && first_time)
Condition totals: 0 of 2 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  Direct_Broadcast_n_del         N  '_1' not hit             Hit '_1'
              first_time         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  Direct_Broadcast_n_del_0  -                             
  Row   2:    ***0***  Direct_Broadcast_n_del_1  first_time                    
  Row   3:          1  first_time_0              Direct_Broadcast_n_del        
  Row   4:    ***0***  first_time_1              Direct_Broadcast_n_del        

----------------Focused Condition View-------------------
Line       828 Item    1  (~i_regf_RnW || first_time)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  i_regf_RnW         N  '_1' not hit             Hit '_1'
  first_time         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_regf_RnW_0          -                             
  Row   2:    ***0***  i_regf_RnW_1          ~first_time                   
  Row   3:    ***0***  first_time_0          i_regf_RnW                    
  Row   4:    ***0***  first_time_1          i_regf_RnW                    

----------------Focused Condition View-------------------
Line       838 Item    1  (i_frmcnt_last_frame || (Direct_Broadcast_n_del & first_time))
Condition totals: 1 of 3 input terms covered = 33.33%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
     i_frmcnt_last_frame         Y
  Direct_Broadcast_n_del         N  '_1' not hit             Hit '_1'
              first_time         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  i_frmcnt_last_frame_0     ~(Direct_Broadcast_n_del & first_time)
  Row   2:          1  i_frmcnt_last_frame_1     -                             
  Row   3:          1  Direct_Broadcast_n_del_0  (~i_frmcnt_last_frame && first_time)
  Row   4:    ***0***  Direct_Broadcast_n_del_1  (~i_frmcnt_last_frame && first_time)
  Row   5:    ***0***  first_time_0              (~i_frmcnt_last_frame && Direct_Broadcast_n_del)
  Row   6:    ***0***  first_time_1              (~i_frmcnt_last_frame && Direct_Broadcast_n_del)

----------------Focused Condition View-------------------
Line       856 Item    1  (i_rx_mode_done && ~i_rx_error)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
      i_rx_error         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      ~i_rx_error                   
  Row   3:    ***0***  i_rx_error_0          i_rx_mode_done                
  Row   4:    ***0***  i_rx_error_1          i_rx_mode_done                

----------------Focused Condition View-------------------
Line       858 Item    1  (i_frmcnt_last_frame || Direct_Broadcast_n_del)
Condition totals: 0 of 2 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
     i_frmcnt_last_frame         N  No hits                  Hit '_0' and '_1'
  Direct_Broadcast_n_del         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  i_frmcnt_last_frame_0     ~Direct_Broadcast_n_del       
  Row   2:    ***0***  i_frmcnt_last_frame_1     -                             
  Row   3:    ***0***  Direct_Broadcast_n_del_0  ~i_frmcnt_last_frame          
  Row   4:    ***0***  Direct_Broadcast_n_del_1  ~i_frmcnt_last_frame          

----------------Focused Condition View-------------------
Line       867 Item    1  (i_rx_mode_done && i_rx_error)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
      i_rx_error         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      i_rx_error                    
  Row   3:    ***0***  i_rx_error_0          i_rx_mode_done                
  Row   4:    ***0***  i_rx_error_1          i_rx_mode_done                

----------------Focused Condition View-------------------
Line       905 Item    1  (i_rx_mode_done && i_rx_pre)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
        i_rx_pre         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      i_rx_pre                      
  Row   3:    ***0***  i_rx_pre_0            i_rx_mode_done                
  Row   4:    ***0***  i_rx_pre_1            i_rx_mode_done                

----------------Focused Condition View-------------------
Line       909 Item    1  (i_rx_mode_done && ~i_rx_pre)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
        i_rx_pre         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      ~i_rx_pre                     
  Row   3:    ***0***  i_rx_pre_0            i_rx_mode_done                
  Row   4:    ***0***  i_rx_pre_1            i_rx_mode_done                

----------------Focused Condition View-------------------
Line       928 Item    1  (i_rx_mode_done && i_rx_pre)
Condition totals: 1 of 2 input terms covered = 50.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         Y
        i_rx_pre         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_rx_mode_done_0      -                             
  Row   2:          1  i_rx_mode_done_1      i_rx_pre                      
  Row   3:    ***0***  i_rx_pre_0            i_rx_mode_done                
  Row   4:          1  i_rx_pre_1            i_rx_mode_done                

----------------Focused Condition View-------------------
Line       954 Item    1  (i_rx_mode_done && ~i_rx_pre)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  '_1' not hit             Hit '_1'
        i_rx_pre         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      ~i_rx_pre                     
  Row   3:    ***0***  i_rx_pre_0            i_rx_mode_done                
  Row   4:    ***0***  i_rx_pre_1            i_rx_mode_done                

----------------Focused Condition View-------------------
Line       1059 Item    1  (i_tx_mode_done && i_frmcnt_last_frame)
Condition totals: 2 of 2 input terms covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
       i_tx_mode_done         Y
  i_frmcnt_last_frame         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  i_tx_mode_done_0       -                             
  Row   2:          1  i_tx_mode_done_1       i_frmcnt_last_frame           
  Row   3:          1  i_frmcnt_last_frame_0  i_tx_mode_done                
  Row   4:          1  i_frmcnt_last_frame_1  i_tx_mode_done                

----------------Focused Condition View-------------------
Line       1067 Item    1  (i_rx_mode_done && i_frmcnt_last_frame)
Condition totals: 0 of 2 input terms covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
       i_rx_mode_done         N  '_1' not hit             Hit '_1'
  i_frmcnt_last_frame         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  i_rx_mode_done_0       -                             
  Row   2:    ***0***  i_rx_mode_done_1       i_frmcnt_last_frame           
  Row   3:    ***0***  i_frmcnt_last_frame_0  i_rx_mode_done                
  Row   4:    ***0***  i_frmcnt_last_frame_1  i_rx_mode_done                

----------------Focused Condition View-------------------
Line       1076 Item    1  ((i_rx_mode_done | i_tx_mode_done) && ~i_frmcnt_last_frame)
Condition totals: 1 of 3 input terms covered = 33.33%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
       i_rx_mode_done         N  '_1' not hit             Hit '_1'
       i_tx_mode_done         Y
  i_frmcnt_last_frame         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  i_rx_mode_done_0       ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1       (~i_frmcnt_last_frame && ~i_tx_mode_done)
  Row   3:          1  i_tx_mode_done_0       ~i_rx_mode_done               
  Row   4:          1  i_tx_mode_done_1       (~i_frmcnt_last_frame && ~i_rx_mode_done)
  Row   5:          1  i_frmcnt_last_frame_0  (i_rx_mode_done | i_tx_mode_done)
  Row   6:    ***0***  i_frmcnt_last_frame_1  (i_rx_mode_done | i_tx_mode_done)

----------------Focused Condition View-------------------
Line       1162 Item    1  (~i_regf_RnW || first_time)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  i_regf_RnW         N  '_1' not hit             Hit '_1'
  first_time         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_regf_RnW_0          -                             
  Row   2:    ***0***  i_regf_RnW_1          ~first_time                   
  Row   3:    ***0***  first_time_0          i_regf_RnW                    
  Row   4:    ***0***  first_time_1          i_regf_RnW                    

----------------Focused Condition View-------------------
Line       1186 Item    1  (i_rx_mode_done && ~i_rx_error)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
      i_rx_error         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      ~i_rx_error                   
  Row   3:    ***0***  i_rx_error_0          i_rx_mode_done                
  Row   4:    ***0***  i_rx_error_1          i_rx_mode_done                

----------------Focused Condition View-------------------
Line       1198 Item    1  (~i_regf_RnW || first_time)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  i_regf_RnW         N  '_1' not hit             Hit '_1'
  first_time         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_regf_RnW_0          -                             
  Row   2:    ***0***  i_regf_RnW_1          ~first_time                   
  Row   3:    ***0***  first_time_0          i_regf_RnW                    
  Row   4:    ***0***  first_time_1          i_regf_RnW                    

----------------Focused Condition View-------------------
Line       1206 Item    1  (~Direct_Broadcast_n_del && i_regf_TOC)
Condition totals: 2 of 2 input terms covered = 100.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  Direct_Broadcast_n_del         Y
              i_regf_TOC         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  Direct_Broadcast_n_del_0  i_regf_TOC                    
  Row   2:          1  Direct_Broadcast_n_del_1  -                             
  Row   3:          1  i_regf_TOC_0              ~Direct_Broadcast_n_del       
  Row   4:          1  i_regf_TOC_1              ~Direct_Broadcast_n_del       

----------------Focused Condition View-------------------
Line       1212 Item    1  (Direct_Broadcast_n_del ~| i_regf_TOC)
Condition totals: 1 of 2 input terms covered = 50.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  Direct_Broadcast_n_del         Y
              i_regf_TOC         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  Direct_Broadcast_n_del_0  ~i_regf_TOC                   
  Row   2:          1  Direct_Broadcast_n_del_1  ~i_regf_TOC                   
  Row   3:          1  i_regf_TOC_0              ~Direct_Broadcast_n_del       
  Row   4:    ***0***  i_regf_TOC_1              ~Direct_Broadcast_n_del       

----------------Focused Condition View-------------------
Line       1218 Item    1  (Direct_Broadcast_n_del && first_time)
Condition totals: 1 of 2 input terms covered = 50.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  Direct_Broadcast_n_del         N  '_0' not hit             Hit '_0'
              first_time         Y

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  Direct_Broadcast_n_del_0  -                             
  Row   2:          1  Direct_Broadcast_n_del_1  first_time                    
  Row   3:          1  first_time_0              Direct_Broadcast_n_del        
  Row   4:          1  first_time_1              Direct_Broadcast_n_del        

----------------Focused Condition View-------------------
Line       1224 Item    1  (Direct_Broadcast_n_del && ~first_time)
Condition totals: 0 of 2 input terms covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  Direct_Broadcast_n_del         N  '_0' not hit             Hit '_0'
              first_time         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:    ***0***  Direct_Broadcast_n_del_0  -                             
  Row   2:          1  Direct_Broadcast_n_del_1  ~first_time                   
  Row   3:          1  first_time_0              Direct_Broadcast_n_del        
  Row   4:    ***0***  first_time_1              Direct_Broadcast_n_del        

----------------Focused Condition View-------------------
Line       1248 Item    1  (i_rx_mode_done && ~i_rx_error)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
      i_rx_error         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      -                             
  Row   2:    ***0***  i_rx_mode_done_1      ~i_rx_error                   
  Row   3:    ***0***  i_rx_error_0          i_rx_mode_done                
  Row   4:    ***0***  i_rx_error_1          i_rx_mode_done                

----------------Focused Condition View-------------------
Line       1299 Item    1  (i_tx_mode_done && i_frmcnt_last_frame)
Condition totals: 0 of 2 input terms covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
       i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_frmcnt_last_frame         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0       -                             
  Row   2:    ***0***  i_tx_mode_done_1       i_frmcnt_last_frame           
  Row   3:    ***0***  i_frmcnt_last_frame_0  i_tx_mode_done                
  Row   4:    ***0***  i_frmcnt_last_frame_1  i_tx_mode_done                

----------------Focused Condition View-------------------
Line       1303 Item    1  (i_tx_mode_done && ~i_frmcnt_last_frame)
Condition totals: 0 of 2 input terms covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
       i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_frmcnt_last_frame         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0       -                             
  Row   2:    ***0***  i_tx_mode_done_1       ~i_frmcnt_last_frame          
  Row   3:    ***0***  i_frmcnt_last_frame_0  i_tx_mode_done                
  Row   4:    ***0***  i_frmcnt_last_frame_1  i_tx_mode_done                

----------------Focused Condition View-------------------
Line       1352 Item    1  (i_tx_mode_done && i_frmcnt_last_frame)
Condition totals: 2 of 2 input terms covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
       i_tx_mode_done         Y
  i_frmcnt_last_frame         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  i_tx_mode_done_0       -                             
  Row   2:          1  i_tx_mode_done_1       i_frmcnt_last_frame           
  Row   3:          1  i_frmcnt_last_frame_0  i_tx_mode_done                
  Row   4:          1  i_frmcnt_last_frame_1  i_tx_mode_done                

----------------Focused Condition View-------------------
Line       1356 Item    1  (i_tx_mode_done && ~i_frmcnt_last_frame)
Condition totals: 1 of 2 input terms covered = 50.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
       i_tx_mode_done         Y
  i_frmcnt_last_frame         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  i_tx_mode_done_0       -                             
  Row   2:          1  i_tx_mode_done_1       ~i_frmcnt_last_frame          
  Row   3:          1  i_frmcnt_last_frame_0  i_tx_mode_done                
  Row   4:    ***0***  i_frmcnt_last_frame_1  i_tx_mode_done                


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                      24        20         4    83.33%
    FSM Transitions                 64        27        37    42.18%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/CCC_Handler --

FSM_ID: current_state
    Current State Object : current_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 423                IDLE                   0
 475             PRE_CMD                   1
1404               ERROR                  20
1160       C_TOKEN_STATE                  16
 527                 RNW                   2
 503      PRE_CRC_TARGET                  22
 550            RESERVED                   3
 582     SECOND_CMD_BYTE                   4
 625          PARITY_CMD                   5
 645  PRE_FIRST_DATA_ONE                   6
 665  PRE_FIRST_DATA_TWO                   7
1009     FIRST_DATA_BYTE                  14
 749            CCC_BYTE                   8
 792               ZEROS                  10
 774       DEFINING_BYTE                   9
 827         PARITY_DATA                  11
 878        PRE_DATA_ONE                  12
 919        PRE_DATA_TWO                  13
1101    SECOND_DATA_BYTE                  15
1196  CRC_CHECKSUM_STATE                  17
1313     RESTART_PATTERN                  18
1372        EXIT_PATTERN                  19
1279RESTART_PATTERN_SPECIAL                  23
1449              FINISH                  21
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    IDLE               24582          
                 PRE_CMD               58584          
           C_TOKEN_STATE               28864          
                     RNW               20000          
                RESERVED               20000          
         SECOND_CMD_BYTE               20000          
              PARITY_CMD               20000          
      PRE_FIRST_DATA_ONE               20000          
      PRE_FIRST_DATA_TWO               20000          
         FIRST_DATA_BYTE               16188          
                CCC_BYTE               11138          
                   ZEROS               20524          
             PARITY_DATA               27326          
            PRE_DATA_ONE                7326          
            PRE_DATA_TWO                7326          
        SECOND_DATA_BYTE                6802          
      CRC_CHECKSUM_STATE               28862          
         RESTART_PATTERN               19142          
            EXIT_PATTERN                9720          
                  FINISH               10000          
    Covered Transitions :
    ---------------------
Line            Trans_ID           Hit_count          Transition          
----            --------           ---------          ----------          
 449                   0               14861          IDLE -> PRE_CMD               
 499                   1                4860          PRE_CMD -> IDLE               
 488                   3               14432          PRE_CMD -> C_TOKEN_STATE          
 485                   4               10000          PRE_CMD -> RNW                
1187                   7               14431          C_TOKEN_STATE -> CRC_CHECKSUM_STATE          
 542                  10               10000          RNW -> RESERVED               
 559                  15               10000          RESERVED -> SECOND_CMD_BYTE          
 617                  17               10000          SECOND_CMD_BYTE -> PARITY_CMD          
 633                  19               10000          PARITY_CMD -> PRE_FIRST_DATA_ONE          
 655                  21               10000          PRE_FIRST_DATA_ONE -> PRE_FIRST_DATA_TWO          
 713                  24                4431          PRE_FIRST_DATA_TWO -> FIRST_DATA_BYTE          
 674                  25                5569          PRE_FIRST_DATA_TWO -> CCC_BYTE          
1077                  27                3401          FIRST_DATA_BYTE -> SECOND_DATA_BYTE          
1060                  28                4693          FIRST_DATA_BYTE -> ZEROS          
 766                  31                5569          CCC_BYTE -> ZEROS             
 817                  34               10262          ZEROS -> PARITY_DATA          
 862                  39                3663          PARITY_DATA -> PRE_DATA_ONE          
 839                  41               10000          PARITY_DATA -> PRE_CMD          
 906                  44                3663          PRE_DATA_ONE -> PRE_DATA_TWO          
 978                  46                3663          PRE_DATA_TWO -> FIRST_DATA_BYTE          
1148                  49                3401          SECOND_DATA_BYTE -> PARITY_DATA          
1261                  52                9571          CRC_CHECKSUM_STATE -> RESTART_PATTERN          
1250                  53                4860          CRC_CHECKSUM_STATE -> EXIT_PATTERN          
1357                  55                4431          RESTART_PATTERN -> PRE_CMD          
1353                  56                5140          RESTART_PATTERN -> FINISH          
1393                  58                4860          EXIT_PATTERN -> FINISH          
1460                  63               10000          FINISH -> IDLE                
    Uncovered States :
    ------------------
                   State
                   -----
                   ERROR
          PRE_CRC_TARGET
           DEFINING_BYTE
    RESTART_PATTERN_SPECIAL
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 491                   2          PRE_CMD -> ERROR    
1411                   5          ERROR -> EXIT_PATTERN
 392                   6          ERROR -> IDLE       
1183                   8          C_TOKEN_STATE -> ERROR
 392                   9          C_TOKEN_STATE -> IDLE
 392                  11          RNW -> IDLE         
 523                  12          PRE_CRC_TARGET -> IDLE
 515                  13          PRE_CRC_TARGET -> ERROR
 512                  14          PRE_CRC_TARGET -> C_TOKEN_STATE
 392                  16          RESERVED -> IDLE    
 392                  18          SECOND_CMD_BYTE -> IDLE
 392                  20          PARITY_CMD -> IDLE  
 392                  22          PRE_FIRST_DATA_ONE -> IDLE
 719                  23          PRE_FIRST_DATA_TWO -> ERROR
 392                  26          PRE_FIRST_DATA_TWO -> IDLE
1053                  29          FIRST_DATA_BYTE -> ERROR
 392                  30          FIRST_DATA_BYTE -> IDLE
 759                  32          CCC_BYTE -> DEFINING_BYTE
 392                  33          CCC_BYTE -> IDLE    
 392                  35          ZEROS -> IDLE       
 785                  36          DEFINING_BYTE -> PARITY_DATA
 392                  37          DEFINING_BYTE -> IDLE
 868                  38          PARITY_DATA -> ERROR
 859                  40          PARITY_DATA -> PRE_CRC_TARGET
 392                  42          PARITY_DATA -> IDLE 
 910                  43          PRE_DATA_ONE -> ERROR
 392                  45          PRE_DATA_ONE -> IDLE
 955                  47          PRE_DATA_TWO -> ERROR
 392                  48          PRE_DATA_TWO -> IDLE
1144                  50          SECOND_DATA_BYTE -> ERROR
 392                  51          SECOND_DATA_BYTE -> IDLE
 392                  54          CRC_CHECKSUM_STATE -> IDLE
 392                  57          RESTART_PATTERN -> IDLE
 392                  59          EXIT_PATTERN -> IDLE
1304                  60          RESTART_PATTERN_SPECIAL -> PRE_CMD
1300                  61          RESTART_PATTERN_SPECIAL -> FINISH
 392                  62          RESTART_PATTERN_SPECIAL -> IDLE


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                  24        20         4    83.33%
        FSM Transitions             64        27        37    42.18%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     410       246       164    60.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/CCC_Handler --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File CCC_Handler.v
    46                                               module CCC_Handler (
    47                                               input wire        i_sys_clk ,
    48                                               input wire        i_sys_rst ,
    49                                               input wire        i_engine_en ,                 // depends on CP flag 
    50                                               input wire [5:0]  i_bitcnt_number ,
    51                                               input wire        i_tx_mode_done ,
    52                                               input wire        i_rx_mode_done ,
    53                                               input wire        i_rx_pre ,
    54                                               input wire        i_sclstall_stall_done ,
    55                                               input wire        i_rx_error ,  
    56                                               input wire        i_frmcnt_last_frame ,
    57                                               
    58                                               // configuration Ports coming from regf
    59                                               input wire        i_i_regf_RnW       ,          
    60                                               input wire [2:0]  i_i_regf_CMD_ATTR  ,
    61                                               input wire [7:0]  i_i_regf_CMD       ,          // CCC value 
    62                                               input wire [4:0]  i_i_regf_DEV_INDEX ,
    63                                               input wire        i_i_regf_TOC       , 
    64                                               input wire        i_i_regf_WROC      , 
    65                                               
    66                                               // in case of immidiate command descriptor 
    67                                               input wire [2:0]  i_i_regf_DTT       , 
    68                                               
    69                                               // in case of regular command descriptor 
    70                                               input wire        i_i_regf_DBP       , 
    71                                               input wire        i_i_regf_SRE       , 
    72                                               //input wire [15:0] i_regf_DATA_LENGTH , // will be removed 
    73                                               
    74                                               // new for CCC Table 
    75                                               //input wire [4:0] i_no_of_targets ,
    76                                               
    77                                               output reg        o_frmcnt_Direct_Broadcast_n ,
    78                                               output reg        o_sclstall_en      ,
    79                                               output reg [4:0]  o_sclstall_code    ,
    80                                               output reg        o_tx_en            ,
    81                                               output reg [3:0]  o_tx_mode          ,
    82                                               output reg        o_rx_en    ,
    83                                               output reg [2:0]  o_rx_mode  ,
    84                                               
    85                                               //output reg        o_rx_en_negedge    ,
    86                                               //output reg [3:0]  o_rx_mode_negedge  ,
    87                                               
    88                                               
    89                                               output reg        o_bitcnt_en        ,
    90                                               output reg        o_bitcnt_err_rst   , 
    91                                               output reg        o_frmcnt_en        ,
    92                                               output reg        o_sdahand_pp_od    ,
    93                                               output reg        o_regf_wr_en       ,
    94                                               output reg        o_regf_rd_en       ,
    95                                               output reg [11:0] o_regf_addr        , // depends on the depth of the regfile
    96                                               output reg        o_engine_done      ,
    97                                               output reg [7:0]  o_txrx_addr_ccc    ,         
    98                                               output reg        o_engine_odd       ,         
    99                                               output reg [3:0]  o_regf_ERR_STATUS  , 
    100                                              
    101                                              //output reg        o_en_mux           ,  //  for CCC handler environment only for crc muxes btn tx and rx   ( 1 for tx and 0 for rx 
    102                                              output reg        o_crc_en_rx_tx_mux_sel,
    103                                              output reg        o_crc_data_rx_tx_valid_sel,
    104                                              output reg        o_crc_data_tx_rx_mux_sel,
    105                                              output wire       o_crc_last_byte_tx_rx_mux_sel,
    106                                              
    107                                              //output reg        o_en_mux           ,  //  for CCC handler environment only for crc muxes btn tx and rx   ( 1 for tx and 0 for rx 
    108                                              output reg        o_crc_rx_tx_mux_sel_ccc 
    109                                              
    110                                              /*output reg        o_crc_rx_tx_mux_sel_ccc,
    111                                              output reg        //o_crc_data_rx_tx_valid_sel,
    112                                              output reg        o_crc_rx_tx_mux_sel_ccc,
    113                                              output wire       o_crc_last_byte_tx_rx_mux_sel*/
    114                                              
    115                                              );   
    116                                              
    117                                              
    118                                              
    119                                              // internal signals 
    120                                              reg [4:0] current_state , next_state ;
    121             1                          1     reg       Direct_Broadcast_n     = 1'b0 ;                      // 1 for direct and 0 for broadcast
    122             1                          1     reg       Direct_Broadcast_n_del = 1'b0 ;           // delayed version of the above signal
    123                                              wire [6:0] target_addres ;
    124                                              reg       Defining_byte ; 
    125                                              reg       first_time ;
    126                                              reg       controller_abort ; // new by badr (needs to be assigned by some logic)
    127                                              integer   regular_counter ;
    128                                              integer   immediate_counter ; 
    129                                              reg [9:0] tmp_shift ;
    130                                              //reg [3:0] o_rx_mode ;
    131                                              //reg       o_rx_en ;
    132                                              
    133                                              //wire exit_setup; //laila edit
    134                                              
    135                                              
    136                                              // configuration 
    137                                              reg        i_regf_RnW       ;  
    138                                              reg [2:0]  i_regf_CMD_ATTR  ;
    139                                              reg [7:0]  i_regf_CMD       ;
    140                                              reg [4:0]  i_regf_DEV_INDEX ;
    141                                              reg        i_regf_TOC       ;
    142                                              reg        i_regf_WROC      ;
    143                                              reg [2:0]  i_regf_DTT       ;
    144                                              reg        i_regf_DBP       ;
    145                                              reg        i_regf_SRE       ;
    146                                              
    147                                              
    148                                              
    149                                              
    150                                              ///////////////////////////////// state encoding //////////////////////////////////////////////
    151                                              
    152                                              // localparam to prevent overriding the states from outside the design
    153                                              // as states encoding should never be modified from outside (while instatiation)
    154                                              // after revision i will convert the coding style to grey
    155                                              localparam  [4:0]  IDLE               = 5'd0  , // 0
    156                                                                 PRE_CMD            = 5'd1  , // 1
    157                                                                 RNW                = 5'd2  , // 2
    158                                                                 RESERVED           = 5'd3  , // 3
    159                                                                 SECOND_CMD_BYTE    = 5'd4  , // 4
    160                                                                 PARITY_CMD         = 5'd5  , 
    161                                                                 PRE_FIRST_DATA_ONE = 5'd6  , 
    162                                                                 PRE_FIRST_DATA_TWO = 5'd7  , 
    163                                                                 CCC_BYTE           = 5'd8  , 
    164                                                                 DEFINING_BYTE      = 5'd9  , 
    165                                                                 ZEROS              = 5'd10 ,
    166                                                                 PARITY_DATA        = 5'd11 ,
    167                                                                 PRE_DATA_ONE       = 5'd12 ,
    168                                                                 PRE_DATA_TWO       = 5'd13 , 
    169                                                                 FIRST_DATA_BYTE    = 5'd14 , 
    170                                                                 SECOND_DATA_BYTE   = 5'd15 ,
    171                                                                 C_TOKEN_STATE      = 5'd16 , 
    172                                                                 CRC_CHECKSUM_STATE = 5'd17 , 
    173                                                                 RESTART_PATTERN    = 5'd18 , 
    174                                                                 EXIT_PATTERN       = 5'd19 , 
    175                                                                 ERROR              = 5'd20 , 
    176                                                                 FINISH             = 5'd21 , 
    177                                                                 PRE_CRC_TARGET     = 5'd22 ,
    178                                                                 RESTART_PATTERN_SPECIAL = 5'd23 ;
    179                                              
    180                                              parameter [6:0] SEVEN_E = 7'h7E ;
    181                                              
    182                                              // tx modes parameters 
    183                                              parameter [3:0]  
    184                                                              zero                   = 4'd6  ,  //                        
    185                                                              one                    = 4'd2  ,  //                        
    186                                                              special_preamble       = 4'd0  ,  // 01 of cmd word          
    187                                                              seven_zeros            = 4'd3  ,  // 7'b 0000_000            
    188                                                              serializing_address    = 4'd1  ,  // serializing 7 bits + 1 bit ParAdj      
    189                                                              serializing_byte_port  = 4'd5  ,  // serializing 8 bits that given from CCC to tx not from regfile to tx 
    190                                                              serializing_byte_regf  = 4'd7  ,  //                         
    191                                                              parity_calc            = 4'd4  ,  //                        
    192                                                              c_token_CRC            = 4'd12 ,  // 4'hC                    
    193                                                              value_CRC              = 4'd13 ,  // 5 bit value             
    194                                                              restart_pattern        = 4'd15 ,  //                         
    195                                                              exit_pattern           = 4'd14 ;  //                         
    196                                                              
    197                                              
    198                                              // regfile parameters 
    199                                              parameter [11:0] first_location = 12'd1000 ;
    200                                              
    201                                              // rx parameters 
    202                                              parameter [2:0] 
    203                                                               preamble_rx_mode    = 3'd0 , 
    204                                                               CRC_PREAMBLE        = 3'd1 ,
    205                                                               parity_check        = 3'd6 ,
    206                                                               deserializing_byte  = 3'd3 ,
    207                                                               check_c_token_CRC   = 3'd7 ,
    208                                                               check_value_CRC     = 3'd2 ,
    209                                                               ERROR_RX            = 3'b100  ;
    210                                              
    211                                              // SCL staller parameters 
    212                                              parameter [4:0] restart_pattern_stall = 5'd7, 
    213                                                              restart_pattern_stall_special = 5'd7, 
    214                                                              exit_pattern_stall    = 5'd13 ;  
    215                                              
    216                                              
    217                                              // Error states parameters 
    218                                              parameter [3:0] 
    219                                                              SUCCESS     = 4'h0  ,
    220                                                              CRC_ERR     = 4'h1  ,
    221                                                              PARITY_ERR  = 4'h2  ,
    222                                                              FRAME       = 4'h3  ,
    223                                                              ADDR_HEADER = 4'h4  ,
    224                                                              NACK        = 4'h5  ,
    225                                                              OVL         = 4'h6  ,
    226                                                              SRE         = 4'h7  ,
    227                                                              C_ABORTED   = 4'h8  ,
    228                                                              T_ABORTED   = 4'h9  ;
    229                                              // CCC values 
    230                                              parameter [7:0] 
    231                                                              ENEC_D      = 8'h80 ,   
    232                                                              DISEC_D     = 8'h81 , 
    233                                                              SETMWL_D    = 8'h89 ,
    234                                                              SETMRL_D    = 8'h8A ,
    235                                                              GETMWL_D    = 8'h8B ,
    236                                                              GETMRL_D    = 8'h8C ,
    237                                                              GETSTATUS_D = 8'h90 ,
    238                                                              GETPID_D    = 8'h8D ,
    239                                                              GETBCR_D    = 8'h8E ,
    240                                                              GETDCR_D    = 8'h8F ,
    241                                                              ENEC_B      = 8'h00 ,
    242                                                              DISEC_B     = 8'h01 ,
    243                                                              SETMWL_B    = 8'h09 ,
    244                                                              SETMRL_B    = 8'h0A ,
    245                                                              Dummy_B     = 8'h1F ;
    246                                              
    247                                              // 17/6
    248                                              //assign o_crc_last_byte_tx_rx_mux_sel = o_crc_rx_tx_mux_sel_ccc ;
    249                                              
    250                                              
    251             1                       4946     always @(*) begin 
    252             1                       4946         o_frmcnt_Direct_Broadcast_n = Direct_Broadcast_n ;
    253                                              end 
    254                                              /*
    255                                              //o_en_mux = (first_time)? 1 : (i_regf_RnW)?  0 : 1 ;
    256                                              
    257                                              always @(*) begin 
    258                                                  if (first_time)         o_en_mux = 1'b1 ;
    259                                                  else if (!i_regf_RnW)   o_en_mux = 1'b1 ;
    260                                                  else                    o_en_mux = 1'b0 ;
    261                                              end
    262                                              */
    263                                              /////////////////////////// decoding the device address  ///////////////////////////////////////
    264                                              
    265             1                       9704     assign target_addres = i_regf_DEV_INDEX + 'd8 ;
    266                                              /*
    267                                              localparam [3:0] no_of_unq_ccc_sup = 4'd9 ;
    268                                              
    269                                              localparam [5:0] CCC_value_hi      = 7'd63 ,
    270                                                               CCC_value_lo      = 7'd56 ,
    271                                                               Def_byte_hi       = 7'd55 ,
    272                                                               Def_byte_lo       = 7'd48 ,
    273                                                               Data_one_hi       = 7'd47 ,
    274                                                               Data_one_lo       = 7'd40 ,
    275                                                               Data_two_hi       = 7'd39 ,
    276                                                               Data_two_lo       = 7'd32 ,
    277                                                               Data_three_hi     = 7'd31 ,
    278                                                               Data_three_lo     = 7'd24 ,
    279                                                               Data_four_hi      = 7'd23 ,
    280                                                               Data_four_lo      = 7'd16 ,
    281                                                               Data_five_hi      = 7'd15 ,
    282                                                               Data_five_lo      = 7'd8  ,
    283                                                               Data_six_hi       = 7'd7  ,
    284                                                               Data_six_lo       = 7'd0  ;
    285                                              
    286                                                  generate 
    287                                                      genvar i ;
    288                                                      for (i = 0 ; i < i_no_of_targets ; i = i + 1) begin
    289                                                          reg [63:0] CCC_Table [no_of_unq_ccc_sup:0][i] ;
    290                                                      end 
    291                                                  endgenerate
    292                                              
    293                                              */
    294                                              
    295                                              
    296                                              //////////////////////////////////////// Direct or Broadcat detection  ///////////////////////////////////////////////
    297                                              
    298                                              // we have 16 required CCC to support at ground level 
    299                                              
    300                                              // to determine whether it's a Direct or Broadcast 
    301             1                       8923         always @(*) begin 
    302                                                      case (i_regf_CMD) 
    303             1                       1005                 8'h80 : Direct_Broadcast_n = 1'b1 ;   // ENEC     
    304             1                        981                 8'h81 : Direct_Broadcast_n = 1'b1 ;   // DISEC       
    305             1                       1007                 8'h89 : Direct_Broadcast_n = 1'b1 ;   // SETMWL        
    306             1                        984                 8'h8A : Direct_Broadcast_n = 1'b1 ;   // SETMRL        
    307             1                    ***0***                 8'h8B : Direct_Broadcast_n = 1'b1 ;   // GETMWL          
    308             1                    ***0***                 8'h8C : Direct_Broadcast_n = 1'b1 ;   // GETMRL        
    309             1                    ***0***                 8'h90 : Direct_Broadcast_n = 1'b1 ;   // GETSTATUS  
    310             1                    ***0***                 8'h8D : Direct_Broadcast_n = 1'b1 ;   // GETPID       
    311             1                    ***0***                 8'h8E : Direct_Broadcast_n = 1'b1 ;   // GETBCR        
    312             1                    ***0***                 8'h8F : Direct_Broadcast_n = 1'b1 ;   // GETDCR      
    313                                              
    314             1                        976                 8'h00 : Direct_Broadcast_n = 1'b0 ;   // ENEC      (broadcast version)
    315             1                        934                 8'h01 : Direct_Broadcast_n = 1'b0 ;   // DISEC     (broadcast version)
    316             1                        967                 8'h09 : Direct_Broadcast_n = 1'b0 ;   // SETMWL    (broadcast version)
    317             1                       1033                 8'h0A : Direct_Broadcast_n = 1'b0 ;   // SETMRL    (broadcast version)
    318                                                         
    319                                              
    320             1                       1036                 8'h1F : Direct_Broadcast_n = 1'b0 ;    // Dummy CCC value for end procedure
    321             1                    ***0***                 default : Direct_Broadcast_n = 1'b0 ;  // broadcast by default
    322                                                      endcase
    323                                                  end
    324                                              
    325             1                      77566      always @ (posedge i_sys_clk or negedge i_sys_rst) begin 
    326                                                  if (!i_sys_rst) begin
    327             1                          1             tmp_shift <= 10'd0 ;
    328             1                          1             Direct_Broadcast_n_del <= 1'b0 ;
    329                                                  end 
    330                                                  else begin 
    331                                                      if (i_engine_en) begin 
    332             1                      65688                 tmp_shift[0] <= Direct_Broadcast_n ;
    333             1                      65688                 tmp_shift[9:1] <= tmp_shift [8:0] ;
    334             1                      65688                 Direct_Broadcast_n_del <= tmp_shift[9] ; // delayed 8 system clk cycles 
    335                                                      end 
    336                                                      else begin 
    337             1                      11877                 Direct_Broadcast_n_del <= 1'b0 ;
    338             1                      11877                 tmp_shift <= 10'd0 ;
    339                                                      end  
    340                                                  end   
    341                                              end 
    342                                              
    343                                              // Defining Byte identification 
    344             1                       6687         always @(*) begin 
    345                                                      if      (!i_regf_CMD_ATTR[0] && i_regf_DBP)                                                         
    346             1                    ***0***                 Defining_byte = 1'b1;  // regular 
    347                                                      else if ( i_regf_CMD_ATTR[0] && ( i_regf_DTT == 3'd5 ||  i_regf_DTT == 3'd6 || i_regf_DTT == 3'd7))  
    348             1                    ***0***                 Defining_byte = 1'b1 ; // immediate      
    349                                                      else                                                                                                
    350             1                       6687                 Defining_byte = 1'b0 ;
    351                                                  end 
    352                                              
    353                                              
    354                                              // Pulse stretcher 
    355                                              reg [1:0] pulse_counter ;  
    356                                              reg       i_sclstall_stall_done_strtch ;
    357                                              
    358             1                     101020     always @(posedge i_sys_clk or negedge i_sys_rst) begin
    359                                                  if (!i_sys_rst) begin
    360             1                          1             pulse_counter                 <= 2'b00 ;
    361             1                          1             i_sclstall_stall_done_strtch  <= 1'b0 ;
    362                                                  end 
    363                                                  else begin
    364                                                      if (i_sclstall_stall_done) begin
    365             1                      28862                 pulse_counter                <= 2'b11 ;
    366             1                      28862                 i_sclstall_stall_done_strtch <= 1'b1 ;
    367                                                      end 
    368                                                      else if (pulse_counter > 0) begin
    369             1                      43293                 pulse_counter                 <= pulse_counter - 1 ;
    370             1                      43293                 i_sclstall_stall_done_strtch <= 1'b1 ;
    371                                                      end 
    372                                                      else begin
    373             1                      28864                 i_sclstall_stall_done_strtch <= 1'b0 ;
    374                                                      end
    375                                                  end
    376                                              end
    377                                              
    378                                              //////////////////////////
    379                                              
    380                                              
    381                                              
    382                                              
    383                                              
    384                                              
    385                                              
    386                                              
    387                                              
    388                                              ////////////////////////////////////////// state memory ////////////////////////////////////////////////
    389                                              
    390             1                     396385         always @(posedge i_sys_clk or negedge i_sys_rst) begin
    391                                                      if (!i_sys_rst) begin
    392             1                          1                 current_state <= IDLE ;
    393                                                      end
    394                                                      else  begin
    395             1                     396384                 current_state <= next_state ;
    396                                                      end
    397                                                  end
    398                                              
    399                                              ///////////////////////////////// next state and output logic //////////////////////////////////////////////
    400             1                     475623         always@(*)begin
    401                                              
    402                                                  // initial values of outputs INTENTINAL LATCH that can be easily removed if STA analysis is fired 
    403                                              
    404             1                     475623         o_sclstall_en              = 1'b0 ;  
    405             1                     475623         o_sclstall_code            = 8'b0 ; 
    406             1                     475623         o_tx_en                    = 1'b0 ; 
    407             1                     475623         o_tx_mode                  = 4'b0 ; 
    408             1                     475623         o_rx_en                    = 1'b0 ; 
    409             1                     475623         o_rx_mode                  = 3'b0 ; 
    410             1                     475623         o_bitcnt_en                = 1'b1 ; 
    411             1                     475623         o_bitcnt_err_rst           = 1'b0 ; 
    412             1                     475623         o_sdahand_pp_od            = 1'b1 ; // 1 means PP
    413             1                     475623         o_regf_wr_en               = 1'b0 ;
    414             1                     475623         o_regf_rd_en               = 1'b0 ;
    415             1                     475623         o_engine_done              = 1'b0 ;
    416                                                  //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    417                                                  //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    418             1                     475623         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    419                                              
    420                                              
    421                                                      case (current_state)
    422                                              
    423                                                          IDLE : begin                     // aw arbitration if needed  
    424                                                              // sampling the configuration once a sequence
    425                                                              
    426             1                      39236                     i_regf_RnW       = i_i_regf_RnW       ;
    427             1                      39236                     i_regf_CMD_ATTR  = i_i_regf_CMD_ATTR  ;
    428             1                      39236                     i_regf_CMD       = i_i_regf_CMD       ;
    429             1                      39236                     i_regf_DEV_INDEX = i_i_regf_DEV_INDEX ;
    430             1                      39236                     i_regf_TOC       = i_i_regf_TOC       ;
    431             1                      39236                     i_regf_WROC      = i_i_regf_WROC      ;
    432             1                      39236                     i_regf_DTT       = i_i_regf_DTT       ;
    433             1                      39236                     i_regf_DBP       = i_i_regf_DBP       ;
    434             1                      39236                     i_regf_SRE       = i_i_regf_SRE       ;
    435                                              
    436             1                      39236                     first_time        = 1'b1 ;   // flag to help to differentiate between the direct and broadcast with assistance of Direct_Braodcast_n flag 
    437             1                      39236                     o_bitcnt_en       = 1'b0 ;
    438             1                      39236                     regular_counter   = 'd8  ;   // data starts from ninth location
    439             1                      39236                     immediate_counter = 'd4  ;   // data starts from forth location
    440             1                      39236                     o_engine_odd      = 1'b0 ;
    441             1                      39236                     controller_abort  = 1'b0 ;
    442             1                      39236                     o_tx_en           = 1'b0 ;
    443             1                      39236                     o_frmcnt_en       = 1'b0 ;
    444                                                              //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    445                                                              //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    446             1                      39236                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    447                                              
    448                                                              if (i_engine_en) begin 
    449             1                      22364                         next_state = PRE_CMD ;
    450                                                                  //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    451                                                                  //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    452             1                      22364                         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    453             1                      22364                         o_tx_en    = 1'b1 ; 
    454             1                      22364                         o_tx_mode  = special_preamble ; 
    455                                                              end
    456                                                              else begin 
    457             1                      16872                         next_state = IDLE ;
    458                                                              end 
    459                                              
    460                                              /*
    461                                                              //laila edit
    462                                                              if(i_regf_TOC == 1'b1 && exit_setup == 1'b1)
    463                                                                  begin
    464                                                                      o_tx_en = 1'b1;
    465                                                                      o_tx_mode = zero
    466                                                                  end
    467                                                              else 
    468                                                                  begin
    469                                                                  end
    470                                                                  
    471                                                              end
    472                                              */
    473                                                          end 
    474                                              
    475                                                          PRE_CMD : begin // i'm driving the 2 bits with 2'b01
    476                                                              if (i_engine_en) begin 
    477             1                      92185                         o_tx_en   = 1'b1 ; 
    478             1                      92185                         o_tx_mode = special_preamble ; 
    479                                              
    480                                                                  //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    481                                                                  //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    482             1                      92185                         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    483                                              
    484                                                                  if (i_tx_mode_done && !(i_frmcnt_last_frame || (Direct_Broadcast_n && first_time))) begin   
    485             1                      10000                             next_state = RNW ;
    486                                                                  end 
    487                                                                  else if (    (i_tx_mode_done || (i_rx_mode_done && !i_rx_error))   &&    (i_frmcnt_last_frame  || (Direct_Broadcast_n_del && first_time))   ) begin  // at reading operation with matched data length
    488             1                      14432                             next_state = C_TOKEN_STATE ;
    489                                                                  end
    490                                                                  else if ((i_tx_mode_done || (i_rx_mode_done && i_rx_error)) && (i_frmcnt_last_frame  || (Direct_Broadcast_n_del && first_time))) begin  // at reading operation with matched data length
    491             1                    ***0***                             next_state = ERROR ;
    492             1                    ***0***                             o_regf_ERR_STATUS = FRAME ;
    493                                                                  end
    494                                                                  else begin 
    495             1                      67753                             next_state = PRE_CMD ;
    496                                                                  end
    497                                                              end 
    498                                                              else begin
    499             1                       4860                         next_state = IDLE ;
    500                                                              end
    501                                                          end 
    502                                              
    503                                                          PRE_CRC_TARGET : begin // target is driving the 2 bits with 2'b01
    504                                                              if (i_engine_en) begin
    505             1                    ***0***                         o_rx_en   = 1'b1 ; 
    506                                                                  //o_crc_rx_tx_mux_sel_ccc     = 1'b1 ;
    507                                                                  //o_crc_data_rx_tx_valid_sel = 1'b1 ;
    508             1                    ***0***                         o_crc_rx_tx_mux_sel_ccc   = 1'b1 ;
    509             1                    ***0***                         o_rx_mode                  = CRC_PREAMBLE ;   //o_rx_mode = parity_check ;
    510                                              
    511                                                                  if ((i_rx_mode_done ) && i_frmcnt_last_frame) begin  // HENAAAAAAAAAAAAAA PUT THE CONDITION AFTER VERIFICATIONS (i_rx_mode_done && ! rx_err)
    512             1                    ***0***                             next_state = C_TOKEN_STATE ;
    513                                                                  end
    514                                                                  else if (i_rx_mode_done ) begin  // at reading operation with matched data length    HENA BARDO PUT THE CONDITION (i_rx_mode_done && rx_err)
    515             1                    ***0***                             next_state = ERROR ;
    516             1                    ***0***                             o_regf_ERR_STATUS = FRAME ;
    517                                                                  end
    518                                                                  else begin 
    519             1                    ***0***                             next_state = PRE_CRC_TARGET ;
    520                                                                  end
    521                                                              end 
    522                                                              else begin 
    523             1                    ***0***                         next_state = IDLE ;
    524                                                              end 
    525                                                          end 
    526                                              
    527                                                          RNW : begin
    528             1                      20000                     o_tx_en   = 1'b1 ;
    529                                                              //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    530                                                              //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    531             1                      20000                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    532                                              
    533                                                              if (first_time) begin 
    534             1                      11138                         o_tx_mode = zero ;
    535                                                              end 
    536                                                              else begin 
    537             1                    ***0***                         if (i_regf_RnW) o_tx_mode = one  ; // read 
    538             1                       8862                         else            o_tx_mode = zero  ; // write 
    539                                                              end
    540                                                              // state transition
    541                                                              if (i_tx_mode_done) begin 
    542             1                      10000                         next_state = RESERVED ;
    543                                                              end
    544                                                              else begin 
    545             1                      10000                         next_state = RNW ;
    546                                                              end
    547                                                          end 
    548                                              
    549                                              
    550                                                          RESERVED : begin
    551             1                      21261                     o_tx_en   = 1'b1 ;
    552                                                              //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    553                                                              //o_crc_data_rx_tx_valid_sel = 1'b0 ;    
    554             1                      21261                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    555             1                      21261                     o_tx_mode = seven_zeros ;
    556                                                              
    557                                                              // state transition
    558                                                              if (i_tx_mode_done) begin 
    559             1                      10000                         next_state = SECOND_CMD_BYTE ;
    560                                                              end
    561                                              /*              
    562                                              //laila
    563                                              if (first_time) begin 
    564                                                                  o_txrx_addr_ccc = SEVEN_E ;                    
    565                                                              end
    566                                               else if (Direct_Broadcast_n_del && !first_time) begin 
    567                                                                  o_txrx_addr_ccc = target_addres ;                
    568                                                                end
    569                                              else begin 
    570                                                                 
    571                                              o_txrx_addr_ccc = target_addres ;
    572                                              end
    573                                              */
    574                                              
    575                                              
    576                                              
    577                                                              else begin 
    578             1                      11261                         next_state = RESERVED ;
    579                                                              end
    580                                                          end 
    581                                              
    582                                                          SECOND_CMD_BYTE : begin  // contains either 7E or any target address 
    583             1                      21401                     o_tx_en   = 1'b1 ; 
    584                                                              //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    585                                                              //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    586             1                      21401                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    587                                                              if (first_time) begin 
    588                                              
    589             1                      11138                         o_tx_mode = serializing_address ;
    590             1                      11138                         o_txrx_addr_ccc = SEVEN_E ;
    591                                              
    592                                                                  if (i_tx_mode_done) begin 
    593             1                       5569                             next_state = PARITY_CMD ;
    594                                                                  end
    595                                                                  else begin 
    596             1                       5569                             next_state = SECOND_CMD_BYTE ;
    597                                                                  end       
    598                                                              end 
    599                                                              else if (Direct_Broadcast_n_del && !first_time) begin 
    600             1                      10263                         o_frmcnt_en     = 1'b1 ;                    // new 
    601             1                      10263                         o_tx_mode       = serializing_address ;
    602             1                      10263                         o_txrx_addr_ccc = target_addres ;
    603                                              
    604                                                                  if (i_tx_mode_done) begin 
    605             1                       4431                             next_state = PARITY_CMD ;
    606                                                                  end
    607                                                                  else begin 
    608             1                       5832                             next_state = SECOND_CMD_BYTE ;
    609                                                                  end
    610                                              
    611                                                              end 
    612                                                              else begin 
    613             1                    ***0***                         o_tx_mode       = serializing_address ;
    614             1                    ***0***                         o_txrx_addr_ccc = target_addres ;
    615                                                                  
    616                                                                  if (i_tx_mode_done) begin 
    617             1                    ***0***                             next_state = PARITY_CMD ;
    618                                                                  end
    619                                                                  else begin 
    620             1                    ***0***                             next_state = SECOND_CMD_BYTE ;
    621                                                                  end
    622                                                              end 
    623                                                          end
    624                                              
    625                                                          PARITY_CMD : begin 
    626             1                      20000                     o_tx_en   = 1'b1 ; 
    627                                                              //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    628                                                              //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    629             1                      20000                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    630             1                      20000                     o_tx_mode = parity_calc ;
    631                                              
    632                                                              if (i_tx_mode_done) begin 
    633             1                      10000                         next_state   = PRE_FIRST_DATA_ONE ;
    634                                                                  //o_frmcnt_en  = 1'b1 ;
    635                                                              end
    636                                                              else begin 
    637             1                      10000                         next_state = PARITY_CMD ;
    638                                                              end
    639                                              
    640                                                              // erorr state condition is remaining 
    641                                              
    642                                                          end
    643                                              
    644                                              
    645                                                          PRE_FIRST_DATA_ONE : begin // should be 10 to mean ACK ,    and 11 is NACK
    646                                                          
    647             1                      20000                     o_tx_en   = 1'b1 ;
    648                                                              //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    649                                                              //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    650             1                      20000                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    651             1                      20000                     o_tx_mode = one ;
    652             1                      20000                     o_rx_en   = 1'b0 ;
    653                                              
    654                                                              if (i_tx_mode_done) begin
    655             1                      10000                         next_state = PRE_FIRST_DATA_TWO ;
    656                                                                  //o_rx_en    = 1'b1 ;
    657                                                                  //o_rx_mode  = preamble_rx_mode ;
    658                                                              end
    659                                                              else begin 
    660             1                      10000                         next_state = PRE_FIRST_DATA_ONE ;
    661                                                              end 
    662                                                          
    663                                                          end 
    664                                              
    665                                                          PRE_FIRST_DATA_TWO : begin 
    666                                                              
    667             1                      20000                     o_rx_en                    = 1'b1 ;
    668                                                              //o_crc_rx_tx_mux_sel_ccc     = 1'b1 ;
    669                                                              //o_crc_data_rx_tx_valid_sel = 1'b1 ;
    670             1                      20000                     o_crc_rx_tx_mux_sel_ccc   = 1'b1 ;
    671             1                      20000                     o_rx_mode = preamble_rx_mode ;
    672                                              
    673                                                              if (i_rx_mode_done && !i_rx_pre && first_time) begin
    674             1                       5569                         next_state = CCC_BYTE ;
    675             1                       5569                         o_tx_en      = 1'b1 ;
    676                                              
    677                                                                  //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    678                                                                  //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    679             1                       5569                         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    680             1                       5569                         o_tx_mode    = serializing_byte_port ;
    681             1                       5569                         o_txrx_addr_ccc = i_regf_CMD ;
    682                                                              end
    683                                              
    684                                                              else if (i_rx_mode_done && !i_rx_pre && !first_time) begin 
    685                                                              
    686                                                                  if (!i_regf_CMD_ATTR[0] && !i_regf_RnW) begin              // if regular command discriptor  (but long write) not supported cuurently but it's okk
    687             1                    ***0***                             o_tx_mode    = serializing_byte_regf ;
    688             1                    ***0***                             o_tx_en   = 1'b1 ;
    689                                                                      //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    690                                                                      //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    691             1                    ***0***                             o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;                        
    692             1                    ***0***                             o_regf_addr  = first_location + regular_counter ; // regular counter starts with value 8 to point to the ninth location 
    693             1                    ***0***                             o_regf_wr_en = 1'b1 ;                
    694                                                                  end
    695                                                                  else if (!i_regf_CMD_ATTR[0] && i_regf_RnW) begin              // if Read & Regular command discriptor  
    696             1                    ***0***                             o_tx_en   = 1'b0 ;
    697             1                    ***0***                             o_regf_addr  = first_location + regular_counter ; // regular counter starts with value 8 to point to the ninth location                 
    698                                                                  end
    699                                              
    700                                                                  else begin // if immediate
    701             1                       4431                             o_tx_en      = 1'b1 ;
    702                                                                                                    
    703                                                                      if (Defining_byte) begin 
    704             1                    ***0***                                 o_regf_addr = first_location + immediate_counter + 1  ; // for 8 bit width Regfile .. point to sixth location
    705             1                    ***0***                                 o_tx_mode   = serializing_byte_regf ;          // as first byte in the third location will contain the Defining Byte
    706                                                                      end 
    707                                                                      else begin 
    708             1                       4431                                 o_regf_addr = first_location + immediate_counter ;        // for 8 bit width Regfile .. point to fourth location
    709             1                       4431                                 o_tx_mode   = serializing_byte_regf ; 
    710                                                                      end 
    711                                                                  end
    712                                              
    713             1                       4431                         next_state   = FIRST_DATA_BYTE ;
    714             1                       4431                         o_regf_rd_en = 1'b1 ;
    715                                                              end 
    716                                              
    717                                                              else if (i_rx_mode_done && i_rx_pre) begin 
    718             1                    ***0***                         o_tx_en           = 1'b0 ;
    719             1                    ***0***                         next_state        = ERROR ;
    720             1                    ***0***                         o_regf_ERR_STATUS = NACK ;
    721                                                              end 
    722                                              
    723                                                              else begin 
    724             1                      10000                         next_state = PRE_FIRST_DATA_TWO ;
    725                                                              end 
    726                                              
    727                                              
    728                                              
    729                                              
    730                                                              // new 12/6/2024 
    731                                                              if (!i_regf_RnW) begin  // write operation 
    732             1                      20000                         o_regf_rd_en = 1'b1 ;
    733                                                                  if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor 
    734             1                    ***0***                             o_regf_addr  = first_location + regular_counter ; // regular counter starts with value 8 to point to the ninth location 
    735                                                                  end 
    736                                                                  else begin                                  // if immediate
    737                                                                      if (Defining_byte) begin 
    738             1                    ***0***                                 o_regf_addr = first_location + immediate_counter + 1  ; // for 8 bit width Regfile .. point to sixth location
    739                                                                      end 
    740                                                                      else begin 
    741             1                      20000                                 o_regf_addr = first_location + immediate_counter ;        // for 8 bit width Regfile .. point to fourth location
    742                                                                      end 
    743                                                                  end 
    744                                                              end 
    745                                                          end 
    746                                              
    747                                              
    748                                              
    749                                                          CCC_BYTE : begin    // contains CCC value
    750                                              
    751             1                      11138                     o_tx_en      = 1'b1 ;
    752                                                              //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    753                                                              //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    754             1                      11138                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;                
    755             1                      11138                     o_tx_mode    = serializing_byte_port ;
    756             1                      11138                     o_txrx_addr_ccc = i_regf_CMD ;
    757                                              
    758                                                              if (i_tx_mode_done && Defining_byte) begin   // if a defining byte exists
    759             1                    ***0***                         next_state = DEFINING_BYTE ;
    760             1                    ***0***                         o_regf_rd_en = 1'b1 ;
    761             1                    ***0***                         o_regf_addr  = first_location + 4 ;
    762                                                              end
    763                                                              else if (i_tx_mode_done && !Defining_byte) begin
    764             1                       5569                         o_regf_addr  = first_location - 1  ;               // laila edit 
    765             1                       5569                         o_regf_rd_en = 1'b1 ;  
    766             1                       5569                         next_state = ZEROS ;
    767                                                              end 
    768                                                              else begin 
    769             1                       5569                         next_state = CCC_BYTE ;
    770                                                              end
    771                                              
    772                                                          end
    773                                              
    774                                                          DEFINING_BYTE : begin    // contains definaing byte if exist
    775             1                    ***0***                     o_tx_en      = 1'b1 ;
    776                                                              //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    777                                                              //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    778             1                    ***0***                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;                
    779             1                    ***0***                     o_tx_mode    = serializing_byte_regf ; 
    780             1                    ***0***                     o_regf_rd_en = 1'b1 ;
    781             1                    ***0***                     o_regf_addr  = first_location + 4 ;                 // fifth location (8 bits width)
    782             1                    ***0***                     o_frmcnt_en  = 1'b1 ;
    783                                              
    784                                                              if (i_tx_mode_done) begin   
    785             1                    ***0***                         next_state = PARITY_DATA ;
    786                                                              end
    787                                                              else begin 
    788             1                    ***0***                         next_state = DEFINING_BYTE ;
    789                                                              end  
    790                                                          end
    791                                              
    792                                                          ZEROS : begin                               // eight zeros fixed at regfile (e.g location 999)
    793             1                      22430                     o_tx_en      = 1'b1 ;
    794                                                              //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    795                                                              //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    796             1                      22430                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    797             1                      22430                     o_tx_mode    = serializing_byte_regf ; 
    798             1                      22430                     o_regf_rd_en = 1'b1 ;
    799             1                      22430                     o_regf_addr  = first_location - 1  ;
    800                                              
    801                                                              // new (instead of just o_frmcnt_en  = 1'b1 ;)
    802                                                              if (Direct_Broadcast_n_del && first_time) begin 
    803             1                    ***0***                         o_frmcnt_en  = 1'b0 ;
    804                                                              end
    805                                                              else begin 
    806             1                      22430                         o_frmcnt_en  = 1'b1 ;
    807                                                              end  
    808                                                              //////////////////////////////////////////////////////
    809                                                              if (i_frmcnt_last_frame) begin 
    810             1                      13198                         o_engine_odd = 1'b1 ; 
    811                                                              end 
    812                                                              else begin 
    813             1                       9232                         o_engine_odd = 1'b0 ; 
    814                                                              end 
    815                                              
    816                                                              if (i_tx_mode_done) begin   
    817             1                      10262                         next_state = PARITY_DATA ;
    818                                              
    819                                                              end
    820                                                              else begin 
    821             1                      12168                         next_state = ZEROS ;
    822                                                              end
    823                                              
    824                                                              // erorr state condition is remaining   
    825                                                          end
    826                                              
    827                                                          PARITY_DATA : begin // parity state any Data word
    828                                                              if (!i_regf_RnW || first_time) begin // write 
    829             1                      27326                         o_tx_en   = 1'b1 ;
    830                                                                  //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    831                                                                  //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    832             1                      27326                         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    833                                              
    834                                              
    835             1                      27326                         o_tx_mode = parity_calc ;
    836                                                                  if  (i_tx_mode_done) begin // if broadcast
    837                                              
    838                                                                      if (i_frmcnt_last_frame || (Direct_Broadcast_n_del & first_time)) begin  // crc state only in case of Direct or in case of last data 
    839             1                      10000                                 next_state = PRE_CMD ; // BEGINING OF CRC 
    840                                                                      end 
    841                                                                      else begin 
    842             1                       3663                                 next_state = PRE_DATA_ONE ; // not last byte then continue sending/recieving repeated data 
    843                                                                      end 
    844                                                                  end
    845                                              
    846                                                                  else begin 
    847             1                      13663                             next_state = PARITY_DATA ;
    848                                                                  end
    849                                                              end 
    850                                                              else begin // read 
    851             1                    ***0***                         o_rx_en   = 1'b1 ;
    852             1                    ***0***                         o_crc_rx_tx_mux_sel_ccc     = 1'b1 ;
    853                                                                  //o_crc_data_rx_tx_valid_sel = 1'b1 ;
    854             1                    ***0***                         o_crc_rx_tx_mux_sel_ccc   = 1'b1 ;
    855             1                    ***0***                         o_rx_mode = parity_check ;
    856                                                                  if  (i_rx_mode_done && !i_rx_error) begin 
    857                                              
    858                                                                      if (i_frmcnt_last_frame || Direct_Broadcast_n_del) begin  // crc state only in case of Direct or in case of last data 
    859             1                    ***0***                                 next_state = PRE_CRC_TARGET ; // 
    860                                                                      end 
    861                                                                      else begin 
    862             1                    ***0***                                 next_state = PRE_DATA_ONE ; // not last byte then continue sending/recieving repeated data 
    863                                              
    864                                                                      end 
    865                                                                  end
    866                                              
    867                                                                  else if (i_rx_mode_done && i_rx_error) begin 
    868             1                    ***0***                             next_state = ERROR ;
    869             1                    ***0***                             o_regf_ERR_STATUS = PARITY_ERR ;
    870                                                                  end 
    871                                              
    872                                                                  else begin 
    873             1                    ***0***                             next_state = PARITY_DATA ;
    874                                                                  end
    875                                                              end 
    876                                                          end
    877                                              
    878                                                          PRE_DATA_ONE : begin  //  11  means ok continue , and 10 to be aborted 
    879                                                              if (!i_regf_RnW) begin // write 
    880             1                       7326                         o_tx_en   = 1'b1 ;
    881                                                                  //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    882                                                                  //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    883             1                       7326                         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;                 
    884             1                       7326                         o_tx_mode = one ;
    885             1                       7326                         o_rx_en   = 1'b0 ;
    886                                              
    887                                                                  if (i_tx_mode_done) begin
    888             1                       3663                             next_state = PRE_DATA_TWO ;
    889                                                                      //o_rx_en  = 1'b1 ;
    890                                                                      //o_rx_mode = preamble_rx_mode ;
    891                                                                  end
    892                                                                  else begin 
    893             1                       3663                             next_state = PRE_DATA_ONE ;
    894                                                                  end 
    895                                                              end 
    896                                              
    897                                                              else begin 
    898             1                    ***0***                         o_tx_en   = 1'b0 ;
    899             1                    ***0***                         o_rx_en   = 1'b1 ;
    900                                                                 // o_crc_rx_tx_mux_sel_ccc     = 1'b1 ;
    901                                                                  //o_crc_data_rx_tx_valid_sel = 1'b1 ;
    902             1                    ***0***                         o_crc_rx_tx_mux_sel_ccc   = 1'b1 ;
    903             1                    ***0***                         o_rx_mode = preamble_rx_mode ;
    904                                                                  
    905                                                                  if (i_rx_mode_done && i_rx_pre) begin
    906             1                    ***0***                             next_state = PRE_DATA_TWO ;
    907             1                    ***0***                             o_rx_mode  = preamble_rx_mode ;
    908                                                                  end
    909                                                                  else if (i_rx_mode_done && !i_rx_pre) begin
    910             1                    ***0***                             next_state = ERROR ;
    911             1                    ***0***                             o_regf_ERR_STATUS  = FRAME ;
    912                                                                  end
    913                                                                  else begin 
    914             1                    ***0***                             next_state = PRE_DATA_ONE ;
    915                                                                  end 
    916                                                              end 
    917                                                          end 
    918                                              
    919                                                          PRE_DATA_TWO : begin 
    920                                                              if (!i_regf_RnW) begin // write
    921             1                       7326                         o_tx_en   = 1'b0 ;
    922             1                       7326                         o_rx_en   = 1'b1 ;
    923             1                       7326                         o_crc_rx_tx_mux_sel_ccc     = 1'b1 ;
    924                                                                  //o_crc_data_rx_tx_valid_sel = 1'b1 ;
    925             1                       7326                         o_crc_rx_tx_mux_sel_ccc   = 1'b1 ;
    926             1                       7326                         o_rx_mode = preamble_rx_mode ;
    927                                              
    928                                                                  if (i_rx_mode_done && i_rx_pre) begin  // ack by target
    929             1                       3663                             next_state = FIRST_DATA_BYTE ;
    930                                                                  ////////////////////////////////// new ////////////////////////////////
    931             1                       3663                             o_tx_en      = 1'b1 ;
    932                                                                      //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    933                                                                      //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    934             1                       3663                             o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    935             1                       3663                             o_regf_rd_en = 1'b1 ;
    936                                                                      if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor  
    937             1                    ***0***                                 o_tx_mode    = serializing_byte_regf ;
    938             1                    ***0***                                 o_regf_addr  = first_location + regular_counter ; // regular counter starts with value 8 to point to the ninth location 
    939                                                                      end 
    940                                                                      else begin                                  // if immediate
    941                                                                          if (Defining_byte) begin 
    942             1                    ***0***                                     o_regf_addr = first_location + immediate_counter + 1  ; // for 8 bit width Regfile .. point to sixth location
    943                                                  
    944             1                    ***0***                                     o_tx_mode   = serializing_byte_regf ;          // as first byte in the third location will contain the Defining Byte
    945                                                                          end 
    946                                                                          else begin 
    947             1                       3663                                     o_regf_addr = first_location + immediate_counter ;        // for 8 bit width Regfile .. point to fourth location
    948             1                       3663                                     o_tx_mode   = serializing_byte_regf ; 
    949                                                                          end 
    950                                                                      end 
    951                                                                  //////////////////////////////////////////////////////////////////////
    952                                                                  end
    953                                              
    954                                                                  else if (i_rx_mode_done && !i_rx_pre) begin // abort by target
    955             1                    ***0***                             next_state        = ERROR ;
    956             1                    ***0***                             o_regf_ERR_STATUS = T_ABORTED ;
    957                                                                  end 
    958                                              
    959                                                                  else begin 
    960             1                       3663                             next_state = PRE_DATA_TWO ;
    961                                                                  end 
    962                                                              end 
    963                                                              else begin 
    964                                                                  // tx signals 
    965             1                    ***0***                         o_tx_en   = 1'b1 ;
    966                                                                  //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    967                                                                  //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    968             1                    ***0***                         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    969                                                                  if (controller_abort) begin 
    970             1                    ***0***                             o_tx_mode = zero ;
    971                                                                  end 
    972                                                                  else begin 
    973             1                    ***0***                             o_tx_mode = one ;                   // open drain
    974                                                                      //o_sdahand_pp_od = open drain ; 
    975                                                                  end
    976                                              
    977                                                                  if (i_tx_mode_done) begin  
    978             1                    ***0***                             next_state = FIRST_DATA_BYTE ;
    979                                                                  end
    980                                              
    981                                                                 
    982                                              
    983                                                                  else begin 
    984             1                    ***0***                             next_state = PRE_DATA_TWO ;
    985                                                                  end
    986                                                              end 
    987                                              
    988                                              
    989                                                              // new 12/6/2024 
    990                                                              if (!i_regf_RnW) begin  // write operation 
    991             1                       7326                         o_regf_rd_en = 1'b1 ;
    992                                                                  if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor 
    993             1                    ***0***                             o_regf_addr  = first_location + regular_counter ; // regular counter starts with value 8 to point to the ninth location 
    994                                                                  end 
    995                                                                  else begin                                  // if immediate
    996                                                                      if (Defining_byte) begin 
    997             1                    ***0***                                 o_regf_addr = first_location + immediate_counter + 1  ; // for 8 bit width Regfile .. point to sixth location
    998                                                                      end 
    999                                                                      else begin 
    1000            1                       7326                                 o_regf_addr = first_location + immediate_counter ;        // for 8 bit width Regfile .. point to fourth location
    1001                                                                     end 
    1002                                                                 end 
    1003                                                             end 
    1004                                                             
    1005                                                         end                     
    1006                                             
    1007                                             
    1008                                             
    1009                                                         FIRST_DATA_BYTE : begin    // contains first repeated data byte
    1010                                                             if (!i_regf_RnW) begin  // write operation 
    1011            1                      19480                         o_tx_en      = 1'b1 ;
    1012                                                                 //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    1013                                                                 //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1014            1                      19480                         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    1015            1                      19480                         o_regf_rd_en = 1'b1 ;
    1016                                                                 if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor  
    1017            1                    ***0***                             o_tx_mode    = serializing_byte_regf ;
    1018            1                    ***0***                             o_regf_addr  = first_location + regular_counter ; // regular counter starts with value 8 to point to the ninth location 
    1019                                                                 end 
    1020                                                                 else begin                                  // if immediate
    1021                                                                     if (Defining_byte) begin 
    1022            1                    ***0***                                 o_regf_addr = first_location + immediate_counter + 1  ; // for 8 bit width Regfile .. point to sixth location
    1023                                                 
    1024            1                    ***0***                                 o_tx_mode   = serializing_byte_regf ;          // as first byte in the third location will contain the Defining Byte
    1025                                                                     end 
    1026                                                                     else begin 
    1027            1                      19480                                 o_regf_addr = first_location + immediate_counter ;        // for 8 bit width Regfile .. point to fourth location
    1028            1                      19480                                 o_tx_mode   = serializing_byte_regf ; 
    1029                                                                     end 
    1030                                                                 end 
    1031                                                             end 
    1032                                             
    1033                                                             // read operation 
    1034                                                             else begin 
    1035                                                             //////////////// new 3/5/2024 
    1036                                                             if (i_frmcnt_last_frame) begin 
    1037            1                    ***0***                         o_engine_odd = 1'b1 ; 
    1038                                                             end 
    1039                                                             else begin 
    1040            1                    ***0***                         o_engine_odd = 1'b0 ; 
    1041                                                             end 
    1042                                                             ///////////////////////////////////////// 
    1043            1                    ***0***                     o_rx_en      = 1'b1 ;
    1044            1                    ***0***                     o_crc_rx_tx_mux_sel_ccc     = 1'b1 ;
    1045                                                             //o_crc_data_rx_tx_valid_sel = 1'b1 ;
    1046            1                    ***0***                     o_crc_rx_tx_mux_sel_ccc   = 1'b1 ;
    1047            1                    ***0***                     o_regf_wr_en = 1'b1 ;
    1048                                                                 if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor  
    1049            1                    ***0***                             o_rx_mode    = deserializing_byte ;
    1050            1                    ***0***                             o_regf_addr  = first_location + regular_counter ; // regular counter starts with value 4 to point to the fifth location 
    1051                                                                 end 
    1052                                                                 else begin  // there is no immediate case in the read operation 
    1053            1                    ***0***                             next_state = ERROR ;
    1054            1                    ***0***                             o_regf_ERR_STATUS = FRAME ;
    1055                                                                 end 
    1056                                                             end
    1057                                             
    1058                                                             // for both read and write 
    1059                                                             if (i_tx_mode_done && i_frmcnt_last_frame) begin  // to handle odd number of bytes in both regular and immediate
    1060            1                       4693                         next_state   = ZEROS ;
    1061            1                       4693                         o_regf_rd_en = 1'b1 ;
    1062            1                       4693                         o_regf_addr  = first_location - 1 ; 
    1063                                                                 //o_engine_odd = 1'b1 ;            // to be put in the response discreptor      
    1064                                                             end
    1065                                             
    1066                                                             //// new 3/5/2024
    1067                                                             else if (i_rx_mode_done && i_frmcnt_last_frame) begin 
    1068            1                    ***0***                         next_state = SECOND_DATA_BYTE ; 
    1069                                                                 //immediate_counter = immediate_counter + 1 ;  there can't be immediate Transfer Command Discriptor with direct get 
    1070            1                    ***0***                         regular_counter   = regular_counter + 1 ;
    1071                                                                 end
    1072                                             
    1073                                                              
    1074                                                             /////////////////////
    1075                                             
    1076                                                             else if ((i_rx_mode_done | i_tx_mode_done) && !i_frmcnt_last_frame) begin  
    1077            1                       3401                         next_state = SECOND_DATA_BYTE ; 
    1078            1                       3401                         immediate_counter = immediate_counter + 1 ;
    1079            1                       3401                         regular_counter   = regular_counter + 1 ;
    1080                                             
    1081                                             
    1082                                             // 12/6/2024
    1083                                                                 if (!i_regf_CMD_ATTR[0]) begin              
    1084            1                    ***0***                             o_regf_addr  = first_location + regular_counter ; 
    1085                                                                 end 
    1086                                                                 else begin
    1087            1                       3401                             o_regf_addr  = first_location + immediate_counter ;
    1088                                                                 end 
    1089                                                                 /////////////////
    1090                                                             end
    1091                                             
    1092                                             
    1093                                                             
    1094                                                             else begin 
    1095            1                      11386                         next_state = FIRST_DATA_BYTE ;                  
    1096                                                             end
    1097                                             
    1098                                                         end
    1099                                             
    1100                                             
    1101                                                         SECOND_DATA_BYTE : begin   // contains second repeated data byte
    1102                                                             if (!i_regf_RnW) begin // write operation 
    1103            1                      10203                         o_tx_en      = 1'b1 ;
    1104                                                                 //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    1105                                                                 //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1106            1                      10203                         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    1107            1                      10203                         o_regf_rd_en = 1'b1 ;
    1108            1                      10203                         o_tx_mode    = serializing_byte_regf ;
    1109                                                                 if (!i_regf_CMD_ATTR[0]) begin              // if regular command discriptor  
    1110            1                    ***0***                             o_regf_addr  = first_location + regular_counter ; 
    1111                                                                 end
    1112                                                                 else begin 
    1113            1                      10203                             o_regf_addr  = first_location + immediate_counter ; 
    1114                                                                 end 
    1115                                                                 if (i_tx_mode_done) begin 
    1116            1                       3401                             next_state = PARITY_DATA ; 
    1117                                                                     if (i_frmcnt_last_frame) begin 
    1118                                                                         // no need to put conditions , immediated and regular can't happen together
    1119            1                       3401                                 immediate_counter = immediate_counter ;
    1120            1                       3401                                 regular_counter   = regular_counter   ;
    1121                                                                     end 
    1122                                                                     else begin 
    1123                                                                         // no need to put conditions , immediated and regular can't happen together
    1124            1                    ***0***                                 immediate_counter = immediate_counter + 1 ;
    1125            1                    ***0***                                 regular_counter   = regular_counter   + 1 ;
    1126                                                                     end        
    1127                                                                 end
    1128                                                                 else begin 
    1129            1                       6802                             next_state = SECOND_DATA_BYTE ;                        
    1130                                                                 end 
    1131                                                             end 
    1132                                                             else begin  // read operation 
    1133                                                                 
    1134            1                    ***0***                         o_rx_en      = 1'b1 ;
    1135            1                    ***0***                         o_crc_rx_tx_mux_sel_ccc     = 1'b1 ;
    1136                                                                 //o_crc_data_rx_tx_valid_sel = 1'b1 ;
    1137            1                    ***0***                         o_crc_rx_tx_mux_sel_ccc   = 1'b1 ;
    1138            1                    ***0***                         o_regf_wr_en = 1'b1 ;
    1139            1                    ***0***                         o_rx_mode    = deserializing_byte ;
    1140                                                                 if (!i_regf_CMD_ATTR[0]) begin                          // if regular command discriptor  
    1141            1                    ***0***                             o_regf_addr  = first_location + regular_counter ; 
    1142                                                                 end
    1143                                                                 else begin  // there is no immediate case in the read operation 
    1144            1                    ***0***                             next_state = ERROR ;
    1145            1                    ***0***                             o_regf_ERR_STATUS = FRAME ;
    1146                                                                 end 
    1147                                                                 if (i_rx_mode_done) begin   
    1148            1                    ***0***                             next_state = PARITY_DATA ;
    1149                                                                     // no need to put conditions , immediated and regular can't happen together
    1150                                                                     //immediate_counter = immediate_counter + 1 ;
    1151            1                    ***0***                             regular_counter   = regular_counter   + 1 ;
    1152                                                                 end 
    1153                                                                 else begin 
    1154            1                    ***0***                             next_state = SECOND_DATA_BYTE ;
    1155                                             
    1156                                                                 end
    1157                                                             end     
    1158                                                         end
    1159                                                     
    1160                                                         C_TOKEN_STATE : begin 
    1161            1                      28864                     o_bitcnt_en        = 1'b0 ;
    1162                                                             if (!i_regf_RnW || first_time) begin // write 
    1163            1                      28864                         o_tx_en   = 1'b1 ;
    1164                                                                 //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    1165                                                                 //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1166            1                      28864                         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    1167            1                      28864                         o_tx_mode = c_token_CRC ;
    1168                                             
    1169                                                                 if (i_tx_mode_done) begin 
    1170            1                      14432                             next_state = CRC_CHECKSUM_STATE ; // 6 bits (5 checksum + 1 high to prepare for restart or exit)
    1171                                                                 end 
    1172                                                                 else begin 
    1173            1                      14432                             next_state = C_TOKEN_STATE ;
    1174                                                                 end
    1175                                                             end 
    1176                                                             else begin // read 
    1177            1                    ***0***                         o_rx_en   = 1'b1 ;
    1178            1                    ***0***                         o_crc_rx_tx_mux_sel_ccc     = 1'b1 ;
    1179                                                                 //o_crc_data_rx_tx_valid_sel = 1'b1 ;
    1180            1                    ***0***                         o_crc_rx_tx_mux_sel_ccc   = 1'b1 ;
    1181            1                    ***0***                         o_rx_mode = check_c_token_CRC ;
    1182                                                                 if (i_rx_error) begin 
    1183            1                    ***0***                             next_state = ERROR ; 
    1184            1                    ***0***                             o_regf_ERR_STATUS = CRC_ERR ;
    1185                                                                 end
    1186                                                                 else if (i_rx_mode_done && !i_rx_error) begin 
    1187            1                    ***0***                             next_state = CRC_CHECKSUM_STATE ; // 5 bits checksum
    1188                                                                 end 
    1189                                                                 
    1190                                                                 else begin 
    1191            1                    ***0***                             next_state = C_TOKEN_STATE ;
    1192                                                                 end
    1193                                                             end  
    1194                                                         end 
    1195                                             
    1196                                                         CRC_CHECKSUM_STATE : begin 
    1197            1                      28862                     o_bitcnt_en        = 1'b0 ;
    1198                                                             if (!i_regf_RnW || first_time) begin  // write 
    1199            1                      28862                         o_tx_en   = 1'b1 ;
    1200                                                                 //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    1201                                                                 //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1202            1                      28862                         o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    1203            1                      28862                         o_tx_mode = value_CRC ;
    1204                                                                 if (i_tx_mode_done) begin 
    1205                                                                     //////////////////////////// new /////////////////////////////////////////////
    1206                                                                     if (!Direct_Broadcast_n_del && i_regf_TOC) begin 
    1207            1                       2719                                 next_state    = EXIT_PATTERN ;
    1208                                                                         //first_time       = 1'b0 ;
    1209                                                                         //o_sclstall_en    = 1'b1 ;
    1210                                                                         //o_sclstall_code  = exit_pattern_stall ;
    1211                                                                     end
    1212                                                                     else if (!Direct_Broadcast_n_del && !i_regf_TOC) begin 
    1213            1                       2850                                 next_state = RESTART_PATTERN ;
    1214                                                                         //o_sclstall_en   = 1'b1 ;
    1215                                                                         //o_sclstall_code = restart_pattern_stall ;
    1216                                                                         //first_time      = 1'b0 ;
    1217                                                                     end  
    1218                                                                     else if (Direct_Broadcast_n_del && first_time) begin 
    1219            1                       4431                                 next_state = RESTART_PATTERN ;
    1220                                                                         //o_sclstall_en   = 1'b1 ;
    1221                                                                         //o_sclstall_code = restart_pattern_stall ;
    1222                                                                         //first_time    = 1'b0 ;
    1223                                                                     end
    1224                                                                     else if (Direct_Broadcast_n_del && !first_time) begin 
    1225                                                                         if (!i_regf_TOC) begin 
    1226            1                       2290                                     next_state = RESTART_PATTERN ;
    1227                                                                             //o_sclstall_en   = 1'b1 ;
    1228                                                                             //o_sclstall_code = restart_pattern_stall ;
    1229                                                                         end 
    1230                                                                         else begin
    1231            1                       2141                                     next_state      = EXIT_PATTERN ;
    1232                                                                             //o_sclstall_en   = 1'b1 ;
    1233                                                                             //o_sclstall_code = exit_pattern_stall ;
    1234                                                                         end  
    1235                                                                     end
    1236                                                                 ////////////////////////////////////////////////////////////////////////////////////
    1237                                                                 end
    1238                                                                 else begin 
    1239            1                      14431                             next_state = CRC_CHECKSUM_STATE ;
    1240                                                                 end 
    1241                                                             end 
    1242                                                             else begin 
    1243            1                    ***0***                         o_rx_en   = 1'b1 ;
    1244            1                    ***0***                         o_crc_rx_tx_mux_sel_ccc     = 1'b1 ;
    1245                                                                 //o_crc_data_rx_tx_valid_sel = 1'b1 ;
    1246            1                    ***0***                         o_crc_rx_tx_mux_sel_ccc   = 1'b1 ;
    1247            1                    ***0***                         o_rx_mode = check_value_CRC ;
    1248                                                                 if (i_rx_mode_done && !i_rx_error) begin 
    1249                                                                     if (i_regf_TOC) begin 
    1250            1                    ***0***                                 next_state    = EXIT_PATTERN ;
    1251                                                                         //first_time    = 1'b0 ;
    1252            1                    ***0***                                 o_tx_mode     = exit_pattern ;
    1253            1                    ***0***                                 o_tx_en       = 1'b1 ;
    1254                                                                         //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    1255                                                                         //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1256            1                    ***0***                                 o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    1257            1                    ***0***                                 o_sclstall_en    = 1'b1 ;
    1258            1                    ***0***                                 o_sclstall_code  = exit_pattern_stall ;
    1259                                                                     end 
    1260                                                                     else begin  
    1261            1                    ***0***                                 next_state      = RESTART_PATTERN ;
    1262            1                    ***0***                                 o_sclstall_en   = 1'b1 ;
    1263            1                    ***0***                                 o_sclstall_code = restart_pattern_stall ;
    1264                                                                         //first_time      = 1'b0 ;
    1265            1                    ***0***                                 o_tx_mode       = restart_pattern ;
    1266            1                    ***0***                                 o_tx_en         = 1'b1 ;
    1267                                                                         //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    1268                                                                         //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1269            1                    ***0***                                 o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    1270                                                                     end
    1271                                                                 end
    1272                                                                 else begin 
    1273            1                    ***0***                             next_state = CRC_CHECKSUM_STATE ;
    1274                                                                 end 
    1275                                                             end  
    1276                                                         end 
    1277                                             
    1278                                             
    1279                                                         RESTART_PATTERN_SPECIAL : begin 
    1280            1                    ***0***                     first_time      = 1'b0 ;
    1281            1                    ***0***                     o_bitcnt_en     = 1'b0 ;
    1282                                                             // access timer and staller and tx to perform restart pattern 
    1283            1                    ***0***                     o_tx_en         = 1'b1 ;
    1284                                                             //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    1285                                                             //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1286            1                    ***0***                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    1287            1                    ***0***                     o_tx_mode       = restart_pattern ;
    1288            1                    ***0***                     o_sclstall_en   = 1'b1 ;
    1289            1                    ***0***                     o_sclstall_code = restart_pattern_stall_special ;
    1290                                             
    1291                                             
    1292                                                             //laila edit
    1293                                                             if(i_sclstall_stall_done_strtch)
    1294            1                    ***0***                         o_sclstall_en   = 1'b0 ;
    1295                                                             else
    1296            1                    ***0***                         o_sclstall_en   = 1'b1 ;
    1297                                                             //////////////////////
    1298                                             
    1299                                                             if (i_tx_mode_done  && i_frmcnt_last_frame) begin 
    1300            1                    ***0***                         next_state = FINISH ;
    1301            1                    ***0***                         o_sclstall_en   = 1'b0 ;
    1302                                                             end 
    1303                                                             else if (i_tx_mode_done  && !i_frmcnt_last_frame) begin 
    1304            1                    ***0***                         next_state = PRE_CMD ;
    1305            1                    ***0***                         o_sclstall_en   = 1'b0 ;
    1306                                                             end 
    1307                                                             else begin 
    1308            1                    ***0***                         next_state = RESTART_PATTERN_SPECIAL ;
    1309                                                             end
    1310                                                         end 
    1311                                             
    1312                                             
    1313                                                         RESTART_PATTERN : begin 
    1314            1                      19142                     first_time      = 1'b0 ;
    1315            1                      19142                     o_bitcnt_en     = 1'b0 ;
    1316                                                             // access timer and staller and tx to perform restart pattern 
    1317            1                      19142                     o_tx_en         = 1'b1 ;
    1318                                                             //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    1319                                                             //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1320            1                      19142                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    1321            1                      19142                     o_tx_mode       = restart_pattern ;
    1322            1                      19142                     o_sclstall_en   = 1'b1 ;
    1323            1                      19142                     o_sclstall_code = restart_pattern_stall ;
    1324                                             
    1325                                             /*
    1326                                                             if (i_sclstall_stall_done_strtch) begin
    1327                                                                 o_sclstall_en   = 1'b1 ;
    1328                                                             end
    1329                                                             else o_sclstall_en   = 1'b0 ;
    1330                                             
    1331                                             
    1332                                                             if (i_tx_mode_done  && i_frmcnt_last_frame) begin 
    1333                                                                 next_state = FINISH ;
    1334                                                                 o_sclstall_en   = 1'b0 ;
    1335                                                             end 
    1336                                                             else if (i_tx_mode_done  && !i_frmcnt_last_frame) begin 
    1337                                                                 next_state = PRE_CMD ;
    1338                                                                 o_sclstall_en   = 1'b0 ;
    1339                                                             end 
    1340                                                             else begin 
    1341                                                                 next_state = RESTART_PATTERN ;
    1342                                                             end
    1343                                             */
    1344                                             
    1345                                                             //laila edit
    1346            1                       9571                     if (i_sclstall_stall_done_strtch) o_sclstall_en   = 1'b0 ;
    1347            1                       9571                     else                              o_sclstall_en   = 1'b1 ;
    1348                                                             //////////////////////
    1349                                                             
    1350                                             
    1351                                             
    1352                                                             if (i_tx_mode_done  && i_frmcnt_last_frame) begin 
    1353            1                       5140                         next_state = FINISH ;
    1354            1                       5140                         o_sclstall_en   = 1'b0 ;
    1355                                                             end 
    1356                                                             else if (i_tx_mode_done  && !i_frmcnt_last_frame) begin 
    1357            1                       4431                         next_state = PRE_CMD ;
    1358            1                       4431                         o_sclstall_en   = 1'b0 ;
    1359                                                             end 
    1360                                                             else begin 
    1361            1                       9571                         next_state = RESTART_PATTERN ;
    1362                                                             end
    1363                                                           
    1364                                                             
    1365                                             
    1366                                                             
    1367                                                         end 
    1368                                             
    1369                                             
    1370                                             
    1371                                             
    1372                                                         EXIT_PATTERN : begin 
    1373                                                             // access timer and staller and tx to perform exit pattern 
    1374            1                      14580                     first_time       = 1'b0 ; // no need but it's ok 
    1375            1                      14580                     o_tx_en          = 1'b1 ;
    1376                                                             //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    1377                                                             //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1378            1                      14580                     o_crc_rx_tx_mux_sel_ccc   = 1'b0 ;
    1379            1                      14580                     o_tx_mode        = exit_pattern ;
    1380                                                             //o_sclstall_en    = 1'b1 ;
    1381            1                      14580                     o_sclstall_code  = exit_pattern_stall ;
    1382            1                      14580                     o_bitcnt_err_rst = 1'b0 ;
    1383            1                      14580                     o_bitcnt_en      = 1'b0 ;
    1384                                             
    1385                                             
    1386                                                             // badr's edit
    1387            1                       9720                     if (i_sclstall_stall_done_strtch) o_sclstall_en   = 1'b0 ;
    1388            1                       4860                     else                              o_sclstall_en   = 1'b1 ;
    1389                                                             //////////////////////
    1390                                             
    1391                                             
    1392                                                             if (i_tx_mode_done) begin 
    1393            1                       4860                         next_state = FINISH ;
    1394                                                                 //o_sclstall_en   = 1'b1 ;
    1395                                                                 //o_engine_done     = 1'b1 ;
    1396                                                             end  
    1397                                                             else begin 
    1398            1                       9720                         next_state = EXIT_PATTERN ;
    1399                                                             end
    1400                                                         end
    1401                                             
    1402                                             
    1403                                                         // 18/6/2024 correct state for final verification 
    1404                                                         ERROR : begin      // controller error state 
    1405                                                             
    1406            1                    ***0***                     o_tx_en = 1'b0 ;
    1407            1                    ***0***                     o_rx_en = 1'b1 ;
    1408            1                    ***0***                     o_rx_mode = ERROR_RX ;
    1409                                             
    1410                                                             if(i_rx_mode_done) begin 
    1411            1                    ***0***                         next_state      = EXIT_PATTERN ; // may issue exit or restart pattern .. but conditions ?
    1412            1                    ***0***                         o_tx_en         = 1'b1 ;
    1413            1                    ***0***                         o_crc_en_rx_tx_mux_sel     = 1'b0 ;
    1414            1                    ***0***                         o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1415            1                    ***0***                         o_crc_data_tx_rx_mux_sel   = 1'b0 ; 
    1416            1                    ***0***                         o_tx_mode       = exit_pattern ;
    1417            1                    ***0***                         o_sclstall_en   = 1'b1 ;
    1418            1                    ***0***                         o_sclstall_code = exit_pattern_stall ;
    1419                                                             end 
    1420                                                             else begin 
    1421            1                    ***0***                         next_state = ERROR ;
    1422                                                             end 
    1423                                             
    1424                                                         end 
    1425                                             
    1426                                              /*         // u have done ur job now boss <3
    1427                                                         ERROR : begin      // controller error state 
    1428                                                             o_bitcnt_err_rst = 1'b1 ; // active hight rst to count specially for error state
    1429                                             
    1430                                                             o_tx_en   = 1'b0 ;
    1431                                                             if(i_bitcnt_number == 37) begin 
    1432                                                                 next_state      = EXIT_PATTERN ; // may issue exit or restart pattern .. but conditions ?
    1433                                                                 o_tx_en         = 1'b1 ;
    1434                                                                 //o_crc_rx_tx_mux_sel_ccc     = 1'b0 ;
    1435                                                                 //o_crc_data_rx_tx_valid_sel = 1'b0 ;
    1436                                                                 o_crc_rx_tx_mux_sel_ccc   = 1'b0 ; 
    1437                                                                 o_tx_mode       = exit_pattern ;
    1438                                                                 o_sclstall_en   = 1'b1 ;
    1439                                                                 o_sclstall_code = exit_pattern_stall ;
    1440                                                             end 
    1441                                                             else begin 
    1442                                                                 next_state = ERROR ;
    1443                                                             end 
    1444                                             
    1445                                                         end 
    1446                                             */
    1447                                                         
    1448                                             
    1449                                                         FINISH : begin 
    1450                                                             
    1451            1                      20000                     first_time        = 1'b1 ;   // flag to help to differentiate between the direct and broadcast with assistance of Direct_Braodcast_n flag 
    1452            1                      20000                     o_bitcnt_en       = 1'b0 ;
    1453            1                      20000                     regular_counter   =  'd8 ;   // data starts from ninth location 1008
    1454            1                      20000                     immediate_counter =  'd4 ;   // data starts from fifth location 1004 
    1455            1                      20000                     o_engine_odd      = 1'b0 ;
    1456            1                      20000                     controller_abort  = 1'b0 ;
    1457            1                      20000                     o_engine_done     = 1'b1 ;
    1458            1                      20000                     o_frmcnt_en       = 1'b0 ;
    1459            1                      20000                     o_regf_ERR_STATUS = SUCCESS ;
    1460            1                      20000                     next_state        = IDLE ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        430       212       218    49.30%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/CCC_Handler --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     Defining_byte           0           0        0.00 
                                Direct_Broadcast_n           1           1      100.00 
                            Direct_Broadcast_n_del           1           1      100.00 
                                  controller_abort           0           0        0.00 
                                current_state[4-0]           1           1      100.00 
                                        first_time           1           1      100.00 
                              i_bitcnt_number[0-4]           1           1      100.00 
                                i_bitcnt_number[5]           0           0        0.00 
                                       i_engine_en           1           1      100.00 
                               i_frmcnt_last_frame           1           1      100.00 
                                 i_i_regf_CMD[0-4]           1           1      100.00 
                                 i_i_regf_CMD[5-6]           0           0        0.00 
                                   i_i_regf_CMD[7]           1           1      100.00 
                              i_i_regf_CMD_ATTR[0]           0           1       50.00 
                            i_i_regf_CMD_ATTR[1-2]           0           0        0.00 
                                      i_i_regf_DBP           0           0        0.00 
                           i_i_regf_DEV_INDEX[0-4]           1           1      100.00 
                                 i_i_regf_DTT[0-1]           1           1      100.00 
                                   i_i_regf_DTT[2]           0           0        0.00 
                                      i_i_regf_RnW           0           0        0.00 
                                      i_i_regf_SRE           0           0        0.00 
                                      i_i_regf_TOC           1           1      100.00 
                                     i_i_regf_WROC           1           1      100.00 
                                     i_regf_CMD[7]           1           1      100.00 
                                   i_regf_CMD[6-5]           0           0        0.00 
                                   i_regf_CMD[4-0]           1           1      100.00 
                              i_regf_CMD_ATTR[2-1]           0           0        0.00 
                                i_regf_CMD_ATTR[0]           0           1       50.00 
                                        i_regf_DBP           0           0        0.00 
                             i_regf_DEV_INDEX[4-0]           1           1      100.00 
                                     i_regf_DTT[2]           0           0        0.00 
                                   i_regf_DTT[1-0]           1           1      100.00 
                                        i_regf_RnW           0           0        0.00 
                                        i_regf_SRE           0           0        0.00 
                                        i_regf_TOC           1           1      100.00 
                                       i_regf_WROC           1           1      100.00 
                                        i_rx_error           0           0        0.00 
                                    i_rx_mode_done           1           1      100.00 
                                          i_rx_pre           1           1      100.00 
                             i_sclstall_stall_done           1           1      100.00 
                      i_sclstall_stall_done_strtch           1           1      100.00 
                                         i_sys_clk           1           1      100.00 
                                         i_sys_rst           1           1      100.00 
                                    i_tx_mode_done           1           1      100.00 
                           immediate_counter[31-1]           0           0        0.00 
                              immediate_counter[0]           1           1      100.00 
                                   next_state[4-0]           1           1      100.00 
                                       o_bitcnt_en           1           1      100.00 
                                  o_bitcnt_err_rst           0           0        0.00 
                        o_crc_data_rx_tx_valid_sel           0           0        0.00 
                          o_crc_data_tx_rx_mux_sel           0           0        0.00 
                            o_crc_en_rx_tx_mux_sel           0           0        0.00 
                     o_crc_last_byte_tx_rx_mux_sel           0           0        0.00 
                           o_crc_rx_tx_mux_sel_ccc           1           1      100.00 
                                     o_engine_done           1           1      100.00 
                                      o_engine_odd           1           1      100.00 
                       o_frmcnt_Direct_Broadcast_n           1           1      100.00 
                                       o_frmcnt_en           1           1      100.00 
                            o_regf_ERR_STATUS[3-0]           0           0        0.00 
                                 o_regf_addr[11-4]           0           0        0.00 
                                    o_regf_addr[3]           1           1      100.00 
                                    o_regf_addr[2]           0           0        0.00 
                                  o_regf_addr[1-0]           1           1      100.00 
                                      o_regf_rd_en           1           1      100.00 
                                      o_regf_wr_en           0           0        0.00 
                                           o_rx_en           1           1      100.00 
                                    o_rx_mode[2-0]           0           0        0.00 
                                o_sclstall_code[4]           0           0        0.00 
                              o_sclstall_code[3-0]           1           1      100.00 
                                     o_sclstall_en           1           1      100.00 
                                   o_sdahand_pp_od           0           0        0.00 
                                           o_tx_en           1           1      100.00 
                                    o_tx_mode[3-0]           1           1      100.00 
                                o_txrx_addr_ccc[7]           0           0        0.00 
                              o_txrx_addr_ccc[6-0]           1           1      100.00 
                                pulse_counter[1-0]           1           1      100.00 
                             regular_counter[31-1]           0           0        0.00 
                                regular_counter[0]           1           1      100.00 
                                target_addres[0-5]           1           1      100.00 
                                  target_addres[6]           0           0        0.00 
                                    tmp_shift[9-0]           1           1      100.00 

Total Node Count     =        215 
Toggled Node Count   =        105 
Untoggled Node Count =        110 

Toggle Coverage      =      49.30% (212 of 430 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/DDR_NT
=== Design Unit: work.DDR_NT
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                       256        51       205    19.92%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/DDR_NT

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Normal_Transaction.v
------------------------------------IF Branch------------------------------------
    186                                        3     Count coming in to IF
    186             1                          1       if(!i_sys_rst)
    209             1                          2       else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    226                                   390773     Count coming in to CASE
    228             1                     390771              idle : begin 
    238             1                    ***0***     		      first_stage_command_Pre :  
    253             1                    ***0***     		      Read_Write_bit	: begin 
    264             1                    ***0***     			  serializing_seven_zeros	: begin 
    274             1                    ***0***     		      address	: begin 
    286             1                    ***0***     		      parity	: begin 
    342             1                    ***0***      	  sec_stage_first_data_pre	: begin 
    353             1                    ***0***      		ack_waiting	: begin 
    371             1                    ***0***      		first_data_byte	: begin 
    387             1                    ***0***     		serializing_zeros	: begin 
    400             1                    ***0***          second_data_byte	: begin 
    412             1                    ***0***     		third_stage_first_data_pre : begin 
    445             1                    ***0***     			abort_bit : begin
    499             1                    ***0***     			fourth_stage_crc_first_pre : begin 
    509             1                    ***0***     			fourth_stage_crc_second_pre : begin 
    532             1                    ***0***     			token_crc_bits : begin 
    557             1                    ***0***     			crc_value_bits : begin 
    597             1                    ***0***     			error : begin 
    616             1                    ***0***     			restart :  begin
    626             1                    ***0***     			exit :  begin
    635             1                          2     			default : next_state = idle ;
Branch totals: 2 hits of 21 branches = 9.52%

------------------------------------IF Branch------------------------------------
    230                                   390771     Count coming in to IF
    230             1                    ***0***                if (i_engine_en) 
    232             1                     390771     		       else
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    240                                  ***0***     Count coming in to IF
    240             1                    ***0***     		      	 if (i_engine_en) 
    248             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    242                                  ***0***     Count coming in to IF
    242             1                    ***0***     		         	if (i_tx_mode_done)
    244             1                    ***0***     		        	else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    255                                  ***0***     Count coming in to IF
    255             1                    ***0***     		        if (i_tx_mode_done)
    257             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    266                                  ***0***     Count coming in to IF
    266             1                    ***0***     		        if (i_tx_mode_done)
    268             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    276                                  ***0***     Count coming in to IF
    276             1                    ***0***     		        if (i_tx_mode_done) begin
    280             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    288                                  ***0***     Count coming in to IF
    288             1                    ***0***     		        if (i_rx_mode_done | i_tx_mode_done)
    336             1                    ***0***     		  else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    291                                  ***0***     Count coming in to IF
    291             1                    ***0***     				    if (Parity_data_seq)begin	
    330             1                    ***0***     				    else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    294                                  ***0***     Count coming in to IF
    294             1                    ***0***     				           if (!i_regf_wr_rd_bit)
    305             1                    ***0***     				           else begin
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    297                                  ***0***     Count coming in to IF
    297             1                    ***0***     				               if(!i_frmcnt_last)
    299             1                    ***0***     				               else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    307                                  ***0***     Count coming in to IF
    307             1                    ***0***     				            if (i_rx_error)             // may no sync due to delay one system clk cycle
    310             1                    ***0***     				            else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    344                                  ***0***     Count coming in to IF
    344             1                    ***0***     		        if (i_tx_mode_done)
    347             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    355                                  ***0***     Count coming in to IF
    355             1                    ***0***     		        if (i_rx_mode_done)  
    365             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    358                                  ***0***     Count coming in to IF
    358             1                    ***0***     				       if (!i_rx_pre)      
    360             1                    ***0***     				    else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    373                                  ***0***     Count coming in to IF
    373             1                    ***0***     		        if (i_rx_mode_done | i_tx_mode_done) begin 
    382             1                    ***0***     			      else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    375                                  ***0***     Count coming in to IF
    375             1                    ***0***     					if (!i_frmcnt_last)
    377             1                    ***0***     					else  
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    389                                  ***0***     Count coming in to IF
    389             1                    ***0***     		        if (i_rx_mode_done | i_tx_mode_done) 
    393             1                    ***0***     			      else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    402                                  ***0***     Count coming in to IF
    402             1                    ***0***     		       if (i_rx_mode_done | i_tx_mode_done) 
    406             1                    ***0***     				   else 				
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    415                                  ***0***     Count coming in to IF
    415             1                    ***0***     				if (i_rx_mode_done | i_tx_mode_done)
    439             1                    ***0***     		     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    418                                  ***0***     Count coming in to IF
    418             1                    ***0***     				   if(i_regf_wr_rd_bit)
    434             1                    ***0***     					else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    421                                  ***0***     Count coming in to IF
    421             1                    ***0***     				         if (i_rx_pre)  								
    423             1                    ***0***     		                 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    425                                  ***0***     Count coming in to IF
    425             1                    ***0***     						   if ((!i_frmcnt_last) && i_regf_short_read )  
    427             1                    ***0***     					       else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    446                                  ***0***     Count coming in to IF
    446             1                    ***0***     			 if(i_rx_mode_done | i_tx_mode_done)
    492             1                    ***0***     				 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    449                                  ***0***     Count coming in to IF
    449             1                    ***0***     			  	if (!i_regf_wr_rd_bit)
    469             1                    ***0***     				  else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    452                                  ***0***     Count coming in to IF
    452             1                    ***0***     				     if(i_rx_pre)
    454             1                    ***0***     				     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    472                                  ***0***     Count coming in to IF
    472             1                    ***0***     				     if(i_frmcnt_last) 
    485             1                    ***0***     				     else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    501                                  ***0***     Count coming in to IF
    501             1                    ***0***     			    if (i_rx_mode_done | i_tx_mode_done)
    503             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    511                                  ***0***     Count coming in to IF
    511             1                    ***0***     			    if (i_rx_mode_done | i_tx_mode_done)
    526             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    513                                  ***0***     Count coming in to IF
    513             1                    ***0***     						if (i_regf_wr_rd_bit)
    521             1                    ***0***     						else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    515                                  ***0***     Count coming in to IF
    515             1                    ***0***     							if (i_rx_pre)
    517             1                    ***0***     							else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    533                                  ***0***     Count coming in to IF
    533             1                    ***0***     				if (i_rx_mode_done | i_tx_mode_done)
    552             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    536                                  ***0***     Count coming in to IF
    536             1                    ***0***     					if (i_regf_wr_rd_bit)
    544             1                    ***0***     					else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    538                                  ***0***     Count coming in to IF
    538             1                    ***0***     						if (!i_rx_error)
    540             1                    ***0***     						else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    559                                  ***0***     Count coming in to IF
    559             1                    ***0***     			 if (i_rx_mode_done | i_tx_mode_done)
    591             1                    ***0***     		   else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    562                                  ***0***     Count coming in to IF
    562             1                    ***0***     					if (i_regf_wr_rd_bit)
    577             1                    ***0***     					else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    565                                  ***0***     Count coming in to IF
    565             1                    ***0***     						if (!i_rx_error) 
    573             1                    ***0***     						else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    568                                  ***0***     Count coming in to IF
    568             1                    ***0***     							if (!i_regf_toc)
    570             1                    ***0***     							else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    581                                  ***0***     Count coming in to IF
    581             1                    ***0***     							if (!i_regf_toc)
    583             1                    ***0***     							else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    599                                  ***0***     Count coming in to IF
    599             1                    ***0***     			 if (i_rx_mode_done)
    610             1                    ***0***     		   else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    603                                  ***0***     Count coming in to IF
    603             1                    ***0***     				       if (!i_regf_toc)
    605             1                    ***0***     				       else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    618                                  ***0***     Count coming in to IF
    618             1                    ***0***     		        if (i_tx_mode_done /*&& i_staller_done*/)
    620             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    628                                  ***0***     Count coming in to IF
    628             1                    ***0***     		        if (i_tx_mode_done /*&& i_staller_done*/)
    630             1                    ***0***     		        else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    753                                   793796     Count coming in to CASE
    755             1                     793793       idle : begin 
    765             1                    ***0***       first_stage_command_Pre :  begin
    777             1                    ***0***       Read_Write_bit	: begin 
    791             1                    ***0***       serializing_seven_zeros	: begin         // command first byte {Read_Write_bit,serializing_seven_zeros}
    801             1                    ***0***       address : begin                            // command second byte {address,par_adj"calc by Tx"}
    818             1                    ***0***       parity        : begin
    860             1                    ***0***      sec_stage_first_data_pre : begin   // 
    871             1                    ***0***       ack_waiting : begin
    935             1                    ***0***       first_data_byte : begin
    1000            1                    ***0***     	serializing_zeros : begin            // state of dummy data in case of odd number of bytes
    1024            1                    ***0***       second_data_byte        : begin
    1046            1                    ***0***       third_stage_first_data_pre    : begin
    1082            1                    ***0***       abort_bit      : begin
    1141            1                    ***0***     fourth_stage_crc_first_pre     : begin
    1159            1                    ***0***      fourth_stage_crc_second_pre     : begin
    1190            1                    ***0***        token_crc_bits        : begin
    1211            1                    ***0***        crc_value_bits   : begin
    1262            1                    ***0***        error   : begin
    1273            1                    ***0***        restart   : begin
    1288            1                    ***0***        exit   : begin
                                               3     All False Count
Branch totals: 2 hits of 21 branches = 9.52%

------------------------------------IF Branch------------------------------------
    781                                  ***0***     Count coming in to IF
    781             1                    ***0***     			if(!i_regf_wr_rd_bit)
    783             1                    ***0***     		 else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    825                                  ***0***     Count coming in to IF
    825             1                    ***0***     	   if (!i_regf_wr_rd_bit)
    838             1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    840                                  ***0***     Count coming in to IF
    840             1                    ***0***     		  if (!Parity_data_seq)
    845             1                    ***0***     		  else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    850                                  ***0***     Count coming in to IF
    850             1                    ***0***     		  if (i_rx_error)
    852             1                    ***0***               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    879                                  ***0***     Count coming in to IF
    879             1                    ***0***        if(sysclk_done)
    929             1                    ***0***     	else 	   		
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    888                                  ***0***     Count coming in to IF
    888             1                    ***0***     	      if ((!i_rx_pre) && i_rx_mode_done)
    897             1                    ***0***             else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    891                                  ***0***     Count coming in to IF
    891             1                    ***0***     			if (!i_regf_wr_rd_bit) begin 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    905                                  ***0***     Count coming in to IF
    905             1                    ***0***     		 if (!i_regf_wr_rd_bit)
    923             1                    ***0***     		   else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    907                                  ***0***     Count coming in to IF
    907             1                    ***0***     		  if (i_regf_cmd_attr[0])              // Immediate Transfer
    920             1                    ***0***     		 else                              // Regular Transfer			 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    909                                  ***0***     Count coming in to CASE
    911             1                    ***0***     			'd1 : addr = 'd1004;       // sending Byte1 of address 'd20 
    912             1                    ***0***     			'd2 : addr = 'd1004;       // sending Byte1 of address 'd20 and  sending Byte2 of address 'd21
    913             1                    ***0***     			'd3 : addr = 'd1004;		// sending Byte1 of address 'd20 and sending Byte2 of address 'd21 and sending Byte3 of address 'd22
    914             1                    ***0***     			'd4 : addr = 'd1004;		// sending Byte1 of address 'd20 and sending Byte2 of address 'd21 and sending Byte3 of address 'd22 and sending Byte3 of address 'd23
                                         ***0***     All False Count
Branch totals: 0 hits of 5 branches = 0.00%

------------------------------------IF Branch------------------------------------
    939                                  ***0***     Count coming in to IF
    939             1                    ***0***         if (!i_regf_wr_rd_bit)
    946             1                    ***0***          else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    960                                  ***0***     Count coming in to IF
    960             1                    ***0***     	if (first_byte_seq) begin 	
    979             1                    ***0***     	else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    962                                  ***0***     Count coming in to IF
    962             1                    ***0***     	if (i_tx_mode_done | i_rx_mode_done | i_bitcnt == 'd9  ) begin     // for increasing address to be ready 
    972             1                    ***0***     	else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    964                                  ***0***     Count coming in to IF
    964             1                    ***0***     		if (!i_frmcnt_last)
    966             1                    ***0***     		else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    980                                  ***0***     Count coming in to IF
    980             1                    ***0***     	if (i_tx_mode_done | i_rx_mode_done | i_bitcnt == 'd10  ) begin     // for increasing address to be ready 
    990             1                    ***0***     	else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    982                                  ***0***     Count coming in to IF
    982             1                    ***0***     		if (!i_frmcnt_last)
    984             1                    ***0***     		else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1003                                 ***0***     Count coming in to IF
    1003            1                    ***0***     	if (!i_regf_wr_rd_bit) 
    1009            1                    ***0***     	else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1029                                 ***0***     Count coming in to IF
    1029            1                    ***0***       if (!i_regf_wr_rd_bit)
    1036            1                    ***0***          else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1048                                 ***0***     Count coming in to IF
    1048            1                    ***0***             if (!i_regf_wr_rd_bit)
    1054            1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1059                                 ***0***     Count coming in to IF
    1059            1                    ***0***     		  if (i_rx_mode_done)
    1072            1                    ***0***     			else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1061                                 ***0***     Count coming in to IF
    1061            1                    ***0***     				if (!i_rx_pre)
    1068            1                    ***0***     				else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1063                                 ***0***     Count coming in to IF
    1063            1                    ***0***     					 if ((!i_frmcnt_last) && i_regf_short_read ) 
    1065            1                    ***0***     					else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1084                                 ***0***     Count coming in to IF
    1084            1                    ***0***            if (i_regf_wr_rd_bit)
    1102            1                    ***0***             else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1087                                 ***0***     Count coming in to IF
    1087            1                    ***0***               if (!i_frmcnt_last)  
    1092            1                    ***0***               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1107                                 ***0***     Count coming in to IF
    1107            1                    ***0***     		  if(!i_rx_pre)  
    1113            1                    ***0***     		  else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1161                                 ***0***     Count coming in to IF
    1161            1                    ***0***         if (!i_regf_wr_rd_bit)
    1168            1                    ***0***     	 else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1174                                 ***0***     Count coming in to IF
    1174            1                    ***0***     		  if ( i_rx_mode_done)		  
    1182            1                    ***0***     		 else  
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1176                                 ***0***     Count coming in to IF
    1176            1                    ***0***     			if (i_rx_pre)
    1178            1                    ***0***     			else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1192                                 ***0***     Count coming in to IF
    1192            1                    ***0***         if (!i_regf_wr_rd_bit)
    1197            1                    ***0***          else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1202                                 ***0***     Count coming in to IF
    1202            1                    ***0***     		  if (i_rx_error)
    1204            1                    ***0***               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1213                                 ***0***     Count coming in to IF
    1213            1                    ***0***         if (!i_regf_wr_rd_bit)
    1229            1                    ***0***         else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1217                                 ***0***     Count coming in to IF
    1217            1                    ***0***     		if((i_bitcnt == 'd12) || (i_bitcnt == 'd11))
    1226            1                    ***0***     		else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1220                                 ***0***     Count coming in to IF
    1220            1                    ***0***     			if(!i_regf_toc)
    1222            1                    ***0***     			else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1236                                 ***0***     Count coming in to IF
    1236            1                    ***0***     		 if (i_rx_error)
    1238            1                    ***0***               else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1241                                 ***0***     Count coming in to IF
    1241            1                    ***0***     					if((i_bitcnt == 'd12) || (i_bitcnt == 'd11))
    1249            1                    ***0***     					else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1244                                 ***0***     Count coming in to IF
    1244            1                    ***0***     						if(!i_regf_toc)
    1246            1                    ***0***     						else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1281                                 ***0***     Count coming in to IF
    1281            1                    ***0***     			if(i_tx_mode_done )
    1283            1                    ***0***     		  else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    1295                                 ***0***     Count coming in to IF
    1295            1                    ***0***     			if(i_tx_mode_done )
    1301            1                    ***0***     		  else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------CASE Branch------------------------------------
    1329                                    9703     Count coming in to CASE
    1330            1                          1             5'd0 : target_addres =     7'd8  ;  
    1331            1                        313             5'd1 : target_addres     =     7'd9  ;  //0001001
    1332            1                        312             5'd2 : target_addres     =     7'd10 ;
    1333            1                        346             5'd3 : target_addres     =     7'd11 ;
    1335            1                        286             5'd4 : target_addres     =     7'd12 ;
    1336            1                        332             5'd5 : target_addres     =     7'd13 ;
    1337            1                        307             5'd6 : target_addres     =     7'd14 ;
    1338            1                        327             5'd7 : target_addres     =     7'd15 ;
    1340            1                        306             5'd8 : target_addres     =     7'd16 ;
    1341            1                        308             5'd9 : target_addres     =     7'd17 ;
    1342            1                        314             5'd10: target_addres     =     7'd18 ;
    1343            1                        300             5'd11: target_addres     =     7'd19 ;
    1345            1                        335             5'd12: target_addres     =     7'd20 ;
    1346            1                        292             5'd13: target_addres     =     7'd21 ;
    1347            1                        293             5'd14: target_addres     =     7'd22 ;
    1348            1                        336             5'd15: target_addres     =     7'd23 ;
    1350            1                        325             5'd16: target_addres = 7'd24 ;
    1351            1                        286             5'd17: target_addres = 7'd25 ;
    1352            1                        331             5'd18: target_addres = 7'd26 ;
    1353            1                        294             5'd19: target_addres = 7'd27 ;
    1355            1                        309             5'd20: target_addres = 7'd28 ;
    1356            1                        306             5'd21: target_addres = 7'd29 ;
    1357            1                        316             5'd22: target_addres = 7'd30 ;
    1358            1                        303             5'd23: target_addres = 7'd31 ;
    1360            1                        297             5'd24: target_addres = 7'd32 ;
    1361            1                        305             5'd25: target_addres = 7'd33 ;
    1362            1                        320             5'd26: target_addres = 7'd34 ;
    1363            1                        336             5'd27: target_addres = 7'd35 ;
    1365            1                        323             5'd28: target_addres = 7'd36 ;
    1366            1                        311             5'd29: target_addres = 7'd37 ;
    1367            1                        315             5'd30: target_addres = 7'd38 ;
    1368            1                        318             5'd31: target_addres = 7'd39 ;
                                         ***0***     All False Count
Branch totals: 32 hits of 33 branches = 96.96%

------------------------------------IF Branch------------------------------------
    1386                                       4     Count coming in to IF
    1386            1                          1     if (!i_sys_rst)
    1391            1                          3     else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1393                                       3     Count coming in to IF
    1393            1                    ***0***     	if (en_sysclk)
    1395            1                          3     	else 
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1398                                       3     Count coming in to IF
    1398            1                          2     if( current_state != 'd4)
                                               1     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1401                                       3     Count coming in to IF
    1401            1                          2     if( current_state != 'd7)
                                               1     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1405                                       3     Count coming in to IF
    1405            1                          2     if( current_state != 'd8 )
                                               1     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    1408                                       3     Count coming in to IF
    1408            1                    ***0***     if( current_state == 'd6)
                                               3     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1411                                       3     Count coming in to IF
    1411            1                    ***0***     if( current_state == 'd8)
                                               3     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    1414                                       3     Count coming in to IF
    1414            1                    ***0***     if( current_state == 'd10)
                                               3     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      42         0        42     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/DDR_NT --

  File Normal_Transaction.v
----------------Focused Condition View-------------------
Line       288 Item    1  (i_rx_mode_done | i_tx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1      ~i_tx_mode_done               
  Row   3:    ***0***  i_tx_mode_done_0      ~i_rx_mode_done               
  Row   4:    ***0***  i_tx_mode_done_1      ~i_rx_mode_done               

----------------Focused Condition View-------------------
Line       373 Item    1  (i_rx_mode_done | i_tx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1      ~i_tx_mode_done               
  Row   3:    ***0***  i_tx_mode_done_0      ~i_rx_mode_done               
  Row   4:    ***0***  i_tx_mode_done_1      ~i_rx_mode_done               

----------------Focused Condition View-------------------
Line       389 Item    1  (i_rx_mode_done | i_tx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1      ~i_tx_mode_done               
  Row   3:    ***0***  i_tx_mode_done_0      ~i_rx_mode_done               
  Row   4:    ***0***  i_tx_mode_done_1      ~i_rx_mode_done               

----------------Focused Condition View-------------------
Line       402 Item    1  (i_rx_mode_done | i_tx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1      ~i_tx_mode_done               
  Row   3:    ***0***  i_tx_mode_done_0      ~i_rx_mode_done               
  Row   4:    ***0***  i_tx_mode_done_1      ~i_rx_mode_done               

----------------Focused Condition View-------------------
Line       415 Item    1  (i_rx_mode_done | i_tx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1      ~i_tx_mode_done               
  Row   3:    ***0***  i_tx_mode_done_0      ~i_rx_mode_done               
  Row   4:    ***0***  i_tx_mode_done_1      ~i_rx_mode_done               

----------------Focused Condition View-------------------
Line       425 Item    1  (~i_frmcnt_last && i_regf_short_read)
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
      i_frmcnt_last         N  No hits                  Hit '_0' and '_1'
  i_regf_short_read         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_frmcnt_last_0       i_regf_short_read             
  Row   2:    ***0***  i_frmcnt_last_1       -                             
  Row   3:    ***0***  i_regf_short_read_0   ~i_frmcnt_last                
  Row   4:    ***0***  i_regf_short_read_1   ~i_frmcnt_last                

----------------Focused Condition View-------------------
Line       446 Item    1  (i_rx_mode_done | i_tx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1      ~i_tx_mode_done               
  Row   3:    ***0***  i_tx_mode_done_0      ~i_rx_mode_done               
  Row   4:    ***0***  i_tx_mode_done_1      ~i_rx_mode_done               

----------------Focused Condition View-------------------
Line       501 Item    1  (i_rx_mode_done | i_tx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1      ~i_tx_mode_done               
  Row   3:    ***0***  i_tx_mode_done_0      ~i_rx_mode_done               
  Row   4:    ***0***  i_tx_mode_done_1      ~i_rx_mode_done               

----------------Focused Condition View-------------------
Line       511 Item    1  (i_rx_mode_done | i_tx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1      ~i_tx_mode_done               
  Row   3:    ***0***  i_tx_mode_done_0      ~i_rx_mode_done               
  Row   4:    ***0***  i_tx_mode_done_1      ~i_rx_mode_done               

----------------Focused Condition View-------------------
Line       533 Item    1  (i_rx_mode_done | i_tx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1      ~i_tx_mode_done               
  Row   3:    ***0***  i_tx_mode_done_0      ~i_rx_mode_done               
  Row   4:    ***0***  i_tx_mode_done_1      ~i_rx_mode_done               

----------------Focused Condition View-------------------
Line       559 Item    1  (i_rx_mode_done | i_tx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  i_tx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_mode_done_0      ~i_tx_mode_done               
  Row   2:    ***0***  i_rx_mode_done_1      ~i_tx_mode_done               
  Row   3:    ***0***  i_tx_mode_done_0      ~i_rx_mode_done               
  Row   4:    ***0***  i_tx_mode_done_1      ~i_rx_mode_done               

----------------Focused Condition View-------------------
Line       888 Item    1  (~i_rx_pre && i_rx_mode_done)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
        i_rx_pre         N  No hits                  Hit '_0' and '_1'
  i_rx_mode_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_rx_pre_0            i_rx_mode_done                
  Row   2:    ***0***  i_rx_pre_1            -                             
  Row   3:    ***0***  i_rx_mode_done_0      ~i_rx_pre                     
  Row   4:    ***0***  i_rx_mode_done_1      ~i_rx_pre                     

----------------Focused Condition View-------------------
Line       962 Item    1  ((i_tx_mode_done | i_rx_mode_done) | (i_bitcnt == 9))
Condition totals: 0 of 3 input terms covered = 0.00%

       Input Term   Covered  Reason for no coverage   Hint
      -----------  --------  -----------------------  --------------
   i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
   i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  (i_bitcnt == 9)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0      (~(i_bitcnt == 9) && ~i_rx_mode_done)
  Row   2:    ***0***  i_tx_mode_done_1      (~(i_bitcnt == 9) && ~i_rx_mode_done)
  Row   3:    ***0***  i_rx_mode_done_0      (~(i_bitcnt == 9) && ~i_tx_mode_done)
  Row   4:    ***0***  i_rx_mode_done_1      (~(i_bitcnt == 9) && ~i_tx_mode_done)
  Row   5:    ***0***  (i_bitcnt == 9)_0     ~(i_tx_mode_done | i_rx_mode_done)
  Row   6:    ***0***  (i_bitcnt == 9)_1     ~(i_tx_mode_done | i_rx_mode_done)

----------------Focused Condition View-------------------
Line       980 Item    1  ((i_tx_mode_done | i_rx_mode_done) | (i_bitcnt == 10))
Condition totals: 0 of 3 input terms covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
    i_tx_mode_done         N  No hits                  Hit '_0' and '_1'
    i_rx_mode_done         N  No hits                  Hit '_0' and '_1'
  (i_bitcnt == 10)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_tx_mode_done_0      (~(i_bitcnt == 10) && ~i_rx_mode_done)
  Row   2:    ***0***  i_tx_mode_done_1      (~(i_bitcnt == 10) && ~i_rx_mode_done)
  Row   3:    ***0***  i_rx_mode_done_0      (~(i_bitcnt == 10) && ~i_tx_mode_done)
  Row   4:    ***0***  i_rx_mode_done_1      (~(i_bitcnt == 10) && ~i_tx_mode_done)
  Row   5:    ***0***  (i_bitcnt == 10)_0    ~(i_tx_mode_done | i_rx_mode_done)
  Row   6:    ***0***  (i_bitcnt == 10)_1    ~(i_tx_mode_done | i_rx_mode_done)

----------------Focused Condition View-------------------
Line       1063 Item    1  (~i_frmcnt_last && i_regf_short_read)
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
      i_frmcnt_last         N  No hits                  Hit '_0' and '_1'
  i_regf_short_read         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_frmcnt_last_0       i_regf_short_read             
  Row   2:    ***0***  i_frmcnt_last_1       -                             
  Row   3:    ***0***  i_regf_short_read_0   ~i_frmcnt_last                
  Row   4:    ***0***  i_regf_short_read_1   ~i_frmcnt_last                

----------------Focused Condition View-------------------
Line       1217 Item    1  ((i_bitcnt == 12) || (i_bitcnt == 11))
Condition totals: 0 of 2 input terms covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (i_bitcnt == 12)         N  No hits                  Hit '_0' and '_1'
  (i_bitcnt == 11)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (i_bitcnt == 12)_0    ~(i_bitcnt == 11)             
  Row   2:    ***0***  (i_bitcnt == 12)_1    -                             
  Row   3:    ***0***  (i_bitcnt == 11)_0    ~(i_bitcnt == 12)             
  Row   4:    ***0***  (i_bitcnt == 11)_1    ~(i_bitcnt == 12)             

----------------Focused Condition View-------------------
Line       1241 Item    1  ((i_bitcnt == 12) || (i_bitcnt == 11))
Condition totals: 0 of 2 input terms covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  (i_bitcnt == 12)         N  No hits                  Hit '_0' and '_1'
  (i_bitcnt == 11)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (i_bitcnt == 12)_0    ~(i_bitcnt == 11)             
  Row   2:    ***0***  (i_bitcnt == 12)_1    -                             
  Row   3:    ***0***  (i_bitcnt == 11)_0    ~(i_bitcnt == 12)             
  Row   4:    ***0***  (i_bitcnt == 11)_1    ~(i_bitcnt == 12)             

----------------Focused Condition View-------------------
Line       1398 Item    1  (current_state != 4)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (current_state != 4)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (current_state != 4)_0  -                             
  Row   2:          1  (current_state != 4)_1  -                             

----------------Focused Condition View-------------------
Line       1401 Item    1  (current_state != 7)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (current_state != 7)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (current_state != 7)_0  -                             
  Row   2:          1  (current_state != 7)_1  -                             

----------------Focused Condition View-------------------
Line       1405 Item    1  (current_state != 8)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (current_state != 8)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (current_state != 8)_0  -                             
  Row   2:          1  (current_state != 8)_1  -                             

----------------Focused Condition View-------------------
Line       1408 Item    1  (current_state == 6)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (current_state == 6)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (current_state == 6)_0  -                             
  Row   2:    ***0***  (current_state == 6)_1  -                             

----------------Focused Condition View-------------------
Line       1411 Item    1  (current_state == 8)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (current_state == 8)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (current_state == 8)_0  -                             
  Row   2:    ***0***  (current_state == 8)_1  -                             

----------------Focused Condition View-------------------
Line       1414 Item    1  (current_state == 10)
Condition totals: 0 of 1 input term covered = 0.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  (current_state == 10)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  (current_state == 10)_0  -                             
  Row   2:    ***0***  (current_state == 10)_1  -                             


FSM Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    FSM States                      20         1        19     5.00%
    FSM Transitions                 50         0        50     0.00%

================================FSM Details================================

FSM Coverage for instance /I3C_TOP_TB/DUT/DDR_NT --

FSM_ID: current_state
    Current State Object : current_state
    ----------------------
    State Value MapInfo :
    ---------------------
Line          State Name               Value
----          ----------               -----
 228                idle                   0
 238first_stage_command_Pre                   1
 253      Read_Write_bit                  18
 264serializing_seven_zeros                   2
 274             address                   3
 286              parity                   4
 342sec_stage_first_data_pre                   5
 412third_stage_first_data_pre                   9
 597               error                  15
 499fourth_stage_crc_first_pre                  11
 353         ack_waiting                   6
 371     first_data_byte                   7
 387   serializing_zeros                  19
 400    second_data_byte                   8
 445           abort_bit                  10
 509fourth_stage_crc_second_pre                  12
 532      token_crc_bits                  13
 557      crc_value_bits                  14
 626                exit                  17
 616             restart                  16
    Covered States :
    ----------------
                   State           Hit_count
                   -----           ---------
                    idle                   2          
    Uncovered States :
    ------------------
                   State
                   -----
    first_stage_command_Pre
          Read_Write_bit
    serializing_seven_zeros
                 address
                  parity
    sec_stage_first_data_pre
    third_stage_first_data_pre
                   error
    fourth_stage_crc_first_pre
             ack_waiting
         first_data_byte
       serializing_zeros
        second_data_byte
               abort_bit
    fourth_stage_crc_second_pre
          token_crc_bits
          crc_value_bits
                    exit
                 restart
    Uncovered Transitions :
    -----------------------
Line            Trans_ID          Transition          
----            --------          ----------          
 231                   0          idle -> first_stage_command_Pre
 249                   1          first_stage_command_Pre -> idle
 243                   2          first_stage_command_Pre -> Read_Write_bit
 256                   3          Read_Write_bit -> serializing_seven_zeros
 188                   4          Read_Write_bit -> idle
 267                   5          serializing_seven_zeros -> address
 188                   6          serializing_seven_zeros -> idle
 277                   7          address -> parity   
 188                   8          address -> idle     
 331                   9          parity -> sec_stage_first_data_pre
 319                  10          parity -> third_stage_first_data_pre
 308                  11          parity -> error     
 300                  12          parity -> fourth_stage_crc_first_pre
 188                  13          parity -> idle      
 345                  14          sec_stage_first_data_pre -> ack_waiting
 188                  15          sec_stage_first_data_pre -> idle
 435                  16          third_stage_first_data_pre -> abort_bit
 428                  17          third_stage_first_data_pre -> fourth_stage_crc_second_pre
 426                  18          third_stage_first_data_pre -> error
 188                  19          third_stage_first_data_pre -> idle
 606                  20          error -> exit       
 604                  21          error -> restart    
 188                  22          error -> idle       
 502                  23          fourth_stage_crc_first_pre -> fourth_stage_crc_second_pre
 188                  24          fourth_stage_crc_first_pre -> idle
 361                  25          ack_waiting -> error
 359                  26          ack_waiting -> first_data_byte
 188                  27          ack_waiting -> idle 
 378                  28          first_data_byte -> serializing_zeros
 376                  29          first_data_byte -> second_data_byte
 188                  30          first_data_byte -> idle
 391                  31          serializing_zeros -> parity
 188                  32          serializing_zeros -> idle
 404                  33          second_data_byte -> parity
 188                  34          second_data_byte -> idle
 486                  35          abort_bit -> first_data_byte
 480                  36          abort_bit -> error  
 188                  37          abort_bit -> idle   
 522                  38          fourth_stage_crc_second_pre -> token_crc_bits
 518                  39          fourth_stage_crc_second_pre -> error
 188                  40          fourth_stage_crc_second_pre -> idle
 545                  41          token_crc_bits -> crc_value_bits
 541                  42          token_crc_bits -> error
 188                  43          token_crc_bits -> idle
 584                  44          crc_value_bits -> exit
 582                  45          crc_value_bits -> restart
 574                  46          crc_value_bits -> error
 188                  47          crc_value_bits -> idle
 629                  48          exit -> idle        
 619                  49          restart -> idle     


    Summary                       Bins      Hits    Misses  Coverage
    -------                       ----      ----    ------  --------
        FSM States                  20         1        19     5.00%
        FSM Transitions             50         0        50     0.00%
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     271        71       200    26.19%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/DDR_NT --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Normal_Transaction.v
    1                                                module DDR_NT (
    2                                                
    3                                                input        i_sys_clk,
    4                                                input        i_sys_rst,
    5                                                input        i_engine_en,
    6                                                input        i_frmcnt_last,
    7                                                input        i_tx_mode_done,
    8                                                //input        i_tx_parity_data,
    9                                                input        i_rx_mode_done,
    10                                               input        i_rx_pre,
    11                                               input        i_rx_error,
    12                                               input        i_staller_done,
    13                                               
    14                                               //----------- interface input signals-----------//
    15                                               
    16                                               input        i_regf_toc,          	// 1’b0: RESTART ; 1’b1: STOP
    17                                               input [4:0]  i_regf_dev_index,   	// 5’b0: Broadcast  ;  any other value: Direct  
    18                                               input        i_regf_short_read,  	// 1’b0: ALLOW_SHORT_READ  ; 1’b1: SHORT_READ_IS_ERROR 
    19                                               input        i_regf_wroc ,       	//1’b0: NOT_REQUIRED RESPONSE ; 1’b1: REQUIRED RESPONSE
    20                                               input        i_regf_wr_rd_bit,   	//  1’b0: WRITE ; 1’b1: READ
    21                                               input [2:0]  i_regf_cmd_attr,     	// 1'b1: Immediate Data Transfer Command ; 1'b0:Regular Transfer Command
    22                                               input [2:0]  i_regf_dtt,			// Determine The Number of Data Byte
    23                                               input [5:0]  i_bitcnt ,
    24                                               
    25                                               
    26                                               /*// to be removed 
    27                                               input  [4:0] i_bitcount,  
    28                                               input        i_scl_pos_edge,                 // for testbench
    29                                               input        i_scl_neg_edge,*/
    30                                               
    31                                               
    32                                               output reg       o_tx_en,
    33                                               output reg [3:0] o_tx_mode,
    34                                               output reg       o_rx_en,
    35                                               output reg [2:0] o_rx_mode,
    36                                               output reg       o_frmcnt_en,
    37                                               output reg       o_bitcnt_en, 
    38                                               output reg       o_bitcnt_rst,  
    39                                               //output reg       o_bitcnt_stop, 
    40                                               output reg       o_sdahand_pp_od,
    41                                               output reg       o_regf_wr_en,
    42                                               output reg       o_regf_rd_en,
    43                                               output reg [11:0] o_regf_addr,
    44                                               output reg [4:0] o_sclstall_no_of_cycles,
    45                                               output reg       o_sclstall_en,  
    46                                               output reg       o_engine_done,
    47                                               output reg [7:0] o_tx_special_data,
    48                                               
    49                                               
    50                                               //------------ interface output signals ---------//
    51                                               output reg       o_regf_abort,
    52                                               output reg [3:0] o_regf_error_type,
    53                                               
    54                                               output wire       o_crc_rx_tx_mux_sel_NT
    55                                               
    56                                               /*output wire       o_crc_data_rx_tx_valid_sel,
    57                                               output wire       o_crc_data_tx_rx_mux_sel,
    58                                               output wire       o_crc_last_byte_tx_rx_mux_sel*/
    59                                               
    60                                               );  
    61                                               
    62                                               
    63                                               
    64                                               
    65                                               //------------- types of error ------------//
    66                                               localparam [3:0]    SUCCESS 			  	= 'd0,
    67                                                                   CRC_Error				  = 'd1,
    68                                                                   Parity_Error      = 'd2,
    69                                               										Frame_Error       = 'd3,
    70                                               										Address_Header_Error = 'd4,
    71                                               										NACK_Error           = 'd5,
    72                                                                   OVL_Error            = 'd6,                // not used
    73                                                                   I3C_SHORT_READ_Error = 'd7, 
    74                                                                   HC_ABORTED_Error     = 'd8,       // by Controller due to internal error (not used)
    75                                               										BUS_ABORTED_Error    = 'd9 ;       // Aborted due to Early Termination, or Target not completing read or write of data phase of transfer
    76                                                
    77                                               
    78                                               
    79                                               
    80                                               
    81                                               
    82                                               
    83                                               
    84                                               
    85                                               //------------ timing specification ------------//  
    86                                               localparam [4:0]  restart_stalling = 'd10,
    87                                                                 exit_stalling = 'd16;
    88                                               
    89                                               
    90                                               
    91                                               
    92                                               
    93                                               
    94                                               
    95                                               
    96                                               
    97                                               
    98                                               
    99                                               //--------------- tx modes -------------//   
    100                                              localparam [3:0]  seven_zeros = 'd3,
    101                                                                Serializing_address = 'd1,              
    102                                                                special_preamble_tx = 'd0,  //01
    103                                                                one_preamble = 'd2,   // send 1 in pp or od 
    104                                                                zero_preamble = 'd6,  // send zero
    105                                              				  Serializing_byte = 'd7, 
    106                                              				 /* Serializing_second_byte = 'b1010,*/ 
    107                                                                Calculating_Parity ='d4,
    108                                              				  /*Calculating_Parity_Data ='b1000,*/
    109                                              				  CRC_value = 'd13,
    110                                                                token_CRC = 'd12,
    111                                                                Restart_Pattern = 'd15,
    112                                                                Exit_Pattern = 'd14;
    113                                              				
    114                                              				//  Read_Write_bit = 'b1010;
    115                                              
    116                                               
    117                                               
    118                                               
    119                                               
    120                                               
    121                                               
    122                                               
    123                                               
    124                                               // -------------- rx modes ----------------//  
    125                                              localparam [2:0]     preamble = 'd0, 
    126                                                                //  nack_bit = 'd1 ,
    127                                                                   Deserializing_byte = 'd3,
    128                                                                   Check_token = 'd7,
    129                                                                   Check_Parity_value = 'd6,
    130                                                                   Check_CRC_value = 'd2,
    131                                                                   Error = 'd4;
    132                                              
    133                                              
    134                                              
    135                                              
    136                                              
    137                                              
    138                                              
    139                                              //------------------ fsm states ----------------//
    140                                              localparam [4:0]              idle = 'd0,
    141                                                                            first_stage_command_Pre = 'd1,
    142                                                                            serializing_seven_zeros = 'd2,
    143                                              					          address = 'd3,                
    144                                              					          parity = 'd4,
    145                                              					          sec_stage_first_data_pre = 'd5,             // sent by controller
    146                                              					          ack_waiting = 'd6,
    147                                              					          first_data_byte = 'd7,
    148                                              					          second_data_byte = 'd8,
    149                                              					          third_stage_first_data_pre = 'd9,             // send by target or controller
    150                                              					          abort_bit = 'd10,                      //   aborting by controller or target             
    151                                              					          fourth_stage_crc_first_pre = 'd11,
    152                                              					          fourth_stage_crc_second_pre = 'd12,
    153                                              					          token_crc_bits = 'd13,                 // 4 bits
    154                                              					          crc_value_bits = 'd14,                  // 5 bits 
    155                                              					          error = 'd15,
    156                                              					          restart = 'd16,
    157                                              					          exit = 'd17,
    158                                              							  Read_Write_bit = 'd18,
    159                                              							  serializing_zeros = 'd19,
    160                                              							  waiting = 'd20 ;
    161                                              
    162                                              
    163                                              //------------------ internal signals decleration -----------------//					 
    164                                              reg [6:0] target_addres,broadcast_address;
    165                                              reg    [4:0]         current_state , next_state ;
    166                                              /*wire [3:0] count ;*/
    167                                              reg parity_data, Parity_data_seq ,sysclk_done,en_sysclk , first_byte , first_byte_seq;
    168                                              reg [11:0] addr ,addr_temp;
    169                                              
    170                                              
    171                                              localparam specific_address = 'd 999; // for 8 zeros
    172                                              
    173                                              
    174                                              
    175                                              assign o_crc_rx_tx_mux_sel_NT = (i_regf_wr_rd_bit)? 1'b1 : 1'b0;
    176                                              
    177                                              /*assign o_crc_data_rx_tx_valid_sel = (i_regf_wr_rd_bit)? 1'b1 : 1'b0;
    178                                              
    179                                              assign o_crc_data_tx_rx_mux_sel   = (i_regf_wr_rd_bit)? 1'b1 :1'b0;
    180                                              
    181                                              assign o_crc_last_byte_tx_rx_mux_sel = (i_regf_wr_rd_bit)? 1'b1 :1'b0;*/
    182                                              
    183                                              //--------------------------- 1: Sequential Always Block ------------------------------//
    184             1                          3     always @(posedge i_sys_clk or negedge i_sys_rst)
    185                                               begin
    186                                                if(!i_sys_rst)
    187                                                 begin
    188             1                          1          current_state <= idle ;
    189                                                /*  o_tx_en = 'b0 ; 
    190                                                  o_rx_en = 'b0 ;
    191                                                  o_frmcnt_en = 'b0 ;
    192                                                  o_regf_wr_en = 'b0 ;
    193                                                  o_regf_rd_en = 'b0 ;
    194                                                  o_engine_done = 'b0 ;
    195                                              	o_regf_addr = 'b0;
    196                                              	o_regf_abort = 'b0;
    197                                              	o_sclstall_en = 'b0;
    198                                              	o_sclstall_no_of_cycles = 'b0;
    199                                              	o_sdahand_pp_od = 'b1;
    200                                              	o_bitcnt_en = 'b0; 
    201                                              	o_bitcnt_rst = 'b0;
    202                                              	o_sclstall_no_of_cycles = 'b0;
    203                                                  o_sclstall_en = 'b0;
    204                                                  o_regf_abort = 'b0;
    205                                              	o_regf_error_type = SUCCESS;  // No error*/
    206                                              	
    207                                              	
    208                                                 end
    209                                                else
    210                                                 begin
    211             1                          2          current_state <= next_state ;
    212                                                 end
    213                                               end
    214                                              
    215                                              
    216                                              
    217                                              
    218                                              
    219                                              
    220                                              
    221                                              //--------------------------- 2: Combinational Always Block For FSM States------------------------------//
    222             1                     390773         always @ (*)
    223                                              
    224                                                   begin
    225                                              
    226                                                     case(current_state)
    227                                              
    228                                                       idle : begin 
    229                                              
    230                                                         if (i_engine_en) 
    231             1                    ***0***     		         next_state = first_stage_command_Pre ;
    232                                              		       else
    233             1                     390771     		         next_state = idle ;
    234                                              
    235                                              		         end
    236                                              
    237                                              
    238                                              		      first_stage_command_Pre :  
    239                                              		      begin
    240                                              		      	 if (i_engine_en) 
    241                                              		         begin
    242                                              		         	if (i_tx_mode_done)
    243             1                    ***0***     		        	  next_state = Read_Write_bit ;
    244                                              		        	else
    245             1                    ***0***     		          	next_state = first_stage_command_Pre ;
    246                                              		         end
    247                                              		        
    248                                              		        else
    249             1                    ***0***     		        		next_state = idle ;
    250                                              		      end
    251                                              
    252                                              
    253                                              		      Read_Write_bit	: begin 
    254                                              
    255                                              		        if (i_tx_mode_done)
    256             1                    ***0***     		          next_state = serializing_seven_zeros ;
    257                                              		        else
    258             1                    ***0***     		          next_state = Read_Write_bit ;
    259                                              
    260                                              		          end
    261                                              				  
    262                                              				  
    263                                              				  
    264                                              			  serializing_seven_zeros	: begin 
    265                                              
    266                                              		        if (i_tx_mode_done)
    267             1                    ***0***     		          next_state = address ;
    268                                              		        else
    269             1                    ***0***     		          next_state = serializing_seven_zeros ;
    270                                              
    271                                              		          end
    272                                              
    273                                              
    274                                              		      address	: begin 
    275                                              
    276                                              		        if (i_tx_mode_done) begin
    277             1                    ***0***     		          next_state = parity ;
    278                                              
    279                                              				  end
    280                                              		        else
    281             1                    ***0***     		          next_state = address ;
    282                                              
    283                                                          end 
    284                                              
    285                                              
    286                                              		      parity	: begin 
    287                                              
    288                                              		        if (i_rx_mode_done | i_tx_mode_done)
    289                                              		          begin
    290                                              
    291                                              				    if (Parity_data_seq)begin	
    292                                              				          		 
    293                                              
    294                                              				           if (!i_regf_wr_rd_bit)
    295                                              				             begin
    296                                              
    297                                              				               if(!i_frmcnt_last)
    298             1                    ***0***     		                     next_state = third_stage_first_data_pre ;
    299                                              				               else 
    300             1                    ***0***     				                 next_state = fourth_stage_crc_first_pre ;
    301                                              
    302                                              					        end
    303                                              
    304                                              
    305                                              				           else begin
    306                                              
    307                                              				            if (i_rx_error)             // may no sync due to delay one system clk cycle
    308             1                    ***0***     				             next_state = error;
    309                                              				             
    310                                              				            else 
    311                                              				              
    312                                              				             begin
    313                                              				 
    314                                              				           /* if(!i_frmcnt_last)
    315                                              		                   next_state = third_stage_first_data_pre ;
    316                                              				            else 
    317                                              				               next_state = fourth_stage_crc_first_pre ;*/
    318                                              				               
    319             1                    ***0***     							   next_state = third_stage_first_data_pre ;
    320                                              					           end
    321                                              							   
    322                                              				   
    323                                              
    324                                              					      end
    325                                              					      end
    326                                              
    327                                              				    
    328                                              
    329                                              
    330                                              				    else 
    331             1                    ***0***     				    next_state =  sec_stage_first_data_pre ;
    332                                              
    333                                              				    end
    334                                              
    335                                              
    336                                              		  else
    337             1                    ***0***     		    next_state = parity ;
    338                                              
    339                                                          end
    340                                              
    341                                              
    342                                               	  sec_stage_first_data_pre	: begin 
    343                                              
    344                                              		        if (i_tx_mode_done)
    345             1                    ***0***     		           next_state = ack_waiting ;
    346                                              
    347                                              		        else
    348             1                    ***0***     		           next_state = sec_stage_first_data_pre ;
    349                                              
    350                                                          end
    351                                              
    352                                              
    353                                               		ack_waiting	: begin 
    354                                              		        
    355                                              		        if (i_rx_mode_done)  
    356                                              		          begin
    357                                              				
    358                                              				       if (!i_rx_pre)      
    359             1                    ***0***     		             next_state = first_data_byte ;
    360                                              				    else 
    361             1                    ***0***                          next_state = error ;
    362                                                               
    363                                                             end
    364                                                             				
    365                                              		        else
    366             1                    ***0***     		          next_state = ack_waiting ;
    367                                              		          
    368                                                          end 
    369                                              
    370                                              
    371                                               		first_data_byte	: begin 
    372                                              
    373                                              		        if (i_rx_mode_done | i_tx_mode_done) begin 
    374                                              					
    375                                              					if (!i_frmcnt_last)
    376             1                    ***0***     				      next_state = second_data_byte ;
    377                                              					else  
    378             1                    ***0***     					 next_state = serializing_zeros;
    379                                              					 
    380                                              				end
    381                                              
    382                                              			      else
    383             1                    ***0***     		          next_state = first_data_byte ;
    384                                              
    385                                                          end
    386                                              			
    387                                              		serializing_zeros	: begin 
    388                                              
    389                                              		        if (i_rx_mode_done | i_tx_mode_done) 
    390                                              										 
    391             1                    ***0***     				    next_state = parity ;
    392                                              					
    393                                              			      else
    394             1                    ***0***     		          next_state = serializing_zeros ;
    395                                              
    396                                                          end	
    397                                              			
    398                                              
    399                                              
    400                                                   second_data_byte	: begin 
    401                                              
    402                                              		       if (i_rx_mode_done | i_tx_mode_done) 
    403                                              				     
    404             1                    ***0***     					 next_state = parity;
    405                                              				      
    406                                              				   else 				
    407             1                    ***0***     		          next_state = second_data_byte ;
    408                                              
    409                                                          end
    410                                              
    411                                              
    412                                              		third_stage_first_data_pre : begin 
    413                                              			  
    414                                              			
    415                                              				if (i_rx_mode_done | i_tx_mode_done)
    416                                              				  begin
    417                                              				    
    418                                              				   if(i_regf_wr_rd_bit)
    419                                              				     begin
    420                                              				       
    421                                              				         if (i_rx_pre)  								
    422             1                    ***0***     		                 next_state = abort_bit ; 
    423                                              		                 else
    424                                              						 begin
    425                                              						   if ((!i_frmcnt_last) && i_regf_short_read )  
    426             1                    ***0***     					        next_state = error ;  // target didn't send all requierd data 
    427                                              					       else 
    428             1                    ***0***     					        next_state = fourth_stage_crc_second_pre ;
    429                                                                      end
    430                                                                 
    431                                                                   end
    432                                                               
    433                                                           
    434                                              					else
    435             1                    ***0***     					next_state = abort_bit ;
    436                                                           
    437                                                           end
    438                                                            
    439                                              		     else
    440             1                    ***0***     		       next_state = third_stage_first_data_pre ;
    441                                              		       
    442                                              		     end
    443                                              
    444                                              
    445                                              			abort_bit : begin
    446                                              			 if(i_rx_mode_done | i_tx_mode_done)
    447                                              			   begin
    448                                              			
    449                                              			  	if (!i_regf_wr_rd_bit)
    450                                              				   begin
    451                                              				      
    452                                              				     if(i_rx_pre)
    453             1                    ***0***     		           next_state = first_data_byte ;
    454                                              				     else
    455                                              				      begin 
    456                                              				        
    457                                              				      /* if (i_regf_toc)
    458                                              				        next_state = restart ;
    459                                              				       else
    460                                              				        next_state = exit ;*/
    461                                              						
    462             1                    ***0***     						next_state = error;    // target aborts writing
    463                                              				        
    464                                              				      end
    465                                              				       
    466                                              				    end
    467                                              				       
    468                                              				    
    469                                              				  else
    470                                              				    begin
    471                                              				      
    472                                              				     if(i_frmcnt_last) 
    473                                              				       
    474                                              		          begin 
    475                                              				        
    476                                              				      /* if (!i_regf_toc)
    477                                              				        next_state = restart ;
    478                                              				       else
    479                                              				        next_state = exit ;*/
    480             1                    ***0***     						next_state = error;     // Controller aborts reading
    481                                              						
    482                                              				        
    483                                              				      end
    484                                              		           
    485                                              				     else 
    486             1                    ***0***     				       next_state = first_data_byte ;
    487                                              				      
    488                                              				    end 
    489                                              				    
    490                                              			end
    491                                              				    
    492                                              				 else
    493             1                    ***0***     				   next_state = abort_bit ;
    494                                              				   
    495                                              		end
    496                                              
    497                                              
    498                                              
    499                                              			fourth_stage_crc_first_pre : begin 
    500                                              			  
    501                                              			    if (i_rx_mode_done | i_tx_mode_done)
    502             1                    ***0***     		          next_state = fourth_stage_crc_second_pre ;  
    503                                              		        else
    504             1                    ***0***     		          next_state = fourth_stage_crc_first_pre ;
    505                                              				  
    506                                              			end
    507                                              			
    508                                              			
    509                                              			fourth_stage_crc_second_pre : begin 
    510                                              			  
    511                                              			    if (i_rx_mode_done | i_tx_mode_done)
    512                                              					begin
    513                                              						if (i_regf_wr_rd_bit)
    514                                              						begin
    515                                              							if (i_rx_pre)
    516             1                    ***0***     								next_state = token_crc_bits ;
    517                                              							else 
    518             1                    ***0***     								next_state = error ;
    519                                              						end
    520                                              						
    521                                              						else 
    522             1                    ***0***     						next_state = token_crc_bits ;
    523                                              						
    524                                              						
    525                                              					end
    526                                              		        else
    527             1                    ***0***     		          next_state = fourth_stage_crc_second_pre ;
    528                                              				  
    529                                              			end
    530                                              
    531                                              
    532                                              			token_crc_bits : begin 
    533                                              				if (i_rx_mode_done | i_tx_mode_done)
    534                                              					begin
    535                                              		          
    536                                              					if (i_regf_wr_rd_bit)
    537                                              					begin
    538                                              						if (!i_rx_error)
    539             1                    ***0***     							next_state = crc_value_bits ;
    540                                              						else 
    541             1                    ***0***     							next_state = error ;
    542                                              					end
    543                                              					
    544                                              					else 
    545             1                    ***0***     					next_state = crc_value_bits ;
    546                                              					
    547                                              					end
    548                                              					
    549                                              				  
    550                                              				  
    551                                              				   
    552                                              		        else
    553             1                    ***0***     		          next_state =  token_crc_bits ;
    554                                              
    555                                              			end
    556                                              
    557                                              			crc_value_bits : begin 
    558                                              
    559                                              			 if (i_rx_mode_done | i_tx_mode_done)
    560                                              
    561                                              		       	begin				
    562                                              					if (i_regf_wr_rd_bit)
    563                                              					begin
    564                                              						
    565                                              						if (!i_rx_error) 
    566                                              						begin
    567                                              							
    568                                              							if (!i_regf_toc)
    569             1                    ***0***     								next_state = restart ;
    570                                              							else
    571             1                    ***0***     								next_state = exit ;
    572                                              						end 
    573                                              						else 
    574             1                    ***0***     							next_state = error ;
    575                                              					end
    576                                              					
    577                                              					else
    578                                              						begin
    579                                              						
    580                                              
    581                                              							if (!i_regf_toc)
    582             1                    ***0***     								next_state = restart ;
    583                                              							else
    584             1                    ***0***     								next_state = exit ;
    585                                              						 end
    586                                              					end
    587                                              				  
    588                                              
    589                                              				   
    590                                              
    591                                              		   else
    592             1                    ***0***     		       next_state = crc_value_bits ;	  
    593                                              
    594                                              			end
    595                                              
    596                                              
    597                                              			error : begin 
    598                                              
    599                                              			 if (i_rx_mode_done)
    600                                              
    601                                              		       		 begin 
    602                                              
    603                                              				       if (!i_regf_toc)
    604             1                    ***0***     				        next_state = restart ;
    605                                              				       else
    606             1                    ***0***     				        next_state = exit ;
    607                                              
    608                                              				      end
    609                                              
    610                                              		   else
    611             1                    ***0***     		       next_state = error ;	
    612                                              
    613                                              			end
    614                                              
    615                                              
    616                                              			restart :  begin
    617                                              
    618                                              		        if (i_tx_mode_done /*&& i_staller_done*/)
    619             1                    ***0***     		          next_state = idle ;  // return to idle waitng to be enabled
    620                                              		        else
    621             1                    ***0***     		          next_state = restart ;
    622                                              
    623                                              		  end 
    624                                              
    625                                              
    626                                              			exit :  begin
    627                                              
    628                                              		        if (i_tx_mode_done /*&& i_staller_done*/)
    629             1                    ***0***     		          next_state = idle ;
    630                                              		        else
    631             1                    ***0***     		          next_state = exit ;
    632                                              
    633                                              		  end 
    634                                              		  
    635             1                          2     			default : next_state = idle ;
    636                                              		  
    637                                              		  
    638                                              		/*  waiting :  begin 
    639                                              		  
    640                                              		  if (sysclk_done && i_staller_done)
    641                                              		          next_state = idle ;
    642                                              		        else
    643                                              		          next_state = waiting ;
    644                                              		  
    645                                              		  end*/
    646                                              		  
    647                                              		  
    648                                              		/*  parity_0	: begin 
    649                                              
    650                                              		        if (i_rx_mode_done | i_tx_mode_done)
    651                                              		          begin
    652                                              
    653                                              				    next_state = parity_1
    654                                              
    655                                              		  else
    656                                              		    next_state = parity_0 ;
    657                                              
    658                                                          end
    659                                              			
    660                                              			parity_1	: begin 
    661                                              
    662                                              		        if (i_rx_mode_done | i_tx_mode_done)
    663                                              		          begin
    664                                              
    665                                              				    if (i_tx_parity_data)begin	
    666                                              				          		 
    667                                              
    668                                              				           if (!i_regf_wr_rd_bit)
    669                                              				             begin
    670                                              
    671                                              				               if(!i_frmcnt_last)
    672                                              		                     next_state = third_stage_first_data_pre ;
    673                                              				               else 
    674                                              				                 next_state = fourth_stage_crc_first_pre ;
    675                                              
    676                                              					        end
    677                                              
    678                                              
    679                                              				           else begin
    680                                              
    681                                              				            if (i_rx_error) 
    682                                              				             next_state = error;
    683                                              				             
    684                                              				            else 
    685                                              				              
    686                                              				             begin
    687                                              				 
    688                                              				            if(!i_frmcnt_last)
    689                                              		                   next_state = third_stage_first_data_pre ;
    690                                              				            else 
    691                                              				               next_state = fourth_stage_crc_first_pre ;
    692                                              				               
    693                                              					           end
    694                                              				   
    695                                              
    696                                              					      end
    697                                              					      end
    698                                              
    699                                              				    
    700                                              
    701                                              
    702                                              				    else 
    703                                              				    next_state =  sec_stage_first_data_pre ;
    704                                              
    705                                              				    end
    706                                              
    707                                              
    708                                              		  else
    709                                              		    next_state = parity_1 ;
    710                                              
    711                                                          end*/
    712                                              
    713                                                   endcase
    714                                                 end
    715                                              
    716                                              
    717                                              
    718                                              
    719                                              
    720                                              
    721                                              
    722                                              
    723                                              //--------------------------- 3: Combinational Always Block For Outputs------------------------------//
    724             1                     793796     always @(*)
    725                                               begin
    726                                              
    727             1                     793796       o_tx_en = 'b0 ; 
    728             1                     793796       o_rx_en = 'b0 ;
    729             1                     793796       o_frmcnt_en = 'b1 ;
    730             1                     793796       o_regf_wr_en = 'b0 ;
    731             1                     793796       o_regf_rd_en = 'b0 ;
    732             1                     793796       o_engine_done = 'b0 ;
    733             1                     793796     	addr = 'b0;
    734             1                     793796     	o_regf_abort = 'b0;
    735             1                     793796     	o_sclstall_en = 'b0;
    736             1                     793796     	o_sclstall_no_of_cycles = 'b0;
    737             1                     793796     	o_sdahand_pp_od = 'b1;
    738             1                     793796     	o_bitcnt_en = 'b1; 
    739             1                     793796     	o_bitcnt_rst = 'b0;
    740             1                     793796     	o_regf_abort = 'b0;
    741             1                     793796     	o_regf_error_type = SUCCESS;  // No error
    742             1                     793796     	en_sysclk=0;
    743             1                     793796     	o_tx_mode = 'b0;
    744             1                     793796     	o_rx_mode = 'b0 ;
    745             1                     793796     	parity_data = 'b0;
    746             1                     793796     	o_tx_special_data = 'd0;
    747             1                     793796     	first_byte = 'b0;
    748                                              	//next_state = idle;
    749                                              	
    750                                              //	o_bitcnt_stop = 'b0;
    751                                              
    752                                              
    753                                                case(current_state)
    754                                              
    755                                                idle : begin 
    756                                              
    757             1                     793793     		   o_tx_en = 'b0 ;
    758             1                     793793                o_bitcnt_en = 'b0;
    759             1                     793793                o_frmcnt_en = 'b0 ;
    760                                              			
    761                                              
    762                                              		  end
    763                                              
    764                                              
    765                                                first_stage_command_Pre :  begin
    766                                              
    767                                              
    768             1                    ***0***     		   o_tx_en = 'b1 ;
    769             1                    ***0***     		   o_tx_mode = special_preamble_tx ;  //01
    770             1                    ***0***     		   o_frmcnt_en = 'b0 ;
    771                                              		  
    772                                              		   
    773                                              
    774                                              		   end 
    775                                              
    776                                              
    777                                                Read_Write_bit	: begin 
    778                                              
    779             1                    ***0***     		  o_tx_en = 'b1;
    780             1                    ***0***     		  o_frmcnt_en = 'b0 ;
    781                                              			if(!i_regf_wr_rd_bit)
    782             1                    ***0***     		 o_tx_mode = zero_preamble;
    783                                              		 else 
    784             1                    ***0***     		 o_tx_mode = one_preamble;
    785                                              
    786                                              
    787                                                          end 
    788                                              			
    789                                              			
    790                                              			
    791                                                serializing_seven_zeros	: begin         // command first byte {Read_Write_bit,serializing_seven_zeros}
    792                                              
    793             1                    ***0***     		  o_tx_en = 'b1;
    794             1                    ***0***     		  o_tx_mode = seven_zeros ; 
    795             1                    ***0***     		  o_frmcnt_en = 'b0 ;
    796                                              		  
    797                                              
    798                                                          end 
    799                                              
    800                                              
    801                                                address : begin                            // command second byte {address,par_adj"calc by Tx"}
    802                                              
    803                                                       
    804             1                    ***0***     		  o_tx_en = 'b1;
    805             1                    ***0***     		  o_tx_mode = Serializing_address ;
    806             1                    ***0***     		   o_frmcnt_en = 'b1 ;
    807                                              		  
    808                                              		
    809             1                    ***0***     		  parity_data = 'b0;                  // Calculating_Parity_Command
    810                                              		
    811                                              		
    812                                              		
    813             1                    ***0***     		o_tx_special_data = {1'b0,target_addres};         
    814                                              		
    815                                              		end
    816                                              
    817                                              
    818                                                parity        : begin
    819                                              
    820                                              		//if (i_tx_mode_done)
    821             1                    ***0***     		 o_frmcnt_en = 'b1 ;
    822                                              		/* else 
    823                                              		  o_frmcnt_en = 'b0 ;*/
    824                                              
    825                                              	   if (!i_regf_wr_rd_bit)
    826                                                       begin
    827             1                    ***0***               o_tx_en = 'b1;
    828                                              		  
    829                                              		  /*if (i_tx_parity_data)
    830                                                        o_tx_mode = Calculating_Parity_Data;         
    831                                              		  else 
    832                                              		  o_tx_mode = Calculating_Parity_Command;     */
    833                                              		  
    834             1                    ***0***     		   o_tx_mode = Calculating_Parity;           // Calculating Parity for command and data
    835                                              		  
    836                                              	  
    837                                                       end
    838                                                      else
    839                                                       begin
    840                                              		  if (!Parity_data_seq)
    841                                              		  begin
    842             1                    ***0***      		  o_tx_en = 'b1;
    843             1                    ***0***     		  o_tx_mode = Calculating_Parity;
    844                                              		  end
    845                                              		  else 
    846                                              		  begin
    847             1                    ***0***               o_rx_en = 'b1;
    848             1                    ***0***               o_rx_mode = Check_Parity_value;         //check the parity correctness
    849                                                        
    850                                              		  if (i_rx_error)
    851             1                    ***0***                 o_regf_error_type = Parity_Error;
    852                                                        else
    853             1                    ***0***                 o_regf_error_type = SUCCESS; 
    854                                                       end
    855                                              		 end
    856                                              
    857                                                           end 
    858                                              
    859                                              
    860                                               sec_stage_first_data_pre : begin   // 
    861                                              
    862             1                    ***0***           o_tx_en = 'b1;
    863             1                    ***0***           o_tx_mode = one_preamble ;
    864                                              	  
    865                                              	 // o_sdahand_pp_od = 'b0; // open drain , which makes a change in scl line //to be edited
    866                                              	  
    867                                                   
    868                                                           end 
    869                                              
    870                                              
    871                                                ack_waiting : begin
    872                                              	     
    873                                              		// o_sdahand_pp_od = 'b0;   //listening to sda
    874                                                   
    875             1                    ***0***     		first_byte ='b1;
    876             1                    ***0***     		en_sysclk=1;
    877             1                    ***0***     		 o_frmcnt_en = 'b1 ;
    878                                              		// wait (sysclk_done) ; // wait is unsynthesizable
    879                                                 if(sysclk_done)
    880                                              		begin
    881             1                    ***0***        		 o_rx_en = 'b1 ;
    882             1                    ***0***     	      o_rx_mode = preamble ;
    883                                              		 
    884                                              		//  o_bitcnt_stop = 'b1;
    885                                              		   
    886                                              		 
    887                                              		  
    888                                              	      if ((!i_rx_pre) && i_rx_mode_done)
    889                                              			begin
    890             1                    ***0***     			o_regf_error_type = SUCCESS;
    891                                              			if (!i_regf_wr_rd_bit) begin 
    892             1                    ***0***     			o_tx_en = 'b1;
    893             1                    ***0***     			o_tx_mode = Serializing_byte; 		    
    894             1                    ***0***     			o_regf_rd_en = 'b1 ;
    895                                              			end 
    896                                              			end
    897                                                      else 
    898                                              		begin
    899                                                       	
    900             1                    ***0***     			o_regf_error_type = NACK_Error;
    901                                              		
    902                                              		 end
    903                                              		   
    904                                              		   
    905                                              		 if (!i_regf_wr_rd_bit)
    906                                              		 begin
    907                                              		  if (i_regf_cmd_attr[0])              // Immediate Transfer
    908                                              			begin 
    909                                              			case (i_regf_dtt)
    910                                              		//	'd0 : o_regf_addr = 'd0;         // no data 
    911             1                    ***0***     			'd1 : addr = 'd1004;       // sending Byte1 of address 'd20 
    912             1                    ***0***     			'd2 : addr = 'd1004;       // sending Byte1 of address 'd20 and  sending Byte2 of address 'd21
    913             1                    ***0***     			'd3 : addr = 'd1004;		// sending Byte1 of address 'd20 and sending Byte2 of address 'd21 and sending Byte3 of address 'd22
    914             1                    ***0***     			'd4 : addr = 'd1004;		// sending Byte1 of address 'd20 and sending Byte2 of address 'd21 and sending Byte3 of address 'd22 and sending Byte3 of address 'd23
    915                                              		//	'd5 : o_regf_addr = 'd0;        // only defining byte and no data
    916                                              		//	'd6 : o_regf_addr = 'd21;       // sending defining byte and sending Byte2 of address 'd21
    917                                              		//	'd7 : o_regf_addr = 'd21;		// sending defining byte and sending Byte2 of address 'd21 and sending Byte3 of address 'd22
    918                                              			endcase
    919                                              			end
    920                                              		 else                              // Regular Transfer			 
    921             1                    ***0***     			addr = 'd1;      // starting from this address to write Regular data
    922                                              		  end 
    923                                              		   else
    924             1                    ***0***                addr = 'd10;		// starting from this address to read  Regular data
    925                                              		  
    926                                              		  
    927                                              		  end
    928                                              		  
    929                                              	else 	   		
    930             1                    ***0***     		o_rx_en = 'b0 ;
    931                                              
    932                                                           end 
    933                                              
    934                                              
    935                                                first_data_byte : begin
    936                                                   
    937             1                    ***0***     	 o_frmcnt_en = 'b1 ;
    938                                              
    939                                                  if (!i_regf_wr_rd_bit)
    940                                                    begin
    941             1                    ***0***            o_tx_en = 'b1;
    942             1                    ***0***            o_tx_mode = Serializing_byte; 		    
    943             1                    ***0***     	   o_regf_rd_en = 'b1 ;
    944                                                    end
    945                                              
    946                                                   else
    947                                                    begin
    948             1                    ***0***              o_rx_en = 'b1 ;
    949             1                    ***0***     	     o_rx_mode = Deserializing_byte ;
    950             1                    ***0***     		 o_regf_wr_en = 'b1 ;
    951                                              		 //o_sdahand_pp_od = 'b0;   //listening to sda
    952                                              	    end 
    953                                              		
    954                                              		
    955                                              	/*if (!i_frmcnt_last) 
    956                                              		count_en = 'd0;
    957                                              	else 
    958                                              		count_en = 'd1;*/
    959                                              		
    960                                              	if (first_byte_seq) begin 	
    961                                              		
    962                                              	if (i_tx_mode_done | i_rx_mode_done | i_bitcnt == 'd9  ) begin     // for increasing address to be ready 
    963                                              		
    964                                              		if (!i_frmcnt_last)
    965             1                    ***0***     		addr = addr_temp + 'd1;
    966                                              		else
    967             1                    ***0***     		addr = specific_address;
    968                                              		
    969                                              		end
    970                                              	
    971                                              	
    972                                              	else
    973             1                    ***0***     		addr = addr_temp ;
    974                                              		
    975                                              		end
    976                                              		
    977                                              		
    978                                              		
    979                                              	else begin 
    980                                              	if (i_tx_mode_done | i_rx_mode_done | i_bitcnt == 'd10  ) begin     // for increasing address to be ready 
    981                                              		
    982                                              		if (!i_frmcnt_last)
    983             1                    ***0***     		addr = addr_temp + 'd1;
    984                                              		else
    985             1                    ***0***     		addr = specific_address;
    986                                              		
    987                                              		end
    988                                              	
    989                                              	
    990                                              	else
    991             1                    ***0***     		addr = addr_temp ;
    992                                              		
    993                                              		end
    994                                              
    995                                              		
    996                                              
    997                                                           end
    998                                              			 
    999                                              			 
    1000                                             	serializing_zeros : begin            // state of dummy data in case of odd number of bytes
    1001            1                    ***0***     	  o_frmcnt_en = 'b1 ;
    1002                                             	
    1003                                             	if (!i_regf_wr_rd_bit) 
    1004                                             	  begin 
    1005            1                    ***0***     	   o_tx_en = 'b1;
    1006            1                    ***0***            o_tx_mode = Serializing_byte;
    1007            1                    ***0***     	   addr = specific_address;
    1008                                             	   end
    1009                                             	else
    1010                                             	  begin
    1011            1                    ***0***     		o_rx_en = 'b1 ;
    1012            1                    ***0***     	    o_rx_mode = Deserializing_byte ;
    1013                                             	  end
    1014                                             	   
    1015                                             	   
    1016                                             
    1017                                             	
    1018            1                    ***0***           parity_data = 'b1;                  // Calculating Parity of Data
    1019                                                  end 	   
    1020                                             	 
    1021                                             	
    1022                                             
    1023                                             
    1024                                               second_data_byte        : begin
    1025                                                
    1026            1                    ***0***        parity_data = 'b1;                   // Calculating Parity of Data
    1027            1                    ***0***        o_frmcnt_en = 'b1 ;
    1028                                               
    1029                                               if (!i_regf_wr_rd_bit)
    1030                                                   begin
    1031            1                    ***0***            o_tx_en = 'b1;
    1032            1                    ***0***            o_tx_mode = Serializing_byte;  		    
    1033            1                    ***0***     		o_regf_rd_en = 'b1 ;
    1034                                                   end
    1035                                             
    1036                                                  else
    1037                                                   begin
    1038            1                    ***0***            o_rx_en = 'b1 ;
    1039            1                    ***0***     	     o_rx_mode = Deserializing_byte ;
    1040            1                    ***0***     		   o_regf_wr_en = 'b1 ;
    1041                                             	    end 
    1042                                             
    1043                                             	 end
    1044                                             
    1045                                             
    1046                                               third_stage_first_data_pre    : begin
    1047                                             
    1048                                                     if (!i_regf_wr_rd_bit)
    1049                                                      begin
    1050            1                    ***0***               o_tx_en = 'b1;
    1051            1                    ***0***               o_tx_mode = one_preamble;
    1052                                             		  // o_sdahand_pp_od = 'b0;  // open drain , listening to sda
    1053                                                      end
    1054                                                     else
    1055                                                      begin
    1056            1                    ***0***               o_rx_en = 'b1;
    1057            1                    ***0***               o_rx_mode = preamble;
    1058                                             		  
    1059                                             		  if (i_rx_mode_done)
    1060                                             		  begin 
    1061                                             				if (!i_rx_pre)
    1062                                             				begin
    1063                                             					 if ((!i_frmcnt_last) && i_regf_short_read ) 
    1064            1                    ***0***     					o_regf_error_type = I3C_SHORT_READ_Error ;  // target didn't send all requierd data 
    1065                                             					else 
    1066            1                    ***0***     					o_regf_error_type = SUCCESS ;
    1067                                             				end
    1068                                             				else 
    1069            1                    ***0***     				o_regf_error_type = SUCCESS ;
    1070                                             				
    1071                                             			end 
    1072                                             			else 
    1073            1                    ***0***     			o_regf_error_type = SUCCESS ;
    1074                                             			
    1075                                                      end
    1076                                             		 
    1077                                             		 
    1078                                             
    1079                                                          end 
    1080                                             
    1081                                             
    1082                                               abort_bit      : begin
    1083                                             
    1084                                                    if (i_regf_wr_rd_bit)
    1085                                                      begin
    1086                                             
    1087                                                       if (!i_frmcnt_last)  
    1088                                                         begin
    1089            1                    ***0***                   o_tx_en = 'b1;
    1090            1                    ***0***                   o_tx_mode = one_preamble; 
    1091                                                         end
    1092                                                       else
    1093                                                         begin
    1094            1                    ***0***                   o_tx_en = 'b1;
    1095            1                    ***0***                   o_tx_mode = zero_preamble;
    1096            1                    ***0***     			  o_regf_abort = 'b0;
    1097            1                    ***0***     	          o_regf_error_type = BUS_ABORTED_Error;  // Controller aborts reading
    1098                                                         end
    1099                                             
    1100                                                       end
    1101                                             
    1102                                                     else
    1103                                                      begin
    1104            1                    ***0***               o_rx_en = 'b1;
    1105            1                    ***0***               o_rx_mode = preamble;
    1106                                             
    1107                                             		  if(!i_rx_pre)  
    1108                                             		  begin 
    1109            1                    ***0***     		  o_regf_abort = 'b1;
    1110            1                    ***0***     		  o_regf_error_type = BUS_ABORTED_Error;   // target aborts writing 
    1111                                             		  end
    1112                                             		  
    1113                                             		  else 
    1114            1                    ***0***     		  o_regf_abort = 'b0;
    1115                                             
    1116                                                      end
    1117                                             
    1118                                                          end 
    1119                                             			 
    1120                                             			 
    1121                                             			 
    1122                                             		/*	 second_data_byte        : begin
    1123                                                
    1124                                               if (!i_regf_wr_rd_bit)
    1125                                                   begin
    1126                                                    o_tx_en = 'b1;
    1127                                                    o_tx_mode = Serializing_second_byte;  		    
    1128                                             		o_regf_rd_en = 'b1 ;
    1129                                                   end
    1130                                             
    1131                                                  else
    1132                                                   begin
    1133                                                    o_rx_en = 'b1 ;
    1134                                             	     o_rx_mode = Deserializing_byte ;
    1135                                             		   o_regf_wr_en = 'b1 ;
    1136                                             	    end 
    1137                                             
    1138                                             	 end*/
    1139                                             
    1140                                             
    1141                                             fourth_stage_crc_first_pre     : begin
    1142                                                 
    1143                                                /* if (!i_regf_wr_rd_bit)
    1144                                                      begin*/
    1145                                                     
    1146            1                    ***0***     		o_tx_en = 'b1;
    1147            1                    ***0***             o_tx_mode = zero_preamble;
    1148                                                      
    1149                                             		 /*end
    1150                                                       else
    1151                                                      begin
    1152                                                       o_rx_en = 'b1;
    1153                                                       o_rx_mode = preamble;
    1154                                                      end*/
    1155                                             
    1156                                                          end
    1157                                                          
    1158                                                          
    1159                                              fourth_stage_crc_second_pre     : begin
    1160                                                 
    1161                                                 if (!i_regf_wr_rd_bit)
    1162                                                      begin
    1163            1                    ***0***               o_tx_en = 'b1;
    1164            1                    ***0***               o_tx_mode = one_preamble;
    1165                                             		  
    1166                                                      end
    1167                                                    
    1168                                             	 else
    1169                                                      begin
    1170            1                    ***0***               o_rx_en = 'b1;
    1171            1                    ***0***               o_rx_mode = preamble;
    1172                                             		  
    1173                                             
    1174                                             		  if ( i_rx_mode_done)		  
    1175                                             		  begin      		  
    1176                                             			if (i_rx_pre)
    1177            1                    ***0***     			o_regf_error_type = SUCCESS ;
    1178                                             			else 
    1179            1                    ***0***     			o_regf_error_type = Frame_Error ;          // error due to pre = 00 
    1180                                             		  
    1181                                                      end
    1182                                             		 else  
    1183            1                    ***0***     		 o_regf_error_type = SUCCESS ;
    1184                                             
    1185                                                          end  
    1186                                             			end
    1187                                             
    1188                                             
    1189                                             
    1190                                                token_crc_bits        : begin
    1191                                             
    1192                                                 if (!i_regf_wr_rd_bit)
    1193                                                      begin
    1194            1                    ***0***               o_tx_en = 'b1;
    1195            1                    ***0***               o_tx_mode = token_CRC;
    1196                                                      end
    1197                                                  else
    1198                                                      begin
    1199            1                    ***0***               o_rx_en = 'b1;
    1200            1                    ***0***               o_rx_mode = Check_token;
    1201                                             		  
    1202                                             		  if (i_rx_error)
    1203            1                    ***0***                 o_regf_error_type = Frame_Error;
    1204                                                       else
    1205            1                    ***0***                 o_regf_error_type = SUCCESS;
    1206                                                      end
    1207                                             
    1208                                                          end 			 
    1209                                             
    1210                                             
    1211                                                crc_value_bits   : begin
    1212                                             
    1213                                                 if (!i_regf_wr_rd_bit)
    1214                                                      begin
    1215            1                    ***0***               o_tx_en = 'b1;
    1216            1                    ***0***               o_tx_mode =  CRC_value ;
    1217                                             		if((i_bitcnt == 'd12) || (i_bitcnt == 'd11))
    1218                                             			begin 
    1219            1                    ***0***     			o_sclstall_en = 0;
    1220                                             			if(!i_regf_toc)
    1221            1                    ***0***     				o_sclstall_no_of_cycles = restart_stalling;
    1222                                             			else 
    1223            1                    ***0***     				o_sclstall_no_of_cycles = exit_stalling;
    1224                                             				
    1225                                             			end
    1226                                             		else 
    1227            1                    ***0***     			o_sclstall_en = 0;
    1228                                                      end
    1229                                                 else
    1230                                                      begin
    1231                                             
    1232            1                    ***0***               o_rx_en = 'b1;
    1233            1                    ***0***               o_rx_mode = Check_CRC_value;
    1234                                                       
    1235                                             		 
    1236                                             		 if (i_rx_error)
    1237            1                    ***0***                 o_regf_error_type = CRC_Error;
    1238                                                       else
    1239                                             			begin 
    1240            1                    ***0***     				o_regf_error_type = SUCCESS;
    1241                                             					if((i_bitcnt == 'd12) || (i_bitcnt == 'd11))
    1242                                             						begin 
    1243            1                    ***0***     						o_sclstall_en = 0;
    1244                                             						if(!i_regf_toc)
    1245            1                    ***0***     							o_sclstall_no_of_cycles = restart_stalling;
    1246                                             						else 
    1247            1                    ***0***     							o_sclstall_no_of_cycles = exit_stalling;
    1248                                             						end
    1249                                             					else 
    1250            1                    ***0***     						o_sclstall_en = 0;
    1251                                             			end
    1252                                             			
    1253                                             			
    1254                                             
    1255                                                      end
    1256                                             		 
    1257                                             		 
    1258                                             
    1259                                                          end 
    1260                                             
    1261                                             
    1262                                                error   : begin
    1263                                             
    1264            1                    ***0***               o_rx_en = 'b1;
    1265            1                    ***0***               o_rx_mode = Error;
    1266            1                    ***0***     		  o_bitcnt_rst = 'b1 ;
    1267                                             		  
    1268                                             		  
    1269                                             
    1270                                                          end
    1271                                             
    1272                                             
    1273                                                restart   : begin
    1274                                             
    1275            1                    ***0***               o_tx_en = 'b1;
    1276            1                    ***0***               o_tx_mode = Restart_Pattern;
    1277            1                    ***0***               o_sclstall_no_of_cycles = restart_stalling;
    1278            1                    ***0***               o_sclstall_en = 'b1;
    1279                                             		   
    1280                                             
    1281                                             			if(i_tx_mode_done )
    1282            1                    ***0***     			 o_sclstall_en = 'b0;
    1283                                             		  else
    1284            1                    ***0***     			o_sclstall_en = 'b1;
    1285                                                          end
    1286                                             
    1287                                             
    1288                                                exit   : begin
    1289                                             
    1290            1                    ***0***               o_tx_en = 'b1;
    1291            1                    ***0***               o_tx_mode = Exit_Pattern;
    1292            1                    ***0***               o_sclstall_no_of_cycles = exit_stalling;
    1293            1                    ***0***              o_sclstall_en = 'b1;
    1294                                             		 
    1295                                             			if(i_tx_mode_done )
    1296                                             				begin
    1297            1                    ***0***     					o_engine_done= 'b1;
    1298            1                    ***0***     			 o_sclstall_en = 'b0;
    1299                                             				end
    1300                                             				
    1301                                             		  else 
    1302            1                    ***0***     			o_sclstall_en = 'b1;
    1303                                             
    1304                                                          end 
    1305                                             
    1306                                             	
    1307                                             
    1308                                             	/*waiting : begin 
    1309                                             		o_sclstall_en = 'b0;
    1310                                             		o_tx_en = 'b1;
    1311                                             		if(i_regf_toc)
    1312                                             			o_tx_mode = Exit_Pattern;
    1313                                             		else 
    1314                                             			o_tx_mode = Restart_Pattern;
    1315                                             		en_sysclk =1 ;
    1316                                             		
    1317                                             		
    1318                                             		
    1319                                             		end*/
    1320                                             
    1321                                                   endcase
    1322                                             	  
    1323                                                 end
    1324                                             
    1325                                             
    1326                                                
    1327                                                //--------------------------- 4: Combinational Always Block For Encoding The Address------------------------------//
    1328            1                       9703        always@(*) begin
    1329                                                 case (i_regf_dev_index)                     
    1330            1                          1             5'd0 : target_addres =     7'd8  ;  
    1331            1                        313             5'd1 : target_addres     =     7'd9  ;  //0001001
    1332            1                        312             5'd2 : target_addres     =     7'd10 ;
    1333            1                        346             5'd3 : target_addres     =     7'd11 ;
    1334                                             
    1335            1                        286             5'd4 : target_addres     =     7'd12 ;
    1336            1                        332             5'd5 : target_addres     =     7'd13 ;
    1337            1                        307             5'd6 : target_addres     =     7'd14 ;
    1338            1                        327             5'd7 : target_addres     =     7'd15 ;
    1339                                             
    1340            1                        306             5'd8 : target_addres     =     7'd16 ;
    1341            1                        308             5'd9 : target_addres     =     7'd17 ;
    1342            1                        314             5'd10: target_addres     =     7'd18 ;
    1343            1                        300             5'd11: target_addres     =     7'd19 ;
    1344                                             
    1345            1                        335             5'd12: target_addres     =     7'd20 ;
    1346            1                        292             5'd13: target_addres     =     7'd21 ;
    1347            1                        293             5'd14: target_addres     =     7'd22 ;
    1348            1                        336             5'd15: target_addres     =     7'd23 ;
    1349                                             
    1350            1                        325             5'd16: target_addres = 7'd24 ;
    1351            1                        286             5'd17: target_addres = 7'd25 ;
    1352            1                        331             5'd18: target_addres = 7'd26 ;
    1353            1                        294             5'd19: target_addres = 7'd27 ;
    1354                                             
    1355            1                        309             5'd20: target_addres = 7'd28 ;
    1356            1                        306             5'd21: target_addres = 7'd29 ;
    1357            1                        316             5'd22: target_addres = 7'd30 ;
    1358            1                        303             5'd23: target_addres = 7'd31 ;
    1359                                             
    1360            1                        297             5'd24: target_addres = 7'd32 ;
    1361            1                        305             5'd25: target_addres = 7'd33 ;
    1362            1                        320             5'd26: target_addres = 7'd34 ;
    1363            1                        336             5'd27: target_addres = 7'd35 ;
    1364                                             
    1365            1                        323             5'd28: target_addres = 7'd36 ;
    1366            1                        311             5'd29: target_addres = 7'd37 ;
    1367            1                        315             5'd30: target_addres = 7'd38 ;
    1368            1                        318             5'd31: target_addres = 7'd39 ;
    1369                                                 endcase
    1370                                             
    1371                                             end 
    1372                                             /**********************************************/
    1373                                             /*reg [3:0] count_seq ;
    1374                                             
    1375                                             always@ (posedge i_sys_clk or negedge i_sys_rst)
    1376                                             begin
    1377                                             if (!i_sys_rst)
    1378                                             count_seq <= 'd0;  
    1379                                             else 
    1380                                             count_seq <= count; 
    1381                                             end*/
    1382                                             
    1383                                             //--------------------------- 5: Sequential Always Block ------------------------------//
    1384            1                          4     always@ (posedge i_sys_clk or negedge i_sys_rst)
    1385                                             begin
    1386                                             if (!i_sys_rst)
    1387                                             	begin
    1388            1                          1     	Parity_data_seq <= 'd0;  
    1389            1                          1     	sysclk_done<=0;
    1390                                             	end
    1391                                             else 
    1392                                             	begin
    1393                                             	if (en_sysclk)
    1394            1                    ***0***     		sysclk_done<='b1;
    1395                                             	else 
    1396            1                          3     		sysclk_done<='b0;
    1397                                             
    1398                                             if( current_state != 'd4)
    1399            1                          2     Parity_data_seq <= parity_data; 
    1400                                             
    1401                                             if( current_state != 'd7)
    1402            1                          2     first_byte_seq <= first_byte;
    1403                                             
    1404                                             
    1405                                             if( current_state != 'd8 )
    1406            1                          2     o_regf_addr <= addr; 
    1407                                             
    1408                                             if( current_state == 'd6)
    1409            1                    ***0***     addr_temp <= addr; 
    1410                                             
    1411                                             if( current_state == 'd8)
    1412            1                    ***0***     addr_temp <= o_regf_addr + 'd1; 
    1413                                             
    1414                                             if( current_state == 'd10)
    1415            1                    ***0***     o_regf_addr <= addr_temp ; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        264        57       207    21.59%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/DDR_NT --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                   Parity_data_seq           0           0        0.00 
                                        addr[11-0]           0           0        0.00 
                                   addr_temp[11-0]           0           0        0.00 
                            broadcast_address[6-0]           0           0        0.00 
                                current_state[4-0]           0           0        0.00 
                                         en_sysclk           0           0        0.00 
                                        first_byte           0           0        0.00 
                                    first_byte_seq           0           0        0.00 
                                     i_bitcnt[0-4]           1           1      100.00 
                                       i_bitcnt[5]           0           0        0.00 
                                       i_engine_en           0           0        0.00 
                                     i_frmcnt_last           1           1      100.00 
                                i_regf_cmd_attr[0]           0           1       50.00 
                              i_regf_cmd_attr[1-2]           0           0        0.00 
                             i_regf_dev_index[0-4]           1           1      100.00 
                                   i_regf_dtt[0-1]           1           1      100.00 
                                     i_regf_dtt[2]           0           0        0.00 
                                 i_regf_short_read           0           0        0.00 
                                        i_regf_toc           1           1      100.00 
                                  i_regf_wr_rd_bit           0           0        0.00 
                                       i_regf_wroc           1           1      100.00 
                                        i_rx_error           0           0        0.00 
                                    i_rx_mode_done           1           1      100.00 
                                          i_rx_pre           1           1      100.00 
                                    i_staller_done           1           1      100.00 
                                         i_sys_clk           1           1      100.00 
                                         i_sys_rst           1           1      100.00 
                                    i_tx_mode_done           1           1      100.00 
                                   next_state[4-0]           0           0        0.00 
                                       o_bitcnt_en           1           0       50.00 
                                      o_bitcnt_rst           0           0        0.00 
                            o_crc_rx_tx_mux_sel_NT           0           0        0.00 
                                     o_engine_done           0           0        0.00 
                                       o_frmcnt_en           1           0       50.00 
                                      o_regf_abort           0           0        0.00 
                                 o_regf_addr[11-0]           0           0        0.00 
                            o_regf_error_type[3-0]           0           0        0.00 
                                      o_regf_rd_en           0           0        0.00 
                                      o_regf_wr_en           0           0        0.00 
                                           o_rx_en           0           0        0.00 
                                    o_rx_mode[2-0]           0           0        0.00 
                                     o_sclstall_en           0           0        0.00 
                      o_sclstall_no_of_cycles[4-0]           0           0        0.00 
                                   o_sdahand_pp_od           0           0        0.00 
                                           o_tx_en           0           0        0.00 
                                    o_tx_mode[3-0]           0           0        0.00 
                            o_tx_special_data[7-0]           0           0        0.00 
                                       parity_data           0           0        0.00 
                                       sysclk_done           0           0        0.00 
                                  target_addres[6]           0           0        0.00 
                                target_addres[5-0]           1           1      100.00 

Total Node Count     =        132 
Toggled Node Count   =         27 
Untoggled Node Count =        105 

Toggle Coverage      =      21.59% (57 of 264 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_scl_staller
=== Design Unit: work.scl_staller
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         5         5         0   100.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_scl_staller

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File staller.v
------------------------------------IF Branch------------------------------------
    15                                    202485     Count coming in to IF
    15              1                          1       if(~i_stall_rst_n)
    20              1                     159039       else if(i_stall_flag) begin
    32              1                      43445         else begin 
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    21                                    159039     Count coming in to IF
    21              1                      28862           if (i_stall_cycles == count) begin
    26              1                     130177           else begin      
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       1         1         0   100.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_scl_staller --

  File staller.v
----------------Focused Condition View-------------------
Line       21 Item    1  (i_stall_cycles == count)
Condition totals: 1 of 1 input term covered = 100.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (i_stall_cycles == count)         Y

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:          1  (i_stall_cycles == count)_0  -                             
  Row   2:          1  (i_stall_cycles == count)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      12        12         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_scl_staller --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File staller.v
    2                                                module scl_staller(
    3                                                input wire       i_stall_clk ,
    4                                                input wire       i_stall_rst_n,
    5                                                input wire       i_stall_flag,
    6                                                input wire [4:0] i_stall_cycles,
    7                                                output reg       o_stall_done,
    8                                                output reg       o_scl_stall
    9                                                    );
    10                                                   
    11              1                          1      reg [4:0] count = 5'b0 ;
    12                                                   
    13              1                     202485     always@(posedge i_stall_clk or negedge i_stall_rst_n)
    14                                                begin 
    15                                                 if(~i_stall_rst_n)
    16                                                   begin 
    17              1                          1           o_scl_stall <= 1'b0 ;
    18              1                          1           count <= 5'b0 ;
    19                                                   end
    20                                                 else if(i_stall_flag) begin
    21                                                     if (i_stall_cycles == count) begin
    22              1                      28862                 o_scl_stall <= 1'b0 ;
    23                                                           //count <= 5'b0 ;
    24              1                      28862                 o_stall_done <= 1'b1;
    25                                                      end        
    26                                                     else begin      
    27              1                     130177                 o_stall_done <= 1'b0 ;
    28              1                     130177                 count <= count + 5'b1 ;
    29              1                     130177                 o_scl_stall <= 1'b1 ;
    30                                                     end
    31                                                 end
    32                                                   else begin 
    33              1                      43445             o_stall_done <= 1'b0 ;
    34              1                      43445             o_scl_stall <= 1'b0 ;
    35              1                      43445             count <= 5'b0 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         30        26         4    86.66%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_scl_staller --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                          count[4]           0           0        0.00 
                                        count[3-0]           1           1      100.00 
                                       i_stall_clk           1           1      100.00 
                               i_stall_cycles[0-3]           1           1      100.00 
                                 i_stall_cycles[4]           0           0        0.00 
                                      i_stall_flag           1           1      100.00 
                                     i_stall_rst_n           1           1      100.00 
                                       o_scl_stall           1           1      100.00 
                                      o_stall_done           1           1      100.00 

Total Node Count     =         15 
Toggled Node Count   =         13 
Untoggled Node Count =          2 

Toggle Coverage      =      86.66% (26 of 30 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/bits_counter_hdr
=== Design Unit: work.bits_counter
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        15        10         5    66.66%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/bits_counter_hdr

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File bits_counter.v
------------------------------------IF Branch------------------------------------
    21                                   1729254     Count coming in to IF
    21              1                          1         if(~i_rst_n) begin
    24              1                    1729253         else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    25                                   1729253     Count coming in to IF
    25              1                    ***0***             if (i_cccnt_err_rst) begin 
    38              1                    1036331             else if (i_bitcnt_en) begin 
    48              1                     692922             else begin 
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    26                                   ***0***     Count coming in to IF
    26              1                    ***0***                 if (i_scl_neg_edge || i_scl_pos_edge) begin 
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    27                                   ***0***     Count coming in to IF
    27              1                    ***0***                     if (err_count == 6'd37) begin 
    30              1                    ***0***                     else begin 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    39                                   1036331     Count coming in to IF
    39              1                     515735                 if (i_scl_neg_edge || i_scl_pos_edge) begin 
                                          520596     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    40                                    515735     Count coming in to IF
    40              1                      23663                     if (o_cnt_bit_count == 6'd19) begin 
    43              1                     492072                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    55                                   1724394     Count coming in to IF
    55              1                      48574         if ((o_cnt_bit_count == 'd6 || o_cnt_bit_count == 'd16) && (!i_scl_pos_edge && !i_scl_neg_edge)) begin
    58              1                    1675820         else begin 
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      10         7         3    70.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/bits_counter_hdr --

  File bits_counter.v
----------------Focused Condition View-------------------
Line       26 Item    1  (i_scl_neg_edge || i_scl_pos_edge)
Condition totals: 0 of 2 input terms covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_scl_neg_edge         N  No hits                  Hit '_0' and '_1'
  i_scl_pos_edge         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  i_scl_neg_edge_0      ~i_scl_pos_edge               
  Row   2:    ***0***  i_scl_neg_edge_1      -                             
  Row   3:    ***0***  i_scl_pos_edge_0      ~i_scl_neg_edge               
  Row   4:    ***0***  i_scl_pos_edge_1      ~i_scl_neg_edge               

----------------Focused Condition View-------------------
Line       27 Item    1  (err_count == 37)
Condition totals: 0 of 1 input term covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (err_count == 37)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (err_count == 37)_0   -                             
  Row   2:    ***0***  (err_count == 37)_1   -                             

----------------Focused Condition View-------------------
Line       39 Item    1  (i_scl_neg_edge || i_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  i_scl_neg_edge         Y
  i_scl_pos_edge         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  i_scl_neg_edge_0      ~i_scl_pos_edge               
  Row   2:          1  i_scl_neg_edge_1      -                             
  Row   3:          1  i_scl_pos_edge_0      ~i_scl_neg_edge               
  Row   4:          1  i_scl_pos_edge_1      ~i_scl_neg_edge               

----------------Focused Condition View-------------------
Line       40 Item    1  (o_cnt_bit_count == 19)
Condition totals: 1 of 1 input term covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (o_cnt_bit_count == 19)         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  (o_cnt_bit_count == 19)_0  -                             
  Row   2:          1  (o_cnt_bit_count == 19)_1  -                             

----------------Focused Condition View-------------------
Line       55 Item    1  (((o_cnt_bit_count == 6) || (o_cnt_bit_count == 16)) && (i_scl_pos_edge ~| i_scl_neg_edge))
Condition totals: 4 of 4 input terms covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
   (o_cnt_bit_count == 6)         Y
  (o_cnt_bit_count == 16)         Y
           i_scl_pos_edge         Y
           i_scl_neg_edge         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  (o_cnt_bit_count == 6)_0   ~(o_cnt_bit_count == 16)      
  Row   2:          1  (o_cnt_bit_count == 6)_1   (i_scl_pos_edge ~| i_scl_neg_edge)
  Row   3:          1  (o_cnt_bit_count == 16)_0  ~(o_cnt_bit_count == 6)       
  Row   4:          1  (o_cnt_bit_count == 16)_1  ((i_scl_pos_edge ~| i_scl_neg_edge) && ~(o_cnt_bit_count == 6))
  Row   5:          1  i_scl_pos_edge_0           (((o_cnt_bit_count == 6) || (o_cnt_bit_count == 16)) && ~i_scl_neg_edge)
  Row   6:          1  i_scl_pos_edge_1           (((o_cnt_bit_count == 6) || (o_cnt_bit_count == 16)) && ~i_scl_neg_edge)
  Row   7:          1  i_scl_neg_edge_0           (((o_cnt_bit_count == 6) || (o_cnt_bit_count == 16)) && ~i_scl_pos_edge)
  Row   8:          1  i_scl_neg_edge_1           (((o_cnt_bit_count == 6) || (o_cnt_bit_count == 16)) && ~i_scl_pos_edge)


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      13        10         3    76.92%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/bits_counter_hdr --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File bits_counter.v
    3                                                module bits_counter(
    4                                                    input  wire       i_sys_clk              ,
    5                                                    input  wire       i_rst_n                ,
    6                                                    input  wire       i_bitcnt_en            ,  
    7                                                    input  wire       i_scl_pos_edge         ,  
    8                                                    input  wire       i_scl_neg_edge         , 
    9                                                    input  wire       i_cccnt_err_rst        , 
    10                                                   output reg        o_frcnt_toggle         ,
    11              1                          1         output reg  [5:0] o_cnt_bit_count = 6'd0
    12                                                   );
    13                                               
    14              1                          1     reg [5:0] err_count = 6'd0 ;
    15                                               ////////////////////////////////////// there is 2 versions of the bits counter uncomment only one of them ////////////////////////////////////////
    16                                               
    17                                               
    18                                               // sequential version the counter is incremented in the middle of the SCL period 
    19                                               
    20              1                    1729254     always @(posedge i_sys_clk or negedge i_rst_n) begin 
    21                                                   if(~i_rst_n) begin
    22              1                          1             o_cnt_bit_count <= 0 ;
    23                                                   end 
    24                                                   else begin 
    25                                                       if (i_cccnt_err_rst) begin 
    26                                                           if (i_scl_neg_edge || i_scl_pos_edge) begin 
    27                                                               if (err_count == 6'd37) begin 
    28              1                    ***0***                         err_count <= 6'd0 ;                     // from 0 to 37 it won't reach 38 
    29                                                               end
    30                                                               else begin 
    31              1                    ***0***                         err_count <= err_count + 1 ; 
    32                                                               end  
    33                                                           end
    34              1                    ***0***             o_cnt_bit_count <= err_count ;
    35                                                       
    36                                                       end 
    37                                               
    38                                                       else if (i_bitcnt_en) begin 
    39                                                           if (i_scl_neg_edge || i_scl_pos_edge) begin 
    40                                                               if (o_cnt_bit_count == 6'd19) begin 
    41              1                      23663                         o_cnt_bit_count <= 6'd0 ;                     // from 0 to 19 it won't reach 20 
    42                                                               end
    43                                                               else begin 
    44              1                     492072                         o_cnt_bit_count <= o_cnt_bit_count + 1 ; 
    45                                                               end  
    46                                                           end 
    47                                                       end 
    48                                                       else begin 
    49              1                     692922                 o_cnt_bit_count <= 6'd0 ;
    50                                                       end 
    51                                                   end
    52                                               end
    53                                               
    54              1                    1724394     always @(negedge i_sys_clk) begin 
    55                                                   if ((o_cnt_bit_count == 'd6 || o_cnt_bit_count == 'd16) && (!i_scl_pos_edge && !i_scl_neg_edge)) begin
    56              1                      48574             o_frcnt_toggle = 1'b1 ;
    57                                                   end
    58                                                   else begin 
    59              1                    1675820             o_frcnt_toggle = 1'b0 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         38        22        16    57.89%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/bits_counter_hdr --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                    err_count[5-0]           0           0        0.00 
                                       i_bitcnt_en           1           1      100.00 
                                   i_cccnt_err_rst           0           0        0.00 
                                           i_rst_n           1           1      100.00 
                                    i_scl_neg_edge           1           1      100.00 
                                    i_scl_pos_edge           1           1      100.00 
                                         i_sys_clk           1           1      100.00 
                                o_cnt_bit_count[5]           0           0        0.00 
                              o_cnt_bit_count[4-0]           1           1      100.00 
                                    o_frcnt_toggle           1           1      100.00 

Total Node Count     =         19 
Toggled Node Count   =         11 
Untoggled Node Count =          8 

Toggle Coverage      =      57.89% (22 of 38 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/frame_counter_hdr
=== Design Unit: work.frame_counter
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        19        14         5    73.68%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/frame_counter_hdr

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File FRAME_COUNTER.v
------------------------------------IF Branch------------------------------------
    19                                    618070     Count coming in to IF
    19              1                          1             if (!i_fcnt_rst_n) begin 
    23              1                     618069             else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    24                                    618069     Count coming in to IF
    24              1                     332528                 if(i_fcnt_en) begin 
    35              1                     285541                 else begin                                  // Disabled to load the count value
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    25                                    332528     Count coming in to IF
    25              1                     148788                     if (count == 16'd0) begin 
    29              1                     183740                     else begin 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    30                                    183740     Count coming in to IF
    30              1                      20094                         if ((i_cnt_bit_count == 'd6 || i_cnt_bit_count == 'd16) && i_bitcnt_toggle) begin 
                                          163646     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    37                                    285541     Count coming in to IF
    37              1                          1                     if (!i_regf_CMD_ATTR) begin             // regular 
    40              1                     285540                     else begin //immediate 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    41                                    285540     Count coming in to CASE
    42              1                      95438                             3'd0 : count = 1 ;
    43              1                      93153                             3'd1 : count = 2 ;
    44              1                      96948                             3'd2 : count = 3 ;
    45              1                    ***0***                             3'd3 : count = 4 ;
    46              1                    ***0***                             3'd4 : count = 5 ;
    48              1                    ***0***                             3'd5 : count = 2 ;
    49              1                    ***0***                             3'd6 : count = 3 ;
    50              1                    ***0***                             3'd7 : count = 4 ;
                                               1     All False Count
Branch totals: 4 hits of 9 branches = 44.44%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       4         4         0   100.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/frame_counter_hdr --

  File FRAME_COUNTER.v
----------------Focused Condition View-------------------
Line       25 Item    1  (count == 0)
Condition totals: 1 of 1 input term covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 0)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 0)_0        -                             
  Row   2:          1  (count == 0)_1        -                             

----------------Focused Condition View-------------------
Line       30 Item    1  (((i_cnt_bit_count == 6) || (i_cnt_bit_count == 16)) && i_bitcnt_toggle)
Condition totals: 3 of 3 input terms covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
   (i_cnt_bit_count == 6)         Y
  (i_cnt_bit_count == 16)         Y
          i_bitcnt_toggle         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          1  (i_cnt_bit_count == 6)_0   ~(i_cnt_bit_count == 16)      
  Row   2:          1  (i_cnt_bit_count == 6)_1   i_bitcnt_toggle               
  Row   3:          1  (i_cnt_bit_count == 16)_0  ~(i_cnt_bit_count == 6)       
  Row   4:          1  (i_cnt_bit_count == 16)_1  (i_bitcnt_toggle && ~(i_cnt_bit_count == 6))
  Row   5:          1  i_bitcnt_toggle_0          ((i_cnt_bit_count == 6) || (i_cnt_bit_count == 16))
  Row   6:          1  i_bitcnt_toggle_1          ((i_cnt_bit_count == 6) || (i_cnt_bit_count == 16))


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      16        11         5    68.75%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/frame_counter_hdr --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File FRAME_COUNTER.v
    2                                                module frame_counter(
    3                                                    input  wire        i_fcnt_clk         ,
    4                                                    input  wire        i_fcnt_rst_n       ,
    5                                                    input  wire        i_fcnt_en          ,
    6                                                    input  wire        i_regf_CMD_ATTR    ,     // HDR 1 bit only selects bit [0] (1 for immediate and 0 for regular)
    7                                                    input  wire [15:0] i_regf_DATA_LEN    ,     // HDR 
    8                                                    input  wire [2:0]  i_regf_DTT         ,     // HDR
    9                                                    input  wire [5:0]  i_cnt_bit_count    ,     // HDR
    10                                                   //input  wire        i_ccc_Direct_Broadcast_n ,     // HDR  1 for direct and 0 for Broadcast
    11                                                   input  wire        i_bitcnt_toggle    , 
    12                                                   output reg         o_cccnt_last_frame       // HDR
    13                                                   );
    14                                               	
    15              1                          1     reg [15:0] count = 16'd0 ;
    16                                               //wire       count_done   ;
    17                                               
    18              1                     618070         always @(posedge i_fcnt_clk or negedge i_fcnt_rst_n) begin 
    19                                                       if (!i_fcnt_rst_n) begin 
    20              1                          1                 o_cccnt_last_frame = 1'b0 ;
    21              1                          1                 count              = 16'd0 ;
    22                                                       end 
    23                                                       else begin 
    24                                                           if(i_fcnt_en) begin 
    25                                                               if (count == 16'd0) begin 
    26              1                     148788                         o_cccnt_last_frame = 1'b1 ;
    27                                                                   // stay here for 20 bits
    28                                                               end 
    29                                                               else begin 
    30                                                                   if ((i_cnt_bit_count == 'd6 || i_cnt_bit_count == 'd16) && i_bitcnt_toggle) begin 
    31              1                      20094                             count = count - 1 ;
    32                                                                   end 
    33                                                               end 
    34                                                           end 
    35                                                           else begin                                  // Disabled to load the count value
    36              1                     285541                     o_cccnt_last_frame = 1'b0 ;
    37                                                               if (!i_regf_CMD_ATTR) begin             // regular 
    38              1                          1                         count = i_regf_DATA_LEN + 1 ;       // fixed whether Direct or Broadcast
    39                                                               end
    40                                                               else begin //immediate 
    41                                                                   case (i_regf_DTT) 
    42              1                      95438                             3'd0 : count = 1 ;
    43              1                      93153                             3'd1 : count = 2 ;
    44              1                      96948                             3'd2 : count = 3 ;
    45              1                    ***0***                             3'd3 : count = 4 ;
    46              1                    ***0***                             3'd4 : count = 5 ;
    47                                                   
    48              1                    ***0***                             3'd5 : count = 2 ;
    49              1                    ***0***                             3'd6 : count = 3 ;
    50              1                    ***0***                             3'd7 : count = 4 ;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         94        33        61    35.10%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/frame_counter_hdr --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       count[15-2]           0           0        0.00 
                                        count[1-0]           1           1      100.00 
                                   i_bitcnt_toggle           1           1      100.00 
                              i_cnt_bit_count[0-4]           1           1      100.00 
                                i_cnt_bit_count[5]           0           0        0.00 
                                        i_fcnt_clk           1           1      100.00 
                                         i_fcnt_en           1           1      100.00 
                                      i_fcnt_rst_n           1           1      100.00 
                                   i_regf_CMD_ATTR           0           1       50.00 
                              i_regf_DATA_LEN[0-1]           1           1      100.00 
                             i_regf_DATA_LEN[2-15]           0           0        0.00 
                                   i_regf_DTT[0-1]           1           1      100.00 
                                     i_regf_DTT[2]           0           0        0.00 
                                o_cccnt_last_frame           1           1      100.00 

Total Node Count     =         47 
Toggled Node Count   =         16 
Untoggled Node Count =         31 

Toggle Coverage      =      35.10% (33 of 94 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/RX
=== Design Unit: work.RX
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        61         9        52    14.75%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/RX

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Rx.v
------------------------------------IF Branch------------------------------------
    124                                        3     Count coming in to IF
    124             1                          1       if(!i_sys_rst)
    130             1                    ***0***       else if ((byte_num == 0) && (count_done))
    133             1                    ***0***       else if ((byte_num == 1) &&  (count_done))
                                               2     All False Count
Branch totals: 2 hits of 4 branches = 50.00%

------------------------------------IF Branch------------------------------------
    147                                  1852508     Count coming in to IF
    147             1                          1       if (!i_sys_rst) 
    165             1                      40989       else if (i_ddrccc_rx_en) 
                                         1811518     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    179                                    40989     Count coming in to CASE
    182             1                      40989         PREAMBLE :          begin
    207             1                    ***0***          CRC_PREAMBLE:       begin
    236             1                    ***0***           DESERIALIZING_BYTE: begin
    281             1                    ***0***         CHECK_TOKEN :       begin
    321             1                    ***0***         CHECK_PAR_VALUE :    
    359             1                    ***0***         CHECK_CRC_VALUE :   begin
    399             1                    ***0***           ERROR:        begin                              //error state: to be revisit during target design//
    431             1                    ***0***         default:     begin
Branch totals: 1 hit of 8 branches = 12.50%

------------------------------------IF Branch------------------------------------
    185                                    40989     Count coming in to IF
    185             1                      27326                              if (SCL_edges)
    193             1                      13663                               else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    195                                    13663     Count coming in to IF
    195             1                      13663                   if (!en) begin       // to initialize the shift_reg in crc with poly at the beginning
    199             1                    ***0***                   else o_crc_en <= 'b0;
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    211                                  ***0***     Count coming in to IF
    211             1                    ***0***                                 if(SCL_edges)
    215             1                    ***0***                                 else if(count == 'd1)
    227             1                    ***0***                                 else
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    221                                  ***0***     Count coming in to IF
    221             1                    ***0***                                   if((crc_pre_calc[1] == crc_pre_temp) && (crc_pre_calc[0] == i_sdahnd_rx_sda) )
    223             1                    ***0***                                       else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    241                                  ***0***     Count coming in to IF
    241             1                    ***0***                   if (!en)
    243             1                    ***0***                   else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    249                                  ***0***     Count coming in to IF
    249             1                    ***0***                                 if(SCL_edges)
    263             1                    ***0***                                 else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    253                                  ***0***     Count coming in to IF
    253             1                    ***0***                                     if(count == 'd7)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    267                                  ***0***     Count coming in to IF
    267             1                    ***0***                                   if(count == 'd7)                    
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    286                                  ***0***     Count coming in to IF
    286             1                    ***0***                              if(SCL_edges)
    305             1                    ***0***                               else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    290                                  ***0***     Count coming in to IF
    290             1                    ***0***                                 if(count == 'd3)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    308                                  ***0***     Count coming in to IF
    308             1                    ***0***                                   if(count == 'd3) begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    311                                  ***0***     Count coming in to IF
    311             1                    ***0***                     if((token_value_temp [3:1]== 'b110)  && (i_sdahnd_rx_sda== 'b0))
    313             1                    ***0***                                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    327                                  ***0***     Count coming in to IF
    327             1                    ***0***                              if(SCL_edges)
    342             1                    ***0***                               else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    331                                  ***0***     Count coming in to IF
    331             1                    ***0***                                 if(count == 'd1)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    345                                  ***0***     Count coming in to IF
    345             1                    ***0***                                   if(count == 'd1 ) begin
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    347                                  ***0***     Count coming in to IF
    347             1                    ***0***                                if((parity_value_temp [1]== parity_value_calc[1] )  && (i_sdahnd_rx_sda== parity_value_calc[0]))
    349             1                    ***0***                                     else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    364                                  ***0***     Count coming in to IF
    364             1                    ***0***                              if(SCL_edges)
    375             1                    ***0***                               else 
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    368                                  ***0***     Count coming in to IF
    368             1                    ***0***                                   if(count == 'd4)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    378                                  ***0***     Count coming in to IF
    378             1                    ***0***                                if(count == 'd4) 
    389             1                    ***0***                   else if (count == 'd0) begin
                                         ***0***     All False Count
Branch totals: 0 hits of 3 branches = 0.00%

------------------------------------IF Branch------------------------------------
    382                                  ***0***     Count coming in to IF
    382             1                    ***0***                       if((CRC_value_temp[4:1] == i_crc_value[4:1] )  && (i_sdahnd_rx_sda ==i_crc_value[0]))    
    384             1                    ***0***                                       else
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    402                                  ***0***     Count coming in to IF
    402             1                    ***0***                          if (SCL_edges)
    408             1                    ***0***                          else if (!i_sdahnd_rx_sda)
    419             1                    ***0***                          else if (count=='d37)
                                         ***0***     All False Count
Branch totals: 0 hits of 4 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      23         0        23     0.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/RX --

  File Rx.v
----------------Focused Condition View-------------------
Line       130 Item    1  (~byte_num && count_done)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    byte_num         N  No hits                  Hit '_0' and '_1'
  count_done         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  byte_num_0            count_done                    
  Row   2:    ***0***  byte_num_1            -                             
  Row   3:          1  count_done_0          ~byte_num                     
  Row   4:    ***0***  count_done_1          ~byte_num                     

----------------Focused Condition View-------------------
Line       133 Item    1  (byte_num && count_done)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    byte_num         N  '_1' not hit             Hit '_1'
  count_done         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  byte_num_0            -                             
  Row   2:    ***0***  byte_num_1            count_done                    
  Row   3:    ***0***  count_done_0          byte_num                      
  Row   4:    ***0***  count_done_1          byte_num                      

----------------Focused Condition View-------------------
Line       215 Item    1  (count == 1)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 1)_0        -                             
  Row   2:    ***0***  (count == 1)_1        -                             

----------------Focused Condition View-------------------
Line       221 Item    1  ((0 == crc_pre_temp) && i_sdahnd_rx_sda)
Condition totals: 0 of 2 input terms covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (0 == crc_pre_temp)         N  No hits                  Hit '_0' and '_1'
      i_sdahnd_rx_sda         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:    ***0***  (0 == crc_pre_temp)_0  -                             
  Row   2:    ***0***  (0 == crc_pre_temp)_1  i_sdahnd_rx_sda               
  Row   3:    ***0***  i_sdahnd_rx_sda_0      (0 == crc_pre_temp)           
  Row   4:    ***0***  i_sdahnd_rx_sda_1      (0 == crc_pre_temp)           

----------------Focused Condition View-------------------
Line       253 Item    1  (count == 7)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 7)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 7)_0        -                             
  Row   2:    ***0***  (count == 7)_1        -                             

----------------Focused Condition View-------------------
Line       267 Item    1  (count == 7)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 7)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 7)_0        -                             
  Row   2:    ***0***  (count == 7)_1        -                             

----------------Focused Condition View-------------------
Line       290 Item    1  (count == 3)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 3)_0        -                             
  Row   2:    ***0***  (count == 3)_1        -                             

----------------Focused Condition View-------------------
Line       308 Item    1  (count == 3)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 3)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 3)_0        -                             
  Row   2:    ***0***  (count == 3)_1        -                             

----------------Focused Condition View-------------------
Line       311 Item    1  ((token_value_temp[3:1] == 6) && ~i_sdahnd_rx_sda)
Condition totals: 0 of 2 input terms covered = 0.00%

                    Input Term   Covered  Reason for no coverage   Hint
                   -----------  --------  -----------------------  --------------
  (token_value_temp[3:1] == 6)         N  No hits                  Hit '_0' and '_1'
               i_sdahnd_rx_sda         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                      Non-masking condition(s)      
 ---------  ---------  --------------------            -------------------------     
  Row   1:    ***0***  (token_value_temp[3:1] == 6)_0  -                             
  Row   2:    ***0***  (token_value_temp[3:1] == 6)_1  ~i_sdahnd_rx_sda              
  Row   3:    ***0***  i_sdahnd_rx_sda_0               (token_value_temp[3:1] == 6)  
  Row   4:    ***0***  i_sdahnd_rx_sda_1               (token_value_temp[3:1] == 6)  

----------------Focused Condition View-------------------
Line       331 Item    1  (count == 1)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 1)_0        -                             
  Row   2:    ***0***  (count == 1)_1        -                             

----------------Focused Condition View-------------------
Line       345 Item    1  (count == 1)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 1)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 1)_0        -                             
  Row   2:    ***0***  (count == 1)_1        -                             

----------------Focused Condition View-------------------
Line       347 Item    1  ((parity_value_temp[1] == parity_value_calc[1]) && (i_sdahnd_rx_sda == parity_value_calc[0]))
Condition totals: 0 of 2 input terms covered = 0.00%

                                      Input Term   Covered  Reason for no coverage   Hint
                                     -----------  --------  -----------------------  --------------
  (parity_value_temp[1] == parity_value_calc[1])         N  No hits                  Hit '_0' and '_1'
       (i_sdahnd_rx_sda == parity_value_calc[0])         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                        Non-masking condition(s)      
 ---------  ---------  --------------------                              -------------------------     
  Row   1:    ***0***  (parity_value_temp[1] == parity_value_calc[1])_0  -                             
  Row   2:    ***0***  (parity_value_temp[1] == parity_value_calc[1])_1  (i_sdahnd_rx_sda == parity_value_calc[0])
  Row   3:    ***0***  (i_sdahnd_rx_sda == parity_value_calc[0])_0       (parity_value_temp[1] == parity_value_calc[1])
  Row   4:    ***0***  (i_sdahnd_rx_sda == parity_value_calc[0])_1       (parity_value_temp[1] == parity_value_calc[1])

----------------Focused Condition View-------------------
Line       368 Item    1  (count == 4)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 4)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 4)_0        -                             
  Row   2:    ***0***  (count == 4)_1        -                             

----------------Focused Condition View-------------------
Line       378 Item    1  (count == 4)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 4)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 4)_0        -                             
  Row   2:    ***0***  (count == 4)_1        -                             

----------------Focused Condition View-------------------
Line       382 Item    1  ((CRC_value_temp[4:1] == i_crc_value[4:1]) && (i_sdahnd_rx_sda == i_crc_value[0]))
Condition totals: 0 of 2 input terms covered = 0.00%

                                 Input Term   Covered  Reason for no coverage   Hint
                                -----------  --------  -----------------------  --------------
  (CRC_value_temp[4:1] == i_crc_value[4:1])         N  No hits                  Hit '_0' and '_1'
        (i_sdahnd_rx_sda == i_crc_value[0])         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                   Non-masking condition(s)      
 ---------  ---------  --------------------                         -------------------------     
  Row   1:    ***0***  (CRC_value_temp[4:1] == i_crc_value[4:1])_0  -                             
  Row   2:    ***0***  (CRC_value_temp[4:1] == i_crc_value[4:1])_1  (i_sdahnd_rx_sda == i_crc_value[0])
  Row   3:    ***0***  (i_sdahnd_rx_sda == i_crc_value[0])_0        (CRC_value_temp[4:1] == i_crc_value[4:1])
  Row   4:    ***0***  (i_sdahnd_rx_sda == i_crc_value[0])_1        (CRC_value_temp[4:1] == i_crc_value[4:1])

----------------Focused Condition View-------------------
Line       389 Item    1  (count == 0)
Condition totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 0)_0        -                             
  Row   2:    ***0***  (count == 0)_1        -                             

----------------Focused Condition View-------------------
Line       419 Item    1  (count == 37)
Condition totals: 0 of 1 input term covered = 0.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  (count == 37)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (count == 37)_0       -                             
  Row   2:    ***0***  (count == 37)_1       -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                     19         2        17    10.52%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/RX --

  File Rx.v
-----------Focused Expression View (Bimodal)------------
Line       95 Item    1  (((data_paritychecker[15] ^ data_paritychecker[13]) ^ (data_paritychecker[11] ^ data_paritychecker[9])) ^ ((data_paritychecker[7] ^ data_paritychecker[5]) ^ (data_paritychecker[3] ^ data_paritychecker[1])))
Expression totals: 0 of 8 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage                  Hint
               -----------  --------  --------------------------------------  --------------
    data_paritychecker[15]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1
    data_paritychecker[13]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1
    data_paritychecker[11]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1
     data_paritychecker[9]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1
     data_paritychecker[7]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1
     data_paritychecker[5]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1
     data_paritychecker[3]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1
     data_paritychecker[1]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->1

    Rows:   Hits(->0)   Hits(->1)  FEC Target                  Non-masking condition(s)           

---------  ----------  ----------  --------------------        -------------------------          
 Row   1:           1           0  data_paritychecker[15]_0    -                                  
 Row   2:           0           0  data_paritychecker[15]_1    -                                  
 Row   3:           1           0  data_paritychecker[13]_0    -                                  
 Row   4:           0           0  data_paritychecker[13]_1    -                                  
 Row   5:           1           0  data_paritychecker[11]_0    -                                  
 Row   6:           0           0  data_paritychecker[11]_1    -                                  
 Row   7:           1           0  data_paritychecker[9]_0     -                                  
 Row   8:           0           0  data_paritychecker[9]_1     -                                  
 Row   9:           1           0  data_paritychecker[7]_0     -                                  
Row   10:           0           0  data_paritychecker[7]_1     -                                  
Row   11:           1           0  data_paritychecker[5]_0     -                                  
Row   12:           0           0  data_paritychecker[5]_1     -                                  
Row   13:           1           0  data_paritychecker[3]_0     -                                  
Row   14:           0           0  data_paritychecker[3]_1     -                                  
Row   15:           1           0  data_paritychecker[1]_0     -                                  
Row   16:           0           0  data_paritychecker[1]_1     -                                  

-----------Focused Expression View (Bimodal)------------
Line       96 Item    1  ((data_paritychecker[14] ^ ((data_paritychecker[12] ^ data_paritychecker[10]) ^ (data_paritychecker[8] ^ data_paritychecker[6]))) ^ ((data_paritychecker[4] ^ data_paritychecker[2]) ^ ~data_paritychecker[0]))
Expression totals: 0 of 8 input terms covered = 0.00%

                Input Term   Covered  Reason for no coverage                  Hint
               -----------  --------  --------------------------------------  --------------
    data_paritychecker[14]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0
    data_paritychecker[12]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0
    data_paritychecker[10]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0
     data_paritychecker[8]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0
     data_paritychecker[6]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0
     data_paritychecker[4]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0
     data_paritychecker[2]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0
     data_paritychecker[0]         N  '_0' hit but '_1' is not hit           Hit '_1' for output ->0

    Rows:   Hits(->0)   Hits(->1)  FEC Target                  Non-masking condition(s)           

---------  ----------  ----------  --------------------        -------------------------          
 Row   1:           0           1  data_paritychecker[14]_0    -                                  
 Row   2:           0           0  data_paritychecker[14]_1    -                                  
 Row   3:           0           1  data_paritychecker[12]_0    -                                  
 Row   4:           0           0  data_paritychecker[12]_1    -                                  
 Row   5:           0           1  data_paritychecker[10]_0    -                                  
 Row   6:           0           0  data_paritychecker[10]_1    -                                  
 Row   7:           0           1  data_paritychecker[8]_0     -                                  
 Row   8:           0           0  data_paritychecker[8]_1     -                                  
 Row   9:           0           1  data_paritychecker[6]_0     -                                  
Row   10:           0           0  data_paritychecker[6]_1     -                                  
Row   11:           0           1  data_paritychecker[4]_0     -                                  
Row   12:           0           0  data_paritychecker[4]_1     -                                  
Row   13:           0           1  data_paritychecker[2]_0     -                                  
Row   14:           0           0  data_paritychecker[2]_1     -                                  
Row   15:           0           1  data_paritychecker[0]_0     -                                  
Row   16:           0           0  data_paritychecker[0]_1     -                                  

----------------Focused Expression View-----------------
Line       99 Item    1  (count == 7)
Expression totals: 0 of 1 input term covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  (count == 7)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (count == 7)_0        -                             
  Row   2:    ***0***  (count == 7)_1        -                             

----------------Focused Expression View-----------------
Line       101 Item    1  (i_sclgen_scl_pos_edge || i_sclgen_scl_neg_edge)
Expression totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_pos_edge         Y
  i_sclgen_scl_neg_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   2:          1  i_sclgen_scl_pos_edge_1  -                             
  Row   3:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   4:          1  i_sclgen_scl_neg_edge_1  ~i_sclgen_scl_pos_edge        


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      90        29        61    32.22%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/RX --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Rx.v
    33                                               module RX (
    34                                               
    35                                               input                     i_sys_clk,
    36                                               input                     i_sys_rst,
    37                                               input                     i_sclgen_scl,
    38                                               input                     i_sclgen_scl_pos_edge,
    39                                               input                     i_sclgen_scl_neg_edge,
    40                                               input                     i_ddrccc_rx_en,
    41                                               input                     i_sdahnd_rx_sda,
    42                                               //input     [4:0]           i_bitcnt_rx_bit_count,
    43                                               input        [2:0]        i_ddrccc_rx_mode,
    44                                               input        [4:0]        i_crc_value,
    45                                               input                     i_crc_valid,
    46                                               
    47                                               
    48                                               output  reg  [7:0]        o_regfcrc_rx_data_out,
    49                                               output  reg               o_ddrccc_rx_mode_done,
    50                                               output  reg               o_ddrccc_pre,
    51                                               output  reg               o_ddrccc_error,
    52                                               output  reg               o_crc_en,                 
    53                                               output  reg               o_crc_data_valid,
    54                                               output  reg               o_crc_last_byte
    55                                               //output  reg               o_ddrccc_error_done
    56                                               );
    57                                               
    58                                               
    59                                               
    60                                               
    61                                               
    62                                               
    63                                               
    64                                               
    65                                               /////////////////////////////////rx modes/////////////////////////////////
    66                                               localparam [2:0]
    67                                                                    PREAMBLE            = 3'b000  ,
    68                                                                    CRC_PREAMBLE        = 3'b001  ,
    69                                                                    DESERIALIZING_BYTE  = 3'b011  ,
    70                                                                    CHECK_TOKEN         = 3'b111  ,
    71                                                                    CHECK_PAR_VALUE     = 3'b110  ,
    72                                                                    CHECK_CRC_VALUE     = 3'b010  ,
    73                                                                    ERROR               = 3'b100  ;
    74                                               
    75                                               ////////////////////////////////////////////////////////////////////////////
    76                                               
    77                                               
    78                                               reg [5:0]  count;
    79                                               wire        count_done;
    80                                               reg [15:0] data_paritychecker;
    81                                               reg        byte_num;
    82                                               reg        en;
    83                                               
    84                                               reg [7:0] o_regfcrc_rx_data_out_temp;
    85                                               reg [3:0] token_value_temp;
    86                                               reg [1:0] parity_value_temp;
    87                                               reg [4:0] CRC_value_temp;
    88                                               reg [1:0] crc_pre_temp;
    89                                               wire [1:0] parity_value_calc;
    90                                               
    91                                               wire SCL_edges; 
    92                                               
    93                                               //////////////////////////////parity calc////////////////////////////////////
    94                                               
    95              1                          2      assign parity_value_calc[1] =  data_paritychecker[15]^data_paritychecker[13]^data_paritychecker[11]^data_paritychecker[9]^data_paritychecker[7]^data_paritychecker[5]^data_paritychecker[3]^data_paritychecker[1] ;     
    96              1                          2      assign parity_value_calc[0] =  data_paritychecker[14]^data_paritychecker[12]^data_paritychecker[10]^data_paritychecker[8]^data_paritychecker[6]^data_paritychecker[4]^data_paritychecker[2]^data_paritychecker[0]^1'b1 ; 
    97                                               
    98                                               
    99              1                          2     assign count_done = (count==7)? 1'b1:1'b0 ;
    100                                              
    101             1                    1850870     assign SCL_edges = (i_sclgen_scl_pos_edge || i_sclgen_scl_neg_edge);
    102                                              
    103                                              
    104                                              parameter crc_pre_calc = 2'b01;
    105                                              
    106                                              
    107                                              ////////////////////////////// Registering data bytes for parity check ////////////////////////////////////
    108                                              
    109                                              /*
    110                                              always @(*)  
    111                                              begin
    112                                                 if ((byte_num == 0) && (count_done))
    113                                                  data_paritychecker[15:8] = o_regfcrc_rx_data_out_temp;
    114                                                 else if ((byte_num == 1) &&  (count_done))
    115                                                  data_paritychecker[7 :0]  = o_regfcrc_rx_data_out_temp;
    116                                                 //else
    117                                                 //data_paritychecker = 0; ////////////////////////////to be revisit 
    118                                              
    119                                              
    120                                              end
    121                                              */
    122             1                          3     always @(posedge i_sys_clk or negedge i_sys_rst)  
    123                                              begin
    124                                                if(!i_sys_rst)
    125                                              
    126                                                begin
    127             1                          1         data_paritychecker <= 'b0;
    128                                                end
    129                                              
    130                                                else if ((byte_num == 0) && (count_done))
    131             1                    ***0***        data_paritychecker[15:8] = o_regfcrc_rx_data_out_temp;
    132                                              
    133                                                else if ((byte_num == 1) &&  (count_done))
    134             1                    ***0***        data_paritychecker[7 :0]  = o_regfcrc_rx_data_out_temp;
    135                                              
    136                                              
    137                                              end
    138                                              
    139                                              
    140                                              
    141                                              
    142                                              
    143                                              
    144             1                    1852508     always @(posedge i_sys_clk or negedge i_sys_rst) 
    145                                              begin
    146                                              
    147                                                if (!i_sys_rst) 
    148                                                 begin
    149                                              
    150             1                          1         o_regfcrc_rx_data_out <= 8'd0;  
    151             1                          1         o_ddrccc_rx_mode_done <= 1'b0;
    152             1                          1         o_ddrccc_pre          <= 1'bz; //should be editted
    153             1                          1         o_ddrccc_error        <= 1'b0;
    154             1                          1         o_crc_en              <= 1'b0;   
    155             1                          1         count                 <= 'b0;
    156             1                          1         byte_num              <= 1'b0;
    157             1                          1       en <= 'b0;
    158             1                          1        o_crc_data_valid      <=  'b0;
    159                                               // parity_value_temp     <= 1'b0;
    160                                               //   o_ddrccc_error_done   <= 1'b0; 
    161                                              
    162                                                 end
    163                                              
    164                                              
    165                                                else if (i_ddrccc_rx_en) 
    166                                                 begin
    167             1                      40989         o_regfcrc_rx_data_out <= 8'd0;  
    168             1                      40989         o_ddrccc_rx_mode_done <= 1'b0;
    169                                                  //o_ddrccc_pre          <= 1'bz;   //should be editted
    170             1                      40989         o_ddrccc_error        <= 1'b0;
    171                                                  //rx_mode_done_flag     <= 1'b0;
    172                                                 // parity_value_temp     <= 1'b0;
    173                                                 // o_crc_data_valid      <= 1'b0;
    174                                                //  o_ddrccc_error_done   <= 1'b0; 
    175             1                      40989       o_crc_en <= 'b0;
    176             1                      40989       o_crc_data_valid <= 'b0;
    177             1                      40989       o_crc_last_byte <= 'b0;
    178                                                
    179                                                 case(i_ddrccc_rx_mode) 
    180                                                
    181                                                
    182                                                  PREAMBLE :          begin
    183             1                      40989                               count                   <= 'b0;
    184                                                            
    185                                                                       if (SCL_edges)
    186                                                                        begin
    187                                                                         //o_ddrccc_pre          <= i_sdahnd_rx_sda;
    188                                                                         //o_ddrccc_rx_mode_done <= 1'b1;
    189                                                                         //rx_mode_done_flag     <= 1'b1;
    190             1                      27326                                byte_num               <= 1'b0;
    191             1                      27326                                count                  <= 'b0;
    192                                                                        end
    193                                                                        else 
    194                                                                        begin
    195                                                            if (!en) begin       // to initialize the shift_reg in crc with poly at the beginning
    196             1                      13663                     o_crc_en <= 'b1;
    197             1                      13663                     o_crc_last_byte <= 'b1;
    198                                                            end
    199             1                    ***0***                   else o_crc_en <= 'b0;
    200                                                            
    201             1                      13663                                 o_ddrccc_rx_mode_done <= 1'b1;
    202             1                      13663                                 o_ddrccc_pre          <= i_sdahnd_rx_sda;
    203                                                                          end
    204                                                                      end
    205                                                          
    206                                                          
    207                                                   CRC_PREAMBLE:       begin
    208             1                    ***0***                                 o_ddrccc_rx_mode_done <= 'b0;
    209             1                    ***0***                   o_crc_en              <= 1'b0; 
    210                                              
    211                                                                          if(SCL_edges)
    212                                                                              begin
    213             1                    ***0***                                       crc_pre_temp ['d1 - count] <= i_sdahnd_rx_sda;
    214                                                                              end
    215                                                                          else if(count == 'd1)
    216                                                                              begin
    217             1                    ***0***                                         o_ddrccc_rx_mode_done <= 'b1;
    218             1                    ***0***                                         count <= 'b0;
    219                                                              
    220                                              
    221                                                                            if((crc_pre_calc[1] == crc_pre_temp) && (crc_pre_calc[0] == i_sdahnd_rx_sda) )
    222             1                    ***0***                                         o_ddrccc_error<=1'b0;
    223                                                                                else
    224             1                    ***0***                                         o_ddrccc_error<=1'b1;
    225                                                                              end
    226                                              
    227                                                                          else
    228                                                                              begin
    229             1                    ***0***                                       count <= count + 1;
    230             1                    ***0***                                       crc_pre_temp['d1 - count] <= i_sdahnd_rx_sda;  
    231                                                                              end
    232                                                                          
    233                                                                      end   
    234                                              
    235                                              
    236                                                    DESERIALIZING_BYTE: begin
    237                                                                         
    238             1                    ***0***                                 o_ddrccc_rx_mode_done <= 1'b0;
    239             1                    ***0***                                 o_ddrccc_pre <= 'bz;
    240                                                            
    241                                                            if (!en)
    242             1                    ***0***                     o_crc_en <= 'b0;
    243                                                            else
    244             1                    ***0***                     o_crc_en <= 'b1;
    245                                                            
    246                                                                        
    247                                                                         
    248                                                                          
    249                                                                          if(SCL_edges)
    250                                                                             begin
    251                                                                        
    252             1                    ***0***                                     count <= count + 1; 
    253                                                                              if(count == 'd7)
    254                                                                              begin
    255             1                    ***0***                                       count <= 'b0;
    256             1                    ***0***                                       o_crc_data_valid <= 1'b1;
    257             1                    ***0***                                       o_regfcrc_rx_data_out <= o_regfcrc_rx_data_out_temp;
    258             1                    ***0***                                       byte_num <= 'b1;
    259                                                               // o_crc_en <= 'b0;
    260                                                                              end
    261                                                                             end
    262                                              
    263                                                                          else 
    264                                                                           begin
    265             1                    ***0***                                   o_ddrccc_rx_mode_done <= 1'b0;
    266             1                    ***0***                                   o_regfcrc_rx_data_out_temp['d7 - count] <= i_sdahnd_rx_sda;
    267                                                                            if(count == 'd7)                    
    268                                                                             begin
    269                                                                                
    270                                                              //  o_crc_data_valid <= 'b1;
    271             1                    ***0***                                       o_ddrccc_rx_mode_done <= 1'b1;
    272             1                    ***0***                       en <= 'b1;
    273                                                                 
    274                                                                              end
    275                                              
    276                                                                          end
    277                                                                        end
    278                                              
    279                                              
    280                                              
    281                                                  CHECK_TOKEN :       begin
    282                                                                    
    283             1                    ***0***                  o_crc_en <= 'b1;
    284             1                    ***0***                              o_ddrccc_rx_mode_done <= 1'b0;
    285                                              
    286                                                                       if(SCL_edges)
    287                                                                        begin
    288             1                    ***0***                                 count <= count + 1'b1;
    289                                                                          
    290                                                                          if(count == 'd3)
    291                                                                            begin
    292                                                                             
    293             1                    ***0***                                     count <= 'b0; 
    294                                              
    295                                                                           /*  if(token_value_temp != 4'hC)
    296                                                                                o_ddrccc_error<=1'b1;
    297                                                                              else
    298                                                                                o_ddrccc_error<=1'b0;*/
    299                                                                                
    300                                              
    301                                                                            end 
    302                                                                        
    303                                                                        end
    304                                              
    305                                                                        else 
    306                                                                        begin
    307             1                    ***0***                                   token_value_temp['d3 - count] <= i_sdahnd_rx_sda;
    308                                                                            if(count == 'd3) begin
    309             1                    ***0***                                     o_ddrccc_rx_mode_done <= 1'b1;
    310             1                    ***0***                     o_crc_data_valid <= 'b0;
    311                                                              if((token_value_temp [3:1]== 'b110)  && (i_sdahnd_rx_sda== 'b0))
    312             1                    ***0***                                       o_ddrccc_error<=1'b0;
    313                                                                              else
    314             1                    ***0***                                       o_ddrccc_error<=1'b1;
    315                                                              end
    316                                                              
    317                                                                          
    318                                                                        end
    319                                                                      end 
    320                                               
    321                                                  CHECK_PAR_VALUE :    
    322                                                                      begin
    323                                                                       //count <= 'b0;
    324                                                                      
    325             1                    ***0***                              o_ddrccc_rx_mode_done <= 1'b0;
    326                                              
    327                                                                       if(SCL_edges)
    328                                                                        begin
    329             1                    ***0***                                 count <= count + 1'b1;
    330                                                                          
    331                                                                          if(count == 'd1)
    332                                                                            begin
    333                                                                             
    334             1                    ***0***                                     count <= 'b0; 
    335                                              
    336                                                                                                      
    337                                              
    338                                                                            end 
    339                                                                        
    340                                                                        end
    341                                              
    342                                                                        else 
    343                                                                        begin
    344             1                    ***0***                                   parity_value_temp['d1 - count] <= i_sdahnd_rx_sda;
    345                                                                            if(count == 'd1 ) begin
    346             1                    ***0***                                     o_ddrccc_rx_mode_done <= 1'b1;  
    347                                                                         if((parity_value_temp [1]== parity_value_calc[1] )  && (i_sdahnd_rx_sda== parity_value_calc[0]))
    348             1                    ***0***                                       o_ddrccc_error<=1'b0;
    349                                                                              else
    350             1                    ***0***                                       o_ddrccc_error<=1'b1;
    351                                                              end
    352                                                              
    353                                                                          
    354                                                                        end
    355                                                                      end 
    356                                               
    357                                               
    358                                               
    359                                                  CHECK_CRC_VALUE :   begin
    360                                              
    361                                                                       //count <= 'b0;
    362                                                                       //o_crc_en<=1'b1;
    363                                              
    364                                                                       if(SCL_edges)
    365                                                                         begin
    366             1                    ***0***                                   count <= count + 1'b1;   
    367                                                                            
    368                                                                            if(count == 'd4)
    369                                                                              begin
    370             1                    ***0***                                      count <= 'b0;
    371                                                                      
    372                                                                               end 
    373                                                                         end
    374                                                                        
    375                                                                        else 
    376                                                                         begin
    377             1                    ***0***                                CRC_value_temp['d4 - count] <= i_sdahnd_rx_sda;
    378                                                                         if(count == 'd4) 
    379                                                              begin
    380             1                    ***0***                                       o_ddrccc_rx_mode_done <= 1'b1;
    381             1                    ***0***                       en <= 'b0;
    382                                                                if((CRC_value_temp[4:1] == i_crc_value[4:1] )  && (i_sdahnd_rx_sda ==i_crc_value[0]))    
    383             1                    ***0***                                          o_ddrccc_error<=1'b0;                  //TO BE IDETED// //IMPORTAANNTT//
    384                                                                                else
    385             1                    ***0***                                          o_ddrccc_error<=1'b1;
    386                                                                               end
    387                                                             
    388                                                               
    389                                                            else if (count == 'd0) begin
    390             1                    ***0***                     o_crc_last_byte <= 'b1;
    391             1                    ***0***                     o_crc_en<=1'b1;
    392                                                              end
    393                                                                                       
    394                                                                         end
    395                                                                       
    396                                                                      end
    397                                              
    398                                              
    399                                                    ERROR:        begin                              //error state: to be revisit during target design//
    400                                                                   
    401                                              
    402                                                                   if (SCL_edges)
    403                                                                    begin
    404             1                    ***0***                               count <= count + 1'b1;
    405                                                                        /*if(!i_sdahnd_rx_sda)
    406                                                                         count <=1'b0;*/
    407                                                                    end
    408                                                                   else if (!i_sdahnd_rx_sda)
    409                                                                    begin 
    410                                                                  
    411             1                    ***0***                            o_ddrccc_rx_mode_done <= 1'b0; 
    412                                                                   //  o_ddrccc_error_done<=1'b0;
    413             1                    ***0***                            count <= 'b0;
    414                                                                    end    
    415                                                                
    416                                              
    417                                              
    418                                                                 
    419                                                                   else if (count=='d37)
    420                                                                      begin 
    421                                                                  
    422             1                    ***0***                              o_ddrccc_rx_mode_done <= 1'b1; 
    423                                                                      // o_ddrccc_error_done<=1'b1;
    424             1                    ***0***                              count <= 'b0;
    425                                                                      end    
    426                                                                  end
    427                                               
    428                                               
    429                                               
    430                                               
    431                                                  default:     begin
    432             1                    ***0***                      o_regfcrc_rx_data_out <= 8'd0;  
    433             1                    ***0***                      o_ddrccc_rx_mode_done <= 1'b0;
    434             1                    ***0***                      o_ddrccc_pre          <= 1'b0;
    435             1                    ***0***                      o_ddrccc_error        <= 1'b0;
    436             1                    ***0***                      o_crc_en              <= 1'b0; 
    437             1                    ***0***                      o_crc_data_valid      <= 1'b0; 

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        158        36       122    22.78%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/RX --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                               CRC_value_temp[4-0]           0           0        0.00 
                                         SCL_edges           1           1      100.00 
                                          byte_num           0           0        0.00 
                                        count[5-0]           0           0        0.00 
                                        count_done           0           0        0.00 
                                 crc_pre_temp[1-0]           0           0        0.00 
                          data_paritychecker[15-0]           0           0        0.00 
                                                en           0           0        0.00 
                                       i_crc_valid           1           1      100.00 
                                  i_crc_value[0-4]           1           1      100.00 
                                    i_ddrccc_rx_en           1           1      100.00 
                             i_ddrccc_rx_mode[0-2]           0           0        0.00 
                                      i_sclgen_scl           1           1      100.00 
                             i_sclgen_scl_neg_edge           1           1      100.00 
                             i_sclgen_scl_pos_edge           1           1      100.00 
                                   i_sdahnd_rx_sda           1           1      100.00 
                                         i_sys_clk           1           1      100.00 
                                         i_sys_rst           1           1      100.00 
                                  o_crc_data_valid           0           0        0.00 
                                          o_crc_en           1           1      100.00 
                                   o_crc_last_byte           1           1      100.00 
                                    o_ddrccc_error           0           0        0.00 
                                      o_ddrccc_pre           1           1      100.00 
                             o_ddrccc_rx_mode_done           1           1      100.00 
                        o_regfcrc_rx_data_out[7-0]           0           0        0.00 
                   o_regfcrc_rx_data_out_temp[7-0]           0           0        0.00 
                            parity_value_calc[0-1]           0           0        0.00 
                            parity_value_temp[1-0]           0           0        0.00 
                             token_value_temp[3-0]           0           0        0.00 

Total Node Count     =         79 
Toggled Node Count   =         18 
Untoggled Node Count =         61 

Toggle Coverage      =      22.78% (36 of 158 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/tx
=== Design Unit: work.tx
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                       107        98         9    91.58%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/tx

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Tx.v
------------------------------------IF Branch------------------------------------
    69                                     35450     Count coming in to IF
    69              1                      11138     	if (i_ddrccc_special_data == 7'b111_1110 ) begin  // 7E 
    72              1                      24312     	else rd_wr_flag_BADR = rd_wr_flag ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    78                                     56488     Count coming in to IF
    78              1                      19673     assign P1 = (parity_flag)? P1_data : P1_cmdword ; 
    78              2                      36815     assign P1 = (parity_flag)? P1_data : P1_cmdword ; 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    79                                     24967     Count coming in to IF
    79              1                      14966     assign P0 = (parity_flag)? P0_data : P0_cmdword ;
    79              2                      10001     assign P0 = (parity_flag)? P0_data : P0_cmdword ;
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    90                                   1855732     Count coming in to IF
    90              1                          1     		if(~i_sys_rst) begin 
    102             1                    1457101     		else if (i_ddrccc_tx_en) begin
    659             1                     398630     		else
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    109                                  1457101     Count coming in to CASE
    113             1                     140000     		serializing_zeros : begin
    152             1                      27326     		one : begin
    178             1                      20000     		 zero : begin
    203             1                     139812     		special_preambles : begin
    288             1                      89104     		 CCC_value :  begin
    335             1                     348112     		serializing_data :  begin
    384             1                     160000     		serializing_address :  begin
    427             1                      94652     		 calculating_Parity : begin
    459             1                     115455     		token_CRC :	 begin
    532             1                     144310     		CRC_value :  begin
    591             1                      95710     		  restart_Pattern: begin
    619             1                      82620     		exit_Pattern: begin
                                         ***0***     All False Count
Branch totals: 12 hits of 13 branches = 92.30%

------------------------------------IF Branch------------------------------------
    119                                   140000     Count coming in to IF
    119             1                      70000     		 if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    142             1                      10000     			else if ( counter == 'd6 )
                                           60000     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    122                                    70000     Count coming in to IF
    122             1                      10000     		    if ( (!reset_counter_flag) )
    129             1                      60000     			  else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    131                                    60000     Count coming in to IF
    131             1                      10000     			     if ( counter == 'd5 ) begin 
                                           50000     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    156                                    27326     Count coming in to IF
    156             1                      13663     		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    168             1                      13663     			else if ( counter == 'd0 )
                                         ***0***     All False Count
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    159                                    13663     Count coming in to IF
    159             1                      13663     		     if (  (!reset_counter_flag) )
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    182                                    20000     Count coming in to IF
    182             1                      10000     		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    193             1                      10000     			else if ( counter == 'd0 )
                                         ***0***     All False Count
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    184                                    10000     Count coming in to IF
    184             1                      10000     		     if ( (!reset_counter_flag) )
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    208                                   139812     Count coming in to IF
    208             1                      67336     		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    230             1                      31238     			else if ( counter == 'd1 )
                                           41238     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    211                                    67336     Count coming in to IF
    211             1                      36098     		    if ( (!reset_counter_flag) )
    218             1                      31238     			  else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    222                                    31238     Count coming in to IF
    222             1                      31238     			    if ( counter == 'd0 ) begin
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    294                                    89104     Count coming in to IF
    294             1                      44552     		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    315             1                       5569     	 else if ( counter == 'd7 )
                                           38983     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    296                                    44552     Count coming in to IF
    296             1                       5569     		    if ((!reset_counter_flag) )
    304             1                      38983     			  else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    308                                    38983     Count coming in to IF
    308             1                       5569     			    if ( counter == 'd6 )
                                           33414     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    320                                     5569     Count coming in to IF
    320             1                       5569     			 if (!first_byte_full)
    325             1                    ***0***     			 else
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    342                                   348112     Count coming in to IF
    342             1                     174056     		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    363             1                      21757     	 else if ( counter == 'd7 )
                                          152299     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    344                                   174056     Count coming in to IF
    344             1                      21757     		    if (  (!reset_counter_flag) )
    352             1                     152299     			  else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    356                                   152299     Count coming in to IF
    356             1                      21757     			    if ( counter == 'd6 ) begin
                                          130542     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    368                                    21757     Count coming in to IF
    368             1                       8094     			 if (!first_byte_full)
    373             1                      13663     			 else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    391                                   160000     Count coming in to IF
    391             1                      80000     		if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    414             1                      10000     			else if ( (counter == 'd7) )
                                           70000     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    393                                    80000     Count coming in to IF
    393             1                      10000     		    if (  (!reset_counter_flag) )
    402             1                      70000     			  else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    406                                    70000     Count coming in to IF
    406             1                      10000     			    if ( counter == 'd6 ) begin
                                           60000     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    429                                    94652     Count coming in to IF
    429             1                      47326     		   if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    448             1                      23663     			else if ( counter == 1 )
                                           23663     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    432                                    47326     Count coming in to IF
    432             1                      23663     		     if (  (!reset_counter_flag))
    438             1                      23663     			  else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    442                                    23663     Count coming in to IF
    442             1                      23663     			    if ( counter == 'd0 )
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    467                                   115455     Count coming in to IF
    467             1                      57728     		if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    492             1                      14431     			else if ( counter == 3 )
                                           43296     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    470                                    57728     Count coming in to IF
    470             1                      14432     		    if ( (!reset_counter_flag))
    479             1                      43296     			  else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    483                                    43296     Count coming in to IF
    483             1                      14432     			    if ( counter == 'd2 )
                                           28864     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    535                                   144310     Count coming in to IF
    535             1                      72155     		if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    552             1                      14431     			else if ( counter == 'd4 )
                                           57724     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    537                                    72155     Count coming in to IF
    537             1                      14431     		     if ( (!reset_counter_flag))
    543             1                      57724     			   else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    547                                    57724     Count coming in to IF
    547             1                      14431     			    if ( counter == 'd3 )
                                           43293     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    593                                    95710     Count coming in to IF
    593             1                      47855     		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    612             1                       9571     	    else if ( counter == 'd4 )   //before: 5
                                           38284     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    595                                    47855     Count coming in to IF
    595             1                       9571     		     if (!reset_counter_flag)
    602             1                      38284     			   else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    607                                    38284     Count coming in to IF
    607             1                       9571     			     if ( counter == 'd3 )  //before : 4
                                           28713     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    621                                    82620     Count coming in to IF
    621             1                      43740     		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    641             1                    ***0***     	    else if ( counter == 'd8 ) begin //7
    647             1                       4860     		else if ( counter == 'd7 )  begin  
                                           34020     All False Count
Branch totals: 3 hits of 4 branches = 75.00%

------------------------------------IF Branch------------------------------------
    623                                    43740     Count coming in to IF
    623             1                       4860     		     if (!reset_counter_flag)
    630             1                      38880     			 else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    634                                    38880     Count coming in to IF
    634             1                       4860     			     if ( counter == 'd7 )  begin  
                                           34020     All False Count
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      48        43         5    89.58%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/tx --

  File Tx.v
----------------Focused Condition View-------------------
Line       69 Item    1  (i_ddrccc_special_data == 126)
Condition totals: 1 of 1 input term covered = 100.00%

                      Input Term   Covered  Reason for no coverage   Hint
                     -----------  --------  -----------------------  --------------
  (i_ddrccc_special_data == 126)         Y

     Rows:       Hits  FEC Target                        Non-masking condition(s)      
 ---------  ---------  --------------------              -------------------------     
  Row   1:          1  (i_ddrccc_special_data == 126)_0  -                             
  Row   2:          1  (i_ddrccc_special_data == 126)_1  -                             

----------------Focused Condition View-------------------
Line       119 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       131 Item    1  (counter == 5)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 5)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 5)_0      -                             
  Row   2:          1  (counter == 5)_1      -                             

----------------Focused Condition View-------------------
Line       142 Item    1  (counter == 6)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 6)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 6)_0      -                             
  Row   2:          1  (counter == 6)_1      -                             

----------------Focused Condition View-------------------
Line       156 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       168 Item    1  (counter == 0)
Condition totals: 0 of 1 input term covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 0)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (counter == 0)_0      -                             
  Row   2:          1  (counter == 0)_1      -                             

----------------Focused Condition View-------------------
Line       182 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       193 Item    1  (counter == 0)
Condition totals: 0 of 1 input term covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 0)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (counter == 0)_0      -                             
  Row   2:          1  (counter == 0)_1      -                             

----------------Focused Condition View-------------------
Line       208 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       222 Item    1  (counter == 0)
Condition totals: 0 of 1 input term covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 0)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (counter == 0)_0      -                             
  Row   2:          1  (counter == 0)_1      -                             

----------------Focused Condition View-------------------
Line       230 Item    1  (counter == 1)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 1)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 1)_0      -                             
  Row   2:          1  (counter == 1)_1      -                             

----------------Focused Condition View-------------------
Line       294 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       308 Item    1  (counter == 6)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 6)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 6)_0      -                             
  Row   2:          1  (counter == 6)_1      -                             

----------------Focused Condition View-------------------
Line       315 Item    1  (counter == 7)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 7)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 7)_0      -                             
  Row   2:          1  (counter == 7)_1      -                             

----------------Focused Condition View-------------------
Line       342 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       356 Item    1  (counter == 6)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 6)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 6)_0      -                             
  Row   2:          1  (counter == 6)_1      -                             

----------------Focused Condition View-------------------
Line       363 Item    1  (counter == 7)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 7)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 7)_0      -                             
  Row   2:          1  (counter == 7)_1      -                             

----------------Focused Condition View-------------------
Line       391 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       406 Item    1  (counter == 6)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 6)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 6)_0      -                             
  Row   2:          1  (counter == 6)_1      -                             

----------------Focused Condition View-------------------
Line       414 Item    1  (counter == 7)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 7)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 7)_0      -                             
  Row   2:          1  (counter == 7)_1      -                             

----------------Focused Condition View-------------------
Line       429 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       442 Item    1  (counter == 0)
Condition totals: 0 of 1 input term covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 0)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (counter == 0)_0      -                             
  Row   2:          1  (counter == 0)_1      -                             

----------------Focused Condition View-------------------
Line       448 Item    1  (counter == 1)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 1)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 1)_0      -                             
  Row   2:          1  (counter == 1)_1      -                             

----------------Focused Condition View-------------------
Line       467 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       483 Item    1  (counter == 2)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 2)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 2)_0      -                             
  Row   2:          1  (counter == 2)_1      -                             

----------------Focused Condition View-------------------
Line       492 Item    1  (counter == 3)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 3)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 3)_0      -                             
  Row   2:          1  (counter == 3)_1      -                             

----------------Focused Condition View-------------------
Line       535 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       547 Item    1  (counter == 3)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 3)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 3)_0      -                             
  Row   2:          1  (counter == 3)_1      -                             

----------------Focused Condition View-------------------
Line       552 Item    1  (counter == 4)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 4)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 4)_0      -                             
  Row   2:          1  (counter == 4)_1      -                             

----------------Focused Condition View-------------------
Line       593 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       607 Item    1  (counter == 3)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 3)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 3)_0      -                             
  Row   2:          1  (counter == 3)_1      -                             

----------------Focused Condition View-------------------
Line       612 Item    1  (counter == 4)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 4)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 4)_0      -                             
  Row   2:          1  (counter == 4)_1      -                             

----------------Focused Condition View-------------------
Line       621 Item    1  (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
Condition totals: 2 of 2 input terms covered = 100.00%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  i_sclgen_scl_neg_edge         Y
  i_sclgen_scl_pos_edge         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  i_sclgen_scl_neg_edge_0  ~i_sclgen_scl_pos_edge        
  Row   2:          1  i_sclgen_scl_neg_edge_1  -                             
  Row   3:          1  i_sclgen_scl_pos_edge_0  ~i_sclgen_scl_neg_edge        
  Row   4:          1  i_sclgen_scl_pos_edge_1  ~i_sclgen_scl_neg_edge        

----------------Focused Condition View-------------------
Line       634 Item    1  (counter == 7)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 7)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 7)_0      -                             
  Row   2:          1  (counter == 7)_1      -                             

----------------Focused Condition View-------------------
Line       641 Item    1  (counter == 8)
Condition totals: 0 of 1 input term covered = 0.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 8)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 8)_0      -                             
  Row   2:    ***0***  (counter == 8)_1      -                             

----------------Focused Condition View-------------------
Line       647 Item    1  (counter == 7)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 7)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 7)_0      -                             
  Row   2:          1  (counter == 7)_1      -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                     22        21         1    95.45%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/tx --

  File Tx.v
-----------Focused Expression View (Bimodal)------------
Line       77 Item    1  ((A[6] ^ A[4]) ^ A[2])
Expression totals: 3 of 3 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage                  Hint
 -----------  --------  --------------------------------------  --------------
        A[6]         Y
        A[4]         Y
        A[2]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           0  A[6]_0                -                                  
 Row   2:           1           1  A[6]_1                -                                  
 Row   3:           1           0  A[4]_0                -                                  
 Row   4:           1           1  A[4]_1                -                                  
 Row   5:           0           1  A[2]_0                -                                  
 Row   6:           1           1  A[2]_1                -                                  

-----------Focused Expression View (Bimodal)------------
Line       78 Item    1  (parity_flag? P1_data: P1_cmdword)
Expression totals: 3 of 3 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage                  Hint
    -----------  --------  --------------------------------------  --------------
    parity_flag         Y
        P1_data         Y
     P1_cmdword         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           1  parity_flag_0         -                                  
 Row   2:           1           0  parity_flag_1         -                                  
 Row   3:           1           0  P1_data_0             parity_flag                        
 Row   4:           0           1  P1_data_1             parity_flag                        
 Row   5:           1           0  P1_cmdword_0          ~parity_flag                       
 Row   6:           0           1  P1_cmdword_1          ~parity_flag                       

-----------Focused Expression View (Bimodal)------------
Line       79 Item    1  (parity_flag? P0_data: P0_cmdword)
Expression totals: 2 of 3 input terms covered = 66.66%

     Input Term   Covered  Reason for no coverage                  Hint
    -----------  --------  --------------------------------------  --------------
    parity_flag         Y
        P0_data         Y
     P0_cmdword         N  '_1' hit but '_0' is not hit           Hit '_0' for output ->0

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           0           1  parity_flag_0         -                                  
 Row   2:           1           1  parity_flag_1         -                                  
 Row   3:           1           0  P0_data_0             parity_flag                        
 Row   4:           0           1  P0_data_1             parity_flag                        
 Row   5:           0           0  P0_cmdword_0          ~parity_flag                       
 Row   6:           0           1  P0_cmdword_1          ~parity_flag                       

-----------Focused Expression View (Bimodal)------------
Line       81 Item    1  ((rd_wr_flag_BADR ^ (A[7] ^ A[5])) ^ (A[3] ^ A[1]))
Expression totals: 5 of 5 input terms covered = 100.00%

         Input Term   Covered  Reason for no coverage                  Hint
        -----------  --------  --------------------------------------  --------------
    rd_wr_flag_BADR         Y
               A[7]         Y
               A[5]         Y
               A[3]         Y
               A[1]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           0           1  rd_wr_flag_BADR_0     -                                  
 Row   2:           1           0  rd_wr_flag_BADR_1     -                                  
 Row   3:           1           1  A[7]_0                -                                  
 Row   4:           0           1  A[7]_1                -                                  
 Row   5:           1           1  A[5]_0                -                                  
 Row   6:           0           1  A[5]_1                -                                  
 Row   7:           1           1  A[3]_0                -                                  
 Row   8:           0           1  A[3]_1                -                                  
 Row   9:           0           1  A[1]_0                -                                  
Row   10:           1           1  A[1]_1                -                                  

-----------Focused Expression View (Bimodal)------------
Line       83 Item    1  (((D1[7] ^ D1[5]) ^ (D1[3] ^ D1[1])) ^ ((D2[7] ^ D2[5]) ^ (D2[3] ^ D2[1])))
Expression totals: 8 of 8 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage                  Hint
 -----------  --------  --------------------------------------  --------------
       D1[7]         Y
       D1[5]         Y
       D1[3]         Y
       D1[1]         Y
       D2[7]         Y
       D2[5]         Y
       D2[3]         Y
       D2[1]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           0  D1[7]_0               -                                  
 Row   2:           0           1  D1[7]_1               -                                  
 Row   3:           1           0  D1[5]_0               -                                  
 Row   4:           1           1  D1[5]_1               -                                  
 Row   5:           1           0  D1[3]_0               -                                  
 Row   6:           0           1  D1[3]_1               -                                  
 Row   7:           0           1  D1[1]_0               -                                  
 Row   8:           1           0  D1[1]_1               -                                  
 Row   9:           1           1  D2[7]_0               -                                  
Row   10:           0           1  D2[7]_1               -                                  
Row   11:           1           1  D2[5]_0               -                                  
Row   12:           1           0  D2[5]_1               -                                  
Row   13:           1           1  D2[3]_0               -                                  
Row   14:           1           0  D2[3]_1               -                                  
Row   15:           1           1  D2[1]_0               -                                  
Row   16:           1           0  D2[1]_1               -                                  


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     148       144         4    97.29%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/tx --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File Tx.v
    1                                                module tx (
    2                                                input        i_sys_clk,
    3                                                input        i_sys_rst,
    4                                                input        i_ddrccc_tx_en,
    5                                                input        i_sclgen_scl_pos_edge,
    6                                                input        i_sclgen_scl_neg_edge,
    7                                                input [3:0]  i_ddrccc_tx_mode,
    8                                                input [7:0]  i_regf_tx_parallel_data, 
    9                                                input [7:0]  i_ddrccc_special_data, // special from ddr or ccc (address or ccc value)  
    10                                               input [4:0]  i_crc_crc_value, //separate calculation of crc (of what serialized) in another block 
    11                                               input        i_crc_data_valid,
    12                                               input        i_regf_read_n_write_bit,
    13                                               
    14                                               
    15                                               output reg        o_sdahnd_serial_data, //SDA
    16                                               output reg        o_ddrccc_mode_done,
    17                                               output reg        o_crc_en, 
    18                                               output reg [7:0]  o_crc_parallel_data ,//sending byte byte of what serialized for crc block
    19                                               output reg        o_crc_last_byte,
    20                                               output reg        o_crc_data_valid
    21                                               );
    22                                               
    23                                               
    24                                               // tx modes needed  
    25                                               localparam [3:0]  special_preambles = 'b0000, 		//'d0			//2'b01 
    26                                                                 serializing_address = 'b0001, 	//'d1			//address of target
    27                                                   			  serializing_zeros = 'b0011 ,  	//'d3			//7-zeros in the first byte of cmd word        
    28                                                                 one = 'b0010, 					//'d2			// for representing preamble bit or reading_or_writing bit  
    29                                                                 zero = 'b0110, 					//'d6			// for representing preamble bit or reading_or_writing bit
    30                                               				  serializing_data = 'b0111, 		//'d7			//data byte from reg to be serialized
    31                                               				  CCC_value = 'b0101 , 				//'d5			//special data in case of transmitting CCC
    32                                               				  calculating_Parity = 'b0100,  	//'d4			//parity of word serialized either cmd word or data word
    33                                               				  token_CRC = 'b1100, 				//'d12			//special bits 4'b1100
    34                                               				  CRC_value = 'b1101, 				//'d13			//CRC value arrived of data serialized
    35                                                                 restart_Pattern = 'b1111,			//'d15
    36                                                                 exit_Pattern = 'b1110;			//'d14
    37                                               
    38                                               
    39                                               /**special values*/			  
    40              1                          1     reg [1:0] special_preamble = 'b01 ;
    41              1                          1     reg [3:0] token = 4'b1100;
    42              1                          1     reg [6:0] reserved =7'b0000000; //00//
    43                                               
    44                                               
    45                                               /**internal signals*/
    46                                               wire parity_adj; 
    47                                               wire [7:0] A; //CMD_Word_Second_Byte
    48                                               wire P1, P0; //parity bits to be serialized
    49                                               wire P1_cmdword, P0_cmdword; //parity bits of cmdword
    50                                               wire P1_data, P0_data; //parity bits of data
    51                                               wire [1:0] P;
    52                                               reg [7:0] D1, D2; //first_and_second_Data_Bytes
    53                                               reg	crc_indicator ; //00//
    54                                               reg [4:0] crc_temp ; //00//
    55                                               reg [4:0] crc; //00//
    56                                               
    57                                               
    58                                               
    59                                               /**helpful flags*/
    60                                               integer counter;
    61                                               reg reset_counter_flag;
    62                                               reg rd_wr_flag; //storing rd_or_wr bit for calculating (parity adj) and (cmd word parity)
    63                                               reg parity_flag; //to distinguish parity is calculated for cmd or data
    64                                               reg first_byte_full; //to distinguish tx is serializing first byte or second byte
    65                                               wire [3:0] tmp_restart ;
    66                                               reg rd_wr_flag_BADR ;
    67                                               
    68              1                      35450     always @(*) begin 
    69                                               	if (i_ddrccc_special_data == 7'b111_1110 ) begin  // 7E 
    70              1                      11138     		rd_wr_flag_BADR = 1'b0 ;
    71                                               	end 
    72              1                      24312     	else rd_wr_flag_BADR = rd_wr_flag ;
    73                                               end 
    74                                               
    75                                               assign tmp_restart = 4'b 0101;
    76                                               assign A = {i_ddrccc_special_data[6:0],parity_adj} ; 
    77              1                      14734     assign parity_adj =  A[6] ^ A[4] ^ A[2]  ;
    78              1                      56489     assign P1 = (parity_flag)? P1_data : P1_cmdword ; 
    79              1                      24969     assign P0 = (parity_flag)? P0_data : P0_cmdword ;
    80                                               assign P = {P1,P0} ;
    81              1                      35028     assign P1_cmdword = rd_wr_flag_BADR ^ A[7] ^ A[5] ^ A[3] ^ A[1] ;
    82                                               assign P0_cmdword =  1 ;
    83              1                      19628     assign P1_data = D1[7] ^ D1[5] ^ D1[3] ^ D1[1] ^ D2[7] ^ D2[5] ^ D2[3] ^ D2[1] ;
    84                                               assign P0_data = D1[6] ^ D1[4] ^ D1[2] ^ D1[0] ^ D2[6] ^ D2[4] ^ D2[2] ^ D2[0] ^ 1 ; 
    85                                               
    86                                               
    87              1                    1855732      always @ (posedge i_sys_clk or negedge i_sys_rst)
    88                                               	begin 
    89                                               	
    90                                               		if(~i_sys_rst) begin 
    91              1                          1     		    o_sdahnd_serial_data<= 1;
    92              1                          1             o_ddrccc_mode_done<= 0;
    93              1                          1             o_crc_parallel_data<= 0;
    94              1                          1             o_crc_en<= 0;
    95              1                          1     		    counter <= 0;
    96              1                          1     		    reset_counter_flag <= 0;
    97              1                          1     		    parity_flag <= 0;
    98              1                          1     		    first_byte_full <= 0;
    99              1                          1     		    o_crc_en <= 0; 
    100                                              		end 
    101                                              		
    102                                              		else if (i_ddrccc_tx_en) begin
    103                                              		  
    104             1                    1457101     		o_ddrccc_mode_done <= 0;
    105             1                    1457101     		o_crc_data_valid <= 'b0;
    106             1                    1457101     		 o_crc_en <= 'b0;
    107             1                    1457101     		 o_crc_last_byte <= 'b0;
    108                                              		
    109                                              		case (i_ddrccc_tx_mode)
    110                                              		  
    111                                              		  ///////////////////////
    112                                              		  
    113                                              		serializing_zeros : begin
    114                                              		  
    115             1                     140000     		  o_crc_parallel_data <= {i_regf_read_n_write_bit , reserved};
    116             1                     140000     		  o_crc_en <= 'b1;
    117                                              		//	o_crc_data_valid <= 'b1;
    118                                              
    119                                              		 if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    120                                              		   begin
    121             1                      70000     		    o_sdahnd_serial_data <= 1'b0 ;    
    122                                              		    if ( (!reset_counter_flag) )
    123                                              		      begin
    124             1                      10000                counter <= 'd0;
    125             1                      10000                reset_counter_flag <= 1;
    126             1                      10000     		   o_crc_data_valid <= 'b1;
    127                                                        end
    128                                                        
    129                                              			  else
    130                                              			    begin
    131                                              			     if ( counter == 'd5 ) begin 
    132             1                      10000     			      o_ddrccc_mode_done <= 'b1;
    133                                              				  end
    134             1                      60000     			      counter <= counter + 1;
    135                                              				 // o_crc_data_valid <= 'b0;
    136                                              				 
    137                                              				 
    138                                              			    end
    139                                              			    
    140                                              			 end
    141                                              			 
    142                                              			else if ( counter == 'd6 )
    143                                              			  begin
    144             1                      10000     			 reset_counter_flag <= 0;
    145                                              			 
    146                                              			 end
    147                                              		  
    148                                              		  end
    149                                              	
    150                                              		/////////////////////////////////
    151                                              		  
    152                                              		one : begin
    153                                              		  
    154                                              		//	o_crc_en <= 'b1;
    155             1                      27326     			o_crc_last_byte <= 'b0;
    156                                              		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    157                                              		   begin
    158                                              		     
    159                                              		     if (  (!reset_counter_flag) )
    160                                              		      begin
    161             1                      13663                counter <= 0;
    162             1                      13663                reset_counter_flag <= 1;
    163             1                      13663                o_sdahnd_serial_data <= 1;
    164             1                      13663     			     o_ddrccc_mode_done <= 'b1;
    165                                                        end
    166                                              			 end
    167                                              			 
    168                                              			else if ( counter == 'd0 )
    169                                              			  begin
    170             1                      13663     			 rd_wr_flag <= 'b1;
    171             1                      13663     			 reset_counter_flag <= 0;
    172                                              			 
    173                                              			 end
    174                                              		  end
    175                                              		  
    176                                              		  ////////////////////////////
    177                                              		  
    178                                              		 zero : begin
    179                                              		//  o_crc_en <= 'b1;
    180             1                      20000     			o_crc_last_byte <= 'b0;
    181                                              		  
    182                                              		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    183                                              		   begin
    184                                              		     if ( (!reset_counter_flag) )
    185                                              		      begin
    186             1                      10000                counter <= 'd0;
    187             1                      10000                reset_counter_flag <= 1;
    188             1                      10000        		      o_sdahnd_serial_data <= 0;
    189             1                      10000     			     o_ddrccc_mode_done <= 1;
    190                                                        end
    191                                              			 end
    192                                              			 
    193                                              			else if ( counter == 'd0 )
    194                                              			  begin
    195             1                      10000     			 rd_wr_flag <= 'b0;
    196             1                      10000     			 reset_counter_flag <= 0;
    197                                              			 
    198                                              			 end
    199                                              		  end
    200                                              		  
    201                                              		  /////////////////////////////////////
    202                                              		
    203                                              		special_preambles : begin
    204                                              		 
    205             1                     139812     		o_crc_last_byte <= 'b0;
    206             1                     139812     		counter <= 'd0;   //editttt laila
    207                                              		  
    208                                              		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    209                                              		   begin
    210                                              		        
    211                                              		    if ( (!reset_counter_flag) )
    212                                              		      begin
    213             1                      36098                counter <= 'd0;
    214             1                      36098                reset_counter_flag <= 1;
    215             1                      36098                o_sdahnd_serial_data <= special_preamble['d1] ; 
    216                                                        end
    217                                                        
    218                                              			  else
    219                                              			    begin
    220             1                      31238     			    counter <= counter + 1;
    221             1                      31238     			    o_sdahnd_serial_data <= special_preamble['d0 - counter] ;
    222                                              			    if ( counter == 'd0 ) begin
    223             1                      31238     			       o_ddrccc_mode_done <= 'b1;
    224             1                      31238     				   parity_flag <= 0;  // to make P1=P1_cmd &P1=P0_cmd
    225                                              				   end
    226                                              			    end
    227                                              			    
    228                                              			 end
    229                                              			 
    230                                              			else if ( counter == 'd1 )
    231                                              			  begin
    232             1                      31238     			 reset_counter_flag <= 0;
    233                                              			 
    234                                              			 end
    235                                              			 
    236                                              		 end	
    237                                              		 ////////////////////////////////////
    238                                              		 
    239                                              		/* CCC_value :  begin
    240                                              		  
    241                                              		  o_crc_last_byte <= 'b1;
    242                                              		  o_crc_en <= 'b1;
    243                                              		  crc_indicator <= 'b1;
    244                                              		  crc_temp <= i_crc_crc_value ;
    245                                              
    246                                              			
    247                                              		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    248                                              		   begin    
    249                                              		    if ((!reset_counter_flag) )
    250                                              		      begin
    251                                                         counter <= 'd0;
    252                                                         reset_counter_flag <= 1;
    253                                                         o_sdahnd_serial_data <= i_ddrccc_special_data['d7] ;
    254                                                         end
    255                                                        
    256                                              			  else
    257                                              			    begin
    258                                              			    counter <= counter + 1;
    259                                              			    o_sdahnd_serial_data <= i_ddrccc_special_data['d6 - counter] ;
    260                                              			    if ( counter == 'd6 )
    261                                              					begin
    262                                              			       o_ddrccc_mode_done <= 'b1;
    263                                              				   end
    264                                              			    end
    265                                              			 end
    266                                              			 
    267                                              	 else if ( counter == 'd7 )
    268                                              			begin
    269                                              			 reset_counter_flag <= 0;
    270                                              			 
    271                                              			 parity_flag <= 1;
    272                                              			 if (!first_byte_full)
    273                                              			   begin
    274                                              			    D1 <= i_ddrccc_special_data;
    275                                              			    first_byte_full <= 1;
    276                                              			   end
    277                                              			 else
    278                                              			   begin
    279                                              			    D2 <= i_ddrccc_special_data;
    280                                              			    first_byte_full <= 0;
    281                                              			   end
    282                                              		  end
    283                                              			 
    284                                              	 end	*/
    285                                              		
    286                                              		 ///////////////////////////////////
    287                                              		  		 
    288                                              		 CCC_value :  begin
    289                                              		  
    290             1                      89104     		  o_crc_last_byte <= 'b0;
    291             1                      89104     		  o_crc_en <= 'b1;
    292             1                      89104     		  o_crc_parallel_data <= i_ddrccc_special_data;
    293                                              			
    294                                              		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    295                                              		   begin    
    296                                              		    if ((!reset_counter_flag) )
    297                                              		      begin
    298             1                       5569                counter <= 'd0;
    299             1                       5569                reset_counter_flag <= 1;
    300             1                       5569                o_sdahnd_serial_data <= i_ddrccc_special_data['d7] ;
    301             1                       5569     		   o_crc_data_valid <= 'b1;
    302                                                         end
    303                                                        
    304                                              			  else
    305                                              			    begin
    306             1                      38983     			    counter <= counter + 1;
    307             1                      38983     			    o_sdahnd_serial_data <= i_ddrccc_special_data['d6 - counter] ;
    308                                              			    if ( counter == 'd6 )
    309                                              					begin
    310             1                       5569     			       o_ddrccc_mode_done <= 'b1;
    311                                              				   end
    312                                              			    end
    313                                              			 end
    314                                              			 
    315                                              	 else if ( counter == 'd7 )
    316                                              			begin
    317             1                       5569     			 reset_counter_flag <= 0;
    318                                              			 
    319             1                       5569     			 parity_flag <= 1;
    320                                              			 if (!first_byte_full)
    321                                              			   begin
    322             1                       5569     			    D1 <= i_ddrccc_special_data;
    323             1                       5569     			    first_byte_full <= 1;
    324                                              			   end
    325                                              			 else
    326                                              			   begin
    327             1                    ***0***     			    D2 <= i_ddrccc_special_data;
    328             1                    ***0***     			    first_byte_full <= 0;
    329                                              			   end
    330                                              		  end
    331                                              			 
    332                                              	 end	
    333                                              		
    334                                              		 ///////////////////////////////////
    335                                              		serializing_data :  begin
    336                                              		  
    337             1                     348112     			o_crc_en <= 'b1;
    338             1                     348112     			o_crc_parallel_data <= i_regf_tx_parallel_data;
    339             1                     348112     			o_crc_last_byte <= 'b0;
    340                                              			//o_crc_data_valid <= 'b1;
    341                                              			
    342                                              		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    343                                              		   begin    
    344                                              		    if (  (!reset_counter_flag) )
    345                                              		      begin
    346             1                      21757                counter <= 'd0;
    347             1                      21757                reset_counter_flag <= 1;
    348             1                      21757                o_sdahnd_serial_data <= i_regf_tx_parallel_data['d7] ;
    349             1                      21757     		   o_crc_data_valid <= 'b1;
    350                                                         end
    351                                                        
    352                                              			  else
    353                                              			    begin
    354             1                     152299     			    counter <= counter + 1;
    355             1                     152299     			    o_sdahnd_serial_data <= i_regf_tx_parallel_data['d6 - counter] ;
    356                                              			    if ( counter == 'd6 ) begin
    357             1                      21757     			      o_ddrccc_mode_done <= 'b1;
    358                                              				  end
    359                                              				//  o_crc_data_valid <= 'b0;
    360                                              			    end
    361                                              			 end
    362                                              			 
    363                                              	 else if ( counter == 'd7 )
    364                                              			begin
    365             1                      21757     			 reset_counter_flag <= 0;
    366                                              			 
    367             1                      21757     			 parity_flag <= 1;
    368                                              			 if (!first_byte_full)
    369                                              			   begin
    370             1                       8094     			    D1 <= i_regf_tx_parallel_data;
    371             1                       8094     			    first_byte_full <= 1;
    372                                              			   end
    373                                              			 else
    374                                              			   begin
    375             1                      13663     			    D2 <= i_regf_tx_parallel_data;
    376             1                      13663     			    first_byte_full <= 0;
    377                                              			   end
    378                                              		  end
    379                                              			 
    380                                              	 end	
    381                                              	 
    382                                              	 /////////////////////////////
    383                                              		 
    384                                              		serializing_address :  begin
    385                                              
    386             1                     160000     				  o_crc_parallel_data <= A;	 
    387             1                     160000     				  o_crc_en <= 'b1;
    388             1                     160000     				  o_crc_last_byte <= 'b0;			
    389                                              					
    390                                              		
    391                                              		if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    392                                              		   begin    
    393                                              		    if (  (!reset_counter_flag) )
    394                                              		      begin
    395             1                      10000                counter <= 'd0;
    396             1                      10000                reset_counter_flag <= 1;
    397             1                      10000                o_sdahnd_serial_data <= A['d7] ;
    398             1                      10000     		   o_crc_data_valid <= 'b1;
    399                                              		  
    400                                                         end
    401                                                        
    402                                              			  else
    403                                              			    begin
    404             1                      70000     			    counter <= counter + 1;
    405             1                      70000     			    o_sdahnd_serial_data <= A['d6 - counter] ;
    406                                              			    if ( counter == 'd6 ) begin
    407             1                      10000     			      o_ddrccc_mode_done <= 'b1;
    408                                              			    end
    409                                              			//	o_crc_data_valid <= 'b0;
    410                                              				end
    411                                              			    
    412                                              			 end
    413                                              			 
    414                                              			else if ( (counter == 'd7) )
    415                                              			  begin
    416             1                      10000     			 reset_counter_flag <= 0;
    417                                              			 
    418                                              			 end
    419                                              			 
    420                                              			 
    421                                              			 
    422                                              		 end	
    423                                              		 
    424                                              		 /////////////////////////////////
    425                                              		 
    426                                              		 
    427                                              		 calculating_Parity : begin
    428             1                      94652     		   o_crc_en <= 'b0;
    429                                              		   if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    430                                              		    begin
    431                                              		      
    432                                              		     if (  (!reset_counter_flag))
    433                                              		     begin
    434             1                      23663               counter <= 'd0;
    435             1                      23663               reset_counter_flag <= 1;
    436             1                      23663               o_sdahnd_serial_data <= P[1];
    437                                                       end
    438                                              			  else
    439                                              			    begin
    440             1                      23663     			    counter <= counter + 1;
    441             1                      23663     			    o_sdahnd_serial_data <= P[(0 - counter)];
    442                                              			    if ( counter == 'd0 )
    443             1                      23663     			      o_ddrccc_mode_done <= 'b1;
    444                                              			    end
    445                                              			    
    446                                              			 end
    447                                              			 
    448                                              			else if ( counter == 1 )
    449                                              			 begin
    450             1                      23663     			  reset_counter_flag <= 0;
    451                                              			  
    452                                              			 end
    453                                              
    454                                              		 end	  
    455                                              		 
    456                                              		 
    457                                              		 /////////////////////////////////
    458                                              				  				  		  
    459                                              		token_CRC :	 begin
    460                                              
    461                                              		/* if (crc_indicator)
    462                                              				crc <= crc_temp;
    463                                              		  else 	
    464                                              				crc <= i_crc_crc_value;*/
    465                                              				
    466                                              
    467                                              		if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    468                                              		   begin
    469                                                  
    470                                              		    if ( (!reset_counter_flag))
    471                                              		     begin
    472             1                      14432               counter <= 'd0;
    473             1                      14432               reset_counter_flag <= 1;
    474             1                      14432               o_sdahnd_serial_data <= token[3];
    475             1                      14432     		   o_crc_en <= 'b1;
    476             1                      14432     		   o_crc_last_byte <= 'b1;
    477                                              		  
    478                                              			end
    479                                              			  else
    480                                              			    begin
    481             1                      43296     			    counter <= counter + 1;
    482             1                      43296     			    o_sdahnd_serial_data <= token[(2 - counter)];
    483                                              			    if ( counter == 'd2 )
    484                                              					begin 
    485             1                      14432     			      o_ddrccc_mode_done <= 'b1;
    486                                              					
    487                                              					end
    488                                              			    end
    489                                              			    
    490                                              			 end
    491                                              			 
    492                                              			else if ( counter == 3 )
    493                                              			  begin
    494             1                      14431     			 reset_counter_flag <= 0;
    495                                              			 
    496                                              			 end
    497                                              
    498                                              		 end	 
    499                                              		
    500                                              		/////////////////////////////////////////
    501                                              		 
    502                                              		/*CRC_value :  begin
    503                                              		  crc_indicator <= 'b0;
    504                                              		
    505                                              		if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    506                                              		    begin    
    507                                              		     if ( (!reset_counter_flag))
    508                                              		       begin
    509                                              		        o_sdahnd_serial_data <= crc[4]; 
    510                                              				counter <= 'd0;
    511                                              				reset_counter_flag <= 1;  
    512                                                         end
    513                                              			   else
    514                                              			     begin
    515                                              			    counter <= counter + 1;
    516                                              			    o_sdahnd_serial_data <= crc[(3 - counter)];
    517                                              			    if ( counter == 'd3 )
    518                                              			      o_ddrccc_mode_done <= 'b1;
    519                                              			    end
    520                                              			  end
    521                                              			    
    522                                              			else if ( counter == 'd4 )
    523                                              			 begin
    524                                              			  reset_counter_flag <= 0; 
    525                                              			 end
    526                                              			 
    527                                              			 
    528                                              				
    529                                              			 
    530                                              	  end*/
    531                                              	  	 
    532                                              		CRC_value :  begin
    533             1                     144310     		  crc_indicator <= 'b0;
    534                                              		  
    535                                              		if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    536                                              		    begin    
    537                                              		     if ( (!reset_counter_flag))
    538                                              		       begin
    539             1                      14431     		        o_sdahnd_serial_data <= i_crc_crc_value[4]; 
    540             1                      14431     				counter <= 'd0;
    541             1                      14431     				reset_counter_flag <= 1;  
    542                                                         end
    543                                              			   else
    544                                              			     begin
    545             1                      57724     			    counter <= counter + 1;
    546             1                      57724     			    o_sdahnd_serial_data <= i_crc_crc_value[(3 - counter)];
    547                                              			    if ( counter == 'd3 )
    548             1                      14431     			      o_ddrccc_mode_done <= 'b1;
    549                                              			    end
    550                                              			  end
    551                                              			    
    552                                              			else if ( counter == 'd4 )
    553                                              			 begin
    554             1                      14431     			  reset_counter_flag <= 0; 
    555                                              			 end
    556                                              			 
    557                                              			 
    558                                              				
    559                                              			 
    560                                              	  end
    561                                              			  
    562                                              			  /////////////////////////////////////////////
    563                                              		/*	  
    564                                              		restart_Pattern: begin
    565                                              			  
    566                                              		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    567                                              		    begin    
    568                                              		     if (!reset_counter_flag)
    569                                              		       begin
    570                                              		        o_sdahnd_serial_data <= 1;
    571                                                          counter <= 'd0;
    572                                                          reset_counter_flag <= 1; 
    573                                                         end
    574                                                         
    575                                              			   else
    576                                              			    begin
    577                                              			     counter <= counter + 1;
    578                                              			     o_sdahnd_serial_data <= !o_sdahnd_serial_data;
    579                                              			     if ( counter == 'd3 )                                //was 4 , modified by laila
    580                                              			      o_ddrccc_mode_done <= 'b1;
    581                                              			    end	  
    582                                              			  end
    583                                              			 
    584                                              	    else if ( counter == 'd4 )
    585                                              			 begin
    586                                              			  reset_counter_flag <= 0;
    587                                              
    588                                              			 end
    589                                              		  end
    590                                              		  */
    591                                              		  restart_Pattern: begin
    592                                              			  
    593                                              		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    594                                              		    begin    
    595                                              		     if (!reset_counter_flag)
    596                                              		       begin
    597             1                       9571     		        o_sdahnd_serial_data <= 1;
    598             1                       9571                 counter <= 'd0;
    599             1                       9571                 reset_counter_flag <= 1; 
    600                                                         end
    601                                                         
    602                                              			   else
    603                                              			    begin
    604             1                      38284     			     counter <= counter + 1;
    605                                              			    //  12 / 6 / 2024
    606             1                      38284     			    o_sdahnd_serial_data <= tmp_restart[(3 - counter)];
    607                                              			     if ( counter == 'd3 )  //before : 4
    608             1                       9571     			      o_ddrccc_mode_done <= 'b1;
    609                                              			    end	  
    610                                              			  end
    611                                              			 
    612                                              	    else if ( counter == 'd4 )   //before: 5
    613                                              			 begin
    614             1                       9571     			  reset_counter_flag <= 0;
    615                                              			 end
    616                                              		  end
    617                                              			  ////////////////////////////////////////////
    618                                              			  
    619                                              		exit_Pattern: begin
    620                                              			  
    621                                              		  if (i_sclgen_scl_neg_edge || i_sclgen_scl_pos_edge)
    622                                              		    begin    
    623                                              		     if (!reset_counter_flag)
    624                                              		       begin
    625             1                       4860     		        o_sdahnd_serial_data <= 1;
    626             1                       4860                     counter <= 'd0;
    627             1                       4860                     reset_counter_flag <= 1; 
    628                                                             end
    629                                                         
    630                                              			 else
    631                                              			    begin
    632             1                      38880     			     counter <= counter + 1;
    633             1                      38880     			     o_sdahnd_serial_data <= !o_sdahnd_serial_data;
    634                                              			     if ( counter == 'd7 )  begin  
    635                                              			     // o_ddrccc_mode_done <= 'b1;
    636             1                       4860     			      o_sdahnd_serial_data <= 'b0;
    637                                              			end
    638                                              			    end	  
    639                                              			  end
    640                                              			 
    641                                              	    else if ( counter == 'd8 ) begin //7
    642             1                    ***0***     			  reset_counter_flag <= 0;
    643             1                    ***0***     			  o_sdahnd_serial_data <= 'b0;
    644                                              
    645                                              		end
    646                                              
    647                                              		else if ( counter == 'd7 )  begin  
    648             1                       4860     			      o_ddrccc_mode_done <= 'b1;
    649             1                       4860     			      o_sdahnd_serial_data <= 'b0;
    650                                              			end
    651                                              
    652                                              		  end
    653                                              		
    654                                              		////////////////////////////////////////////////
    655                                              		
    656                                              		endcase
    657                                              		end		
    658                                              		
    659                                              		else
    660                                              		  begin
    661             1                     398630     		 	o_sdahnd_serial_data<= 1;
    662             1                     398630     			o_ddrccc_mode_done<= 0;
    663             1                     398630     			o_crc_en<= 0;
    664             1                     398630     		    counter <= 0;
    665             1                     398630     		    reset_counter_flag <= 0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        250       168        82    67.20%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/tx --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                            A[0-7]           1           1      100.00 
                                           D1[7-0]           1           1      100.00 
                                           D2[7-0]           1           1      100.00 
                                                P0           1           1      100.00 
                                           P0_data           1           1      100.00 
                                                P1           1           1      100.00 
                                        P1_cmdword           1           1      100.00 
                                           P1_data           1           1      100.00 
                                            P[0-1]           1           1      100.00 
                                     counter[31-4]           0           0        0.00 
                                      counter[3-0]           1           1      100.00 
                                          crc[4-0]           0           0        0.00 
                                     crc_indicator           0           0        0.00 
                                     crc_temp[4-0]           0           0        0.00 
                                   first_byte_full           1           1      100.00 
                              i_crc_crc_value[0-4]           1           1      100.00 
                                  i_crc_data_valid           1           1      100.00 
                        i_ddrccc_special_data[0-6]           1           1      100.00 
                          i_ddrccc_special_data[7]           0           0        0.00 
                                    i_ddrccc_tx_en           1           1      100.00 
                             i_ddrccc_tx_mode[0-3]           1           1      100.00 
                           i_regf_read_n_write_bit           0           0        0.00 
                      i_regf_tx_parallel_data[0-7]           1           1      100.00 
                             i_sclgen_scl_neg_edge           1           1      100.00 
                             i_sclgen_scl_pos_edge           1           1      100.00 
                                         i_sys_clk           1           1      100.00 
                                         i_sys_rst           1           1      100.00 
                                  o_crc_data_valid           1           1      100.00 
                                          o_crc_en           1           1      100.00 
                                   o_crc_last_byte           1           1      100.00 
                          o_crc_parallel_data[7-0]           1           1      100.00 
                                o_ddrccc_mode_done           1           1      100.00 
                              o_sdahnd_serial_data           1           1      100.00 
                                        parity_adj           1           1      100.00 
                                       parity_flag           1           1      100.00 
                                        rd_wr_flag           1           1      100.00 
                                   rd_wr_flag_BADR           1           1      100.00 
                                reset_counter_flag           1           1      100.00 

Total Node Count     =        125 
Toggled Node Count   =         84 
Untoggled Node Count =         41 

Toggle Coverage      =      67.20% (168 of 250 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/u_crc
=== Design Unit: work.crc
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        18        18         0   100.00%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB/DUT/u_crc

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File crc.v
------------------------------------IF Branch------------------------------------
    28                                    549456     Count coming in to IF
    28              1                          1         if (!i_sys_rst) begin
    36              1                     549455     	else	begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    37                                    549455     Count coming in to IF
    37              1                     492123     		 if (i_txrx_en)
                                           57332     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    39                                    492123     Count coming in to IF
    39              1                      18863     			if (i_txrx_last_byte)
    47              1                      47326     			else if (i_txrx_data_valid)
    54              1                     425934     			else 
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    56                                    425934     Count coming in to IF
    56              1                      47326     				if (counter == 'd8)
    61              1                     378608     				else 
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    100                                   433727     Count coming in to CASE
    101             1                      55119     	'd0:	feedback = temp[7] ^ shift_reg[4] ;
    102             1                      47326     	'd1:	feedback = temp[6] ^ shift_reg[4] ;
    103             1                      47326     	'd2:	feedback = temp[5] ^ shift_reg[4] ;
    104             1                      47326     	'd3:	feedback = temp[4] ^ shift_reg[4] ;
    105             1                      47326     	'd4:	feedback = temp[3] ^ shift_reg[4] ;
    106             1                      47326     	'd5:	feedback = temp[2] ^ shift_reg[4] ;
    107             1                      47326     	'd6:	feedback = temp[1] ^ shift_reg[4] ;
    108             1                      47326     	'd7:	feedback = temp[0] ^ shift_reg[4] ;
    110             1                      47326     	default : feedback = 'b0;
Branch totals: 9 hits of 9 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       1         1         0   100.00%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB/DUT/u_crc --

  File crc.v
----------------Focused Condition View-------------------
Line       56 Item    1  (counter == 8)
Condition totals: 1 of 1 input term covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  (counter == 8)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (counter == 8)_0      -                             
  Row   2:          1  (counter == 8)_1      -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                     18        18         0   100.00%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB/DUT/u_crc --

  File crc.v
-----------Focused Expression View (Bimodal)------------
Line       65 Item    1  (shift_reg[1] ^ feedback)
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage                  Hint
     -----------  --------  --------------------------------------  --------------
    shift_reg[1]         Y
        feedback         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           0  shift_reg[1]_0        -                                  
 Row   2:           1           1  shift_reg[1]_1        -                                  
 Row   3:           0           1  feedback_0            -                                  
 Row   4:           1           0  feedback_1            -                                  

-----------Focused Expression View (Bimodal)------------
Line       101 Item    1  (temp[7] ^ shift_reg[4])
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage                  Hint
     -----------  --------  --------------------------------------  --------------
         temp[7]         Y
    shift_reg[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           1  temp[7]_0             -                                  
 Row   2:           1           0  temp[7]_1             -                                  
 Row   3:           1           0  shift_reg[4]_0        -                                  
 Row   4:           0           1  shift_reg[4]_1        -                                  

-----------Focused Expression View (Bimodal)------------
Line       102 Item    1  (temp[6] ^ shift_reg[4])
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage                  Hint
     -----------  --------  --------------------------------------  --------------
         temp[6]         Y
    shift_reg[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           0           1  temp[6]_0             -                                  
 Row   2:           1           0  temp[6]_1             -                                  
 Row   3:           1           0  shift_reg[4]_0        -                                  
 Row   4:           1           1  shift_reg[4]_1        -                                  

-----------Focused Expression View (Bimodal)------------
Line       103 Item    1  (temp[5] ^ shift_reg[4])
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage                  Hint
     -----------  --------  --------------------------------------  --------------
         temp[5]         Y
    shift_reg[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           0           1  temp[5]_0             -                                  
 Row   2:           1           0  temp[5]_1             -                                  
 Row   3:           1           0  shift_reg[4]_0        -                                  
 Row   4:           1           1  shift_reg[4]_1        -                                  

-----------Focused Expression View (Bimodal)------------
Line       104 Item    1  (temp[4] ^ shift_reg[4])
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage                  Hint
     -----------  --------  --------------------------------------  --------------
         temp[4]         Y
    shift_reg[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           1  temp[4]_0             -                                  
 Row   2:           1           0  temp[4]_1             -                                  
 Row   3:           1           0  shift_reg[4]_0        -                                  
 Row   4:           0           1  shift_reg[4]_1        -                                  

-----------Focused Expression View (Bimodal)------------
Line       105 Item    1  (temp[3] ^ shift_reg[4])
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage                  Hint
     -----------  --------  --------------------------------------  --------------
         temp[3]         Y
    shift_reg[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           1  temp[3]_0             -                                  
 Row   2:           1           0  temp[3]_1             -                                  
 Row   3:           1           0  shift_reg[4]_0        -                                  
 Row   4:           0           1  shift_reg[4]_1        -                                  

-----------Focused Expression View (Bimodal)------------
Line       106 Item    1  (temp[2] ^ shift_reg[4])
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage                  Hint
     -----------  --------  --------------------------------------  --------------
         temp[2]         Y
    shift_reg[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           1  temp[2]_0             -                                  
 Row   2:           1           0  temp[2]_1             -                                  
 Row   3:           1           0  shift_reg[4]_0        -                                  
 Row   4:           1           1  shift_reg[4]_1        -                                  

-----------Focused Expression View (Bimodal)------------
Line       107 Item    1  (temp[1] ^ shift_reg[4])
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage                  Hint
     -----------  --------  --------------------------------------  --------------
         temp[1]         Y
    shift_reg[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           0           1  temp[1]_0             -                                  
 Row   2:           1           0  temp[1]_1             -                                  
 Row   3:           1           0  shift_reg[4]_0        -                                  
 Row   4:           1           1  shift_reg[4]_1        -                                  

-----------Focused Expression View (Bimodal)------------
Line       108 Item    1  (temp[0] ^ shift_reg[4])
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage                  Hint
     -----------  --------  --------------------------------------  --------------
         temp[0]         Y
    shift_reg[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target            Non-masking condition(s)           

---------  ----------  ----------  --------------------  -------------------------          
 Row   1:           1           1  temp[0]_0             -                                  
 Row   2:           0           1  temp[0]_1             -                                  
 Row   3:           1           0  shift_reg[4]_0        -                                  
 Row   4:           0           1  shift_reg[4]_1        -                                  


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      30        30         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/u_crc --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File crc.v
    1                                                module crc (
    2                                                    input 		wire 		i_sys_clk,
    3                                                    input 		wire 		i_sys_rst,
    4                                                    input 		wire 		i_txrx_en,
    5                                                	input       wire        i_txrx_data_valid,
    6                                                	input 		wire 		i_txrx_last_byte,
    7                                                    input 		wire [7:0]  i_txrx_data,
    8                                                    output 		reg  [4:0]  o_txrx_crc_value,
    9                                                    output 		reg 		o_txrx_crc_valid
    10                                               );
    11                                               
    12                                               
    13                                               parameter POLY = 6'b100101;
    14                                               parameter POLY_WIDTH = 6;
    15                                               parameter seed = 6'b011111;
    16                                               
    17                                               
    18                                               
    19                                               reg [POLY_WIDTH-2:0] shift_reg ;
    20                                               reg [3:0] counter;
    21                                               reg feedback;
    22                                               reg [7:0] temp;
    23                                                
    24                                               
    25                                               
    26                                               
    27              1                     549456     always @(posedge i_sys_clk or negedge i_sys_rst) begin
    28                                                   if (!i_sys_rst) begin
    29                                                       
    30              1                          1             shift_reg <= seed;
    31              1                          1             counter   <= 'd0;
    32              1                          1             o_txrx_crc_valid <= 'd0;
    33              1                          1     		o_txrx_crc_value <= 'd0;
    34                                               		end 
    35                                               	
    36                                               	else	begin
    37                                               		 if (i_txrx_en)
    38                                               			begin
    39                                               			if (i_txrx_last_byte)
    40                                               				begin
    41              1                      18863     					counter <= 'd0;
    42              1                      18863     					o_txrx_crc_valid <= 'd1;
    43              1                      18863     					o_txrx_crc_value <= shift_reg [4:0];
    44              1                      18863     					shift_reg <= seed;
    45                                               					
    46                                               				end
    47                                               			else if (i_txrx_data_valid)
    48                                               				begin
    49              1                      47326     					temp <= i_txrx_data;
    50              1                      47326     					o_txrx_crc_valid <= 'd0;
    51              1                      47326     					counter <= 'd0;
    52                                               				end
    53                                               				
    54                                               			else 
    55                                               				begin 
    56                                               				if (counter == 'd8)
    57                                               					begin
    58                                               					//	counter <= 'd0;
    59              1                      47326     						o_txrx_crc_valid <= 'd0;
    60                                               					end
    61                                               				else 
    62                                               					begin 
    63              1                     378608     						shift_reg[4] <= shift_reg[3]  ;     
    64              1                     378608     						shift_reg[3] <= shift_reg[2] 			; 
    65              1                     378608     						shift_reg[2] <= shift_reg[1] ^ feedback ;
    66              1                     378608     						shift_reg[1] <= shift_reg[0] ;
    67              1                     378608     						shift_reg[0] <= feedback ;
    68              1                     378608     						counter <= counter + 'd1;
    69              1                     378608     						o_txrx_crc_valid <= 'd0;
    70                                               					end
    71                                               					
    72                                               				
    73                                               				end
    74                                               				
    75                                               			end
    76                                               			
    77                                               			
    78                                               		/*else
    79                                               				begin
    80                                               						counter <= 'd0;
    81                                               						o_txrx_crc_valid <= 'd0;
    82                                               						shift_reg <= POLY;
    83                                               				end*/
    84                                               				
    85                                               				
    86                                               				
    87                                               		
    88                                               		end
    89                                               		
    90                                               	end
    91                                               	
    92                                               	
    93                                               	
    94                                               
    95                                               
    96                                               
    97                                               
    98              1                     433727     always @(*) begin
    99                                                
    100                                              	 case (counter) 
    101             1                      55119     	'd0:	feedback = temp[7] ^ shift_reg[4] ;
    102             1                      47326     	'd1:	feedback = temp[6] ^ shift_reg[4] ;
    103             1                      47326     	'd2:	feedback = temp[5] ^ shift_reg[4] ;
    104             1                      47326     	'd3:	feedback = temp[4] ^ shift_reg[4] ;
    105             1                      47326     	'd4:	feedback = temp[3] ^ shift_reg[4] ;
    106             1                      47326     	'd5:	feedback = temp[2] ^ shift_reg[4] ;
    107             1                      47326     	'd6:	feedback = temp[1] ^ shift_reg[4] ;
    108             1                      47326     	'd7:	feedback = temp[0] ^ shift_reg[4] ;
    109                                              	
    110             1                      47326     	default : feedback = 'b0;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         74        74         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/u_crc --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                      counter[3-0]           1           1      100.00 
                                          feedback           1           1      100.00 
                                         i_sys_clk           1           1      100.00 
                                         i_sys_rst           1           1      100.00 
                                  i_txrx_data[0-7]           1           1      100.00 
                                 i_txrx_data_valid           1           1      100.00 
                                         i_txrx_en           1           1      100.00 
                                  i_txrx_last_byte           1           1      100.00 
                                  o_txrx_crc_valid           1           1      100.00 
                             o_txrx_crc_value[4-0]           1           1      100.00 
                                    shift_reg[4-0]           1           1      100.00 
                                         temp[7-0]           1           1      100.00 

Total Node Count     =         37 
Toggled Node Count   =         37 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (74 of 74 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/crc_en_tx_rx_mux
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/crc_en_tx_rx_mux --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                     117182       always @ ( * )
    31                                                 begin
    32              1                     117182         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         8         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/crc_en_tx_rx_mux --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          4 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (8 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/crc_data_tx_rx_valid
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/crc_data_tx_rx_valid --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                     121981       always @ ( * )
    31                                                 begin
    32              1                     121981         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         6         2    75.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/crc_data_tx_rx_valid --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                        data_in[0]           1           1      100.00 
                                        data_in[1]           0           0        0.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          3 
Untoggled Node Count =          1 

Toggle Coverage      =      75.00% (6 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/crc_tx_rx_data_in
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/crc_tx_rx_data_in --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      66867       always @ ( * )
    31                                                 begin
    32              1                      66867         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         50        34        16    68.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/crc_tx_rx_data_in --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-7]           1           1      100.00 
                                     data_in[8-15]           0           0        0.00 
                                     data_out[7-0]           1           1      100.00 

Total Node Count     =         25 
Toggled Node Count   =         17 
Untoggled Node Count =          8 

Toggle Coverage      =      68.00% (34 of 50 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/crc_last_byte_tx_rx
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/crc_last_byte_tx_rx --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      83519       always @ ( * )
    31                                                 begin
    32              1                      83519         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         8         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/crc_last_byte_tx_rx --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           1           1      100.00 
                                      data_in[0-1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          4 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (8 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT/crc_tx_rx_nt_CCC_sel
=== Design Unit: work.gen_mux
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB/DUT/crc_tx_rx_nt_CCC_sel --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File mux.v
    23                                               module gen_mux
    24                                               #(parameter BUS_WIDTH = 4,
    25                                                 parameter SEL = 5 )
    26                                               ( input wire [(BUS_WIDTH * (2**SEL) )-1:0] data_in,
    27                                                 input wire [SEL-1:0] ctrl_sel,
    28                                                 output reg [BUS_WIDTH-1:0] data_out );
    29                                               
    30              1                      27329       always @ ( * )
    31                                                 begin
    32              1                      27329         data_out = data_in[ctrl_sel*BUS_WIDTH +: BUS_WIDTH];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          8         4         4    50.00%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT/crc_tx_rx_nt_CCC_sel --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       ctrl_sel[0]           0           0        0.00 
                                        data_in[0]           0           0        0.00 
                                        data_in[1]           1           1      100.00 
                                       data_out[0]           1           1      100.00 

Total Node Count     =          4 
Toggled Node Count   =          2 
Untoggled Node Count =          2 

Toggle Coverage      =      50.00% (4 of 8 bins)

=================================================================================
=== Instance: /I3C_TOP_TB/DUT
=== Design Unit: work.I3C_TOP
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                       1738       540      1198    31.07%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB/DUT --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                bit_cnt_en_mux_out           1           1      100.00 
                             bit_cnt_en_mux_sel[0]           1           1      100.00 
                             bit_cnt_en_mux_sel[1]           0           0        0.00 
                             bit_cnt_en_mux_sel[2]           1           1      100.00 
                             bit_rx_cnt_en_mux_out           0           0        0.00 
                        bit_rx_cnt_en_mux_sel[0-2]           0           0        0.00 
                                    bitcnt_err_rst           0           0        0.00 
                               bitcnt_frcnt_toggle           1           1      100.00 
                                        bitcnt_rst           0           0        0.00 
                       bits_cnt_regf_rx_tx_mux_out           0           0        0.00 
                      bits_cnt_regf_rx_tx_sel[0-2]           0           0        0.00 
                                      ccc_CMD[0-4]           1           1      100.00 
                                      ccc_CMD[5-6]           0           0        0.00 
                                        ccc_CMD[7]           1           1      100.00 
                                           ccc_DBP           0           0        0.00 
                                    ccc_bit_cnt_en           1           1      100.00 
                                   ccc_engine_done           1           1      100.00 
                                    ccc_frm_cnt_en           1           1      100.00 
                                ccc_regf_addr[0-1]           1           1      100.00 
                                  ccc_regf_addr[2]           0           0        0.00 
                                  ccc_regf_addr[3]           1           1      100.00 
                               ccc_regf_addr[4-11]           0           0        0.00 
                                    ccc_regf_rd_en           1           1      100.00 
                                    ccc_regf_wr_en           0           0        0.00 
                                         ccc_rx_en           1           1      100.00 
                                  ccc_rx_mode[0-2]           0           0        0.00 
                         ccc_scl_stall_cycles[0-3]           1           1      100.00 
                           ccc_scl_stall_cycles[4]           0           0        0.00 
                                  ccc_scl_stall_en           1           1      100.00 
                                         ccc_tx_en           1           1      100.00 
                                  ccc_tx_mode[0-3]           1           1      100.00 
                          ccc_tx_special_data[0-6]           1           1      100.00 
                            ccc_tx_special_data[7]           0           0        0.00 
                                 cccnt_CMD_ATTR[0]           0           1       50.00 
                               cccnt_CMD_ATTR[1-2]           0           0        0.00 
                              cccnt_DEV_INDEX[0-4]           1           1      100.00 
                                         cccnt_RnW           0           0        0.00 
                                         cccnt_SRE           0           0        0.00 
                                         cccnt_TOC           1           1      100.00 
                                        cccnt_WROC           1           1      100.00 
                cccnt_tx_special_data_mux_out[0-6]           1           1      100.00 
                  cccnt_tx_special_data_mux_out[7]           0           0        0.00 
                     cccnt_tx_special_data_mux_sel           0           0        0.00 
                                           chr_set           0           0        0.00 
                                cnt_bit_count[0-4]           1           1      100.00 
                                  cnt_bit_count[5]           0           0        0.00 
                             crc_data_mux_out[0-7]           1           1      100.00 
                                    crc_data_valid           0           0        0.00 
                            crc_data_valid_mux_out           1           1      100.00 
                                    crc_en_mux_out           1           1      100.00 
                                     crc_last_byte           0           0        0.00 
                             crc_last_byte_mux_out           1           1      100.00 
                              crc_rx_tx_mux_sel_NT           0           0        0.00 
                             crc_rx_tx_mux_sel_ccc           1           1      100.00 
                      crc_rx_tx_mux_sel_ccc_nt_out           1           1      100.00 
                      crc_rx_tx_mux_sel_ccc_nt_sel           0           0        0.00 
                                         crc_valid           1           1      100.00 
                                    crc_value[0-4]           1           1      100.00 
                                   crh_CRCAP2[0-7]           0           0        0.00 
                                   crh_CRHDLY[0-7]           0           0        0.00 
                                    crh_PRECR[0-7]           0           0        0.00 
                                  crh_cfg_reg[0-7]           0           0        0.00 
                                        crh_cnt_en           0           0        0.00 
                                          crh_done           0           0        0.00 
                                            crh_en           0           0        0.00 
                                   crh_entasx[0-1]           0           0        0.00 
                                       crh_fcnt_en           0           0        0.00 
                           crh_getstatus_data[0-7]           0           0        0.00 
                              crh_ncr_take_control           0           0        0.00 
                                       crh_ncr_win           0           0        0.00 
                                         crh_pp_od           1           0       50.00 
                                  crh_regf_addr[0]           0           0        0.00 
                                crh_regf_addr[1-3]           0           1       50.00 
                                  crh_regf_addr[4]           0           0        0.00 
                                  crh_regf_addr[5]           0           1       50.00 
                               crh_regf_addr[6-11]           0           0        0.00 
                                    crh_regf_rd_en           0           1       50.00 
                                    crh_regf_wr_en           0           0        0.00 
                                     crh_rx_cnt_en           0           0        0.00 
                                         crh_rx_en           0           0        0.00 
                                  crh_rx_mode[0-2]           0           0        0.00 
                               crh_rx_pp_mode_done           0           0        0.00 
                                      crh_scl_idle           0           0        0.00 
                                       crh_sda_low           0           0        0.00 
                                     crh_send_stop           0           0        0.00 
                                crh_start_detected           0           0        0.00 
                                  crh_stop_is_sent           0           0        0.00 
                               crh_tgts_count[0-7]           0           0        0.00 
                                     crh_timer_set           0           0        0.00 
                                         crh_tx_en           0           0        0.00 
                                  crh_tx_mode[0-2]           0           0        0.00 
                                   daa_bits_cnt_en           0           0        0.00 
                                          daa_done           0           0        0.00 
                                            daa_en           0           0        0.00 
                                         daa_error           0           0        0.00 
                                       daa_fcnt_en           0           0        0.00 
                             daa_fcnt_no_frms[0-7]           0           0        0.00 
                                         daa_pp_od           0           0        0.00 
                               daa_regf_addr[0-11]           0           0        0.00 
                             daa_regf_data_wr[0-7]           0           0        0.00 
                                    daa_regf_rd_en           0           0        0.00 
                             daa_regf_wr_data[0-7]           0           0        0.00 
                                    daa_regf_wr_en           0           0        0.00 
                                     daa_rx_cnt_en           0           0        0.00 
                                         daa_rx_en           0           0        0.00 
                                  daa_rx_mode[0-2]           0           0        0.00 
                             daa_stall_cycles[0-3]           0           0        0.00 
                                    daa_stall_flag           0           0        0.00 
                                         daa_tx_en           0           0        0.00 
                                  daa_tx_mode[0-2]           0           0        0.00 
                                    ddr_bit_cnt_en           1           0       50.00 
                                   ddr_engine_done           0           0        0.00 
                                    ddr_frm_cnt_en           1           0       50.00 
                               ddr_regf_addr[0-11]           0           0        0.00 
                                    ddr_regf_rd_en           0           0        0.00 
                                    ddr_regf_wr_en           0           0        0.00 
                                         ddr_rx_en           0           0        0.00 
                                  ddr_rx_mode[0-2]           0           0        0.00 
                         ddr_scl_stall_cycles[0-4]           0           0        0.00 
                                  ddr_scl_stall_en           0           0        0.00 
                                         ddr_tx_en           0           0        0.00 
                                  ddr_tx_mode[0-3]           0           0        0.00 
                          ddr_tx_special_data[0-7]           0           0        0.00 
                                 ddrccc_error_done           0           0        0.00 
                                      deser_s_data           1           1      100.00 
                                         engine_CP           0           1       50.00 
                                    engine_MODE[0]           0           0        0.00 
                                  engine_MODE[1-2]           0           1       50.00 
                                   engine_TID[0-3]           1           1      100.00 
                                 engine_ccc_enable           1           1      100.00 
                   engine_configuration_addr[0-11]           0           0        0.00 
                                 engine_ddr_enable           0           0        0.00 
                                        engine_odd           1           1      100.00 
                                 enthdr_bit_cnt_en           1           1      100.00 
                                       enthdr_done           1           1      100.00 
                                         enthdr_en           1           1      100.00 
                                      enthdr_pp_od           0           0        0.00 
                               enthdr_regf_addr[0]           0           0        0.00 
                             enthdr_regf_addr[1-5]           1           1      100.00 
                            enthdr_regf_addr[6-11]           0           0        0.00 
                                 enthdr_regf_rd_en           1           1      100.00 
                                      enthdr_rx_en           1           1      100.00 
                                 enthdr_rx_mode[0]           0           0        0.00 
                                 enthdr_rx_mode[1]           1           1      100.00 
                                 enthdr_rx_mode[2]           0           0        0.00 
                                      enthdr_tx_en           1           1      100.00 
                               enthdr_tx_mode[0-1]           1           1      100.00 
                                 enthdr_tx_mode[2]           0           0        0.00 
                                   fcnt_en_mux_out           0           0        0.00 
                              fcnt_en_mux_sel[0-2]           0           0        0.00 
                                   fcnt_no_frms[0]           0           0        0.00 
                                   fcnt_no_frms[1]           0           1       50.00 
                                 fcnt_no_frms[2-7]           0           0        0.00 
                         fcnt_no_frms_mux_out[0-7]           0           0        0.00 
                             fcnt_no_frms_sel[0-2]           0           0        0.00 
                                   frmcnt_DTT[0-1]           1           1      100.00 
                                     frmcnt_DTT[2]           0           0        0.00 
                         frmcnt_Direct_Broadcast_n           1           1      100.00 
                              frmcnt_data_len[0-1]           1           1      100.00 
                             frmcnt_data_len[2-15]           0           0        0.00 
                             frmcnt_last_frame_hdr           1           1      100.00 
                            hdr_bit_cnt_en_mux_out           1           1      100.00 
                                hdr_bit_cnt_en_sel           0           0        0.00 
                            hdr_frm_cnt_en_mux_out           1           1      100.00 
                                hdr_frm_cnt_en_sel           0           0        0.00 
                                     hdr_rx_en_sel           0           0        0.00 
                                   hdr_rx_mode_sel           0           0        0.00 
                                 hdr_scl_pp_od_sel           0           0        0.00 
                 hdr_scl_stall_cycles_mux_out[0-3]           1           1      100.00 
                   hdr_scl_stall_cycles_mux_out[4]           0           0        0.00 
                          hdr_scl_stall_cycles_sel           0           0        0.00 
                              hdr_scl_stall_en_sel           0           0        0.00 
                        hdr_scl_stall_flag_mux_out           1           1      100.00 
                             hdr_sdahand_pp_od_sel           0           0        0.00 
                                     hdr_tx_en_sel           0           0        0.00 
                                   hdr_tx_mode_sel           0           0        0.00 
                                      hdrengine_en           1           1      100.00 
                                    hdrengine_exit           1           1      100.00 
                                        hj_acc_rej           0           0        0.00 
                                     hj_bit_cnt_en           0           0        0.00 
                                            hj_ccc           0           0        0.00 
                                   hj_cfg_reg[0-2]           0           0        0.00 
                                        hj_cr_pass           0           0        0.00 
                                         hj_crh_en           0           0        0.00 
                                         hj_daa_en           0           0        0.00 
                                        hj_daa_req           0           0        0.00 
                                           hj_done           0           0        0.00 
                                             hj_en           0           0        0.00 
                                          hj_pp_od           0           0        0.00 
                                   hj_regf_addr[0]           0           0        0.00 
                                 hj_regf_addr[1-3]           0           1       50.00 
                                   hj_regf_addr[4]           0           0        0.00 
                                   hj_regf_addr[5]           0           1       50.00 
                                hj_regf_addr[6-11]           0           0        0.00 
                                     hj_regf_rd_en           0           1       50.00 
                                          hj_rx_en           0           0        0.00 
                                   hj_rx_mode[0-2]           0           0        0.00 
                                    hj_support_reg           0           0        0.00 
                                          hj_tx_en           0           0        0.00 
                                   hj_tx_mode[0-2]           0           0        0.00 
                                    i2c_bit_cnt_en           0           0        0.00 
                                 i2c_bit_rx_cnt_en           0           0        0.00 
                                          i2c_done           0           0        0.00 
                                            i2c_en           0           0        0.00 
                                       i2c_fcnt_en           0           0        0.00 
                                         i2c_pp_od           0           0        0.00 
                               i2c_regf_addr[0-11]           0           0        0.00 
                                    i2c_regf_rd_en           0           0        0.00 
                                         i2c_rx_en           0           1       50.00 
                                  i2c_rx_mode[0-2]           0           0        0.00 
                                      i2c_rx_valid           0           0        0.00 
                                         i2c_tx_en           0           0        0.00 
                                  i2c_tx_mode[0-2]           0           0        0.00 
                                    i3c_bit_cnt_en           0           0        0.00 
                                     i3c_ibi_en_tb           0           0        0.00 
                                     i3c_idle_flag           0           0        0.00 
                                         i3c_pp_od           1           1      100.00 
                                    i3c_regf_rd_en           0           0        0.00 
                                      i3c_rx_valid           0           0        0.00 
                                      i3c_scl_idle           1           1      100.00 
                                         i3c_tx_en           1           1      100.00 
                                    i3c_tx_mode[0]           0           0        0.00 
                                    i3c_tx_mode[1]           1           1      100.00 
                                    i3c_tx_mode[2]           0           0        0.00 
                                   i_ccc_en_dis_hj           0           0        0.00 
                                   i_controller_en           0           1       50.00 
                             i_data_config_mux_sel           1           1      100.00 
                                     i_i3c_i2c_sel           0           0        0.00 
                                i_regf_config[0-7]           1           1      100.00 
                               i_regf_rd_en_config           0           0        0.00 
                     i_regf_wr_address_config[0-2]           1           1      100.00 
                    i_regf_wr_address_config[3-11]           0           0        0.00 
                               i_regf_wr_en_config           0           0        0.00 
                                         i_sdr_clk           1           1      100.00 
                                       i_sdr_rst_n           1           1      100.00 
                                        ibi_cnt_en           0           0        0.00 
                                          ibi_done           0           0        0.00 
                                            ibi_en           0           0        0.00 
                                    ibi_payload_en           0           0        0.00 
                         ibi_payload_size_reg[0-1]           0           1       50.00 
                         ibi_payload_size_reg[2-7]           0           0        0.00 
                                         ibi_pp_od           0           0        0.00 
                            ibi_regf_address[0-11]           0           0        0.00 
                                    ibi_regf_rd_en           0           0        0.00 
                                    ibi_regf_wr_en           0           0        0.00 
                                         ibi_rx_en           0           0        0.00 
                                  ibi_rx_mode[0-2]           0           0        0.00 
                                     ibi_ser_rx_tx           0           0        0.00 
                              ibi_tgt_address[0-1]           0           1       50.00 
                              ibi_tgt_address[2-3]           0           0        0.00 
                                ibi_tgt_address[4]           0           1       50.00 
                                ibi_tgt_address[5]           0           0        0.00 
                                ibi_tgt_address[6]           0           1       50.00 
                                ibi_tgt_address[7]           0           0        0.00 
                                         ibi_tx_en           0           0        0.00 
                                  ibi_tx_mode[0-2]           0           0        0.00 
                                       o_ctrl_done           0           0        0.00 
                             o_int_regf_Dummy_conf           0           0        0.00 
                         o_regf_ERR_STATUS_tb[0-3]           0           0        0.00 
                                      o_regf_abort           0           0        0.00 
                            o_regf_error_type[0-3]           0           0        0.00 
                                   o_scl_stall_hdr           0           0        0.00 
                                    o_sdr_rx_valid           1           1      100.00 
                                    regf_data_mode           1           1      100.00 
                                 regf_data_rd[0-7]           1           1      100.00 
                                 regf_data_wr[0-7]           0           0        0.00 
                                   regf_ibi_cfg[0]           0           1       50.00 
                                 regf_ibi_cfg[1-7]           0           0        0.00 
                  regf_rd_address_hdr_mux_out[0-1]           1           1      100.00 
                    regf_rd_address_hdr_mux_out[2]           0           0        0.00 
                    regf_rd_address_hdr_mux_out[3]           1           1      100.00 
                 regf_rd_address_hdr_mux_out[4-11]           0           0        0.00 
                       regf_rd_address_hdr_mux_sel           0           0        0.00 
                              regf_rd_address_mode           1           1      100.00 
                 regf_rd_address_mode_mux_out[0-9]           1           1      100.00 
               regf_rd_address_mode_mux_out[10-11]           0           0        0.00 
                      regf_rd_address_mux_out[0-9]           1           1      100.00 
                    regf_rd_address_mux_out[10-11]           0           0        0.00 
                      regf_rd_address_mux_sel[0-2]           0           0        0.00 
                    regf_rd_address_sdr_mux_out[0]           0           0        0.00 
                  regf_rd_address_sdr_mux_out[1-5]           1           1      100.00 
                 regf_rd_address_sdr_mux_out[6-11]           0           0        0.00 
                            regf_rd_en_hdr_mux_out           1           1      100.00 
                            regf_rd_en_hdr_mux_sel           0           0        0.00 
                                   regf_rd_en_mode           1           1      100.00 
                           regf_rd_en_mode_mux_out           1           1      100.00 
                                regf_rd_en_mux_out           1           1      100.00 
                           regf_rd_en_mux_sel[0-2]           0           0        0.00 
                            regf_rd_en_sdr_mux_out           1           1      100.00 
                    regf_wr_data_mode_mux_out[0-7]           0           0        0.00 
                         regf_wr_data_mux_out[0-7]           1           1      100.00 
                              regf_wr_data_mux_sel           0           0        0.00 
                     regf_wr_data_sdr_mux_out[0-7]           0           0        0.00 
                                        regf_wr_en           0           0        0.00 
                            regf_wr_en_hdr_mux_out           0           0        0.00 
                            regf_wr_en_hdr_mux_sel           0           0        0.00 
                                   regf_wr_en_mode           1           1      100.00 
                           regf_wr_en_mode_mux_out           0           0        0.00 
                                regf_wr_en_mux_out           1           1      100.00 
                           regf_wr_en_mux_sel[0-2]           0           0        0.00 
                            regf_wr_en_sdr_mux_out           0           0        0.00 
                          regfcrc_rx_data_out[0-7]           0           0        0.00 
                               rx_arbitration_lost           0           0        0.00 
                                 rx_crc_data_valid           0           0        0.00 
                                         rx_crc_en           1           1      100.00 
                                  rx_crc_last_byte           1           1      100.00 
                                 rx_en_hdr_mux_out           1           1      100.00 
                                     rx_en_mux_out           1           1      100.00 
                                rx_en_mux_sel[0-2]           0           0        0.00 
                                          rx_error           0           0        0.00 
                                  rx_hdr_mode_done           1           1      100.00 
                                      rx_mode_done           1           1      100.00 
                          rx_mode_hdr_mux_out[0-2]           0           0        0.00 
                                rx_mode_mux_out[0]           0           0        0.00 
                                rx_mode_mux_out[1]           1           1      100.00 
                                rx_mode_mux_out[2]           0           0        0.00 
                              rx_mode_mux_sel[0-2]           0           0        0.00 
                                            rx_pre           1           1      100.00 
                                               scl           1           1      100.00 
                                     scl_ccc_pp_od           0           0        0.00 
                                     scl_ddr_pp_od           0           0        0.00 
                                     scl_gen_stall           1           1      100.00 
                               scl_idle_mux_sel[0]           1           1      100.00 
                               scl_idle_mux_sel[1]           0           0        0.00 
                               scl_idle_mux_sel[2]           1           1      100.00 
                                      scl_neg_edge           1           1      100.00 
                          scl_neg_edge_not_stalled           1           1      100.00 
                                   scl_not_stalled           1           1      100.00 
                                      scl_pos_edge           1           1      100.00 
                          scl_pos_edge_not_stalled           1           1      100.00 
                             scl_pp_od_hdr_mux_out           0           0        0.00 
                                    scl_pp_od_mode           1           1      100.00 
                                 scl_pp_od_mux_out           1           1      100.00 
                              scl_pp_od_mux_sel[0]           1           1      100.00 
                              scl_pp_od_mux_sel[1]           0           0        0.00 
                              scl_pp_od_mux_sel[2]           1           1      100.00 
                             scl_pp_od_sdr_mux_out           1           1      100.00 
                             scl_stall_cycles[0-3]           0           0        0.00 
                     scl_stall_cycles_mux_out[0-3]           1           1      100.00 
                       scl_stall_cycles_mux_out[4]           0           0        0.00 
                          scl_stall_cycles_mux_sel           1           1      100.00 
                                    scl_stall_done           1           1      100.00 
                                scl_stall_done_hdr           0           0        0.00 
                            scl_stall_flag_mux_out           1           1      100.00 
                            scl_stall_flag_mux_sel           1           1      100.00 
                                               sda           1           1      100.00 
                                           sda_sel           1           1      100.00 
                                    sdr_bit_cnt_en           0           0        0.00 
                                 sdr_bit_rx_cnt_en           0           0        0.00 
                            sdr_cnt_bit_count[0-2]           1           1      100.00 
                                sdr_ctrl_addr_done           0           0        0.00 
                                 sdr_ctrl_cnt_done           1           1      100.00 
                                 sdr_ctrl_ibi_done           0           0        0.00 
                           sdr_ctrl_ibi_payload_en           0           0        0.00 
                               sdr_ctrl_last_frame           1           0       50.00 
                                 sdr_ctrl_scl_idle           0           0        0.00 
                                sdr_ctrl_ser_valid           0           0        0.00 
                                          sdr_done           0           0        0.00 
                                            sdr_en           0           0        0.00 
                                       sdr_fcnt_en           0           0        0.00 
                              sdr_ibi_payload_done           0           0        0.00 
                                         sdr_pp_od           0           0        0.00 
                               sdr_regf_addr[0-11]           0           0        0.00 
                                    sdr_regf_rd_en           0           0        0.00 
                                         sdr_rx_en           0           0        0.00 
                                  sdr_rx_mode[0-2]           0           0        0.00 
                                   sdr_rx_rd_abort           0           0        0.00 
                                      sdr_rx_valid           0           0        0.00 
                              sdr_scl_idle_mux_out           1           1      100.00 
                 sdr_scl_stall_cycles_mux_out[0-4]           0           0        0.00 
                     sdr_scl_stall_cycles_sel[0-2]           0           0        0.00 
                        sdr_scl_stall_flag_mux_out           0           0        0.00 
                       sdr_scl_stall_flag_sel[0-2]           0           0        0.00 
                                         sdr_tx_en           0           0        0.00 
                                 sdr_tx_en_mux_out           1           1      100.00 
                              sdr_tx_en_mux_sel[0]           1           1      100.00 
                              sdr_tx_en_mux_sel[1]           0           0        0.00 
                              sdr_tx_en_mux_sel[2]           1           1      100.00 
                                  sdr_tx_mode[0-2]           0           0        0.00 
                                      ser_hdr_data           1           1      100.00 
                                     ser_mode_done           1           1      100.00 
                                      ser_nack_ack           1           1      100.00 
                                  ser_pp_mode_done           1           1      100.00 
                                         ser_rx_tx           0           0        0.00 
                      ser_rx_tx_bits_count_mux_out           0           0        0.00 
                            ser_rx_tx_mux_sel[0-2]           0           0        0.00 
                                        ser_s_data           1           1      100.00 
                                ser_s_data_mux_out           1           1      100.00 
                          ser_to_parity_transition           1           1      100.00 
                                        stall_flag           0           0        0.00 
                                     start_pattern           1           1      100.00 
                                      stop_pattern           1           1      100.00 
                                     sys_clk_50mhz           1           1      100.00 
                                       target_nack           0           0        0.00 
                                    timer_bus_aval           0           0        0.00 
                             timer_bus_free_mix_fm           0           0        0.00 
                           timer_bus_free_mix_fm_p           0           0        0.00 
                               timer_bus_free_pure           0           0        0.00 
                                    timer_bus_idle           0           0        0.00 
                                         timer_cas           1           1      100.00 
                                      timer_crhpol           0           0        0.00 
                                timer_newcrlck_i2c           0           0        0.00 
                                timer_newcrlck_i3c           0           0        0.00 
                                 tx_crc_data_valid           1           1      100.00 
                                         tx_crc_en           1           1      100.00 
                                  tx_crc_last_byte           1           1      100.00 
                         tx_crc_parallel_data[0-7]           1           1      100.00 
                                       tx_daa_done           1           1      100.00 
                                 tx_en_hdr_mux_out           1           1      100.00 
                                     tx_en_mux_out           1           1      100.00 
                                         tx_en_sel           1           1      100.00 
                                  tx_hdr_mode_done           1           1      100.00 
                          tx_mode_hdr_mux_out[0-3]           1           1      100.00 
                              tx_mode_mux_out[0-1]           1           1      100.00 
                                tx_mode_mux_out[2]           0           0        0.00 
                                tx_mode_mux_sel[0]           1           1      100.00 
                                tx_mode_mux_sel[1]           0           0        0.00 
                                tx_mode_mux_sel[2]           1           1      100.00 

Total Node Count     =        869 
Toggled Node Count   =        256 
Untoggled Node Count =        613 

Toggle Coverage      =      31.07% (540 of 1738 bins)

=================================================================================
=== Instance: /I3C_TOP_TB
=== Design Unit: work.I3C_TOP_TB
=================================================================================

Assertion Coverage:
    Assertions                      10        10         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/I3C_TOP_TB/assert__Last_Restart_pattern
                     I3C_TOP_TB.sv(537)                 0          1
/I3C_TOP_TB/assert__Middle_Restart_pattern
                     I3C_TOP_TB.sv(533)                 0          1
/I3C_TOP_TB/assert__EXIT_and_stop_pattern
                     I3C_TOP_TB.sv(529)                 0          1
/I3C_TOP_TB/#ublk#76587794#101/immed__102
                     I3C_TOP_TB.sv(102)                 0          1
/I3C_TOP_TB/check_cmd_word/#ublk#76587794#206/#ublk#76587794#232/immed__233
                     I3C_TOP_TB.sv(233)                 0          1
/I3C_TOP_TB/check_cmd_word/#ublk#76587794#206/#ublk#76587794#236/immed__237
                     I3C_TOP_TB.sv(237)                 0          1
/I3C_TOP_TB/check_CCC_value_data_word/#ublk#76587794#247/#ublk#76587794#270/immed__271
                     I3C_TOP_TB.sv(271)                 0          1
/I3C_TOP_TB/check_repeated_data_word/#ublk#76587794#281/#ublk#76587794#313/immed__315
                     I3C_TOP_TB.sv(315)                 0          1
/I3C_TOP_TB/check_output/#ublk#76587794#404/immed__438
                     I3C_TOP_TB.sv(438)                 0          1
/I3C_TOP_TB/check_output/#ublk#76587794#404/immed__426
                     I3C_TOP_TB.sv(426)                 0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        29        27         2    93.10%

================================Branch Details================================

Branch Coverage for instance /I3C_TOP_TB

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File I3C_TOP_TB.sv
------------------------------------IF Branch------------------------------------
    90                                     20001     Count coming in to IF
    90              1                      10000         	if(DUT.frame_counter_hdr.o_cccnt_last_frame == 'b1) begin 
                                           10001     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    129                                    10000     Count coming in to IF
    129             1                          1     			if (i == 0) begin 
    137             1                       4860     			else if (TOC_old) begin
    146             1                       5139     		  	else if (!TOC_old) begin 
                                         ***0***     All False Count
Branch totals: 3 hits of 4 branches = 75.00%

------------------------------------IF Branch------------------------------------
    165                                   923135     Count coming in to IF
    165             1                      10000     			if (DUT.CCC_Handler.current_state == PRE_FIRST_DATA_TWO) begin 
    171             1                       3663     			else if (DUT.CCC_Handler.current_state == PRE_DATA_TWO) begin 
                                          909472     All False Count
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    184                                   165762     Count coming in to IF
    184             1                      10000     		if (DUT.CCC_Handler.i_engine_en && DUT.CCC_Handler.current_state == RNW) begin 
                                          155762     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    191                                   189055     Count coming in to IF
    191             1                       5569     		if (DUT.CCC_Handler.i_engine_en && DUT.CCC_Handler.current_state == CCC_BYTE) begin 
                                          183486     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    198                                   181480     Count coming in to IF
    198             1                       8094     		if (DUT.cccnt_RnW == 0 && (DUT.CCC_Handler.i_engine_en && DUT.CCC_Handler.current_state == FIRST_DATA_BYTE) || (DUT.DDR_NT.i_engine_en && DUT.DDR_NT.current_state == first_data_byte)) begin 
                                          173386     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    231                                   180000     Count coming in to IF
    231             1                      10000     				if (o == 'd17) begin 
                                          170000     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    232                                    10000     Count coming in to IF
    232             1                       5569     					if (DUT.CCC_Handler.first_time || !DUT.CCC_Handler.Direct_Broadcast_n_del) begin  // this is a 7E cmd word
    236             1                       4431     					else begin 	// this is an address word  
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    270                                   100242     Count coming in to IF
    270             1                       5569     				if (o == 'd17) begin 
                                           94673     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    302                                   145692     Count coming in to IF
    302             1                       8094     				if (o == 'd3) begin                            // any arbitrary value btn 0 -> 7
                                          137598     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    306                                   145692     Count coming in to IF
    306             1                       8094     				if (o == 'd10) begin 	 	 	 	 	 	   // any arbitrary value btn 8 -> 15
                                          137598     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    313                                   145692     Count coming in to IF
    313             1                       8094     				if (o == 'd17) begin 
                                          137598     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    449                                     4861     Count coming in to IF
    449             1                       4861             if(!scl_tb) begin
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      19        15         4    78.94%

================================Condition Details================================

Condition Coverage for instance /I3C_TOP_TB --

  File I3C_TOP_TB.sv
----------------Focused Condition View-------------------
Line       129 Item    1  (i == 0)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    (i == 0)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (i == 0)_0            -                             
  Row   2:          1  (i == 0)_1            -                             

----------------Focused Condition View-------------------
Line       165 Item    1  (DUT.CCC_Handler.current_state == 7)
Condition totals: 1 of 1 input term covered = 100.00%

                            Input Term   Covered  Reason for no coverage   Hint
                           -----------  --------  -----------------------  --------------
  (DUT.CCC_Handler.current_state == 7)         Y

     Rows:       Hits  FEC Target                              Non-masking condition(s)      
 ---------  ---------  --------------------                    -------------------------     
  Row   1:          1  (DUT.CCC_Handler.current_state == 7)_0  -                             
  Row   2:          1  (DUT.CCC_Handler.current_state == 7)_1  -                             

----------------Focused Condition View-------------------
Line       171 Item    1  (DUT.CCC_Handler.current_state == 13)
Condition totals: 1 of 1 input term covered = 100.00%

                             Input Term   Covered  Reason for no coverage   Hint
                            -----------  --------  -----------------------  --------------
  (DUT.CCC_Handler.current_state == 13)         Y

     Rows:       Hits  FEC Target                               Non-masking condition(s)      
 ---------  ---------  --------------------                     -------------------------     
  Row   1:          1  (DUT.CCC_Handler.current_state == 13)_0  -                             
  Row   2:          1  (DUT.CCC_Handler.current_state == 13)_1  -                             

----------------Focused Condition View-------------------
Line       184 Item    1  (DUT.CCC_Handler.i_engine_en && (DUT.CCC_Handler.current_state == 2))
Condition totals: 2 of 2 input terms covered = 100.00%

                            Input Term   Covered  Reason for no coverage   Hint
                           -----------  --------  -----------------------  --------------
           DUT.CCC_Handler.i_engine_en         Y
  (DUT.CCC_Handler.current_state == 2)         Y

     Rows:       Hits  FEC Target                              Non-masking condition(s)      
 ---------  ---------  --------------------                    -------------------------     
  Row   1:          1  DUT.CCC_Handler.i_engine_en_0           -                             
  Row   2:          1  DUT.CCC_Handler.i_engine_en_1           (DUT.CCC_Handler.current_state == 2)
  Row   3:          1  (DUT.CCC_Handler.current_state == 2)_0  DUT.CCC_Handler.i_engine_en   
  Row   4:          1  (DUT.CCC_Handler.current_state == 2)_1  DUT.CCC_Handler.i_engine_en   

----------------Focused Condition View-------------------
Line       191 Item    1  (DUT.CCC_Handler.i_engine_en && (DUT.CCC_Handler.current_state == 8))
Condition totals: 2 of 2 input terms covered = 100.00%

                            Input Term   Covered  Reason for no coverage   Hint
                           -----------  --------  -----------------------  --------------
           DUT.CCC_Handler.i_engine_en         Y
  (DUT.CCC_Handler.current_state == 8)         Y

     Rows:       Hits  FEC Target                              Non-masking condition(s)      
 ---------  ---------  --------------------                    -------------------------     
  Row   1:          1  DUT.CCC_Handler.i_engine_en_0           -                             
  Row   2:          1  DUT.CCC_Handler.i_engine_en_1           (DUT.CCC_Handler.current_state == 8)
  Row   3:          1  (DUT.CCC_Handler.current_state == 8)_0  DUT.CCC_Handler.i_engine_en   
  Row   4:          1  (DUT.CCC_Handler.current_state == 8)_1  DUT.CCC_Handler.i_engine_en   

----------------Focused Condition View-------------------
Line       198 Item    1  (((~DUT.cccnt_RnW && DUT.CCC_Handler.i_engine_en) && (DUT.CCC_Handler.current_state == 14)) || (DUT.DDR_NT.i_engine_en && (DUT.DDR_NT.current_state == 7)))
Condition totals: 2 of 5 input terms covered = 40.00%

                             Input Term   Covered  Reason for no coverage   Hint
                            -----------  --------  -----------------------  --------------
                          DUT.cccnt_RnW         N  '_1' not hit             Hit '_1'
            DUT.CCC_Handler.i_engine_en         Y
  (DUT.CCC_Handler.current_state == 14)         Y
                 DUT.DDR_NT.i_engine_en         N  '_1' not hit             Hit '_1'
        (DUT.DDR_NT.current_state == 7)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                               Non-masking condition(s)      
 ---------  ---------  --------------------                     -------------------------     
  Row   1:          1  DUT.cccnt_RnW_0                          ((DUT.CCC_Handler.current_state == 14) && DUT.CCC_Handler.i_engine_en)
  Row   2:    ***0***  DUT.cccnt_RnW_1                          ~(DUT.DDR_NT.i_engine_en && (DUT.DDR_NT.current_state == 7))
  Row   3:          1  DUT.CCC_Handler.i_engine_en_0            (~(DUT.DDR_NT.i_engine_en && (DUT.DDR_NT.current_state == 7)) && ~DUT.cccnt_RnW)
  Row   4:          1  DUT.CCC_Handler.i_engine_en_1            ((DUT.CCC_Handler.current_state == 14) && ~DUT.cccnt_RnW)
  Row   5:          1  (DUT.CCC_Handler.current_state == 14)_0  (~(DUT.DDR_NT.i_engine_en && (DUT.DDR_NT.current_state == 7)) && (~DUT.cccnt_RnW && DUT.CCC_Handler.i_engine_en))
  Row   6:          1  (DUT.CCC_Handler.current_state == 14)_1  (~DUT.cccnt_RnW && DUT.CCC_Handler.i_engine_en)
  Row   7:          1  DUT.DDR_NT.i_engine_en_0                 ~((~DUT.cccnt_RnW && DUT.CCC_Handler.i_engine_en) && (DUT.CCC_Handler.current_state == 14))
  Row   8:    ***0***  DUT.DDR_NT.i_engine_en_1                 (~((~DUT.cccnt_RnW && DUT.CCC_Handler.i_engine_en) && (DUT.CCC_Handler.current_state == 14)) && (DUT.DDR_NT.current_state == 7))
  Row   9:    ***0***  (DUT.DDR_NT.current_state == 7)_0        (~((~DUT.cccnt_RnW && DUT.CCC_Handler.i_engine_en) && (DUT.CCC_Handler.current_state == 14)) && DUT.DDR_NT.i_engine_en)
 Row   10:    ***0***  (DUT.DDR_NT.current_state == 7)_1        (~((~DUT.cccnt_RnW && DUT.CCC_Handler.i_engine_en) && (DUT.CCC_Handler.current_state == 14)) && DUT.DDR_NT.i_engine_en)

----------------Focused Condition View-------------------
Line       231 Item    1  (o == 17)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   (o == 17)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (o == 17)_0           -                             
  Row   2:          1  (o == 17)_1           -                             

----------------Focused Condition View-------------------
Line       232 Item    1  (DUT.CCC_Handler.first_time || ~DUT.CCC_Handler.Direct_Broadcast_n_del)
Condition totals: 1 of 2 input terms covered = 50.00%

                              Input Term   Covered  Reason for no coverage   Hint
                             -----------  --------  -----------------------  --------------
              DUT.CCC_Handler.first_time         Y
  DUT.CCC_Handler.Direct_Broadcast_n_del         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                                Non-masking condition(s)      
 ---------  ---------  --------------------                      -------------------------     
  Row   1:          1  DUT.CCC_Handler.first_time_0              DUT.CCC_Handler.Direct_Broadcast_n_del
  Row   2:          1  DUT.CCC_Handler.first_time_1              -                             
  Row   3:    ***0***  DUT.CCC_Handler.Direct_Broadcast_n_del_0  ~DUT.CCC_Handler.first_time   
  Row   4:          1  DUT.CCC_Handler.Direct_Broadcast_n_del_1  ~DUT.CCC_Handler.first_time   

----------------Focused Condition View-------------------
Line       270 Item    1  (o == 17)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   (o == 17)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (o == 17)_0           -                             
  Row   2:          1  (o == 17)_1           -                             

----------------Focused Condition View-------------------
Line       302 Item    1  (o == 3)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
    (o == 3)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (o == 3)_0            -                             
  Row   2:          1  (o == 3)_1            -                             

----------------Focused Condition View-------------------
Line       306 Item    1  (o == 10)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   (o == 10)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (o == 10)_0           -                             
  Row   2:          1  (o == 10)_1           -                             

----------------Focused Condition View-------------------
Line       313 Item    1  (o == 17)
Condition totals: 1 of 1 input term covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   (o == 17)         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (o == 17)_0           -                             
  Row   2:          1  (o == 17)_1           -                             



Covergroup Coverage:
    Covergroups                      1        na        na    67.47%
        Coverpoints/Crosses         14        na        na        na
            Covergroup Bins         63        44        19    69.84%
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /I3C_TOP_TB/RAND_VALUES                          67.47%        100          -    Uncovered            
    covered/total bins:                                    44         63          -                      
    missing/total bins:                                    19         63          -                      
    % Hit:                                             69.84%        100          -                      
    Coverpoint RAND_CMD_ATTR_cp                        50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
    Coverpoint RAND_CMD_immediate_cp                  100.00%        100          -    Covered              
        covered/total bins:                                 9          9          -                      
        missing/total bins:                                 0          9          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RAND_CMD_regular_cp                      0.00%        100          -    ZERO                 
        covered/total bins:                                 0          5          -                      
        missing/total bins:                                 5          5          -                      
        % Hit:                                          0.00%        100          -                      
    Coverpoint RAND_CP_cp                              50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
    Coverpoint RAND_DEV_INDEX_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RAND_DTT_cp                             60.00%        100          -    Uncovered            
        covered/total bins:                                 3          5          -                      
        missing/total bins:                                 2          5          -                      
        % Hit:                                         60.00%        100          -                      
    Coverpoint RAND_MODE_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RAND_RnW_cp                             50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
    Coverpoint RAND_TOC_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RAND_DATA_THREE_cp                      50.00%        100          -    Uncovered            
        covered/total bins:                                 2          4          -                      
        missing/total bins:                                 2          4          -                      
        % Hit:                                         50.00%        100          -                      
    Coverpoint RAND_DATA_FOUR_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cr1                                         100.00%        100          -    Covered              
        covered/total bins:                                 9          9          -                      
        missing/total bins:                                 0          9          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cr2                                           0.00%        100          -    ZERO                 
        covered/total bins:                                 0          5          -                      
        missing/total bins:                                 5          5          -                      
        % Hit:                                          0.00%        100          -                      
    Cross cr3                                          84.61%        100          -    Uncovered            
        covered/total bins:                                11         13          -                      
        missing/total bins:                                 2         13          -                      
        % Hit:                                         84.61%        100          -                      
 Covergroup instance \/I3C_TOP_TB/RAND_VALUES_instance  
                                                       67.47%        100          -    Uncovered            
    covered/total bins:                                    44         63          -                      
    missing/total bins:                                    19         63          -                      
    % Hit:                                             69.84%        100          -                      
    Coverpoint RAND_CMD_ATTR_cp                        50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
        bin regular_0                                       0          1          -    ZERO                 
        bin immediate_1                               3747191          1          -    Covered              
    Coverpoint RAND_CMD_immediate_cp                  100.00%        100          -    Covered              
        covered/total bins:                                 9          9          -                      
        missing/total bins:                                 0          9          -                      
        % Hit:                                        100.00%        100          -                      
        bin ENEC_D_bin                                 432544          1          -    Covered              
        bin DISEC_D_bin                                430575          1          -    Covered              
        bin SETMWL_D_bin                               435512          1          -    Covered              
        bin SETMRL_D_bin                               420356          1          -    Covered              
        bin ENEC_B_bin                                 405868          1          -    Covered              
        bin DISEC_B_bin                                384156          1          -    Covered              
        bin SETMWL_B_bin                               397180          1          -    Covered              
        bin SETMRL_B_bin                               416580          1          -    Covered              
        bin Dummy_B_bin                                424420          1          -    Covered              
    Coverpoint RAND_CMD_regular_cp                      0.00%        100          -    ZERO                 
        covered/total bins:                                 0          5          -                      
        missing/total bins:                                 5          5          -                      
        % Hit:                                          0.00%        100          -                      
        bin GETMWL_D_bin                                    0          1          -    ZERO                 
        bin GETMRL_D_bin                                    0          1          -    ZERO                 
        bin GETSTATUS_D_bin                                 0          1          -    ZERO                 
        bin GETBCR_D_bin                                    0          1          -    ZERO                 
        bin GETDCR_D_bin                                    0          1          -    ZERO                 
    Coverpoint RAND_CP_cp                              50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
        bin Normal_transaction_bin                          0          1          -    ZERO                 
        bin CCC_Handler_bin                           3747191          1          -    Covered              
    Coverpoint RAND_DEV_INDEX_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin low                                        984391          1          -    Covered              
        bin mid                                       1432096          1          -    Covered              
        bin high                                      1330704          1          -    Covered              
    Coverpoint RAND_DTT_cp                             60.00%        100          -    Uncovered            
        covered/total bins:                                 3          5          -                      
        missing/total bins:                                 2          5          -                      
        % Hit:                                         60.00%        100          -                      
        bin no_def_byte_0                             1136608          1          -    Covered              
        bin no_def_byte_1                             1286111          1          -    Covered              
        bin no_def_byte_2                             1324472          1          -    Covered              
        bin no_def_byte_3                                   0          1          -    ZERO                 
        bin no_def_byte_4                                   0          1          -    ZERO                 
    Coverpoint RAND_MODE_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin HDR_mode_bin                              3747191          1          -    Covered              
        illegal_bin none                                    2                     -    Occurred             
    Coverpoint RAND_RnW_cp                             50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
        bin Write                                     3747191          1          -    Covered              
        bin Read                                            0          1          -    ZERO                 
    Coverpoint RAND_TOC_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin exit_patt                                 1811836          1          -    Covered              
        bin restart_patt                              1935355          1          -    Covered              
    Coverpoint RAND_DATA_THREE_cp                      50.00%        100          -    Uncovered            
        covered/total bins:                                 2          4          -                      
        missing/total bins:                                 2          4          -                      
        % Hit:                                         50.00%        100          -                      
        bin DATA_LEN_1                                1890863          1          -    Covered              
        bin DATA_LEN_2                                1856328          1          -    Covered              
        bin DATA_LEN_3                                      0          1          -    ZERO                 
        bin DATA_LEN_4                                      0          1          -    ZERO                 
    Coverpoint RAND_DATA_FOUR_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin ZERO                                      3747191          1          -    Covered              
    Cross cr1                                         100.00%        100          -    Covered              
        covered/total bins:                                 9          9          -                      
        missing/total bins:                                 0          9          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <immediate_1,Dummy_B_bin>              424420          1          -    Covered              
            bin <immediate_1,SETMRL_B_bin>             416580          1          -    Covered              
            bin <immediate_1,SETMRL_D_bin>             420356          1          -    Covered              
            bin <immediate_1,DISEC_B_bin>              384156          1          -    Covered              
            bin <immediate_1,DISEC_D_bin>              430575          1          -    Covered              
            bin <immediate_1,SETMWL_B_bin>             397180          1          -    Covered              
            bin <immediate_1,SETMWL_D_bin>             435512          1          -    Covered              
            bin <immediate_1,ENEC_B_bin>               405868          1          -    Covered              
            bin <immediate_1,ENEC_D_bin>               432544          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin regular                              0                     -    ZERO                 
    Cross cr2                                           0.00%        100          -    ZERO                 
        covered/total bins:                                 0          5          -                      
        missing/total bins:                                 5          5          -                      
        % Hit:                                          0.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <*,*>                                       0          1          5    ZERO                 
        Illegal and Ignore Bins:
            ignore_bin immediate                            0                     -    ZERO                 
    Cross cr3                                          84.61%        100          -    Uncovered            
        covered/total bins:                                11         13          -                      
        missing/total bins:                                 2         13          -                      
        % Hit:                                         84.61%        100          -                      
        Auto, Default and User Defined Bins:
            bin <no_def_byte_1,Dummy_B_bin>            136252          1          -    Covered              
            bin <no_def_byte_1,SETMRL_B_bin>           136216          1          -    Covered              
            bin <no_def_byte_1,DISEC_B_bin>            137864          1          -    Covered              
            bin <no_def_byte_1,SETMWL_B_bin>           146124          1          -    Covered              
            bin <no_def_byte_1,ENEC_B_bin>             143216          1          -    Covered              
            bin <no_def_byte_1,SETMRL_D_bin>           142884          1          -    Covered              
            bin <no_def_byte_1,SETMWL_D_bin>           152944          1          -    Covered              
            bin <no_def_byte_1,DISEC_D_bin>            144571          1          -    Covered              
            bin <no_def_byte_1,ENEC_D_bin>             146040          1          -    Covered              
            bin <no_def_byte_2,ENEC_D_bin>             149828          1          -    Covered              
            bin <no_def_byte_0,ENEC_D_bin>             136676          1          -    Covered              
            bin <no_def_byte_4,*>                           0          1          1    ZERO                 
            bin <no_def_byte_3,*>                           0          1          1    ZERO                 
        Illegal and Ignore Bins:
            ignore_bin more_than_one                  2174576                     -    Occurred             
Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                     32        21        11    65.62%

================================Expression Details================================

Expression Coverage for instance /I3C_TOP_TB --

  File I3C_TOP_TB.sv
-----------Focused Expression View (Bimodal)------------
Line       221 Item    1  ((collected_cmd_wrd[16] ^ (collected_cmd_wrd[14] ^ collected_cmd_wrd[12])) ^ ((collected_cmd_wrd[10] ^ collected_cmd_wrd[8]) ^ (collected_cmd_wrd[6] ^ collected_cmd_wrd[4])))
Expression totals: 3 of 7 input terms covered = 42.85%

               Input Term   Covered  Reason for no coverage                  Hint
              -----------  --------  --------------------------------------  --------------
    collected_cmd_wrd[16]         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
    collected_cmd_wrd[14]         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
    collected_cmd_wrd[12]         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
    collected_cmd_wrd[10]         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
     collected_cmd_wrd[8]         Y
     collected_cmd_wrd[6]         Y
     collected_cmd_wrd[4]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target                 Non-masking condition(s)           

---------  ----------  ----------  --------------------       -------------------------          
 Row   1:           1           1  collected_cmd_wrd[16]_0    -                                  
 Row   2:           0           0  collected_cmd_wrd[16]_1    -                                  
 Row   3:           1           1  collected_cmd_wrd[14]_0    -                                  
 Row   4:           0           0  collected_cmd_wrd[14]_1    -                                  
 Row   5:           1           1  collected_cmd_wrd[12]_0    -                                  
 Row   6:           0           0  collected_cmd_wrd[12]_1    -                                  
 Row   7:           1           1  collected_cmd_wrd[10]_0    -                                  
 Row   8:           0           0  collected_cmd_wrd[10]_1    -                                  
 Row   9:           0           1  collected_cmd_wrd[8]_0     -                                  
Row   10:           1           0  collected_cmd_wrd[8]_1     -                                  
Row   11:           1           1  collected_cmd_wrd[6]_0     -                                  
Row   12:           1           0  collected_cmd_wrd[6]_1     -                                  
Row   13:           1           0  collected_cmd_wrd[4]_0     -                                  
Row   14:           1           1  collected_cmd_wrd[4]_1     -                                  

-----------Focused Expression View (Bimodal)------------
Line       223 Item    1  ((DUT.CCC_Handler.i_regf_RnW ^ (collected_cmd_wrd[9] ^ collected_cmd_wrd[7])) ^ (collected_cmd_wrd[5] ^ collected_cmd_wrd[3]))
Expression totals: 4 of 5 input terms covered = 80.00%

                    Input Term   Covered  Reason for no coverage                  Hint
                   -----------  --------  --------------------------------------  --------------
    DUT.CCC_Handler.i_regf_RnW         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
          collected_cmd_wrd[9]         Y
          collected_cmd_wrd[7]         Y
          collected_cmd_wrd[5]         Y
          collected_cmd_wrd[3]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target                      Non-masking condition(s)           

---------  ----------  ----------  --------------------            -------------------------          
 Row   1:           1           1  DUT.CCC_Handler.i_regf_RnW_0    -                                  
 Row   2:           0           0  DUT.CCC_Handler.i_regf_RnW_1    -                                  
 Row   3:           1           1  collected_cmd_wrd[9]_0          -                                  
 Row   4:           0           1  collected_cmd_wrd[9]_1          -                                  
 Row   5:           0           1  collected_cmd_wrd[7]_0          -                                  
 Row   6:           1           0  collected_cmd_wrd[7]_1          -                                  
 Row   7:           1           1  collected_cmd_wrd[5]_0          -                                  
 Row   8:           0           1  collected_cmd_wrd[5]_1          -                                  
 Row   9:           0           1  collected_cmd_wrd[3]_0          -                                  
Row   10:           1           1  collected_cmd_wrd[3]_1          -                                  

-----------Focused Expression View (Bimodal)------------
Line       224 Item    1  ((collected_cmd_wrd[9] ^ collected_cmd_wrd[7]) ^ (collected_cmd_wrd[5] ^ collected_cmd_wrd[3]))
Expression totals: 4 of 4 input terms covered = 100.00%

              Input Term   Covered  Reason for no coverage                  Hint
             -----------  --------  --------------------------------------  --------------
    collected_cmd_wrd[9]         Y
    collected_cmd_wrd[7]         Y
    collected_cmd_wrd[5]         Y
    collected_cmd_wrd[3]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target                Non-masking condition(s)           

---------  ----------  ----------  --------------------      -------------------------          
 Row   1:           1           1  collected_cmd_wrd[9]_0    -                                  
 Row   2:           0           1  collected_cmd_wrd[9]_1    -                                  
 Row   3:           0           1  collected_cmd_wrd[7]_0    -                                  
 Row   4:           1           0  collected_cmd_wrd[7]_1    -                                  
 Row   5:           1           1  collected_cmd_wrd[5]_0    -                                  
 Row   6:           0           1  collected_cmd_wrd[5]_1    -                                  
 Row   7:           0           1  collected_cmd_wrd[3]_0    -                                  
 Row   8:           1           1  collected_cmd_wrd[3]_1    -                                  

-----------Focused Expression View (Bimodal)------------
Line       261 Item    1  (((collected_data_wrd[17] ^ collected_data_wrd[15]) ^ (collected_data_wrd[13] ^ collected_data_wrd[11])) ^ ((collected_data_wrd[9] ^ collected_data_wrd[7]) ^ (collected_data_wrd[5] ^ collected_data_wrd[3])))
Expression totals: 2 of 8 input terms covered = 25.00%

                Input Term   Covered  Reason for no coverage                  Hint
               -----------  --------  --------------------------------------  --------------
    collected_data_wrd[17]         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
    collected_data_wrd[15]         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
    collected_data_wrd[13]         Y
    collected_data_wrd[11]         Y
     collected_data_wrd[9]         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
     collected_data_wrd[7]         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
     collected_data_wrd[5]         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1
     collected_data_wrd[3]         N  '_0' hit but '_1' not hit              Hit '_1' for output ->0 or ->1

    Rows:   Hits(->0)   Hits(->1)  FEC Target                  Non-masking condition(s)           

---------  ----------  ----------  --------------------        -------------------------          
 Row   1:           1           1  collected_data_wrd[17]_0    -                                  
 Row   2:           0           0  collected_data_wrd[17]_1    -                                  
 Row   3:           1           1  collected_data_wrd[15]_0    -                                  
 Row   4:           0           0  collected_data_wrd[15]_1    -                                  
 Row   5:           1           0  collected_data_wrd[13]_0    -                                  
 Row   6:           1           1  collected_data_wrd[13]_1    -                                  
 Row   7:           0           1  collected_data_wrd[11]_0    -                                  
 Row   8:           1           0  collected_data_wrd[11]_1    -                                  
 Row   9:           1           1  collected_data_wrd[9]_0     -                                  
Row   10:           0           0  collected_data_wrd[9]_1     -                                  
Row   11:           1           1  collected_data_wrd[7]_0     -                                  
Row   12:           0           0  collected_data_wrd[7]_1     -                                  
Row   13:           1           1  collected_data_wrd[5]_0     -                                  
Row   14:           0           0  collected_data_wrd[5]_1     -                                  
Row   15:           1           1  collected_data_wrd[3]_0     -                                  
Row   16:           0           0  collected_data_wrd[3]_1     -                                  

-----------Focused Expression View (Bimodal)------------
Line       296 Item    1  (((correct_repeated_data_word[17] ^ correct_repeated_data_word[15]) ^ (correct_repeated_data_word[13] ^ correct_repeated_data_word[11])) ^ ((correct_repeated_data_word[9] ^ correct_repeated_data_word[7]) ^ (correct_repeated_data_word[5] ^ correct_repeated_data_word[3])))
Expression totals: 8 of 8 input terms covered = 100.00%

                        Input Term   Covered  Reason for no coverage                  Hint
                       -----------  --------  --------------------------------------  --------------
    correct_repeated_data_word[17]         Y
    correct_repeated_data_word[15]         Y
    correct_repeated_data_word[13]         Y
    correct_repeated_data_word[11]         Y
     correct_repeated_data_word[9]         Y
     correct_repeated_data_word[7]         Y
     correct_repeated_data_word[5]         Y
     correct_repeated_data_word[3]         Y

    Rows:   Hits(->0)   Hits(->1)  FEC Target                          Non-masking condition(s)           

---------  ----------  ----------  --------------------                -------------------------          
 Row   1:           1           0  correct_repeated_data_word[17]_0    -                                  
 Row   2:           0           1  correct_repeated_data_word[17]_1    -                                  
 Row   3:           1           0  correct_repeated_data_word[15]_0    -                                  
 Row   4:           1           1  correct_repeated_data_word[15]_1    -                                  
 Row   5:           1           0  correct_repeated_data_word[13]_0    -                                  
 Row   6:           0           1  correct_repeated_data_word[13]_1    -                                  
 Row   7:           1           1  correct_repeated_data_word[11]_0    -                                  
 Row   8:           1           0  correct_repeated_data_word[11]_1    -                                  
 Row   9:           1           1  correct_repeated_data_word[9]_0     -                                  
Row   10:           0           1  correct_repeated_data_word[9]_1     -                                  
Row   11:           1           1  correct_repeated_data_word[7]_0     -                                  
Row   12:           1           0  correct_repeated_data_word[7]_1     -                                  
Row   13:           1           1  correct_repeated_data_word[5]_0     -                                  
Row   14:           1           0  correct_repeated_data_word[5]_1     -                                  
Row   15:           1           1  correct_repeated_data_word[3]_0     -                                  
Row   16:           1           0  correct_repeated_data_word[3]_1     -                                  


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     152       152         0   100.00%

================================Statement Details================================

Statement Coverage for instance /I3C_TOP_TB --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File I3C_TOP_TB.sv
    6                                                module I3C_TOP_TB ();
    7                                                
    8                                                //-----------------------------Testbench signals-------------------------------------//
    9                                                  bit         i_sdr_clk_tb           		; // system clk
    10                                                 bit         i_sdr_rst_n_tb         		; // asynch neg edge reset
    11                                                 logic         i_controller_en_tb     		; // from device configuration of Controller/Target role
    12                                                 logic         i_i3c_i2c_sel_tb       		; // sdr/i2c blocks selector
    13                                                 logic         i_ccc_en_dis_hj_tb     		; //2023: (TBD) for enable/disable events to prevent Bus-Initialization or DAA interruptions.
    14                                                   
    15                                                 logic         i_sclgen_rst_n_tb          	; // new by badr 
    16                                               
    17                                               // Configurations signals
    18                                                 logic [7:0]   i_regf_config_tb           	;
    19                                                 logic         i_data_config_mux_sel_tb   	;  //1: to write configurations to the controller ,     0:i3c blocks to access reg file  
    20                                                 logic [11:0]  i_regf_wr_address_config_tb	;
    21                                                 logic         i_regf_wr_en_config_tb     	;
    22                                                 logic         i_regf_rd_en_config_tb     	;
    23                                               
    24                                                 wire          sda_tb                     	; // sda line
    25                                                   
    26                                                 logic         scl_tb                     	; // scl bus
    27                                                 logic         o_sdr_rx_valid_tb          	; // output to host >> valid data are loaded    //2023
    28                                                 logic         o_ctrl_done_tb              ; //2023
    29                                               
    30                                               //-----------------------------Internal signals -------------------------------------//
    31                                               logic sda_drive;
    32                                               bit frame_ended;
    33                                               int cycle_count ;
    34                                               logic configuration_done=0;
    35                                               
    36                                               //-----------------------------Parameters-------------------------------------//
    37                                                   parameter CLK_PERIOD      = 10 ;		 // 100 mhz
    38                                                   parameter SYS_CLK_PERIOD  = 20 ;  		 // 50mhz
    39                                                   parameter configuration   = 1'b1 ;
    40                                                   parameter Design          = 1'b0 ;
    41                                                   parameter config_location = 12'd1000 ;
    42                                               
    43                                                   parameter EXPECTED_BROADCAST = 8'b11111100; // 'h7E+ R/W bit = 0
    44                                                   parameter EXPECTED_ENTHDR0 = 9'b001000000;
    45                                               
    46                                                   wire  	 sys_clk ;
    47              1                    3747192         assign   sys_clk = DUT.sys_clk_50mhz ;
    48                                               
    49                                               //----------------------------- Clock Generation-------------------------------------//
    50              1                    7494390     always #(CLK_PERIOD/2) i_sdr_clk_tb = ~i_sdr_clk_tb;
    50              2                    7494389     
    51                                               
    52                                               //-----------------------------  Initial block  -------------------------------------//
    53                                               // locally driven value
    54                                               assign sda_tb   = sda_drive 			;
    55                                               
    56                                               
    57                                               // initialize the object with the default values in the class defined as bit >> 0
    58                                                   	configuration_class conf_obj ;
    59                                               
    60                                               
    61                                                   	// inputs to be randomized 
    62                                               
    63                                                   	//////////////////////// DWORD0  //////////////////////
    64                                                   	reg [2:0] RAND_CMD_ATTR      ;
    65                                                   	reg [3:0] RAND_TID           ;
    66                                                		reg [7:0] RAND_CMD           ;
    67                                                		reg 	  RAND_CP            ;
    68                                                		reg [4:0] RAND_DEV_INDEX     ;
    69                                                		reg [1:0] RAND_RESERVED      ;
    70                                                		reg [2:0] RAND_DTT           ; 	 	 // or {DBP,SRE,reserved}
    71                                                		reg [2:0] RAND_MODE 	     ;
    72                                                		reg  	  RAND_RnW           ;
    73                                                		reg   	  RAND_WROC          ;
    74                                                		reg 	  RAND_TOC           ;
    75                                               
    76                                                   	//////////////////////// DWORD1  //////////////////////
    77                                                   	reg [7:0] RAND_DEF_BYTE     ;
    78                                                   	reg [7:0] RAND_DATA_TWO     ;
    79                                                   	reg [7:0] RAND_DATA_THREE   ;
    80                                                   	reg [7:0] RAND_DATA_FOUR    ;
    81                                               
    82                                                   	/////////////////////// SDA Line //////////////////////
    83                                                   	reg  	  RAND_SDA_DRIVE ;
    84                                               
    85                                               
    86                                                   	reg TOC_old ;
    87                                               
    88                                                   	integer i ;
    89              1                      20001         always @(DUT.frame_counter_hdr.o_cccnt_last_frame) begin 
    90                                                   	if(DUT.frame_counter_hdr.o_cccnt_last_frame == 'b1) begin 
    91              1                      10000     			TOC_old = RAND_TOC ;
    92                                               		end 
    93                                                   end 
    94                                               
    95                                                   initial begin 
    96                                               
    97              1                          1         	reset();
    98              1                          1     		initialize();
    99              1                          1     		conf_obj = new();
    100                                              
    101             1                          1     		for (i=0 ; i<10000 ; i++) begin 
    101             2                      10000     
    102                                              			assert(conf_obj.randomize());
    103                                              
    104             1                      10000     			RAND_CMD_ATTR  = conf_obj.RAND_CMD_ATTR  ;
    105             1                      10000     			RAND_TID       = conf_obj.RAND_TID       ;
    106             1                      10000     			RAND_CMD       = conf_obj.RAND_CMD       ;
    107             1                      10000     			RAND_CP        = conf_obj.RAND_CP        ;
    108             1                      10000     			RAND_DEV_INDEX = conf_obj.RAND_DEV_INDEX ;
    109             1                      10000     			RAND_RESERVED  = conf_obj.RAND_RESERVED  ;
    110             1                      10000     			RAND_DTT       = conf_obj.RAND_DTT       ;
    111             1                      10000     			RAND_MODE      = conf_obj.RAND_MODE      ;
    112             1                      10000     			RAND_RnW       = conf_obj.RAND_RnW       ;
    113             1                      10000     			RAND_WROC      = conf_obj.RAND_WROC      ;
    114             1                      10000     			RAND_TOC       = conf_obj.RAND_TOC       ;
    115                                              
    116             1                      10000     			RAND_DEF_BYTE   = conf_obj.RAND_DEF_BYTE  ;
    117             1                      10000     			RAND_DATA_TWO   = conf_obj.RAND_DATA_TWO  ;
    118             1                      10000     			RAND_DATA_THREE = conf_obj.RAND_DATA_THREE; 
    119             1                      10000     			RAND_DATA_FOUR  = conf_obj.RAND_DATA_FOUR ; 
    120                                              			//RAND_SDA_DRIVE = conf_obj.RAND_SDA_DRIVE ;
    121                                              
    122             1                      10000     			switch_muxes(configuration);
    123             1                      10000     			write_configurations();
    124             1                      10000     			switch_muxes(Design);
    125             1                      10000     			i_controller_en_tb = 1'b1;
    126             1                      10000     			i_i3c_i2c_sel_tb   = 1'b1 ;
    127                                              
    128                                              			// if first iteration i must go to enter HDR
    129                                              			if (i == 0) begin 
    130             1                          1     				wait (DUT.enthdr_en);
    131             1                          1     				check_output(); // to check enthdr ccc output
    132                                              				// write new configuration
    133             1                          1     				@(DUT.frame_counter_hdr.o_cccnt_last_frame == 'b1 && (DUT.CCC_Handler.current_state == PARITY_DATA || DUT.DDR_NT.current_state == parity));
    134             1                          1     				$display("this is testcase no. %d",i,$time);
    135                                              			end 
    136                                              
    137                                              			else if (TOC_old) begin
    138             1                       4860     				wait (DUT.enthdr_en); 
    139             1                       4860     				check_output(); // to check enthdr ccc output
    140                                              				// write new configuration
    141             1                       4860     				@(DUT.frame_counter_hdr.o_cccnt_last_frame == 'b1 && (DUT.CCC_Handler.current_state == PARITY_DATA || DUT.DDR_NT.current_state == parity));
    142             1                       4860     				$display("this is testcase no. %d with TOC = 1 ",i,$time);
    143                                              				
    144                                              		  	end 
    145                                              
    146                                              		  	else if (!TOC_old) begin 
    147             1                       5139     		  		@(DUT.frame_counter_hdr.o_cccnt_last_frame == 'b1 && (DUT.CCC_Handler.current_state == PARITY_DATA || DUT.DDR_NT.current_state == parity));
    148             1                       5139     		  		$display("this is testcase no. %d with TOC = 0 ",i,$time);
    149                                              		  	end 
    150                                              		end	
    151                                              
    152                                              
    153                                              		//@(posedge (DUT.ccc_engine_done || DUT.ddr_engine_done ));
    154             1                          1     			$display("this is loop is done  %t",$time);
    155             1                          1     		#(50*SYS_CLK_PERIOD) ;
    156             1                          1     		$display("Coverage = %.2f%%",RAND_VALUES_instance.get_coverage());		
    157             1                          1     		$stop ;
    158                                              	end
    159                                              
    160                                              //////////////////////////////////////////////  General driver /////////////////////////////////
    161                                              
    162                                              	initial begin 
    163             1                          1     		forever #(2*SYS_CLK_PERIOD) begin 
    163             2                     923136     
    164                                              
    165                                              			if (DUT.CCC_Handler.current_state == PRE_FIRST_DATA_TWO) begin 
    166             1                      10000     				@(negedge DUT.scl_neg_edge_not_stalled or negedge DUT.scl_pos_edge_not_stalled) ;
    167             1                      10000     				sda_drive = 1'b0 ;
    168             1                      10000     				#(2*SYS_CLK_PERIOD) ;
    169             1                      10000     				sda_drive = 1'bz ;
    170                                              			end
    171                                              			else if (DUT.CCC_Handler.current_state == PRE_DATA_TWO) begin 
    172             1                       3663     				@(negedge DUT.scl_neg_edge_not_stalled or negedge DUT.scl_pos_edge_not_stalled) ;
    173             1                       3663     				sda_drive = 1'b1 ;
    174             1                       3663     				#(2*SYS_CLK_PERIOD) ;
    175             1                       3663     				sda_drive = 1'bz ;
    176                                              			end
    177                                              		end
    178                                              	end 
    179                                              
    180                                                 
    181                                              	// deserialization checking 
    182                                              
    183             1                     165763     	always @(DUT.CCC_Handler.current_state) begin 
    184                                              		if (DUT.CCC_Handler.i_engine_en && DUT.CCC_Handler.current_state == RNW) begin 
    185             1                      10000     			#(CLK_PERIOD) ;
    186             1                      10000     			check_cmd_word();
    187                                              		end 
    188                                              	end 
    189                                              
    190             1                     189056     	always @(DUT.CCC_Handler.current_state) begin 
    191                                              		if (DUT.CCC_Handler.i_engine_en && DUT.CCC_Handler.current_state == CCC_BYTE) begin 
    192             1                       5569     			#(CLK_PERIOD) ;
    193             1                       5569     			check_CCC_value_data_word();
    194                                              		end 
    195                                              	end
    196                                              
    197             1                     181481     	always @(DUT.CCC_Handler.current_state or DUT.DDR_NT.current_state) begin 
    198                                              		if (DUT.cccnt_RnW == 0 && (DUT.CCC_Handler.i_engine_en && DUT.CCC_Handler.current_state == FIRST_DATA_BYTE) || (DUT.DDR_NT.i_engine_en && DUT.DDR_NT.current_state == first_data_byte)) begin 
    199             1                       8094     			#(CLK_PERIOD) ;
    200             1                       8094     			check_repeated_data_word();
    201                                              		end 
    202                                              	end
    203                                              
    204                                              
    205                                              	task check_cmd_word (); 
    206                                              		begin 
    207                                              			logic [17:0] collected_cmd_wrd ;
    208                                              			bit 	     parity_adj_7e ,parity_adj ,P1_cmd_sel ,P0_cmdword , P1_cmd_ind ;
    209                                              			bit   [17:0] correct_first_cmd_word , correct_cmd_word ;
    210                                              			int 		 o ; // counter
    211                                              
    212             1                      10000     			for ( o = 0 ; o < 'd18 ; o++ ) begin 
    212             2                     180000     
    213                                              
    214             1                     180000     			@ (posedge DUT.scl_pos_edge or posedge DUT.scl_neg_edge ) ;
    215                                              
    216             1                     180000     				collected_cmd_wrd['d17- o] = sda_tb ;
    217                                              
    218                                              				//$display("nvlaue of SDA line is  %b : %t",sda_tb,$time);
    219                                              
    220                                              				//parity_adj_7e = collected_cmd_wrd[16] ^ collected_cmd_wrd[14] ^ collected_cmd_wrd[12] ^ collected_cmd_wrd[10] ^ collected_cmd_wrd[8] ^ collected_cmd_wrd[6] ^ collected_cmd_wrd[4]  ;
    221             1                     180000     				parity_adj    = collected_cmd_wrd[16] ^ collected_cmd_wrd[14] ^ collected_cmd_wrd[12] ^ collected_cmd_wrd[10] ^ collected_cmd_wrd[8] ^ collected_cmd_wrd[6] ^ collected_cmd_wrd[4]  ;
    222                                              
    223             1                     180000     				P1_cmd_sel    = DUT.CCC_Handler.i_regf_RnW ^ collected_cmd_wrd[9] ^ collected_cmd_wrd[7] ^ collected_cmd_wrd[5] ^ collected_cmd_wrd[3] ; // index is shifted by 2 as this is the 18 bit word (data + parity)
    224             1                     180000     				P1_cmd_ind 	  = 1'b0 ^ collected_cmd_wrd[9] ^ collected_cmd_wrd[7] ^ collected_cmd_wrd[5] ^ collected_cmd_wrd[3] ; // index is shifted by 2 as this is the 18 bit word (data + parity)
    225             1                     180000     				P0_cmdword    =  1 ;
    226                                              
    227             1                     180000     				correct_first_cmd_word = {1'b0 						 , 7'd0 , 7'b111_1110 					       , parity_adj , P1_cmd_ind , P0_cmdword } ;
    228             1                     180000     				correct_cmd_word 	   = {DUT.CCC_Handler.i_regf_RnW , 7'd0 , DUT.CCC_Handler.o_txrx_addr_ccc[6:0] , parity_adj , P1_cmd_sel , P0_cmdword } ;
    229                                              
    230             1                     180000     				# (2*CLK_PERIOD) ;
    231                                              				if (o == 'd17) begin 
    232                                              					if (DUT.CCC_Handler.first_time || !DUT.CCC_Handler.Direct_Broadcast_n_del) begin  // this is a 7E cmd word
    233                                              						assert (correct_first_cmd_word == collected_cmd_wrd) $display("first command word in CCC is CORRECT : %0t" ,$time);
    234                                              						else 												 $display("first command word in CCC is WRONG   : %0t" ,$time);
    235                                              					end 
    236                                              					else begin 	// this is an address word  
    237                                              						assert (correct_cmd_word == collected_cmd_wrd) $display("second command word in CCC is CORRECT : %0t" ,$time);
    238                                              						else 										   $display("second command word in CCC is WRONG   : %0t" ,$time);
    239                                              					end 
    240                                              				end  
    241                                              			end 
    242                                              		end  
    243                                              	endtask 
    244                                              
    245                                              
    246                                              	task check_CCC_value_data_word (); 
    247                                              		begin 
    248                                              			logic [17:0] collected_data_wrd ;
    249                                              			bit 	     P1 ,P0 ;
    250                                              			bit   [17:0] correct_first_data_word  ;
    251                                              			int 		 o ; // counter 
    252                                              
    253             1                       5569     			for ( o = 0 ; o < 'd18 ; o++ ) begin 
    253             2                     100242     
    254                                              
    255             1                     100242     			@ (posedge DUT.scl_pos_edge or posedge DUT.scl_neg_edge ) ;
    256                                              
    257             1                     100242     				collected_data_wrd['d17- o] = sda_tb ;
    258                                              
    259                                              				//$display("vlaue of SDA line is  %b : %t",sda_tb,$time);
    260                                              
    261             1                     100242     				P1 = collected_data_wrd[17] ^ collected_data_wrd[15] ^ collected_data_wrd[13] ^ collected_data_wrd[11] ^ collected_data_wrd[9] ^
    262                                              				 	 collected_data_wrd[7] ^ collected_data_wrd[5] ^ collected_data_wrd[3] ;
    263                                              
    264             1                     100242     				P0 = collected_data_wrd[16] ^ collected_data_wrd[14] ^ collected_data_wrd[12] ^ collected_data_wrd[10] ^ collected_data_wrd[8] ^
    265                                              					 collected_data_wrd[6] ^ collected_data_wrd[4] ^ collected_data_wrd[2] ^ 1 ; 
    266                                              
    267             1                     100242     				correct_first_data_word = { DUT.CCC_Handler.o_txrx_addr_ccc , 8'd0 ,  P1 , P0 } ;
    268                                              
    269             1                     100242     				# (2*CLK_PERIOD) ;
    270                                              				if (o == 'd17) begin 
    271                                              					assert (correct_first_data_word == collected_data_wrd) $display("CCC data word is CORRECT : %0t" ,$time);
    272                                              					else 												   $display("CCC data word is WRONG   : %0t" ,$time);
    273                                              				end  
    274                                              			end 
    275                                              		end  
    276                                              	endtask 
    277                                              
    278                                              
    279                                              
    280                                              	task check_repeated_data_word (); 
    281                                              		begin 
    282                                              			logic [17:0] collected_data_wrd ;
    283                                              			bit 	     P1 ,P0 ;
    284                                              			bit   [17:0] correct_repeated_data_word  ;
    285                                              			int 		 o ;
    286                                              			bit   [7:0] tmp_D1 , tmp_D0 ;
    287                                              
    288             1                       8094     			for ( o = 0 ; o < 'd18 ; o++ ) begin 
    288             2                     145692     
    289                                              
    290             1                     145692     			@ (posedge DUT.scl_pos_edge or posedge DUT.scl_neg_edge ) ;
    291                                              
    292             1                     145692     				collected_data_wrd['d17- o] = sda_tb ;
    293                                              
    294                                              				//$display("vlaue of SDA line is  %b : %t",sda_tb,$time);
    295                                              
    296             1                     145692     				P1 = correct_repeated_data_word[17] ^ correct_repeated_data_word[15] ^ correct_repeated_data_word[13] ^ correct_repeated_data_word[11] ^ correct_repeated_data_word[9] ^
    297                                              				 	 correct_repeated_data_word[7] ^ correct_repeated_data_word[5] ^ correct_repeated_data_word[3] ;
    298                                              
    299             1                     145692     				P0 = correct_repeated_data_word[16] ^ correct_repeated_data_word[14] ^ correct_repeated_data_word[12] ^ correct_repeated_data_word[10] ^ correct_repeated_data_word[8] ^
    300                                              					 correct_repeated_data_word[6] ^ correct_repeated_data_word[4] ^ correct_repeated_data_word[2] ^ 1 ; 
    301                                              
    302                                              				if (o == 'd3) begin                            // any arbitrary value btn 0 -> 7
    303             1                       8094     					tmp_D1 = DUT.regf_data_rd ; 
    304                                              				end
    305                                              	
    306                                              				if (o == 'd10) begin 	 	 	 	 	 	   // any arbitrary value btn 8 -> 15
    307             1                       8094     					tmp_D0 = DUT.regf_data_rd ;
    308                                              				end 
    309                                              
    310             1                     145692     				correct_repeated_data_word = { tmp_D1 , tmp_D0 , P1 , P0 };
    311                                              
    312             1                     145692     				# (2*CLK_PERIOD) ;
    313                                              				if (o == 'd17) begin 
    314             1                       8094     					correct_repeated_data_word = { tmp_D1 , tmp_D0 , P1 , P0 };
    315                                              					assert (correct_repeated_data_word == collected_data_wrd) $display("repeated data word is CORRECT : %0t" ,$time);
    316                                              					else 													  $display("repeated data word is WRONG   : %0t" ,$time);
    317                                              				end  
    318                                              			end 
    319                                              		end  
    320                                              	endtask 
    321                                              
    322                                              
    323                                              pullup(sda_tb);
    324                                              //-----------------------------     Tasks       -------------------------------------//
    325                                              
    326                                              task reset;
    327                                              	begin
    328             1                          1     	    i_sdr_rst_n_tb 		        = 1'b1;
    329             1                          1     		# (SYS_CLK_PERIOD)
    330             1                          1     		i_sdr_rst_n_tb 				= 1'b0; // activated
    331             1                          1     		# (SYS_CLK_PERIOD)
    332             1                          1     		i_sdr_rst_n_tb 				= 1'b1; // de-activated
    333                                              
    334                                              	end	
    335                                              	endtask
    336                                              
    337                                              task initialize; 
    338                                              	begin
    339             1                          1     		i_sdr_clk_tb 				= 1'b0;
    340             1                          1     		i_sdr_rst_n_tb 				= 1'b1;
    341             1                          1     		i_i3c_i2c_sel_tb        	= 1'b1;  //i3c mode
    342             1                          1     		i_controller_en_tb      	= 1'b0;
    343             1                          1     		i_ccc_en_dis_hj_tb      	= 1'b0;
    344             1                          1     		sda_drive 					= 1'bz;
    345             1                          1     		i_data_config_mux_sel_tb    = 1'b1;
    346             1                          1     		i_regf_rd_en_config_tb   	= 1'b0;								
    347             1                          1         	i_regf_wr_en_config_tb   	= 1'b1;
    348                                              
    349                                              	end
    350                                              	endtask
    351                                              
    352                                              task switch_muxes(input selector);
    353                                                      begin 
    354             1                      20000                 i_data_config_mux_sel_tb = selector ; // 1 for configuration and 0 for design 
    355                                                      end 
    356                                                  endtask 
    357                                              
    358                                              task write_configurations();
    359                                              	begin
    360                                              
    361                                              //1.write randomized values
    362                                              	// DWORD0
    363             1                      10000     	@(negedge sys_clk) ;
    364             1                      10000     	 	i_regf_wr_en_config_tb = 1'b1;
    365             1                      10000     	 #(SYS_CLK_PERIOD)																		    																									; 
    366             1                      10000     		i_regf_config_tb     = { RAND_CMD[0] , RAND_TID , RAND_CMD_ATTR }  			 		;
    367             1                      10000         	i_regf_wr_address_config_tb = config_location 																												;
    368                                                  	    
    369             1                      10000           #(SYS_CLK_PERIOD)  																																											; 
    370             1                      10000     		i_regf_config_tb     = { RAND_CP , RAND_CMD[7:1] } 									;
    371             1                      10000         	i_regf_wr_address_config_tb = config_location + 'd1 																									;
    372                                              
    373             1                      10000           #(SYS_CLK_PERIOD)  																																											; 
    374             1                      10000     		i_regf_config_tb     = { RAND_DTT[0] , RAND_RESERVED , RAND_DEV_INDEX }  			;		    
    375             1                      10000         	i_regf_wr_address_config_tb = config_location + 'd2 																									;
    376                                              
    377             1                      10000           #(SYS_CLK_PERIOD)  																																											; 
    378             1                      10000     		i_regf_config_tb     = { RAND_TOC , RAND_WROC , RAND_RnW ,RAND_MODE , RAND_DTT[2:1]} ;
    379             1                      10000         	i_regf_wr_address_config_tb = config_location + 'd3 																									;
    380                                              
    381                                                    // DWORD 1
    382             1                      10000            #(SYS_CLK_PERIOD)  																																									  ; 
    383             1                      10000     		i_regf_config_tb     = RAND_DEF_BYTE     																														;
    384             1                      10000         	i_regf_wr_address_config_tb  = config_location + 'd4 																									;		
    385                                              
    386             1                      10000            #(SYS_CLK_PERIOD)  																																										; 
    387             1                      10000     		i_regf_config_tb     = RAND_DATA_TWO     																														;
    388             1                      10000         	i_regf_wr_address_config_tb  = config_location + 'd5 																									;
    389                                              
    390             1                      10000            #(SYS_CLK_PERIOD); 																		 
    391             1                      10000     		i_regf_config_tb     = RAND_DATA_THREE     																													;
    392             1                      10000         	i_regf_wr_address_config_tb  = config_location + 'd6 																									;
    393                                              
    394             1                      10000            #(SYS_CLK_PERIOD)  																																										; 
    395             1                      10000     		i_regf_config_tb     = RAND_DATA_FOUR     																														;
    396             1                      10000         	i_regf_wr_address_config_tb  = config_location + 'd7 																									;
    397                                                
    398             1                      10000             #(SYS_CLK_PERIOD) 																																											;
    399                                              	end
    400                                              endtask : write_configurations
    401                                              
    402                                              
    403                                              task check_output ();
    404                                              	begin
    405                                              		logic [7:0] BROADCAST; // 7'h7E+ R/w bit
    406                                              		logic [8:0] ENTHDR0; 
    407                                              
    408             1                       4861     		BROADCAST = 8'b0; // 7'h7E+ R/w bit
    409             1                       4861     		ENTHDR0 = 9'b0;
    410                                              		// ddr code: 0x20 + T-bit
    411                                              		//frame_ended = 1'b0;
    412                                              		// once you see the start condition--> sample the first data 7E then sample 'h20 then the parity bit
    413                                              		/*bit start_condition;
    414                                              		start_condition = ~sda_tb &&  ~scl_tb 
    415                                              		if(start_condition) begin
    416                                              			data_check[i] <= //sda
    417                                              		end
    418                                              */
    419             1                       4861     			for(int i=0; i < 8 ; i++)   //receive first 8 bits of 7E and write bit
    419             2                      38888     
    420                                              			 	begin  
    421             1                      38888     				   @(posedge scl_tb)
    422             1                      38888     				   	BROADCAST['d7 - i] = sda_tb;
    423                                              			 	end
    424                                              
    425             1                       4861     			@(negedge scl_tb)
    426                                              			assert (BROADCAST == EXPECTED_BROADCAST) $display("Broadcast frame is RECIEVED");
    427                                              			else 									 $display("Broadcast frame is WRONG");
    428             1                       4861     					send_ack();
    429                                              			 
    430                                              
    431             1                       4861     			for(int i=0; i < 9 ; i++)   //receive first 8 bits of 7E and write bit
    431             2                      43749     
    432                                              			 	begin  
    433             1                      43749     				   @(posedge scl_tb)
    434             1                      43749     				   	ENTHDR0['d8 - i] = sda_tb;
    435                                              			 	end
    436                                               
    437                                              
    438                                              			assert (ENTHDR0 == EXPECTED_ENTHDR0) $display("ENTHDR frame is RECIEVED");
    439                                              			else 								 $display("ENTHDR frame is WRONG");			
    440                                              
    441                                              	   		
    442                                              		
    443                                              	end 
    444                                              endtask
    445                                              
    446                                              task send_ack;
    447                                                  begin 
    448             1                       4861             #(SYS_CLK_PERIOD)
    449                                                      if(!scl_tb) begin
    450             1                       4861             	sda_drive = 1'b0; //ack bit
    451             1                       4861             	#(4*SYS_CLK_PERIOD) ;
    452             1                       4861             	sda_drive =  1'bz ;
    453                                                  	end
    454                                                  end 
    455                                              endtask
    456                                              
    457                                              
    458                                              //-----------------------------DUT Instantiation-------------------------------------//
    459                                              I3C_TOP DUT (
    460                                               .i_sdr_clk           		(i_sdr_clk_tb)					, 
    461                                               .i_sdr_rst_n         		(i_sdr_rst_n_tb)				, 
    462                                               .i_controller_en     		(i_controller_en_tb)			, 
    463                                               .i_i3c_i2c_sel       		(i_i3c_i2c_sel_tb)				, 
    464                                               .i_ccc_en_dis_hj     		(i_ccc_en_dis_hj_tb)			, 
    465                                               .i_regf_config             (i_regf_config_tb)				,
    466                                               .i_data_config_mux_sel     (i_data_config_mux_sel_tb)		,    
    467                                               .i_regf_wr_address_config  (i_regf_wr_address_config_tb)	,
    468                                               .i_regf_wr_en_config       (i_regf_wr_en_config_tb)		,
    469                                               .i_regf_rd_en_config       (i_regf_rd_en_config_tb)        ,   
    470                                               .sda                 		(sda_tb)						,
    471                                               .scl                 		(scl_tb)						,
    472                                               .o_sdr_rx_valid      		(o_sdr_rx_valid_tb)				,
    473                                               .o_ctrl_done               (o_ctrl_done_tb)
    474                                               );
    475                                              
    476                                              //-------------------------------------- Assertions ---------------------------------------//
    477                                              	//assign sys_clk_50mhzzz = DUT.sys_clk_50mhz ;
    478                                              /*
    479                                              	property EXIT_and_stop_pattern ;
    480                                              		@(posedge DUT.sys_clk_50mhz) (!scl_tb) [*3] |-> $fell(sda_tb) [*4] ##1 (!sda_tb && scl_tb) ##1 (sda_tb && scl_tb) ;
    481                                              	endproperty
    482                                              */
    483                                              	property EXIT_and_stop_pattern ;
    484                                              		disable iff (!i_sdr_rst_n_tb) 
    485                                              		@(posedge DUT.sys_clk_50mhz)
    486                                              		(DUT.tx_mode_hdr_mux_out == exit_pattern && ($past(DUT.tx_mode_hdr_mux_out) != exit_pattern )) |=> 
    487                                              																				   (!scl_tb &&  sda_tb) ##2
    488                                              																				   (!scl_tb && !sda_tb) ##2
    489                                              																				   (!scl_tb &&  sda_tb) ##2 
    490                                              																				   (!scl_tb && !sda_tb) ##2 
    491                                              																				   (!scl_tb &&  sda_tb) ##2 
    492                                              																				   (!scl_tb && !sda_tb) ##2
    493                                              																				   (!scl_tb &&  sda_tb) ##2 
    494                                              																				   (!scl_tb && !sda_tb) ##1
    495                                              																				   ( scl_tb && !sda_tb) ##1 
    496                                              																				   ( scl_tb &&  sda_tb)     ;
    497                                              	endproperty
    498                                              
    499                                              
    500                                              	property Middle_Restart_pattern ;
    501                                              		disable iff (!i_sdr_rst_n_tb) 
    502                                              		@(posedge DUT.sys_clk_50mhz)
    503                                              		(!DUT.frmcnt_last_frame_hdr && DUT.tx_mode_hdr_mux_out == restart_pattern && ($past(DUT.tx_mode_hdr_mux_out) != restart_pattern )) |-> 
    504                                              																										##2
    505                                              																				   (!scl_tb &&  sda_tb) ##2
    506                                              																				   (!scl_tb && !sda_tb) ##2
    507                                              																				   (!scl_tb &&  sda_tb) ##2 
    508                                              																				   (!scl_tb && !sda_tb) ##1 
    509                                              																				   (!scl_tb &&  sda_tb) ##1 
    510                                              																				   ( scl_tb &&  sda_tb)     ;
    511                                              	endproperty
    512                                              
    513                                              	property Last_Restart_pattern ;
    514                                              		disable iff (!i_sdr_rst_n_tb) 
    515                                              		@(posedge DUT.sys_clk_50mhz)
    516                                              		(DUT.frmcnt_last_frame_hdr && DUT.tx_mode_hdr_mux_out == restart_pattern && ($past(DUT.tx_mode_hdr_mux_out) != restart_pattern )) |-> 
    517                                              																										##2
    518                                              																				   (!scl_tb &&  sda_tb) ##2
    519                                              																				   (!scl_tb && !sda_tb) ##2
    520                                              																				   (!scl_tb &&  sda_tb) ##2 
    521                                              																				   (!scl_tb && !sda_tb) ##1 
    522                                              																				   (!scl_tb &&  sda_tb) ##1 
    523                                              																				   ( scl_tb &&  sda_tb) ##1 
    524                                              																				   ( scl_tb &&  sda_tb) ##1
    525                                              																				   (!scl_tb &&  sda_tb)		;
    526                                              	endproperty
    527                                              
    528                                              
    529                                              	assert property(EXIT_and_stop_pattern) 
    530                                              							$display("%t EXIT_and_stop_pattern SUCCEEDED ",$time); else
    531                                                                          $display("%t EXIT_and_stop_pattern FAILED    ",$time);
    532                                              
    533                                                  assert property(Middle_Restart_pattern) 
    534                                              							$display("%t Middle_Restart_pattern SUCCEEDED ",$time); else
    535                                                                          $display("%t Middle_Restart_pattern FAILED    ",$time);
    536                                              
    537                                                  assert property(Last_Restart_pattern) 
    538                                              							$display("%t Last_Restart_pattern SUCCEEDED ",$time); else
    539                                                                          $display("%t Last_Restart_pattern FAILED    ",$time);
    540                                              
    541                                              
    542                                              
    543                                              	covergroup RAND_VALUES @(posedge i_sdr_clk_tb) ;
    544                                               
    545                                              		RAND_CMD_ATTR_cp : coverpoint RAND_CMD_ATTR iff (i_sdr_rst_n_tb)
    546                                              		{
    547                                              			bins regular_0   = {0};
    548                                              			bins immediate_1 = {1};
    549                                              		}
    550                                              
    551                                              		RAND_CMD_immediate_cp : coverpoint RAND_CMD iff (i_sdr_rst_n_tb)
    552                                              		{
    553                                              			bins ENEC_D_bin      = {8'h80};
    554                                              			bins DISEC_D_bin     = {8'h81};
    555                                              			bins SETMWL_D_bin    = {8'h89};
    556                                              			bins SETMRL_D_bin    = {8'h8A};
    557                                              			
    558                                              			bins ENEC_B_bin      = {8'h00};
    559                                              			bins DISEC_B_bin     = {8'h01};
    560                                              			bins SETMWL_B_bin    = {8'h09};
    561                                              			bins SETMRL_B_bin    = {8'h0A};
    562                                              			bins Dummy_B_bin     = {8'h1F};
    563                                              			
    564                                              		}
    565                                              
    566                                              		RAND_CMD_regular_cp : coverpoint RAND_CMD iff (i_sdr_rst_n_tb)
    567                                              		{
    568                                              			
    569                                              			bins GETMWL_D_bin    = {8'h8B};
    570                                              			bins GETMRL_D_bin    = {8'h8C};
    571                                              			bins GETSTATUS_D_bin = {8'h90};
    572                                              			bins GETBCR_D_bin    = {8'h8E};
    573                                              			bins GETDCR_D_bin    = {8'h8F};
    574                                              			
    575                                              		}
    576                                              
    577                                              		RAND_CP_cp : coverpoint RAND_CP iff (i_sdr_rst_n_tb)
    578                                              		{
    579                                              			bins Normal_transaction_bin = {0};
    580                                              			bins CCC_Handler_bin 		= {1};
    581                                              		}
    582                                              		
    583                                              		RAND_DEV_INDEX_cp : coverpoint RAND_DEV_INDEX iff (i_sdr_rst_n_tb)
    584                                              		{
    585                                              			bins low  = {[0:8]};
    586                                              			bins mid  = {[9:20]};
    587                                              			bins high = {[21:31]};
    588                                              		}
    589                                              
    590                                              		RAND_DTT_cp : coverpoint RAND_DTT iff (i_sdr_rst_n_tb)
    591                                              		{
    592                                              			bins no_def_byte_0 = {0};
    593                                              			bins no_def_byte_1 = {1};
    594                                              			bins no_def_byte_2 = {2};
    595                                              			bins no_def_byte_3 = {3};
    596                                              			bins no_def_byte_4 = {4};
    597                                              
    598                                              			//ignore_bins def_byte [] = {[5:7]};
    599                                              		}
    600                                              
    601                                              		RAND_MODE_cp : coverpoint RAND_MODE iff (i_sdr_rst_n_tb)
    602                                              		{
    603                                              			bins HDR_mode_bin = {6};
    604                                              			illegal_bins none =  default ;
    605                                              		}
    606                                              
    607                                              		RAND_RnW_cp : coverpoint RAND_RnW iff (i_sdr_rst_n_tb)
    608                                              		{
    609                                              			bins Write  = {0} ;
    610                                              			bins Read   = {1} ;
    611                                              		}
    612                                              
    613                                              		RAND_TOC_cp : coverpoint RAND_TOC iff (i_sdr_rst_n_tb)
    614                                              		{
    615                                              			bins exit_patt    = {1} ;
    616                                              			bins restart_patt = {0} ;
    617                                              		}
    618                                              
    619                                              		RAND_DATA_THREE_cp : coverpoint RAND_DATA_THREE iff (i_sdr_rst_n_tb)
    620                                              		{
    621                                              			bins DATA_LEN_1 = {1} ;
    622                                              			bins DATA_LEN_2 = {2} ;
    623                                              			bins DATA_LEN_3 = {3} ;
    624                                              			bins DATA_LEN_4 = {4} ;
    625                                              		}
    626                                              
    627                                              		RAND_DATA_FOUR_cp : coverpoint RAND_DATA_FOUR iff (i_sdr_rst_n_tb)
    628                                              		{
    629                                              			bins ZERO = {0} ;
    630                                              		}
    631                                              		
    632                                              
    633                                              
    634                                              		cr1 : cross RAND_CMD_ATTR_cp , RAND_CMD_immediate_cp {
    635                                              			ignore_bins regular = binsof(RAND_CMD_ATTR_cp) intersect {0};
    636                                              		}
    637                                              
    638                                              		cr2 : cross  RAND_CMD_ATTR_cp , RAND_CMD_regular_cp {
    639                                              			ignore_bins immediate = binsof(RAND_CMD_ATTR_cp) intersect {1};
    640                                              		}
    641                                              
    642                                              		cr3 : cross  RAND_DTT_cp , RAND_CMD_immediate_cp {
    643                                              			ignore_bins more_than_one =  binsof (RAND_DTT_cp) intersect {0,2,3,4} &&
    644                                              			 							 binsof (RAND_CMD_immediate_cp) intersect {8'h81,8'h89,8'h8A,8'h00,8'h01,8'h09,8'h0A,8'h1F} ;
    645                                              		}
    646                                              
    647                                              		//cr3 : cross  cr2 , cr1 ;
    648                                              
    649                                              		
    650                                                      
    651                                              	endgroup
    652                                              
    653             1                          1     	RAND_VALUES RAND_VALUES_instance = new();

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        332       146       186    43.97%

================================Toggle Details================================

Toggle Coverage for instance /I3C_TOP_TB --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                     RAND_CMD[0-4]           1           1      100.00 
                                     RAND_CMD[5-6]           0           0        0.00 
                                       RAND_CMD[7]           1           1      100.00 
                                RAND_CMD_ATTR[0-2]           0           0        0.00 
                                           RAND_CP           0           0        0.00 
                               RAND_DATA_FOUR[0-7]           0           0        0.00 
                              RAND_DATA_THREE[0-1]           1           1      100.00 
                              RAND_DATA_THREE[2-7]           0           0        0.00 
                                RAND_DATA_TWO[0-7]           1           1      100.00 
                                RAND_DEF_BYTE[0-7]           1           1      100.00 
                               RAND_DEV_INDEX[0-4]           1           1      100.00 
                                     RAND_DTT[0-1]           1           1      100.00 
                                       RAND_DTT[2]           0           0        0.00 
                                    RAND_MODE[0-2]           0           0        0.00 
                                RAND_RESERVED[0-1]           1           1      100.00 
                                          RAND_RnW           0           0        0.00 
                                    RAND_SDA_DRIVE           0           0        0.00 
                                     RAND_TID[0-3]           1           1      100.00 
                                          RAND_TOC           1           1      100.00 
                                         RAND_WROC           1           1      100.00 
                                           TOC_old           1           1      100.00 
                                 cycle_count[0-31]           0           0        0.00 
                                       frame_ended           0           0        0.00 
                                           i[0-12]           1           1      100.00 
                                             i[13]           0           1       50.00 
                                          i[14-31]           0           0        0.00 
                                i_ccc_en_dis_hj_tb           0           0        0.00 
                                i_controller_en_tb           0           1       50.00 
                          i_data_config_mux_sel_tb           1           1      100.00 
                                  i_i3c_i2c_sel_tb           0           0        0.00 
                             i_regf_config_tb[0-7]           1           1      100.00 
                            i_regf_rd_en_config_tb           0           0        0.00 
                  i_regf_wr_address_config_tb[0-2]           1           1      100.00 
                 i_regf_wr_address_config_tb[3-11]           0           0        0.00 
                            i_regf_wr_en_config_tb           0           0        0.00 
                                 i_sclgen_rst_n_tb           0           0        0.00 
                                      i_sdr_clk_tb           1           1      100.00 
                                    i_sdr_rst_n_tb           1           1      100.00 
                                    o_ctrl_done_tb           0           0        0.00 
                                 o_sdr_rx_valid_tb           1           1      100.00 
                                            scl_tb           1           1      100.00 
                                         sda_drive           1           1      100.00 
                                            sda_tb           1           1      100.00 
                                           sys_clk           1           1      100.00 

Total Node Count     =        166 
Toggled Node Count   =         72 
Untoggled Node Count =         94 

Toggle Coverage      =      43.97% (146 of 332 bins)

COVERGROUP COVERAGE:
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /I3C_TOP_TB/RAND_VALUES                          67.47%        100          -    Uncovered            
    covered/total bins:                                    44         63          -                      
    missing/total bins:                                    19         63          -                      
    % Hit:                                             69.84%        100          -                      
    Coverpoint RAND_CMD_ATTR_cp                        50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
    Coverpoint RAND_CMD_immediate_cp                  100.00%        100          -    Covered              
        covered/total bins:                                 9          9          -                      
        missing/total bins:                                 0          9          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RAND_CMD_regular_cp                      0.00%        100          -    ZERO                 
        covered/total bins:                                 0          5          -                      
        missing/total bins:                                 5          5          -                      
        % Hit:                                          0.00%        100          -                      
    Coverpoint RAND_CP_cp                              50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
    Coverpoint RAND_DEV_INDEX_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RAND_DTT_cp                             60.00%        100          -    Uncovered            
        covered/total bins:                                 3          5          -                      
        missing/total bins:                                 2          5          -                      
        % Hit:                                         60.00%        100          -                      
    Coverpoint RAND_MODE_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RAND_RnW_cp                             50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
    Coverpoint RAND_TOC_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RAND_DATA_THREE_cp                      50.00%        100          -    Uncovered            
        covered/total bins:                                 2          4          -                      
        missing/total bins:                                 2          4          -                      
        % Hit:                                         50.00%        100          -                      
    Coverpoint RAND_DATA_FOUR_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cr1                                         100.00%        100          -    Covered              
        covered/total bins:                                 9          9          -                      
        missing/total bins:                                 0          9          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cr2                                           0.00%        100          -    ZERO                 
        covered/total bins:                                 0          5          -                      
        missing/total bins:                                 5          5          -                      
        % Hit:                                          0.00%        100          -                      
    Cross cr3                                          84.61%        100          -    Uncovered            
        covered/total bins:                                11         13          -                      
        missing/total bins:                                 2         13          -                      
        % Hit:                                         84.61%        100          -                      
 Covergroup instance \/I3C_TOP_TB/RAND_VALUES_instance  
                                                       67.47%        100          -    Uncovered            
    covered/total bins:                                    44         63          -                      
    missing/total bins:                                    19         63          -                      
    % Hit:                                             69.84%        100          -                      
    Coverpoint RAND_CMD_ATTR_cp                        50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
        bin regular_0                                       0          1          -    ZERO                 
        bin immediate_1                               3747191          1          -    Covered              
    Coverpoint RAND_CMD_immediate_cp                  100.00%        100          -    Covered              
        covered/total bins:                                 9          9          -                      
        missing/total bins:                                 0          9          -                      
        % Hit:                                        100.00%        100          -                      
        bin ENEC_D_bin                                 432544          1          -    Covered              
        bin DISEC_D_bin                                430575          1          -    Covered              
        bin SETMWL_D_bin                               435512          1          -    Covered              
        bin SETMRL_D_bin                               420356          1          -    Covered              
        bin ENEC_B_bin                                 405868          1          -    Covered              
        bin DISEC_B_bin                                384156          1          -    Covered              
        bin SETMWL_B_bin                               397180          1          -    Covered              
        bin SETMRL_B_bin                               416580          1          -    Covered              
        bin Dummy_B_bin                                424420          1          -    Covered              
    Coverpoint RAND_CMD_regular_cp                      0.00%        100          -    ZERO                 
        covered/total bins:                                 0          5          -                      
        missing/total bins:                                 5          5          -                      
        % Hit:                                          0.00%        100          -                      
        bin GETMWL_D_bin                                    0          1          -    ZERO                 
        bin GETMRL_D_bin                                    0          1          -    ZERO                 
        bin GETSTATUS_D_bin                                 0          1          -    ZERO                 
        bin GETBCR_D_bin                                    0          1          -    ZERO                 
        bin GETDCR_D_bin                                    0          1          -    ZERO                 
    Coverpoint RAND_CP_cp                              50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
        bin Normal_transaction_bin                          0          1          -    ZERO                 
        bin CCC_Handler_bin                           3747191          1          -    Covered              
    Coverpoint RAND_DEV_INDEX_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin low                                        984391          1          -    Covered              
        bin mid                                       1432096          1          -    Covered              
        bin high                                      1330704          1          -    Covered              
    Coverpoint RAND_DTT_cp                             60.00%        100          -    Uncovered            
        covered/total bins:                                 3          5          -                      
        missing/total bins:                                 2          5          -                      
        % Hit:                                         60.00%        100          -                      
        bin no_def_byte_0                             1136608          1          -    Covered              
        bin no_def_byte_1                             1286111          1          -    Covered              
        bin no_def_byte_2                             1324472          1          -    Covered              
        bin no_def_byte_3                                   0          1          -    ZERO                 
        bin no_def_byte_4                                   0          1          -    ZERO                 
    Coverpoint RAND_MODE_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin HDR_mode_bin                              3747191          1          -    Covered              
        illegal_bin none                                    2                     -    Occurred             
    Coverpoint RAND_RnW_cp                             50.00%        100          -    Uncovered            
        covered/total bins:                                 1          2          -                      
        missing/total bins:                                 1          2          -                      
        % Hit:                                         50.00%        100          -                      
        bin Write                                     3747191          1          -    Covered              
        bin Read                                            0          1          -    ZERO                 
    Coverpoint RAND_TOC_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin exit_patt                                 1811836          1          -    Covered              
        bin restart_patt                              1935355          1          -    Covered              
    Coverpoint RAND_DATA_THREE_cp                      50.00%        100          -    Uncovered            
        covered/total bins:                                 2          4          -                      
        missing/total bins:                                 2          4          -                      
        % Hit:                                         50.00%        100          -                      
        bin DATA_LEN_1                                1890863          1          -    Covered              
        bin DATA_LEN_2                                1856328          1          -    Covered              
        bin DATA_LEN_3                                      0          1          -    ZERO                 
        bin DATA_LEN_4                                      0          1          -    ZERO                 
    Coverpoint RAND_DATA_FOUR_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin ZERO                                      3747191          1          -    Covered              
    Cross cr1                                         100.00%        100          -    Covered              
        covered/total bins:                                 9          9          -                      
        missing/total bins:                                 0          9          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <immediate_1,Dummy_B_bin>              424420          1          -    Covered              
            bin <immediate_1,SETMRL_B_bin>             416580          1          -    Covered              
            bin <immediate_1,SETMRL_D_bin>             420356          1          -    Covered              
            bin <immediate_1,DISEC_B_bin>              384156          1          -    Covered              
            bin <immediate_1,DISEC_D_bin>              430575          1          -    Covered              
            bin <immediate_1,SETMWL_B_bin>             397180          1          -    Covered              
            bin <immediate_1,SETMWL_D_bin>             435512          1          -    Covered              
            bin <immediate_1,ENEC_B_bin>               405868          1          -    Covered              
            bin <immediate_1,ENEC_D_bin>               432544          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin regular                              0                     -    ZERO                 
    Cross cr2                                           0.00%        100          -    ZERO                 
        covered/total bins:                                 0          5          -                      
        missing/total bins:                                 5          5          -                      
        % Hit:                                          0.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <*,*>                                       0          1          5    ZERO                 
        Illegal and Ignore Bins:
            ignore_bin immediate                            0                     -    ZERO                 
    Cross cr3                                          84.61%        100          -    Uncovered            
        covered/total bins:                                11         13          -                      
        missing/total bins:                                 2         13          -                      
        % Hit:                                         84.61%        100          -                      
        Auto, Default and User Defined Bins:
            bin <no_def_byte_1,Dummy_B_bin>            136252          1          -    Covered              
            bin <no_def_byte_1,SETMRL_B_bin>           136216          1          -    Covered              
            bin <no_def_byte_1,DISEC_B_bin>            137864          1          -    Covered              
            bin <no_def_byte_1,SETMWL_B_bin>           146124          1          -    Covered              
            bin <no_def_byte_1,ENEC_B_bin>             143216          1          -    Covered              
            bin <no_def_byte_1,SETMRL_D_bin>           142884          1          -    Covered              
            bin <no_def_byte_1,SETMWL_D_bin>           152944          1          -    Covered              
            bin <no_def_byte_1,DISEC_D_bin>            144571          1          -    Covered              
            bin <no_def_byte_1,ENEC_D_bin>             146040          1          -    Covered              
            bin <no_def_byte_2,ENEC_D_bin>             149828          1          -    Covered              
            bin <no_def_byte_0,ENEC_D_bin>             136676          1          -    Covered              
            bin <no_def_byte_4,*>                           0          1          1    ZERO                 
            bin <no_def_byte_3,*>                           0          1          1    ZERO                 
        Illegal and Ignore Bins:
            ignore_bin more_than_one                  2174576                     -    Occurred             

TOTAL COVERGROUP COVERAGE: 67.47%  COVERGROUP TYPES: 1

ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/I3C_TOP_TB/assert__Last_Restart_pattern
                     I3C_TOP_TB.sv(537)                 0          1
/I3C_TOP_TB/assert__Middle_Restart_pattern
                     I3C_TOP_TB.sv(533)                 0          1
/I3C_TOP_TB/assert__EXIT_and_stop_pattern
                     I3C_TOP_TB.sv(529)                 0          1
/I3C_TOP_TB/#ublk#76587794#101/immed__102
                     I3C_TOP_TB.sv(102)                 0          1
/I3C_TOP_TB/check_cmd_word/#ublk#76587794#206/#ublk#76587794#232/immed__233
                     I3C_TOP_TB.sv(233)                 0          1
/I3C_TOP_TB/check_cmd_word/#ublk#76587794#206/#ublk#76587794#236/immed__237
                     I3C_TOP_TB.sv(237)                 0          1
/I3C_TOP_TB/check_CCC_value_data_word/#ublk#76587794#247/#ublk#76587794#270/immed__271
                     I3C_TOP_TB.sv(271)                 0          1
/I3C_TOP_TB/check_repeated_data_word/#ublk#76587794#281/#ublk#76587794#313/immed__315
                     I3C_TOP_TB.sv(315)                 0          1
/I3C_TOP_TB/check_output/#ublk#76587794#404/immed__438
                     I3C_TOP_TB.sv(438)                 0          1
/I3C_TOP_TB/check_output/#ublk#76587794#404/immed__426
                     I3C_TOP_TB.sv(426)                 0          1

Total Coverage By Instance (filtered view): 46.03%

